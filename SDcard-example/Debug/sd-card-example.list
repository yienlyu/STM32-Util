
sd-card-example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c4c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08008df8  08008df8  00018df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f94  08008f94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08008f94  08008f94  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f94  08008f94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f94  08008f94  00018f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f98  08008f98  00018f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c3c  2000000c  08008fa8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20000c48  08008fa8  00020c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cb8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c50  00000000  00000000  00034cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00037948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00038778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a17a  00000000  00000000  00039460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ee2  00000000  00000000  000635da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f97b9  00000000  00000000  000754bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ec75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003864  00000000  00000000  0016ecc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008de0 	.word	0x08008de0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08008de0 	.word	0x08008de0

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 fbd5 	bl	800099e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f4:	f000 f84c 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f8:	f000 f8d6 	bl	80003a8 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80001fc:	f000 f88e 	bl	800031c <MX_SDMMC1_SD_Init>
  MX_DMA_Init();
 8000200:	f000 f8ac 	bl	800035c <MX_DMA_Init>
  MX_FATFS_Init();
 8000204:	f005 fc22 	bl	8005a4c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8000208:	491d      	ldr	r1, [pc, #116]	; (8000280 <main+0x94>)
 800020a:	481e      	ldr	r0, [pc, #120]	; (8000284 <main+0x98>)
 800020c:	f008 fd9e 	bl	8008d4c <FATFS_LinkDriver>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d10a      	bne.n	800022c <main+0x40>
  {
    /*##-2- Init the SD Card #################################################*/

    SD_Initialize();
 8000216:	f000 f9f9 	bl	800060c <SD_Initialize>

    if(BSP_SD_IsDetected())
 800021a:	f005 fcd6 	bl	8005bca <BSP_SD_IsDetected>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d006      	beq.n	8000232 <main+0x46>
    {
      Appli_state = APPLICATION_RUNNING;
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <main+0x9c>)
 8000226:	2201      	movs	r2, #1
 8000228:	701a      	strb	r2, [r3, #0]
 800022a:	e002      	b.n	8000232 <main+0x46>
    }
  }
  else
  {
    Error_Handler();
 800022c:	f000 fa10 	bl	8000650 <Error_Handler>
    while(1) {};
 8000230:	e7fe      	b.n	8000230 <main+0x44>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	switch(Appli_state)
 8000232:	4b15      	ldr	r3, [pc, #84]	; (8000288 <main+0x9c>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2b02      	cmp	r3, #2
 8000238:	d010      	beq.n	800025c <main+0x70>
 800023a:	2b02      	cmp	r3, #2
 800023c:	dc1b      	bgt.n	8000276 <main+0x8a>
 800023e:	2b00      	cmp	r3, #0
 8000240:	d01b      	beq.n	800027a <main+0x8e>
 8000242:	2b01      	cmp	r3, #1
 8000244:	d117      	bne.n	8000276 <main+0x8a>
	{
	case APPLICATION_RUNNING:
	  BSP_LED_Off(LED1);
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f940 	bl	80004cc <BSP_LED_Off>
	  SD_Initialize();
 800024c:	f000 f9de 	bl	800060c <SD_Initialize>
	  FS_FileOperations();
 8000250:	f000 f956 	bl	8000500 <FS_FileOperations>
	  Appli_state = APPLICATION_IDLE;
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <main+0x9c>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
	  break;
 800025a:	e00f      	b.n	800027c <main+0x90>

	case APPLICATION_IDLE:
	  break;

	case APPLICATION_SD_UNPLUGGED:
	  if (isInitialized == 1)
 800025c:	4b0b      	ldr	r3, [pc, #44]	; (800028c <main+0xa0>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d104      	bne.n	800026e <main+0x82>
	  {
		Error_Handler();
 8000264:	f000 f9f4 	bl	8000650 <Error_Handler>
		isInitialized = 0;
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <main+0xa0>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
	  }

	  Appli_state = APPLICATION_IDLE;
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <main+0x9c>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
	  break;
 8000274:	e002      	b.n	800027c <main+0x90>

	default:
	  break;
 8000276:	bf00      	nop
 8000278:	e7db      	b.n	8000232 <main+0x46>
	  break;
 800027a:	bf00      	nop
	switch(Appli_state)
 800027c:	e7d9      	b.n	8000232 <main+0x46>
 800027e:	bf00      	nop
 8000280:	200002ec 	.word	0x200002ec
 8000284:	08008ee0 	.word	0x08008ee0
 8000288:	20000028 	.word	0x20000028
 800028c:	20000029 	.word	0x20000029

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b096      	sub	sp, #88	; 0x58
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	2244      	movs	r2, #68	; 0x44
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f008 fd96 	bl	8008dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	463b      	mov	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002b6:	f001 f925 	bl	8001504 <HAL_PWREx_ControlVoltageScaling>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002c0:	f000 f9c6 	bl	8000650 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002c4:	2310      	movs	r3, #16
 80002c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002d0:	2360      	movs	r3, #96	; 0x60
 80002d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d4:	2300      	movs	r3, #0
 80002d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d8:	f107 0314 	add.w	r3, r7, #20
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 f967 	bl	80015b0 <HAL_RCC_OscConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002e8:	f000 f9b2 	bl	8000650 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ec:	230f      	movs	r3, #15
 80002ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002f0:	2300      	movs	r3, #0
 80002f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000300:	463b      	mov	r3, r7
 8000302:	2100      	movs	r1, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f001 fd79 	bl	8001dfc <HAL_RCC_ClockConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000310:	f000 f99e 	bl	8000650 <Error_Handler>
  }
}
 8000314:	bf00      	nop
 8000316:	3758      	adds	r7, #88	; 0x58
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_SDMMC1_SD_Init+0x38>)
 8000322:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <MX_SDMMC1_SD_Init+0x3c>)
 8000324:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <MX_SDMMC1_SD_Init+0x38>)
 8000328:	2200      	movs	r2, #0
 800032a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_SDMMC1_SD_Init+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <MX_SDMMC1_SD_Init+0x38>)
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_SDMMC1_SD_Init+0x38>)
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <MX_SDMMC1_SD_Init+0x38>)
 8000340:	2200      	movs	r2, #0
 8000342:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <MX_SDMMC1_SD_Init+0x38>)
 8000346:	2200      	movs	r2, #0
 8000348:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	20000068 	.word	0x20000068
 8000358:	40012800 	.word	0x40012800

0800035c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_DMA_Init+0x48>)
 8000364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000366:	4a0f      	ldr	r2, [pc, #60]	; (80003a4 <MX_DMA_Init+0x48>)
 8000368:	f043 0302 	orr.w	r3, r3, #2
 800036c:	6493      	str	r3, [r2, #72]	; 0x48
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <MX_DMA_Init+0x48>)
 8000370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000372:	f003 0302 	and.w	r3, r3, #2
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	203b      	movs	r0, #59	; 0x3b
 8000380:	f000 fc81 	bl	8000c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000384:	203b      	movs	r0, #59	; 0x3b
 8000386:	f000 fc9a 	bl	8000cbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2100      	movs	r1, #0
 800038e:	203c      	movs	r0, #60	; 0x3c
 8000390:	f000 fc79 	bl	8000c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000394:	203c      	movs	r0, #60	; 0x3c
 8000396:	f000 fc92 	bl	8000cbe <HAL_NVIC_EnableIRQ>

}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	; 0x28
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4b33      	ldr	r3, [pc, #204]	; (800048c <MX_GPIO_Init+0xe4>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	4a32      	ldr	r2, [pc, #200]	; (800048c <MX_GPIO_Init+0xe4>)
 80003c4:	f043 0302 	orr.w	r3, r3, #2
 80003c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ca:	4b30      	ldr	r3, [pc, #192]	; (800048c <MX_GPIO_Init+0xe4>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ce:	f003 0302 	and.w	r3, r3, #2
 80003d2:	613b      	str	r3, [r7, #16]
 80003d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b2d      	ldr	r3, [pc, #180]	; (800048c <MX_GPIO_Init+0xe4>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	4a2c      	ldr	r2, [pc, #176]	; (800048c <MX_GPIO_Init+0xe4>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e2:	4b2a      	ldr	r3, [pc, #168]	; (800048c <MX_GPIO_Init+0xe4>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ee:	4b27      	ldr	r3, [pc, #156]	; (800048c <MX_GPIO_Init+0xe4>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	4a26      	ldr	r2, [pc, #152]	; (800048c <MX_GPIO_Init+0xe4>)
 80003f4:	f043 0308 	orr.w	r3, r3, #8
 80003f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fa:	4b24      	ldr	r3, [pc, #144]	; (800048c <MX_GPIO_Init+0xe4>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	f003 0308 	and.w	r3, r3, #8
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <MX_GPIO_Init+0xe4>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <MX_GPIO_Init+0xe4>)
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000412:	4b1e      	ldr	r3, [pc, #120]	; (800048c <MX_GPIO_Init+0xe4>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	f003 0304 	and.w	r3, r3, #4
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000424:	481a      	ldr	r0, [pc, #104]	; (8000490 <MX_GPIO_Init+0xe8>)
 8000426:	f001 f847 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800042a:	2310      	movs	r3, #16
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800042e:	2302      	movs	r3, #2
 8000430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	2300      	movs	r3, #0
 8000438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 800043a:	2309      	movs	r3, #9
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043e:	f107 0314 	add.w	r3, r7, #20
 8000442:	4619      	mov	r1, r3
 8000444:	4812      	ldr	r0, [pc, #72]	; (8000490 <MX_GPIO_Init+0xe8>)
 8000446:	f000 fe8d 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800044a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	4619      	mov	r1, r3
 800045e:	480d      	ldr	r0, [pc, #52]	; (8000494 <MX_GPIO_Init+0xec>)
 8000460:	f000 fe80 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	2301      	movs	r3, #1
 800046c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	2300      	movs	r3, #0
 8000474:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	4619      	mov	r1, r3
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <MX_GPIO_Init+0xe8>)
 800047e:	f000 fe71 	bl	8001164 <HAL_GPIO_Init>

}
 8000482:	bf00      	nop
 8000484:	3728      	adds	r7, #40	; 0x28
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000
 8000490:	48000400 	.word	0x48000400
 8000494:	48000800 	.word	0x48000800

08000498 <BSP_LED_On>:

/* USER CODE BEGIN 4 */
void BSP_LED_On(Led_TypeDef Led)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d106      	bne.n	80004b6 <BSP_LED_On+0x1e>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ae:	4806      	ldr	r0, [pc, #24]	; (80004c8 <BSP_LED_On+0x30>)
 80004b0:	f001 f802 	bl	80014b8 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED1_PIN, GPIO_PIN_RESET);
  }
}
 80004b4:	e004      	b.n	80004c0 <BSP_LED_On+0x28>
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED1_PIN, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2110      	movs	r1, #16
 80004ba:	4803      	ldr	r0, [pc, #12]	; (80004c8 <BSP_LED_On+0x30>)
 80004bc:	f000 fffc 	bl	80014b8 <HAL_GPIO_WritePin>
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	48000400 	.word	0x48000400

080004cc <BSP_LED_Off>:

void BSP_LED_Off(Led_TypeDef Led)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d106      	bne.n	80004ea <BSP_LED_Off+0x1e>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e2:	4806      	ldr	r0, [pc, #24]	; (80004fc <BSP_LED_Off+0x30>)
 80004e4:	f000 ffe8 	bl	80014b8 <HAL_GPIO_WritePin>
  }
  else
  {
	  HAL_GPIO_WritePin(LED2_GPIO_PORT, LED1_PIN, GPIO_PIN_RESET);
  }
}
 80004e8:	e004      	b.n	80004f4 <BSP_LED_Off+0x28>
	  HAL_GPIO_WritePin(LED2_GPIO_PORT, LED1_PIN, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2110      	movs	r1, #16
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <BSP_LED_Off+0x30>)
 80004f0:	f000 ffe2 	bl	80014b8 <HAL_GPIO_WritePin>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	48000400 	.word	0x48000400

08000500 <FS_FileOperations>:



static void FS_FileOperations(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b0b2      	sub	sp, #200	; 0xc8
 8000504:	af02      	add	r7, sp, #8
  FRESULT res; /* FatFs function common result code */
  uint32_t byteswritten, bytesread; /* File write/read counts */
  uint8_t wtext[] = "stm32l496g_discovery : This is STM32 working with FatFs and uSD diskio driver"; /* File write buffer */
 8000506:	4a3a      	ldr	r2, [pc, #232]	; (80005f0 <FS_FileOperations+0xf0>)
 8000508:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800050c:	4611      	mov	r1, r2
 800050e:	224e      	movs	r2, #78	; 0x4e
 8000510:	4618      	mov	r0, r3
 8000512:	f008 fc4f 	bl	8008db4 <memcpy>
  uint8_t rtext[100]; /* File read buffer */

  /* Register the file system object to the FatFs module */
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8000516:	2200      	movs	r2, #0
 8000518:	4936      	ldr	r1, [pc, #216]	; (80005f4 <FS_FileOperations+0xf4>)
 800051a:	4837      	ldr	r0, [pc, #220]	; (80005f8 <FS_FileOperations+0xf8>)
 800051c:	f007 fa3e 	bl	800799c <f_mount>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d15e      	bne.n	80005e4 <FS_FileOperations+0xe4>
  {
#if FATFS_MKFS_ALLOWED
    if (isCreated == 0)
 8000526:	4b35      	ldr	r3, [pc, #212]	; (80005fc <FS_FileOperations+0xfc>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d112      	bne.n	8000554 <FS_FileOperations+0x54>
    {
      res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 800052e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	4b32      	ldr	r3, [pc, #200]	; (8000600 <FS_FileOperations+0x100>)
 8000536:	2200      	movs	r2, #0
 8000538:	2107      	movs	r1, #7
 800053a:	482e      	ldr	r0, [pc, #184]	; (80005f4 <FS_FileOperations+0xf4>)
 800053c:	f007 ff8e 	bl	800845c <f_mkfs>
 8000540:	4603      	mov	r3, r0
 8000542:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

      if (res != FR_OK)
 8000546:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <FS_FileOperations+0x54>
      {
        Error_Handler();
 800054e:	f000 f87f 	bl	8000650 <Error_Handler>
        while(1);
 8000552:	e7fe      	b.n	8000552 <FS_FileOperations+0x52>
      }
    }
    isCreated = 1;
 8000554:	4b29      	ldr	r3, [pc, #164]	; (80005fc <FS_FileOperations+0xfc>)
 8000556:	2201      	movs	r2, #1
 8000558:	701a      	strb	r2, [r3, #0]
#endif
    /* Create and Open a new text file object with write access */
    if(f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800055a:	220a      	movs	r2, #10
 800055c:	4929      	ldr	r1, [pc, #164]	; (8000604 <FS_FileOperations+0x104>)
 800055e:	482a      	ldr	r0, [pc, #168]	; (8000608 <FS_FileOperations+0x108>)
 8000560:	f007 fa62 	bl	8007a28 <f_open>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d13c      	bne.n	80005e4 <FS_FileOperations+0xe4>
    {
      /* Write data to the text file */
      res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 800056a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800056e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000572:	224e      	movs	r2, #78	; 0x4e
 8000574:	4824      	ldr	r0, [pc, #144]	; (8000608 <FS_FileOperations+0x108>)
 8000576:	f007 fd54 	bl	8008022 <f_write>
 800057a:	4603      	mov	r3, r0
 800057c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

      if((byteswritten > 0) && (res == FR_OK))
 8000580:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000584:	2b00      	cmp	r3, #0
 8000586:	d02d      	beq.n	80005e4 <FS_FileOperations+0xe4>
 8000588:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800058c:	2b00      	cmp	r3, #0
 800058e:	d129      	bne.n	80005e4 <FS_FileOperations+0xe4>
      {
        /* Close the open text file */
        f_close(&MyFile);
 8000590:	481d      	ldr	r0, [pc, #116]	; (8000608 <FS_FileOperations+0x108>)
 8000592:	f007 ff39 	bl	8008408 <f_close>

        /* Open the text file object with read access */
        if(f_open(&MyFile, "STM32.TXT", FA_READ) == FR_OK)
 8000596:	2201      	movs	r2, #1
 8000598:	491a      	ldr	r1, [pc, #104]	; (8000604 <FS_FileOperations+0x104>)
 800059a:	481b      	ldr	r0, [pc, #108]	; (8000608 <FS_FileOperations+0x108>)
 800059c:	f007 fa44 	bl	8007a28 <f_open>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d11e      	bne.n	80005e4 <FS_FileOperations+0xe4>
        {
          /* Read data from the text file */
          res = f_read(&MyFile, rtext, sizeof(rtext), (void *)&bytesread);
 80005a6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80005aa:	4639      	mov	r1, r7
 80005ac:	2264      	movs	r2, #100	; 0x64
 80005ae:	4816      	ldr	r0, [pc, #88]	; (8000608 <FS_FileOperations+0x108>)
 80005b0:	f007 fbf8 	bl	8007da4 <f_read>
 80005b4:	4603      	mov	r3, r0
 80005b6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

          if((bytesread > 0) && (res == FR_OK))
 80005ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d010      	beq.n	80005e4 <FS_FileOperations+0xe4>
 80005c2:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d10c      	bne.n	80005e4 <FS_FileOperations+0xe4>
          {
            /* Close the open text file */
            f_close(&MyFile);
 80005ca:	480f      	ldr	r0, [pc, #60]	; (8000608 <FS_FileOperations+0x108>)
 80005cc:	f007 ff1c 	bl	8008408 <f_close>

            /* Compare read data with the expected data */
            if((bytesread == byteswritten))
 80005d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80005d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80005d8:	429a      	cmp	r2, r3
 80005da:	d103      	bne.n	80005e4 <FS_FileOperations+0xe4>
            {
              /* Success of the demo: no error occurrence */
              BSP_LED_On(LED2);
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff ff5b 	bl	8000498 <BSP_LED_On>
 80005e2:	e001      	b.n	80005e8 <FS_FileOperations+0xe8>
        }
      }
    }
  }
  /* Error */
  Error_Handler();
 80005e4:	f000 f834 	bl	8000650 <Error_Handler>
}
 80005e8:	37c0      	adds	r7, #192	; 0xc0
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	08008e04 	.word	0x08008e04
 80005f4:	200002ec 	.word	0x200002ec
 80005f8:	200002f0 	.word	0x200002f0
 80005fc:	2000002a 	.word	0x2000002a
 8000600:	200000ec 	.word	0x200000ec
 8000604:	08008df8 	.word	0x08008df8
 8000608:	20000520 	.word	0x20000520

0800060c <SD_Initialize>:



static void SD_Initialize(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  if (isInitialized == 0)
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <SD_Initialize+0x40>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d116      	bne.n	8000646 <SD_Initialize+0x3a>
  {
    if (BSP_SD_Init() == MSD_OK)
 8000618:	f005 fa32 	bl	8005a80 <BSP_SD_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <SD_Initialize+0x22>
    {
      BSP_SD_ITConfig();
 8000622:	f005 fa53 	bl	8005acc <BSP_SD_ITConfig>
      isInitialized = 1;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <SD_Initialize+0x40>)
 8000628:	2201      	movs	r2, #1
 800062a:	701a      	strb	r2, [r3, #0]
      while (BSP_SD_IsDetected() != SD_PRESENT)
      {}
      BSP_LED_Off(LED1);
    }
  }
}
 800062c:	e00b      	b.n	8000646 <SD_Initialize+0x3a>
      BSP_LED_On(LED1);
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ff32 	bl	8000498 <BSP_LED_On>
      while (BSP_SD_IsDetected() != SD_PRESENT)
 8000634:	bf00      	nop
 8000636:	f005 fac8 	bl	8005bca <BSP_SD_IsDetected>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d1fa      	bne.n	8000636 <SD_Initialize+0x2a>
      BSP_LED_Off(LED1);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ff43 	bl	80004cc <BSP_LED_Off>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000029 	.word	0x20000029

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000658:	e7fe      	b.n	8000658 <Error_Handler+0x8>
	...

0800065c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_MspInit+0x44>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_MspInit+0x44>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6613      	str	r3, [r2, #96]	; 0x60
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_MspInit+0x44>)
 8000670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_MspInit+0x44>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <HAL_MspInit+0x44>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	6593      	str	r3, [r2, #88]	; 0x58
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_MspInit+0x44>)
 8000688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0ae      	sub	sp, #184	; 0xb8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	228c      	movs	r2, #140	; 0x8c
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f008 fb83 	bl	8008dd0 <memset>
  if(hsd->Instance==SDMMC1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a6a      	ldr	r2, [pc, #424]	; (8000878 <HAL_SD_MspInit+0x1d4>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	f040 80cd 	bne.w	8000870 <HAL_SD_MspInit+0x1cc>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80006d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80006da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80006dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80006ec:	2310      	movs	r3, #16
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80006fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000700:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	f107 0318 	add.w	r3, r7, #24
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fd7e 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_SD_MspInit+0x72>
    {
      Error_Handler();
 8000712:	f7ff ff9d 	bl	8000650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000716:	4b59      	ldr	r3, [pc, #356]	; (800087c <HAL_SD_MspInit+0x1d8>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071a:	4a58      	ldr	r2, [pc, #352]	; (800087c <HAL_SD_MspInit+0x1d8>)
 800071c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000720:	6613      	str	r3, [r2, #96]	; 0x60
 8000722:	4b56      	ldr	r3, [pc, #344]	; (800087c <HAL_SD_MspInit+0x1d8>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	4b53      	ldr	r3, [pc, #332]	; (800087c <HAL_SD_MspInit+0x1d8>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a52      	ldr	r2, [pc, #328]	; (800087c <HAL_SD_MspInit+0x1d8>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b50      	ldr	r3, [pc, #320]	; (800087c <HAL_SD_MspInit+0x1d8>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b4d      	ldr	r3, [pc, #308]	; (800087c <HAL_SD_MspInit+0x1d8>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a4c      	ldr	r2, [pc, #304]	; (800087c <HAL_SD_MspInit+0x1d8>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b4a      	ldr	r3, [pc, #296]	; (800087c <HAL_SD_MspInit+0x1d8>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800075e:	2304      	movs	r3, #4
 8000760:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000776:	230c      	movs	r3, #12
 8000778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000780:	4619      	mov	r1, r3
 8000782:	483f      	ldr	r0, [pc, #252]	; (8000880 <HAL_SD_MspInit+0x1dc>)
 8000784:	f000 fcee 	bl	8001164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_9
 8000788:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800078c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007a2:	230c      	movs	r3, #12
 80007a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007ac:	4619      	mov	r1, r3
 80007ae:	4835      	ldr	r0, [pc, #212]	; (8000884 <HAL_SD_MspInit+0x1e0>)
 80007b0:	f000 fcd8 	bl	8001164 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 80007b4:	4b34      	ldr	r3, [pc, #208]	; (8000888 <HAL_SD_MspInit+0x1e4>)
 80007b6:	4a35      	ldr	r2, [pc, #212]	; (800088c <HAL_SD_MspInit+0x1e8>)
 80007b8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 80007ba:	4b33      	ldr	r3, [pc, #204]	; (8000888 <HAL_SD_MspInit+0x1e4>)
 80007bc:	2207      	movs	r2, #7
 80007be:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c0:	4b31      	ldr	r3, [pc, #196]	; (8000888 <HAL_SD_MspInit+0x1e4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c6:	4b30      	ldr	r3, [pc, #192]	; (8000888 <HAL_SD_MspInit+0x1e4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007cc:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <HAL_SD_MspInit+0x1e4>)
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <HAL_SD_MspInit+0x1e4>)
 80007d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <HAL_SD_MspInit+0x1e4>)
 80007dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007e0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <HAL_SD_MspInit+0x1e4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007e8:	4b27      	ldr	r3, [pc, #156]	; (8000888 <HAL_SD_MspInit+0x1e4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80007ee:	4826      	ldr	r0, [pc, #152]	; (8000888 <HAL_SD_MspInit+0x1e4>)
 80007f0:	f000 fa80 	bl	8000cf4 <HAL_DMA_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_SD_MspInit+0x15a>
    {
      Error_Handler();
 80007fa:	f7ff ff29 	bl	8000650 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <HAL_SD_MspInit+0x1e4>)
 8000802:	641a      	str	r2, [r3, #64]	; 0x40
 8000804:	4a20      	ldr	r2, [pc, #128]	; (8000888 <HAL_SD_MspInit+0x1e4>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <HAL_SD_MspInit+0x1ec>)
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <HAL_SD_MspInit+0x1f0>)
 800080e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <HAL_SD_MspInit+0x1ec>)
 8000812:	2207      	movs	r2, #7
 8000814:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <HAL_SD_MspInit+0x1ec>)
 8000818:	2210      	movs	r2, #16
 800081a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_SD_MspInit+0x1ec>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <HAL_SD_MspInit+0x1ec>)
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HAL_SD_MspInit+0x1ec>)
 800082a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_SD_MspInit+0x1ec>)
 8000832:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000836:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_SD_MspInit+0x1ec>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_SD_MspInit+0x1ec>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000844:	4812      	ldr	r0, [pc, #72]	; (8000890 <HAL_SD_MspInit+0x1ec>)
 8000846:	f000 fa55 	bl	8000cf4 <HAL_DMA_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8000850:	f7ff fefe 	bl	8000650 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_SD_MspInit+0x1ec>)
 8000858:	63da      	str	r2, [r3, #60]	; 0x3c
 800085a:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <HAL_SD_MspInit+0x1ec>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2031      	movs	r0, #49	; 0x31
 8000866:	f000 fa0e 	bl	8000c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800086a:	2031      	movs	r0, #49	; 0x31
 800086c:	f000 fa27 	bl	8000cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000870:	bf00      	nop
 8000872:	37b8      	adds	r7, #184	; 0xb8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40012800 	.word	0x40012800
 800087c:	40021000 	.word	0x40021000
 8000880:	48000c00 	.word	0x48000c00
 8000884:	48000800 	.word	0x48000800
 8000888:	20000750 	.word	0x20000750
 800088c:	40020444 	.word	0x40020444
 8000890:	20000798 	.word	0x20000798
 8000894:	40020458 	.word	0x40020458

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f8b0 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <SDMMC1_IRQHandler+0x10>)
 80008f2:	f003 fa79 	bl	8003de8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000068 	.word	0x20000068

08000900 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <DMA2_Channel4_IRQHandler+0x10>)
 8000906:	f000 fb4e 	bl	8000fa6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000750 	.word	0x20000750

08000914 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DMA2_Channel5_IRQHandler+0x10>)
 800091a:	f000 fb44 	bl	8000fa6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000798 	.word	0x20000798

08000928 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000984 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000950:	f7ff ffea 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097a:	f008 f9f7 	bl	8008d6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800097e:	f7ff fc35 	bl	80001ec <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	08008f9c 	.word	0x08008f9c
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	20000c48 	.word	0x20000c48

0800099c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_2_IRQHandler>

0800099e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f961 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ae:	200f      	movs	r0, #15
 80009b0:	f000 f80e 	bl	80009d0 <HAL_InitTick>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	71fb      	strb	r3, [r7, #7]
 80009be:	e001      	b.n	80009c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009c0:	f7ff fe4c 	bl	800065c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009c4:	79fb      	ldrb	r3, [r7, #7]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <HAL_InitTick+0x6c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d023      	beq.n	8000a2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_InitTick+0x70>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_InitTick+0x6c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f96d 	bl	8000cda <HAL_SYSTICK_Config>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10f      	bne.n	8000a26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d809      	bhi.n	8000a20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a14:	f000 f937 	bl	8000c86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a18:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_InitTick+0x74>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	e007      	b.n	8000a30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
 8000a24:	e004      	b.n	8000a30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	e001      	b.n	8000a30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x24>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <HAL_IncTick+0x24>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	200007e0 	.word	0x200007e0

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_GetTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	200007e0 	.word	0x200007e0

08000a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff ffee 	bl	8000a70 <HAL_GetTick>
 8000a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_Delay+0x44>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aae:	bf00      	nop
 8000ab0:	f7ff ffde 	bl	8000a70 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4907      	ldr	r1, [pc, #28]	; (8000b6c <__NVIC_EnableIRQ+0x38>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c50:	f7ff ff8e 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff29 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff3e 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff8e 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5d 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff31 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffa2 	bl	8000c2c <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e098      	b.n	8000e38 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b4d      	ldr	r3, [pc, #308]	; (8000e44 <HAL_DMA_Init+0x150>)
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d80f      	bhi.n	8000d32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b4b      	ldr	r3, [pc, #300]	; (8000e48 <HAL_DMA_Init+0x154>)
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a4b      	ldr	r2, [pc, #300]	; (8000e4c <HAL_DMA_Init+0x158>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	091b      	lsrs	r3, r3, #4
 8000d24:	009a      	lsls	r2, r3, #2
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a48      	ldr	r2, [pc, #288]	; (8000e50 <HAL_DMA_Init+0x15c>)
 8000d2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d30:	e00e      	b.n	8000d50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b46      	ldr	r3, [pc, #280]	; (8000e54 <HAL_DMA_Init+0x160>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a43      	ldr	r2, [pc, #268]	; (8000e4c <HAL_DMA_Init+0x158>)
 8000d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d42:	091b      	lsrs	r3, r3, #4
 8000d44:	009a      	lsls	r2, r3, #2
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a42      	ldr	r2, [pc, #264]	; (8000e58 <HAL_DMA_Init+0x164>)
 8000d4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2202      	movs	r2, #2
 8000d54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a1b      	ldr	r3, [r3, #32]
 8000d92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000daa:	d039      	beq.n	8000e20 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a27      	ldr	r2, [pc, #156]	; (8000e50 <HAL_DMA_Init+0x15c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d11a      	bne.n	8000dec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000db6:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <HAL_DMA_Init+0x168>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f003 031c 	and.w	r3, r3, #28
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	4924      	ldr	r1, [pc, #144]	; (8000e5c <HAL_DMA_Init+0x168>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_DMA_Init+0x168>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6859      	ldr	r1, [r3, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ddc:	f003 031c 	and.w	r3, r3, #28
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	491d      	ldr	r1, [pc, #116]	; (8000e5c <HAL_DMA_Init+0x168>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
 8000dea:	e019      	b.n	8000e20 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_DMA_Init+0x16c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df4:	f003 031c 	and.w	r3, r3, #28
 8000df8:	210f      	movs	r1, #15
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	4917      	ldr	r1, [pc, #92]	; (8000e60 <HAL_DMA_Init+0x16c>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_DMA_Init+0x16c>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6859      	ldr	r1, [r3, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f003 031c 	and.w	r3, r3, #28
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	4911      	ldr	r1, [pc, #68]	; (8000e60 <HAL_DMA_Init+0x16c>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	40020407 	.word	0x40020407
 8000e48:	bffdfff8 	.word	0xbffdfff8
 8000e4c:	cccccccd 	.word	0xcccccccd
 8000e50:	40020000 	.word	0x40020000
 8000e54:	bffdfbf8 	.word	0xbffdfbf8
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	400200a8 	.word	0x400200a8
 8000e60:	400204a8 	.word	0x400204a8

08000e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d101      	bne.n	8000e84 <HAL_DMA_Start_IT+0x20>
 8000e80:	2302      	movs	r3, #2
 8000e82:	e04b      	b.n	8000f1c <HAL_DMA_Start_IT+0xb8>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2201      	movs	r2, #1
 8000e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d13a      	bne.n	8000f0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0201 	bic.w	r2, r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	68b9      	ldr	r1, [r7, #8]
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f000 f921 	bl	8001104 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d008      	beq.n	8000edc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f042 020e 	orr.w	r2, r2, #14
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e00f      	b.n	8000efc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0204 	bic.w	r2, r2, #4
 8000eea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 020a 	orr.w	r2, r2, #10
 8000efa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e005      	b.n	8000f1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f16:	2302      	movs	r3, #2
 8000f18:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d005      	beq.n	8000f48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2204      	movs	r2, #4
 8000f40:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e029      	b.n	8000f9c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 020e 	bic.w	r2, r2, #14
 8000f56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0201 	bic.w	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	f003 021c 	and.w	r2, r3, #28
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	4798      	blx	r3
    }
  }
  return status;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f003 031c 	and.w	r3, r3, #28
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d026      	beq.n	8001020 <HAL_DMA_IRQHandler+0x7a>
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d021      	beq.n	8001020 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0320 	and.w	r3, r3, #32
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d107      	bne.n	8000ffa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0204 	bic.w	r2, r2, #4
 8000ff8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f003 021c 	and.w	r2, r3, #28
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	2104      	movs	r1, #4
 8001008:	fa01 f202 	lsl.w	r2, r1, r2
 800100c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	2b00      	cmp	r3, #0
 8001014:	d071      	beq.n	80010fa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800101e:	e06c      	b.n	80010fa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001024:	f003 031c 	and.w	r3, r3, #28
 8001028:	2202      	movs	r2, #2
 800102a:	409a      	lsls	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4013      	ands	r3, r2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d02e      	beq.n	8001092 <HAL_DMA_IRQHandler+0xec>
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d029      	beq.n	8001092 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0320 	and.w	r3, r3, #32
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10b      	bne.n	8001064 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 020a 	bic.w	r2, r2, #10
 800105a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	f003 021c 	and.w	r2, r3, #28
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	2102      	movs	r1, #2
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d038      	beq.n	80010fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001090:	e033      	b.n	80010fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f003 031c 	and.w	r3, r3, #28
 800109a:	2208      	movs	r2, #8
 800109c:	409a      	lsls	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4013      	ands	r3, r2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d02a      	beq.n	80010fc <HAL_DMA_IRQHandler+0x156>
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d025      	beq.n	80010fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 020e 	bic.w	r2, r2, #14
 80010be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c4:	f003 021c 	and.w	r2, r3, #28
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	2101      	movs	r1, #1
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d004      	beq.n	80010fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
}
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f003 021c 	and.w	r2, r3, #28
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f202 	lsl.w	r2, r1, r2
 8001124:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d108      	bne.n	8001148 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001146:	e007      	b.n	8001158 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	60da      	str	r2, [r3, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e166      	b.n	8001442 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8158 	beq.w	800143c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80b2 	beq.w	800143c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b61      	ldr	r3, [pc, #388]	; (8001460 <HAL_GPIO_Init+0x2fc>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012dc:	4a60      	ldr	r2, [pc, #384]	; (8001460 <HAL_GPIO_Init+0x2fc>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6613      	str	r3, [r2, #96]	; 0x60
 80012e4:	4b5e      	ldr	r3, [pc, #376]	; (8001460 <HAL_GPIO_Init+0x2fc>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f0:	4a5c      	ldr	r2, [pc, #368]	; (8001464 <HAL_GPIO_Init+0x300>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800131a:	d02b      	beq.n	8001374 <HAL_GPIO_Init+0x210>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a52      	ldr	r2, [pc, #328]	; (8001468 <HAL_GPIO_Init+0x304>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d025      	beq.n	8001370 <HAL_GPIO_Init+0x20c>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x308>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d01f      	beq.n	800136c <HAL_GPIO_Init+0x208>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a50      	ldr	r2, [pc, #320]	; (8001470 <HAL_GPIO_Init+0x30c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d019      	beq.n	8001368 <HAL_GPIO_Init+0x204>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x310>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d013      	beq.n	8001364 <HAL_GPIO_Init+0x200>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a4e      	ldr	r2, [pc, #312]	; (8001478 <HAL_GPIO_Init+0x314>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00d      	beq.n	8001360 <HAL_GPIO_Init+0x1fc>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a4d      	ldr	r2, [pc, #308]	; (800147c <HAL_GPIO_Init+0x318>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d007      	beq.n	800135c <HAL_GPIO_Init+0x1f8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_GPIO_Init+0x31c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d101      	bne.n	8001358 <HAL_GPIO_Init+0x1f4>
 8001354:	2307      	movs	r3, #7
 8001356:	e00e      	b.n	8001376 <HAL_GPIO_Init+0x212>
 8001358:	2308      	movs	r3, #8
 800135a:	e00c      	b.n	8001376 <HAL_GPIO_Init+0x212>
 800135c:	2306      	movs	r3, #6
 800135e:	e00a      	b.n	8001376 <HAL_GPIO_Init+0x212>
 8001360:	2305      	movs	r3, #5
 8001362:	e008      	b.n	8001376 <HAL_GPIO_Init+0x212>
 8001364:	2304      	movs	r3, #4
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x212>
 8001368:	2303      	movs	r3, #3
 800136a:	e004      	b.n	8001376 <HAL_GPIO_Init+0x212>
 800136c:	2302      	movs	r3, #2
 800136e:	e002      	b.n	8001376 <HAL_GPIO_Init+0x212>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_GPIO_Init+0x212>
 8001374:	2300      	movs	r3, #0
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	f002 0203 	and.w	r2, r2, #3
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	4093      	lsls	r3, r2
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001386:	4937      	ldr	r1, [pc, #220]	; (8001464 <HAL_GPIO_Init+0x300>)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001394:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_GPIO_Init+0x320>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b8:	4a32      	ldr	r2, [pc, #200]	; (8001484 <HAL_GPIO_Init+0x320>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013be:	4b31      	ldr	r3, [pc, #196]	; (8001484 <HAL_GPIO_Init+0x320>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013e2:	4a28      	ldr	r2, [pc, #160]	; (8001484 <HAL_GPIO_Init+0x320>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013e8:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_GPIO_Init+0x320>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800140c:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_GPIO_Init+0x320>)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_GPIO_Init+0x320>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <HAL_GPIO_Init+0x320>)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	f47f ae91 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000
 8001468:	48000400 	.word	0x48000400
 800146c:	48000800 	.word	0x48000800
 8001470:	48000c00 	.word	0x48000c00
 8001474:	48001000 	.word	0x48001000
 8001478:	48001400 	.word	0x48001400
 800147c:	48001800 	.word	0x48001800
 8001480:	48001c00 	.word	0x48001c00
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e001      	b.n	80014aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014d4:	e002      	b.n	80014dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <HAL_PWREx_GetVoltageRange+0x18>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40007000 	.word	0x40007000

08001504 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001512:	d130      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800151c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001520:	d038      	beq.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2232      	movs	r2, #50	; 0x32
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9b      	lsrs	r3, r3, #18
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001548:	e002      	b.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3b01      	subs	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155c:	d102      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x60>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f2      	bne.n	800154a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001570:	d110      	bne.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e00f      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800157e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001582:	d007      	beq.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001592:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000
 80015a8:	20000000 	.word	0x20000000
 80015ac:	431bde83 	.word	0x431bde83

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	f000 bc16 	b.w	8001df0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c4:	4ba0      	ldr	r3, [pc, #640]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ce:	4b9e      	ldr	r3, [pc, #632]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80e4 	beq.w	80017ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <HAL_RCC_OscConfig+0x4c>
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	f040 808b 	bne.w	800170a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	f040 8087 	bne.w	800170a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015fc:	4b92      	ldr	r3, [pc, #584]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x64>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e3ed      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	4b8b      	ldr	r3, [pc, #556]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d004      	beq.n	800162e <HAL_RCC_OscConfig+0x7e>
 8001624:	4b88      	ldr	r3, [pc, #544]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800162c:	e005      	b.n	800163a <HAL_RCC_OscConfig+0x8a>
 800162e:	4b86      	ldr	r3, [pc, #536]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800163a:	4293      	cmp	r3, r2
 800163c:	d223      	bcs.n	8001686 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fd80 	bl	8002148 <RCC_SetFlashLatencyFromMSIRange>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e3ce      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001652:	4b7d      	ldr	r3, [pc, #500]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a7c      	ldr	r2, [pc, #496]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b7a      	ldr	r3, [pc, #488]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4977      	ldr	r1, [pc, #476]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001670:	4b75      	ldr	r3, [pc, #468]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	4972      	ldr	r1, [pc, #456]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e025      	b.n	80016d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001686:	4b70      	ldr	r3, [pc, #448]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a6f      	ldr	r2, [pc, #444]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b6d      	ldr	r3, [pc, #436]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	496a      	ldr	r1, [pc, #424]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a4:	4b68      	ldr	r3, [pc, #416]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	4965      	ldr	r1, [pc, #404]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fd40 	bl	8002148 <RCC_SetFlashLatencyFromMSIRange>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e38e      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d2:	f000 fc75 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 80016d6:	4602      	mov	r2, r0
 80016d8:	4b5b      	ldr	r3, [pc, #364]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	495a      	ldr	r1, [pc, #360]	; (800184c <HAL_RCC_OscConfig+0x29c>)
 80016e4:	5ccb      	ldrb	r3, [r1, r3]
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	4a58      	ldr	r2, [pc, #352]	; (8001850 <HAL_RCC_OscConfig+0x2a0>)
 80016f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016f2:	4b58      	ldr	r3, [pc, #352]	; (8001854 <HAL_RCC_OscConfig+0x2a4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f96a 	bl	80009d0 <HAL_InitTick>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d052      	beq.n	80017ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	e372      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d032      	beq.n	8001778 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001712:	4b4d      	ldr	r3, [pc, #308]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a4c      	ldr	r2, [pc, #304]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800171e:	f7ff f9a7 	bl	8000a70 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001726:	f7ff f9a3 	bl	8000a70 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e35b      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001738:	4b43      	ldr	r3, [pc, #268]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001744:	4b40      	ldr	r3, [pc, #256]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a3f      	ldr	r2, [pc, #252]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	493a      	ldr	r1, [pc, #232]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	4935      	ldr	r1, [pc, #212]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
 8001776:	e01a      	b.n	80017ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a32      	ldr	r2, [pc, #200]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001784:	f7ff f974 	bl	8000a70 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800178c:	f7ff f970 	bl	8000a70 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e328      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1dc>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d073      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x21c>
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d10e      	bne.n	80017e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d10b      	bne.n	80017e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d063      	beq.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d15f      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e305      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ec:	d106      	bne.n	80017fc <HAL_RCC_OscConfig+0x24c>
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0x288>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x270>
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0x288>
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a05      	ldr	r2, [pc, #20]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d01b      	beq.n	8001878 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff f916 	bl	8000a70 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001846:	e010      	b.n	800186a <HAL_RCC_OscConfig+0x2ba>
 8001848:	40021000 	.word	0x40021000
 800184c:	08008e98 	.word	0x08008e98
 8001850:	20000000 	.word	0x20000000
 8001854:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff f90a 	bl	8000a70 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e2c2      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	4baf      	ldr	r3, [pc, #700]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x2a8>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff f8fa 	bl	8000a70 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff f8f6 	bl	8000a70 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e2ae      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001892:	4ba5      	ldr	r3, [pc, #660]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x2d0>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d060      	beq.n	8001970 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_OscConfig+0x310>
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d119      	bne.n	80018ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d116      	bne.n	80018ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c0:	4b99      	ldr	r3, [pc, #612]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x328>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e28b      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b93      	ldr	r3, [pc, #588]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	4990      	ldr	r1, [pc, #576]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ec:	e040      	b.n	8001970 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d023      	beq.n	800193e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f6:	4b8c      	ldr	r3, [pc, #560]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a8b      	ldr	r2, [pc, #556]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff f8b5 	bl	8000a70 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff f8b1 	bl	8000a70 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e269      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	4b82      	ldr	r3, [pc, #520]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	497c      	ldr	r1, [pc, #496]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e018      	b.n	8001970 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b7a      	ldr	r3, [pc, #488]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a79      	ldr	r2, [pc, #484]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff f891 	bl	8000a70 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff f88d 	bl	8000a70 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e245      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001964:	4b70      	ldr	r3, [pc, #448]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d03c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01c      	beq.n	80019be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001984:	4b68      	ldr	r3, [pc, #416]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	4a67      	ldr	r2, [pc, #412]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff f86c 	bl	8000a70 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff f868 	bl	8000a70 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e220      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ae:	4b5e      	ldr	r3, [pc, #376]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ef      	beq.n	800199c <HAL_RCC_OscConfig+0x3ec>
 80019bc:	e01b      	b.n	80019f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019be:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c4:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f7ff f84f 	bl	8000a70 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d6:	f7ff f84b 	bl	8000a70 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e203      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e8:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ef      	bne.n	80019d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80a6 	beq.w	8001b50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a08:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10d      	bne.n	8001a30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	4a43      	ldr	r2, [pc, #268]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a30:	4b3e      	ldr	r3, [pc, #248]	; (8001b2c <HAL_RCC_OscConfig+0x57c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d118      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <HAL_RCC_OscConfig+0x57c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a3a      	ldr	r2, [pc, #232]	; (8001b2c <HAL_RCC_OscConfig+0x57c>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a48:	f7ff f812 	bl	8000a70 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a50:	f7ff f80e 	bl	8000a70 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1c6      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_RCC_OscConfig+0x57c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4d8>
 8001a76:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7c:	4a2a      	ldr	r2, [pc, #168]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a86:	e024      	b.n	8001ad2 <HAL_RCC_OscConfig+0x522>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d110      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x502>
 8001a90:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	4a24      	ldr	r2, [pc, #144]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa0:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab0:	e00f      	b.n	8001ad2 <HAL_RCC_OscConfig+0x522>
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab8:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001aca:	f023 0304 	bic.w	r3, r3, #4
 8001ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d016      	beq.n	8001b08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ada:	f7fe ffc9 	bl	8000a70 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7fe ffc5 	bl	8000a70 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e17b      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0ed      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x532>
 8001b06:	e01a      	b.n	8001b3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7fe ffb2 	bl	8000a70 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b0e:	e00f      	b.n	8001b30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7fe ffae 	bl	8000a70 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d906      	bls.n	8001b30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e164      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b30:	4ba8      	ldr	r3, [pc, #672]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1e8      	bne.n	8001b10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d105      	bne.n	8001b50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b44:	4ba3      	ldr	r3, [pc, #652]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	4aa2      	ldr	r2, [pc, #648]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d03c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b64:	4b9b      	ldr	r3, [pc, #620]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b6a:	4a9a      	ldr	r2, [pc, #616]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7fe ff7c 	bl	8000a70 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7c:	f7fe ff78 	bl	8000a70 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e130      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b8e:	4b91      	ldr	r3, [pc, #580]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ef      	beq.n	8001b7c <HAL_RCC_OscConfig+0x5cc>
 8001b9c:	e01b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b9e:	4b8d      	ldr	r3, [pc, #564]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba4:	4a8b      	ldr	r2, [pc, #556]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7fe ff5f 	bl	8000a70 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bb6:	f7fe ff5b 	bl	8000a70 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e113      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc8:	4b82      	ldr	r3, [pc, #520]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1ef      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8107 	beq.w	8001dee <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	f040 80cb 	bne.w	8001d80 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bea:	4b7a      	ldr	r3, [pc, #488]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 0203 	and.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d12c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d123      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d11b      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d113      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	085b      	lsrs	r3, r3, #1
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d109      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	3b01      	subs	r3, #1
 8001c52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d06d      	beq.n	8001d34 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d068      	beq.n	8001d30 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d105      	bne.n	8001c76 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c6a:	4b5a      	ldr	r3, [pc, #360]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0ba      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b56      	ldr	r3, [pc, #344]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a55      	ldr	r2, [pc, #340]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c86:	f7fe fef3 	bl	8000a70 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7fe feef 	bl	8000a70 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0a7      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cac:	4b49      	ldr	r3, [pc, #292]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4b49      	ldr	r3, [pc, #292]	; (8001dd8 <HAL_RCC_OscConfig+0x828>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cbc:	3a01      	subs	r2, #1
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cc6:	0212      	lsls	r2, r2, #8
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cce:	0852      	lsrs	r2, r2, #1
 8001cd0:	3a01      	subs	r2, #1
 8001cd2:	0552      	lsls	r2, r2, #21
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cda:	0852      	lsrs	r2, r2, #1
 8001cdc:	3a01      	subs	r2, #1
 8001cde:	0652      	lsls	r2, r2, #25
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ce6:	06d2      	lsls	r2, r2, #27
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	493a      	ldr	r1, [pc, #232]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cf0:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a37      	ldr	r2, [pc, #220]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cfc:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4a34      	ldr	r2, [pc, #208]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d08:	f7fe feb2 	bl	8000a70 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d10:	f7fe feae 	bl	8000a70 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e066      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d22:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d2e:	e05e      	b.n	8001dee <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e05d      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d156      	bne.n	8001dee <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4a20      	ldr	r2, [pc, #128]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d58:	f7fe fe8a 	bl	8000a70 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7fe fe86 	bl	8000a70 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e03e      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x7b0>
 8001d7e:	e036      	b.n	8001dee <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d031      	beq.n	8001dea <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d90:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d105      	bne.n	8001daa <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001da4:	f023 0303 	bic.w	r3, r3, #3
 8001da8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001db0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7fe fe59 	bl	8000a70 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc0:	e00c      	b.n	8001ddc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7fe fe55 	bl	8000a70 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d905      	bls.n	8001ddc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e00d      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_OscConfig+0x848>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1ec      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x812>
 8001de8:	e001      	b.n	8001dee <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0c8      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e10:	4b66      	ldr	r3, [pc, #408]	; (8001fac <HAL_RCC_ClockConfig+0x1b0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d910      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <HAL_RCC_ClockConfig+0x1b0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 0207 	bic.w	r2, r3, #7
 8001e26:	4961      	ldr	r1, [pc, #388]	; (8001fac <HAL_RCC_ClockConfig+0x1b0>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b5f      	ldr	r3, [pc, #380]	; (8001fac <HAL_RCC_ClockConfig+0x1b0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b0      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d04c      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e54:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d121      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e09e      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e6c:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d115      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e092      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e086      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e94:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e07e      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ea4:	4b42      	ldr	r3, [pc, #264]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 0203 	bic.w	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	493f      	ldr	r1, [pc, #252]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb6:	f7fe fddb 	bl	8000a70 <HAL_GetTick>
 8001eba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ebe:	f7fe fdd7 	bl	8000a70 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e066      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed4:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 020c 	and.w	r2, r3, #12
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d1eb      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef2:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	492c      	ldr	r1, [pc, #176]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCC_ClockConfig+0x1b0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d210      	bcs.n	8001f34 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_RCC_ClockConfig+0x1b0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 0207 	bic.w	r2, r3, #7
 8001f1a:	4924      	ldr	r1, [pc, #144]	; (8001fac <HAL_RCC_ClockConfig+0x1b0>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <HAL_RCC_ClockConfig+0x1b0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e036      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4918      	ldr	r1, [pc, #96]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4910      	ldr	r1, [pc, #64]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f72:	f000 f825 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f76:	4602      	mov	r2, r0
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	5ccb      	ldrb	r3, [r1, r3]
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fd1a 	bl	80009d0 <HAL_InitTick>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fa0:	7afb      	ldrb	r3, [r7, #11]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08008e98 	.word	0x08008e98
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fce:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd8:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d121      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d11e      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ff4:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	e005      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800201c:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b04      	cmp	r3, #4
 8002036:	d102      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	e004      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d101      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002046:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d134      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d003      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0xa6>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d003      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0xac>
 8002064:	e005      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002068:	617b      	str	r3, [r7, #20]
      break;
 800206a:	e005      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800206e:	617b      	str	r3, [r7, #20]
      break;
 8002070:	e002      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	617b      	str	r3, [r7, #20]
      break;
 8002076:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	3301      	adds	r3, #1
 8002084:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	fb02 f203 	mul.w	r2, r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	0e5b      	lsrs	r3, r3, #25
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	3301      	adds	r3, #1
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020b8:	69bb      	ldr	r3, [r7, #24]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08008eb0 	.word	0x08008eb0
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	007a1200 	.word	0x007a1200

080020d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_RCC_GetHCLKFreq+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000000 	.word	0x20000000

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4904      	ldr	r1, [pc, #16]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	08008ea8 	.word	0x08008ea8

0800211c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002120:	f7ff ffda 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0adb      	lsrs	r3, r3, #11
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4904      	ldr	r1, [pc, #16]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	08008ea8 	.word	0x08008ea8

08002148 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002160:	f7ff f9c2 	bl	80014e8 <HAL_PWREx_GetVoltageRange>
 8002164:	6178      	str	r0, [r7, #20]
 8002166:	e014      	b.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	4a24      	ldr	r2, [pc, #144]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002172:	6593      	str	r3, [r2, #88]	; 0x58
 8002174:	4b22      	ldr	r3, [pc, #136]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002180:	f7ff f9b2 	bl	80014e8 <HAL_PWREx_GetVoltageRange>
 8002184:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002190:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002198:	d10b      	bne.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b80      	cmp	r3, #128	; 0x80
 800219e:	d919      	bls.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2ba0      	cmp	r3, #160	; 0xa0
 80021a4:	d902      	bls.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021a6:	2302      	movs	r3, #2
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	e013      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021ac:	2301      	movs	r3, #1
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	e010      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b80      	cmp	r3, #128	; 0x80
 80021b6:	d902      	bls.n	80021be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021b8:	2303      	movs	r3, #3
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e00a      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b80      	cmp	r3, #128	; 0x80
 80021c2:	d102      	bne.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021c4:	2302      	movs	r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	e004      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b70      	cmp	r3, #112	; 0x70
 80021ce:	d101      	bne.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d0:	2301      	movs	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 0207 	bic.w	r2, r3, #7
 80021dc:	4909      	ldr	r1, [pc, #36]	; (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d001      	beq.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	40022000 	.word	0x40022000

08002208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002210:	2300      	movs	r3, #0
 8002212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002214:	2300      	movs	r3, #0
 8002216:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002220:	2b00      	cmp	r3, #0
 8002222:	d041      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002228:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800222c:	d02a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800222e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002232:	d824      	bhi.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002234:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002238:	d008      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800223a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800223e:	d81e      	bhi.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002248:	d010      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800224a:	e018      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800224c:	4b86      	ldr	r3, [pc, #536]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a85      	ldr	r2, [pc, #532]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002256:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002258:	e015      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f001 f887 	bl	8003374 <RCCEx_PLLSAI1_Config>
 8002266:	4603      	mov	r3, r0
 8002268:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800226a:	e00c      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3320      	adds	r3, #32
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f001 f970 	bl	8003558 <RCCEx_PLLSAI2_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800227c:	e003      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	74fb      	strb	r3, [r7, #19]
      break;
 8002282:	e000      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800228c:	4b76      	ldr	r3, [pc, #472]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800229a:	4973      	ldr	r1, [pc, #460]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022a2:	e001      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d041      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022bc:	d02a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022c2:	d824      	bhi.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022c8:	d008      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022ce:	d81e      	bhi.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d8:	d010      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022da:	e018      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022dc:	4b62      	ldr	r3, [pc, #392]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a61      	ldr	r2, [pc, #388]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022e8:	e015      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 f83f 	bl	8003374 <RCCEx_PLLSAI1_Config>
 80022f6:	4603      	mov	r3, r0
 80022f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022fa:	e00c      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3320      	adds	r3, #32
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f001 f928 	bl	8003558 <RCCEx_PLLSAI2_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800230c:	e003      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	74fb      	strb	r3, [r7, #19]
      break;
 8002312:	e000      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10b      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800231c:	4b52      	ldr	r3, [pc, #328]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800232a:	494f      	ldr	r1, [pc, #316]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002332:	e001      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a0 	beq.w	8002486 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002360:	4b41      	ldr	r3, [pc, #260]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	4a40      	ldr	r2, [pc, #256]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236a:	6593      	str	r3, [r2, #88]	; 0x58
 800236c:	4b3e      	ldr	r3, [pc, #248]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002378:	2301      	movs	r3, #1
 800237a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800237c:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a3a      	ldr	r2, [pc, #232]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002388:	f7fe fb72 	bl	8000a70 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800238e:	e009      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7fe fb6e 	bl	8000a70 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d902      	bls.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	74fb      	strb	r3, [r7, #19]
        break;
 80023a2:	e005      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023a4:	4b31      	ldr	r3, [pc, #196]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ef      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d15c      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023b6:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01f      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d019      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023d4:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e6:	4a20      	ldr	r2, [pc, #128]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002400:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fb2d 	bl	8000a70 <HAL_GetTick>
 8002416:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002418:	e00b      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7fe fb29 	bl	8000a70 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	; 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d902      	bls.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	74fb      	strb	r3, [r7, #19]
            break;
 8002430:	e006      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002432:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ec      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	4904      	ldr	r1, [pc, #16]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800245e:	e009      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	74bb      	strb	r3, [r7, #18]
 8002464:	e006      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002474:	7c7b      	ldrb	r3, [r7, #17]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247a:	4ba6      	ldr	r3, [pc, #664]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247e:	4aa5      	ldr	r2, [pc, #660]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002484:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002492:	4ba0      	ldr	r3, [pc, #640]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	f023 0203 	bic.w	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	499c      	ldr	r1, [pc, #624]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024b4:	4b97      	ldr	r3, [pc, #604]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f023 020c 	bic.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	4994      	ldr	r1, [pc, #592]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024d6:	4b8f      	ldr	r3, [pc, #572]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	498b      	ldr	r1, [pc, #556]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024f8:	4b86      	ldr	r3, [pc, #536]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	4983      	ldr	r1, [pc, #524]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800251a:	4b7e      	ldr	r3, [pc, #504]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002528:	497a      	ldr	r1, [pc, #488]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800253c:	4b75      	ldr	r3, [pc, #468]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	4972      	ldr	r1, [pc, #456]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800255e:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256c:	4969      	ldr	r1, [pc, #420]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002580:	4b64      	ldr	r3, [pc, #400]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800258e:	4961      	ldr	r1, [pc, #388]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025a2:	4b5c      	ldr	r3, [pc, #368]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b0:	4958      	ldr	r1, [pc, #352]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025c4:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	4950      	ldr	r1, [pc, #320]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025e6:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	4947      	ldr	r1, [pc, #284]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002608:	4b42      	ldr	r3, [pc, #264]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800260a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	493f      	ldr	r1, [pc, #252]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d028      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800262a:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002630:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	4936      	ldr	r1, [pc, #216]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002648:	d106      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800264a:	4b32      	ldr	r3, [pc, #200]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4a31      	ldr	r2, [pc, #196]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002654:	60d3      	str	r3, [r2, #12]
 8002656:	e011      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002660:	d10c      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3304      	adds	r3, #4
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fe83 	bl	8003374 <RCCEx_PLLSAI1_Config>
 800266e:	4603      	mov	r3, r0
 8002670:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d028      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002696:	491f      	ldr	r1, [pc, #124]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026a6:	d106      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026b2:	60d3      	str	r3, [r2, #12]
 80026b4:	e011      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026be:	d10c      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3304      	adds	r3, #4
 80026c4:	2101      	movs	r1, #1
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fe54 	bl	8003374 <RCCEx_PLLSAI1_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80026d6:	7cfb      	ldrb	r3, [r7, #19]
 80026d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d02a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002704:	d108      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002706:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4a02      	ldr	r2, [pc, #8]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800270c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002710:	60d3      	str	r3, [r2, #12]
 8002712:	e013      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002714:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800271c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002720:	d10c      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3304      	adds	r3, #4
 8002726:	2101      	movs	r1, #1
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fe23 	bl	8003374 <RCCEx_PLLSAI1_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d02f      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002748:	4b2c      	ldr	r3, [pc, #176]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002756:	4929      	ldr	r1, [pc, #164]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002766:	d10d      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	2102      	movs	r1, #2
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fe00 	bl	8003374 <RCCEx_PLLSAI1_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d014      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	74bb      	strb	r3, [r7, #18]
 8002782:	e011      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800278c:	d10c      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3320      	adds	r3, #32
 8002792:	2102      	movs	r1, #2
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fedf 	bl	8003558 <RCCEx_PLLSAI2_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c4:	490d      	ldr	r1, [pc, #52]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e8:	4904      	ldr	r1, [pc, #16]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000

08002800 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002812:	d13e      	bne.n	8002892 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002814:	4bb8      	ldr	r3, [pc, #736]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002826:	d028      	beq.n	800287a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800282e:	f200 858e 	bhi.w	800334e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002838:	d005      	beq.n	8002846 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002840:	d00e      	beq.n	8002860 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002842:	f000 bd84 	b.w	800334e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002846:	4bac      	ldr	r3, [pc, #688]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b02      	cmp	r3, #2
 8002852:	f040 857e 	bne.w	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
        frequency = LSE_VALUE;
 8002856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800285a:	61fb      	str	r3, [r7, #28]
      break;
 800285c:	f000 bd79 	b.w	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002860:	4ba5      	ldr	r3, [pc, #660]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	f040 8573 	bne.w	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          frequency = LSI_VALUE;
 8002870:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002874:	61fb      	str	r3, [r7, #28]
      break;
 8002876:	f000 bd6e 	b.w	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800287a:	4b9f      	ldr	r3, [pc, #636]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002886:	f040 8568 	bne.w	800335a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
        frequency = HSE_VALUE / 32U;
 800288a:	4b9c      	ldr	r3, [pc, #624]	; (8002afc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800288c:	61fb      	str	r3, [r7, #28]
      break;
 800288e:	f000 bd64 	b.w	800335a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002892:	4b99      	ldr	r3, [pc, #612]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d036      	beq.n	8002910 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d840      	bhi.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d003      	beq.n	80028b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d020      	beq.n	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80028b4:	e039      	b.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80028b6:	4b90      	ldr	r3, [pc, #576]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d116      	bne.n	80028f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80028c2:	4b8d      	ldr	r3, [pc, #564]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80028ce:	4b8a      	ldr	r3, [pc, #552]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	e005      	b.n	80028e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80028da:	4b87      	ldr	r3, [pc, #540]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	4a86      	ldr	r2, [pc, #536]	; (8002b00 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80028e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80028ee:	e01f      	b.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]
      break;
 80028f4:	e01c      	b.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80028f6:	4b80      	ldr	r3, [pc, #512]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002902:	d102      	bne.n	800290a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002904:	4b7f      	ldr	r3, [pc, #508]	; (8002b04 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8002906:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002908:	e012      	b.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
      break;
 800290e:	e00f      	b.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002910:	4b79      	ldr	r3, [pc, #484]	; (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800291c:	d102      	bne.n	8002924 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800291e:	4b7a      	ldr	r3, [pc, #488]	; (8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8002920:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002922:	e005      	b.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
      break;
 8002928:	e002      	b.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
      break;
 800292e:	bf00      	nop
    }

    switch(PeriphClk)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002936:	f000 842b 	beq.w	8003190 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002940:	f200 850d 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800294a:	f000 80df 	beq.w	8002b0c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002954:	f200 8503 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800295e:	f000 80d5 	beq.w	8002b0c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002968:	f200 84f9 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002972:	f000 8374 	beq.w	800305e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297c:	f200 84ef 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002986:	f000 84c0 	beq.w	800330a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002990:	f200 84e5 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800299a:	f000 82e7 	beq.w	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a4:	f200 84db 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ae:	f000 80ad 	beq.w	8002b0c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b8:	f200 84d1 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	f000 8091 	beq.w	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029cc:	f200 84c7 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d6:	d07f      	beq.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029de:	f200 84be 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e8:	f000 8445 	beq.w	8003276 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f2:	f200 84b4 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029fc:	f000 83f1 	beq.w	80031e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a06:	f200 84aa 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a10:	f000 8392 	beq.w	8003138 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1a:	f200 84a0 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b80      	cmp	r3, #128	; 0x80
 8002a22:	f000 835d 	beq.w	80030e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	f200 8498 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d84b      	bhi.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8491 	beq.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	2b1f      	cmp	r3, #31
 8002a42:	f200 848c 	bhi.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8002a46:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002c63 	.word	0x08002c63
 8002a50:	08002cd3 	.word	0x08002cd3
 8002a54:	0800335f 	.word	0x0800335f
 8002a58:	08002d67 	.word	0x08002d67
 8002a5c:	0800335f 	.word	0x0800335f
 8002a60:	0800335f 	.word	0x0800335f
 8002a64:	0800335f 	.word	0x0800335f
 8002a68:	08002df1 	.word	0x08002df1
 8002a6c:	0800335f 	.word	0x0800335f
 8002a70:	0800335f 	.word	0x0800335f
 8002a74:	0800335f 	.word	0x0800335f
 8002a78:	0800335f 	.word	0x0800335f
 8002a7c:	0800335f 	.word	0x0800335f
 8002a80:	0800335f 	.word	0x0800335f
 8002a84:	0800335f 	.word	0x0800335f
 8002a88:	08002e69 	.word	0x08002e69
 8002a8c:	0800335f 	.word	0x0800335f
 8002a90:	0800335f 	.word	0x0800335f
 8002a94:	0800335f 	.word	0x0800335f
 8002a98:	0800335f 	.word	0x0800335f
 8002a9c:	0800335f 	.word	0x0800335f
 8002aa0:	0800335f 	.word	0x0800335f
 8002aa4:	0800335f 	.word	0x0800335f
 8002aa8:	0800335f 	.word	0x0800335f
 8002aac:	0800335f 	.word	0x0800335f
 8002ab0:	0800335f 	.word	0x0800335f
 8002ab4:	0800335f 	.word	0x0800335f
 8002ab8:	0800335f 	.word	0x0800335f
 8002abc:	0800335f 	.word	0x0800335f
 8002ac0:	0800335f 	.word	0x0800335f
 8002ac4:	0800335f 	.word	0x0800335f
 8002ac8:	08002eeb 	.word	0x08002eeb
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	f000 82da 	beq.w	8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002ad4:	f000 bc43 	b.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002ad8:	69b9      	ldr	r1, [r7, #24]
 8002ada:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002ade:	f000 fe17 	bl	8003710 <RCCEx_GetSAIxPeriphCLKFreq>
 8002ae2:	61f8      	str	r0, [r7, #28]
      break;
 8002ae4:	f000 bc3c 	b.w	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002ae8:	69b9      	ldr	r1, [r7, #24]
 8002aea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002aee:	f000 fe0f 	bl	8003710 <RCCEx_GetSAIxPeriphCLKFreq>
 8002af2:	61f8      	str	r0, [r7, #28]
      break;
 8002af4:	f000 bc34 	b.w	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8002af8:	40021000 	.word	0x40021000
 8002afc:	0003d090 	.word	0x0003d090
 8002b00:	08008eb0 	.word	0x08008eb0
 8002b04:	00f42400 	.word	0x00f42400
 8002b08:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002b0c:	4bb2      	ldr	r3, [pc, #712]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002b1e:	d015      	beq.n	8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002b26:	f200 8092 	bhi.w	8002c4e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b30:	d029      	beq.n	8002b86 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b38:	f200 8089 	bhi.w	8002c4e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d07b      	beq.n	8002c3a <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b48:	d04a      	beq.n	8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 8002b4a:	e080      	b.n	8002c4e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002b4c:	4ba2      	ldr	r3, [pc, #648]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d17c      	bne.n	8002c52 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002b58:	4b9f      	ldr	r3, [pc, #636]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8002b64:	4b9c      	ldr	r3, [pc, #624]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	e005      	b.n	8002b7c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8002b70:	4b99      	ldr	r3, [pc, #612]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	4a97      	ldr	r2, [pc, #604]	; (8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8002b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b82:	61fb      	str	r3, [r7, #28]
          break;
 8002b84:	e065      	b.n	8002c52 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002b86:	4b94      	ldr	r3, [pc, #592]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b92:	d160      	bne.n	8002c56 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002b94:	4b90      	ldr	r3, [pc, #576]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba0:	d159      	bne.n	8002c56 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002ba2:	4b8d      	ldr	r3, [pc, #564]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bac:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	fb02 f203 	mul.w	r2, r2, r3
 8002bb6:	4b88      	ldr	r3, [pc, #544]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002bc8:	4b83      	ldr	r3, [pc, #524]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0d5b      	lsrs	r3, r3, #21
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	61fb      	str	r3, [r7, #28]
          break;
 8002bde:	e03a      	b.n	8002c56 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002be0:	4b7d      	ldr	r3, [pc, #500]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bec:	d135      	bne.n	8002c5a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002bee:	4b7a      	ldr	r3, [pc, #488]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bfa:	d12e      	bne.n	8002c5a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002bfc:	4b76      	ldr	r3, [pc, #472]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c06:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	fb02 f203 	mul.w	r2, r2, r3
 8002c10:	4b71      	ldr	r3, [pc, #452]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002c22:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	0d5b      	lsrs	r3, r3, #21
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	61fb      	str	r3, [r7, #28]
          break;
 8002c38:	e00f      	b.n	8002c5a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8002c3a:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002c3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d10a      	bne.n	8002c5e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8002c48:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002c4a:	61fb      	str	r3, [r7, #28]
          break;
 8002c4c:	e007      	b.n	8002c5e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 8002c4e:	bf00      	nop
 8002c50:	e386      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002c52:	bf00      	nop
 8002c54:	e384      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002c56:	bf00      	nop
 8002c58:	e382      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002c5a:	bf00      	nop
 8002c5c:	e380      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002c5e:	bf00      	nop
        break;
 8002c60:	e37e      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002c62:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d828      	bhi.n	8002cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8002c74:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8002c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7a:	bf00      	nop
 8002c7c:	08002c8d 	.word	0x08002c8d
 8002c80:	08002c95 	.word	0x08002c95
 8002c84:	08002c9d 	.word	0x08002c9d
 8002c88:	08002cb1 	.word	0x08002cb1
          frequency = HAL_RCC_GetPCLK2Freq();
 8002c8c:	f7ff fa46 	bl	800211c <HAL_RCC_GetPCLK2Freq>
 8002c90:	61f8      	str	r0, [r7, #28]
          break;
 8002c92:	e01d      	b.n	8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002c94:	f7ff f994 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002c98:	61f8      	str	r0, [r7, #28]
          break;
 8002c9a:	e019      	b.n	8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002c9c:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca8:	d10f      	bne.n	8002cca <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8002caa:	4b4e      	ldr	r3, [pc, #312]	; (8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8002cac:	61fb      	str	r3, [r7, #28]
          break;
 8002cae:	e00c      	b.n	8002cca <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002cb0:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d107      	bne.n	8002cce <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8002cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cc2:	61fb      	str	r3, [r7, #28]
          break;
 8002cc4:	e003      	b.n	8002cce <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8002cc6:	bf00      	nop
 8002cc8:	e34a      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002cca:	bf00      	nop
 8002ccc:	e348      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002cce:	bf00      	nop
        break;
 8002cd0:	e346      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b0c      	cmp	r3, #12
 8002ce2:	d83a      	bhi.n	8002d5a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8002ce4:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002d21 	.word	0x08002d21
 8002cf0:	08002d5b 	.word	0x08002d5b
 8002cf4:	08002d5b 	.word	0x08002d5b
 8002cf8:	08002d5b 	.word	0x08002d5b
 8002cfc:	08002d29 	.word	0x08002d29
 8002d00:	08002d5b 	.word	0x08002d5b
 8002d04:	08002d5b 	.word	0x08002d5b
 8002d08:	08002d5b 	.word	0x08002d5b
 8002d0c:	08002d31 	.word	0x08002d31
 8002d10:	08002d5b 	.word	0x08002d5b
 8002d14:	08002d5b 	.word	0x08002d5b
 8002d18:	08002d5b 	.word	0x08002d5b
 8002d1c:	08002d45 	.word	0x08002d45
          frequency = HAL_RCC_GetPCLK1Freq();
 8002d20:	f7ff f9e6 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8002d24:	61f8      	str	r0, [r7, #28]
          break;
 8002d26:	e01d      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8002d28:	f7ff f94a 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002d2c:	61f8      	str	r0, [r7, #28]
          break;
 8002d2e:	e019      	b.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d30:	4b29      	ldr	r3, [pc, #164]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3c:	d10f      	bne.n	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8002d3e:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8002d40:	61fb      	str	r3, [r7, #28]
          break;
 8002d42:	e00c      	b.n	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d107      	bne.n	8002d62 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8002d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d56:	61fb      	str	r3, [r7, #28]
          break;
 8002d58:	e003      	b.n	8002d62 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8002d5a:	bf00      	nop
 8002d5c:	e300      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002d5e:	bf00      	nop
 8002d60:	e2fe      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002d62:	bf00      	nop
        break;
 8002d64:	e2fc      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002d66:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b30      	cmp	r3, #48	; 0x30
 8002d76:	d021      	beq.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2b30      	cmp	r3, #48	; 0x30
 8002d7c:	d829      	bhi.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d011      	beq.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d823      	bhi.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d004      	beq.n	8002da0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8002d96:	e01c      	b.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002d98:	f7ff f9aa 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8002d9c:	61f8      	str	r0, [r7, #28]
          break;
 8002d9e:	e026      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          frequency = HAL_RCC_GetSysClockFreq();
 8002da0:	f7ff f90e 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002da4:	61f8      	str	r0, [r7, #28]
          break;
 8002da6:	e022      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db4:	d118      	bne.n	8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
            frequency = HSI_VALUE;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8002db8:	61fb      	str	r3, [r7, #28]
          break;
 8002dba:	e015      	b.n	8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d110      	bne.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
            frequency = LSE_VALUE;
 8002dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dce:	61fb      	str	r3, [r7, #28]
          break;
 8002dd0:	e00c      	b.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          break;
 8002dd2:	bf00      	nop
 8002dd4:	e2c4      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08008eb0 	.word	0x08008eb0
 8002de0:	02dc6c00 	.word	0x02dc6c00
 8002de4:	00f42400 	.word	0x00f42400
          break;
 8002de8:	bf00      	nop
 8002dea:	e2b9      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002dec:	bf00      	nop
        break;
 8002dee:	e2b7      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002df0:	4ba3      	ldr	r3, [pc, #652]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8002e00:	d021      	beq.n	8002e46 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2bc0      	cmp	r3, #192	; 0xc0
 8002e06:	d829      	bhi.n	8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b80      	cmp	r3, #128	; 0x80
 8002e0c:	d011      	beq.n	8002e32 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b80      	cmp	r3, #128	; 0x80
 8002e12:	d823      	bhi.n	8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d004      	beq.n	8002e2a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
          break;
 8002e20:	e01c      	b.n	8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002e22:	f7ff f965 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8002e26:	61f8      	str	r0, [r7, #28]
          break;
 8002e28:	e01d      	b.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = HAL_RCC_GetSysClockFreq();
 8002e2a:	f7ff f8c9 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002e2e:	61f8      	str	r0, [r7, #28]
          break;
 8002e30:	e019      	b.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e32:	4b93      	ldr	r3, [pc, #588]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3e:	d10f      	bne.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            frequency = HSI_VALUE;
 8002e40:	4b90      	ldr	r3, [pc, #576]	; (8003084 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8002e42:	61fb      	str	r3, [r7, #28]
          break;
 8002e44:	e00c      	b.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e46:	4b8e      	ldr	r3, [pc, #568]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d107      	bne.n	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = LSE_VALUE;
 8002e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e58:	61fb      	str	r3, [r7, #28]
          break;
 8002e5a:	e003      	b.n	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8002e5c:	bf00      	nop
 8002e5e:	e27f      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002e60:	bf00      	nop
 8002e62:	e27d      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002e64:	bf00      	nop
        break;
 8002e66:	e27b      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002e68:	4b85      	ldr	r3, [pc, #532]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e7a:	d025      	beq.n	8002ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e82:	d82c      	bhi.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e8a:	d013      	beq.n	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e92:	d824      	bhi.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea0:	d004      	beq.n	8002eac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          break;
 8002ea2:	e01c      	b.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002ea4:	f7ff f924 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8002ea8:	61f8      	str	r0, [r7, #28]
          break;
 8002eaa:	e01d      	b.n	8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8002eac:	f7ff f888 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002eb0:	61f8      	str	r0, [r7, #28]
          break;
 8002eb2:	e019      	b.n	8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002eb4:	4b72      	ldr	r3, [pc, #456]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = HSI_VALUE;
 8002ec2:	4b70      	ldr	r3, [pc, #448]	; (8003084 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8002ec4:	61fb      	str	r3, [r7, #28]
          break;
 8002ec6:	e00c      	b.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ec8:	4b6d      	ldr	r3, [pc, #436]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
            frequency = LSE_VALUE;
 8002ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eda:	61fb      	str	r3, [r7, #28]
          break;
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8002ede:	bf00      	nop
 8002ee0:	e23e      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002ee2:	bf00      	nop
 8002ee4:	e23c      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002ee6:	bf00      	nop
        break;
 8002ee8:	e23a      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002eea:	4b65      	ldr	r3, [pc, #404]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002efc:	d025      	beq.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f04:	d82c      	bhi.n	8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f0c:	d013      	beq.n	8002f36 <HAL_RCCEx_GetPeriphCLKFreq+0x736>
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f14:	d824      	bhi.n	8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d004      	beq.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f22:	d004      	beq.n	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          break;
 8002f24:	e01c      	b.n	8002f60 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f26:	f7ff f8e3 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8002f2a:	61f8      	str	r0, [r7, #28]
          break;
 8002f2c:	e01d      	b.n	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f2e:	f7ff f847 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002f32:	61f8      	str	r0, [r7, #28]
          break;
 8002f34:	e019      	b.n	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f36:	4b52      	ldr	r3, [pc, #328]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f42:	d10f      	bne.n	8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
            frequency = HSI_VALUE;
 8002f44:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8002f46:	61fb      	str	r3, [r7, #28]
          break;
 8002f48:	e00c      	b.n	8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f4a:	4b4d      	ldr	r3, [pc, #308]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d107      	bne.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
            frequency = LSE_VALUE;
 8002f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5c:	61fb      	str	r3, [r7, #28]
          break;
 8002f5e:	e003      	b.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 8002f60:	bf00      	nop
 8002f62:	e1fd      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002f64:	bf00      	nop
 8002f66:	e1fb      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8002f68:	bf00      	nop
        break;
 8002f6a:	e1f9      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002f6c:	4b44      	ldr	r3, [pc, #272]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f7e:	d00c      	beq.n	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f86:	d864      	bhi.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f96:	d030      	beq.n	8002ffa <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
          break;
 8002f98:	e05b      	b.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f9a:	f7ff f811 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002f9e:	61f8      	str	r0, [r7, #28]
          break;
 8002fa0:	e05c      	b.n	800305c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8002fa2:	4b37      	ldr	r3, [pc, #220]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fae:	d152      	bne.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8002fb0:	4b33      	ldr	r3, [pc, #204]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d04c      	beq.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fc6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	fb02 f203 	mul.w	r2, r2, r3
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	3301      	adds	r3, #1
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8002fe2:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	0e5b      	lsrs	r3, r3, #25
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	3301      	adds	r3, #1
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	61fb      	str	r3, [r7, #28]
          break;
 8002ff8:	e02d      	b.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003006:	d128      	bne.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d022      	beq.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800301e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	fb02 f203 	mul.w	r2, r2, r3
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	3301      	adds	r3, #1
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	0e5b      	lsrs	r3, r3, #25
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	3301      	adds	r3, #1
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	61fb      	str	r3, [r7, #28]
          break;
 8003050:	e003      	b.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 8003052:	bf00      	nop
 8003054:	e184      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8003056:	bf00      	nop
 8003058:	e182      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800305a:	bf00      	nop
        break;
 800305c:	e180      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003068:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d103      	bne.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003070:	f7ff f854 	bl	800211c <HAL_RCC_GetPCLK2Freq>
 8003074:	61f8      	str	r0, [r7, #28]
        break;
 8003076:	e173      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetSysClockFreq();
 8003078:	f7fe ffa2 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800307c:	61f8      	str	r0, [r7, #28]
        break;
 800307e:	e16f      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8003080:	40021000 	.word	0x40021000
 8003084:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003088:	4ba7      	ldr	r3, [pc, #668]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309a:	d013      	beq.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a2:	d819      	bhi.n	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b0:	d004      	beq.n	80030bc <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
          break;
 80030b2:	e011      	b.n	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80030b4:	f7ff f81c 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 80030b8:	61f8      	str	r0, [r7, #28]
          break;
 80030ba:	e010      	b.n	80030de <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 80030bc:	f7fe ff80 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 80030c0:	61f8      	str	r0, [r7, #28]
          break;
 80030c2:	e00c      	b.n	80030de <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80030c4:	4b98      	ldr	r3, [pc, #608]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d0:	d104      	bne.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
            frequency = HSI_VALUE;
 80030d2:	4b96      	ldr	r3, [pc, #600]	; (800332c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 80030d4:	61fb      	str	r3, [r7, #28]
          break;
 80030d6:	e001      	b.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          break;
 80030d8:	bf00      	nop
 80030da:	e141      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80030dc:	bf00      	nop
        break;
 80030de:	e13f      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80030e0:	4b91      	ldr	r3, [pc, #580]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f2:	d013      	beq.n	800311c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030fa:	d819      	bhi.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003108:	d004      	beq.n	8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 800310a:	e011      	b.n	8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
          frequency = HAL_RCC_GetPCLK1Freq();
 800310c:	f7fe fff0 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003110:	61f8      	str	r0, [r7, #28]
          break;
 8003112:	e010      	b.n	8003136 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 8003114:	f7fe ff54 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8003118:	61f8      	str	r0, [r7, #28]
          break;
 800311a:	e00c      	b.n	8003136 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800311c:	4b82      	ldr	r3, [pc, #520]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003128:	d104      	bne.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            frequency = HSI_VALUE;
 800312a:	4b80      	ldr	r3, [pc, #512]	; (800332c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800312c:	61fb      	str	r3, [r7, #28]
          break;
 800312e:	e001      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          break;
 8003130:	bf00      	nop
 8003132:	e115      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8003134:	bf00      	nop
        break;
 8003136:	e113      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003138:	4b7b      	ldr	r3, [pc, #492]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800314a:	d013      	beq.n	8003174 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003152:	d819      	bhi.n	8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d004      	beq.n	8003164 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003160:	d004      	beq.n	800316c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          break;
 8003162:	e011      	b.n	8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003164:	f7fe ffc4 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003168:	61f8      	str	r0, [r7, #28]
          break;
 800316a:	e010      	b.n	800318e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          frequency = HAL_RCC_GetSysClockFreq();
 800316c:	f7fe ff28 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8003170:	61f8      	str	r0, [r7, #28]
          break;
 8003172:	e00c      	b.n	800318e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003174:	4b6c      	ldr	r3, [pc, #432]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	d104      	bne.n	800318c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency = HSI_VALUE;
 8003182:	4b6a      	ldr	r3, [pc, #424]	; (800332c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8003184:	61fb      	str	r3, [r7, #28]
          break;
 8003186:	e001      	b.n	800318c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          break;
 8003188:	bf00      	nop
 800318a:	e0e9      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800318c:	bf00      	nop
        break;
 800318e:	e0e7      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8003190:	4b65      	ldr	r3, [pc, #404]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8003192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d011      	beq.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d818      	bhi.n	80031da <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d004      	beq.n	80031be <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          break;
 80031b4:	e011      	b.n	80031da <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = HAL_RCC_GetPCLK1Freq();
 80031b6:	f7fe ff9b 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 80031ba:	61f8      	str	r0, [r7, #28]
          break;
 80031bc:	e010      	b.n	80031e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          frequency = HAL_RCC_GetSysClockFreq();
 80031be:	f7fe feff 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 80031c2:	61f8      	str	r0, [r7, #28]
          break;
 80031c4:	e00c      	b.n	80031e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80031c6:	4b58      	ldr	r3, [pc, #352]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d2:	d104      	bne.n	80031de <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
            frequency = HSI_VALUE;
 80031d4:	4b55      	ldr	r3, [pc, #340]	; (800332c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 80031d6:	61fb      	str	r3, [r7, #28]
          break;
 80031d8:	e001      	b.n	80031de <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          break;
 80031da:	bf00      	nop
 80031dc:	e0c0      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80031de:	bf00      	nop
        break;
 80031e0:	e0be      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80031e2:	4b51      	ldr	r3, [pc, #324]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031f4:	d02c      	beq.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031fc:	d833      	bhi.n	8003266 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003204:	d01a      	beq.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800320c:	d82b      	bhi.n	8003266 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d004      	beq.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800321a:	d004      	beq.n	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
          break;
 800321c:	e023      	b.n	8003266 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          frequency = HAL_RCC_GetPCLK1Freq();
 800321e:	f7fe ff67 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003222:	61f8      	str	r0, [r7, #28]
          break;
 8003224:	e026      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003226:	4b40      	ldr	r3, [pc, #256]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8003228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b02      	cmp	r3, #2
 8003232:	d11a      	bne.n	800326a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
              frequency = LSI_VALUE;
 8003234:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003238:	61fb      	str	r3, [r7, #28]
          break;
 800323a:	e016      	b.n	800326a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800323c:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003248:	d111      	bne.n	800326e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = HSI_VALUE;
 800324a:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800324c:	61fb      	str	r3, [r7, #28]
          break;
 800324e:	e00e      	b.n	800326e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003250:	4b35      	ldr	r3, [pc, #212]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b02      	cmp	r3, #2
 800325c:	d109      	bne.n	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
            frequency = LSE_VALUE;
 800325e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003262:	61fb      	str	r3, [r7, #28]
          break;
 8003264:	e005      	b.n	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          break;
 8003266:	bf00      	nop
 8003268:	e07a      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800326a:	bf00      	nop
 800326c:	e078      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800326e:	bf00      	nop
 8003270:	e076      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8003272:	bf00      	nop
        break;
 8003274:	e074      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003276:	4b2c      	ldr	r3, [pc, #176]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003288:	d02c      	beq.n	80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003290:	d833      	bhi.n	80032fa <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003298:	d01a      	beq.n	80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032a0:	d82b      	bhi.n	80032fa <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d004      	beq.n	80032b2 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ae:	d004      	beq.n	80032ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
          break;
 80032b0:	e023      	b.n	80032fa <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
          frequency = HAL_RCC_GetPCLK1Freq();
 80032b2:	f7fe ff1d 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 80032b6:	61f8      	str	r0, [r7, #28]
          break;
 80032b8:	e026      	b.n	8003308 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80032bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d11a      	bne.n	80032fe <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
              frequency = LSI_VALUE;
 80032c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80032cc:	61fb      	str	r3, [r7, #28]
          break;
 80032ce:	e016      	b.n	80032fe <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80032d0:	4b15      	ldr	r3, [pc, #84]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	d111      	bne.n	8003302 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
            frequency = HSI_VALUE;
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 80032e0:	61fb      	str	r3, [r7, #28]
          break;
 80032e2:	e00e      	b.n	8003302 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80032e4:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d109      	bne.n	8003306 <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
            frequency = LSE_VALUE;
 80032f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f6:	61fb      	str	r3, [r7, #28]
          break;
 80032f8:	e005      	b.n	8003306 <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
          break;
 80032fa:	bf00      	nop
 80032fc:	e030      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80032fe:	bf00      	nop
 8003300:	e02e      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8003302:	bf00      	nop
 8003304:	e02c      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8003306:	bf00      	nop
        break;
 8003308:	e02a      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003322:	d009      	beq.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
          break;
 8003324:	e012      	b.n	800334c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 8003330:	f7fe fede 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003334:	61f8      	str	r0, [r7, #28]
          break;
 8003336:	e009      	b.n	800334c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003344:	d101      	bne.n	800334a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
            frequency = HSI_VALUE;
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>)
 8003348:	61fb      	str	r3, [r7, #28]
          break;
 800334a:	bf00      	nop
        break;
 800334c:	e008      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800334e:	bf00      	nop
 8003350:	e006      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 8003352:	bf00      	nop
 8003354:	e004      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 8003356:	bf00      	nop
 8003358:	e002      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800335e:	bf00      	nop
    }
  }

  return(frequency);
 8003360:	69fb      	ldr	r3, [r7, #28]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	00f42400 	.word	0x00f42400

08003374 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003382:	4b74      	ldr	r3, [pc, #464]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d018      	beq.n	80033c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800338e:	4b71      	ldr	r3, [pc, #452]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0203 	and.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d10d      	bne.n	80033ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
       ||
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033a6:	4b6b      	ldr	r3, [pc, #428]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
       ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d047      	beq.n	800344a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	e044      	b.n	800344a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d018      	beq.n	80033fa <RCCEx_PLLSAI1_Config+0x86>
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d825      	bhi.n	8003418 <RCCEx_PLLSAI1_Config+0xa4>
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d002      	beq.n	80033d6 <RCCEx_PLLSAI1_Config+0x62>
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d009      	beq.n	80033e8 <RCCEx_PLLSAI1_Config+0x74>
 80033d4:	e020      	b.n	8003418 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033d6:	4b5f      	ldr	r3, [pc, #380]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11d      	bne.n	800341e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e6:	e01a      	b.n	800341e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033e8:	4b5a      	ldr	r3, [pc, #360]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f8:	e013      	b.n	8003422 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033fa:	4b56      	ldr	r3, [pc, #344]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10f      	bne.n	8003426 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003406:	4b53      	ldr	r3, [pc, #332]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003416:	e006      	b.n	8003426 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      break;
 800341c:	e004      	b.n	8003428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800341e:	bf00      	nop
 8003420:	e002      	b.n	8003428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003426:	bf00      	nop
    }

    if(status == HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800342e:	4b49      	ldr	r3, [pc, #292]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	430b      	orrs	r3, r1
 8003444:	4943      	ldr	r1, [pc, #268]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003446:	4313      	orrs	r3, r2
 8003448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d17c      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003450:	4b40      	ldr	r3, [pc, #256]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a3f      	ldr	r2, [pc, #252]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003456:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800345a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345c:	f7fd fb08 	bl	8000a70 <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003462:	e009      	b.n	8003478 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003464:	f7fd fb04 	bl	8000a70 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d902      	bls.n	8003478 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	73fb      	strb	r3, [r7, #15]
        break;
 8003476:	e005      	b.n	8003484 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003478:	4b36      	ldr	r3, [pc, #216]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ef      	bne.n	8003464 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d15f      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d110      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003490:	4b30      	ldr	r3, [pc, #192]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003498:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6892      	ldr	r2, [r2, #8]
 80034a0:	0211      	lsls	r1, r2, #8
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68d2      	ldr	r2, [r2, #12]
 80034a6:	06d2      	lsls	r2, r2, #27
 80034a8:	430a      	orrs	r2, r1
 80034aa:	492a      	ldr	r1, [pc, #168]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	610b      	str	r3, [r1, #16]
 80034b0:	e027      	b.n	8003502 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d112      	bne.n	80034de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034b8:	4b26      	ldr	r3, [pc, #152]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6892      	ldr	r2, [r2, #8]
 80034c8:	0211      	lsls	r1, r2, #8
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6912      	ldr	r2, [r2, #16]
 80034ce:	0852      	lsrs	r2, r2, #1
 80034d0:	3a01      	subs	r2, #1
 80034d2:	0552      	lsls	r2, r2, #21
 80034d4:	430a      	orrs	r2, r1
 80034d6:	491f      	ldr	r1, [pc, #124]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	610b      	str	r3, [r1, #16]
 80034dc:	e011      	b.n	8003502 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034de:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6892      	ldr	r2, [r2, #8]
 80034ee:	0211      	lsls	r1, r2, #8
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6952      	ldr	r2, [r2, #20]
 80034f4:	0852      	lsrs	r2, r2, #1
 80034f6:	3a01      	subs	r2, #1
 80034f8:	0652      	lsls	r2, r2, #25
 80034fa:	430a      	orrs	r2, r1
 80034fc:	4915      	ldr	r1, [pc, #84]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003502:	4b14      	ldr	r3, [pc, #80]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a13      	ldr	r2, [pc, #76]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003508:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800350c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350e:	f7fd faaf 	bl	8000a70 <HAL_GetTick>
 8003512:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003514:	e009      	b.n	800352a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003516:	f7fd faab 	bl	8000a70 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d902      	bls.n	800352a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	73fb      	strb	r3, [r7, #15]
          break;
 8003528:	e005      	b.n	8003536 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800352a:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0ef      	beq.n	8003516 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	4903      	ldr	r1, [pc, #12]	; (8003554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003546:	4313      	orrs	r3, r2
 8003548:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800354a:	7bfb      	ldrb	r3, [r7, #15]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000

08003558 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003566:	4b69      	ldr	r3, [pc, #420]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d018      	beq.n	80035a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003572:	4b66      	ldr	r3, [pc, #408]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0203 	and.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d10d      	bne.n	800359e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
       ||
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800358a:	4b60      	ldr	r3, [pc, #384]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
       ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d047      	beq.n	800362e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	e044      	b.n	800362e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d018      	beq.n	80035de <RCCEx_PLLSAI2_Config+0x86>
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d825      	bhi.n	80035fc <RCCEx_PLLSAI2_Config+0xa4>
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d002      	beq.n	80035ba <RCCEx_PLLSAI2_Config+0x62>
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d009      	beq.n	80035cc <RCCEx_PLLSAI2_Config+0x74>
 80035b8:	e020      	b.n	80035fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035ba:	4b54      	ldr	r3, [pc, #336]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d11d      	bne.n	8003602 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ca:	e01a      	b.n	8003602 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035cc:	4b4f      	ldr	r3, [pc, #316]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d116      	bne.n	8003606 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035dc:	e013      	b.n	8003606 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035de:	4b4b      	ldr	r3, [pc, #300]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035ea:	4b48      	ldr	r3, [pc, #288]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035fa:	e006      	b.n	800360a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003600:	e004      	b.n	800360c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003602:	bf00      	nop
 8003604:	e002      	b.n	800360c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800360a:	bf00      	nop
    }

    if(status == HAL_OK)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10d      	bne.n	800362e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003612:	4b3e      	ldr	r3, [pc, #248]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	430b      	orrs	r3, r1
 8003628:	4938      	ldr	r1, [pc, #224]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 800362a:	4313      	orrs	r3, r2
 800362c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d166      	bne.n	8003702 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003634:	4b35      	ldr	r3, [pc, #212]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a34      	ldr	r2, [pc, #208]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 800363a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003640:	f7fd fa16 	bl	8000a70 <HAL_GetTick>
 8003644:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003646:	e009      	b.n	800365c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003648:	f7fd fa12 	bl	8000a70 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d902      	bls.n	800365c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	73fb      	strb	r3, [r7, #15]
        break;
 800365a:	e005      	b.n	8003668 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800365c:	4b2b      	ldr	r3, [pc, #172]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ef      	bne.n	8003648 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d149      	bne.n	8003702 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d110      	bne.n	8003696 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003674:	4b25      	ldr	r3, [pc, #148]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800367c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6892      	ldr	r2, [r2, #8]
 8003684:	0211      	lsls	r1, r2, #8
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68d2      	ldr	r2, [r2, #12]
 800368a:	06d2      	lsls	r2, r2, #27
 800368c:	430a      	orrs	r2, r1
 800368e:	491f      	ldr	r1, [pc, #124]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003690:	4313      	orrs	r3, r2
 8003692:	614b      	str	r3, [r1, #20]
 8003694:	e011      	b.n	80036ba <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800369e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	0211      	lsls	r1, r2, #8
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6912      	ldr	r2, [r2, #16]
 80036ac:	0852      	lsrs	r2, r2, #1
 80036ae:	3a01      	subs	r2, #1
 80036b0:	0652      	lsls	r2, r2, #25
 80036b2:	430a      	orrs	r2, r1
 80036b4:	4915      	ldr	r1, [pc, #84]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a13      	ldr	r2, [pc, #76]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 80036c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c6:	f7fd f9d3 	bl	8000a70 <HAL_GetTick>
 80036ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036cc:	e009      	b.n	80036e2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036ce:	f7fd f9cf 	bl	8000a70 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d902      	bls.n	80036e2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	73fb      	strb	r3, [r7, #15]
          break;
 80036e0:	e005      	b.n	80036ee <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ef      	beq.n	80036ce <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	4903      	ldr	r1, [pc, #12]	; (800370c <RCCEx_PLLSAI2_Config+0x1b4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003702:	7bfb      	ldrb	r3, [r7, #15]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40021000 	.word	0x40021000

08003710 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372c:	d10c      	bne.n	8003748 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800372e:	4b77      	ldr	r3, [pc, #476]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003738:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003740:	d112      	bne.n	8003768 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003742:	4b73      	ldr	r3, [pc, #460]	; (8003910 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	e00f      	b.n	8003768 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	d10b      	bne.n	8003768 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003750:	4b6e      	ldr	r3, [pc, #440]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800375a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003762:	d101      	bne.n	8003768 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8003764:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8003766:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 80c6 	bne.w	80038fc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800377a:	d003      	beq.n	8003784 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003782:	d13b      	bne.n	80037fc <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003784:	4b61      	ldr	r3, [pc, #388]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003790:	f040 80b3 	bne.w	80038fa <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8003794:	4b5d      	ldr	r3, [pc, #372]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80ac 	beq.w	80038fa <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80037a2:	4b5a      	ldr	r3, [pc, #360]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	3301      	adds	r3, #1
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80037b6:	4b55      	ldr	r3, [pc, #340]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	0a1b      	lsrs	r3, r3, #8
 80037bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80037c2:	4b52      	ldr	r3, [pc, #328]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	0edb      	lsrs	r3, r3, #27
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80037d4:	4b4d      	ldr	r3, [pc, #308]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 80037e0:	2311      	movs	r3, #17
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	e001      	b.n	80037ea <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 80037e6:	2307      	movs	r3, #7
 80037e8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	fb02 f203 	mul.w	r2, r2, r3
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80037fa:	e07e      	b.n	80038fa <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d139      	bne.n	8003876 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003802:	4b42      	ldr	r3, [pc, #264]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800380a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800380e:	d175      	bne.n	80038fc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8003810:	4b3e      	ldr	r3, [pc, #248]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d06f      	beq.n	80038fc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800381c:	4b3b      	ldr	r3, [pc, #236]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	3301      	adds	r3, #1
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003830:	4b36      	ldr	r3, [pc, #216]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800383c:	4b33      	ldr	r3, [pc, #204]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	0edb      	lsrs	r3, r3, #27
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800384e:	4b2f      	ldr	r3, [pc, #188]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800385a:	2311      	movs	r3, #17
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e001      	b.n	8003864 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8003860:	2307      	movs	r3, #7
 8003862:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	fb02 f203 	mul.w	r2, r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	e042      	b.n	80038fc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800387c:	d003      	beq.n	8003886 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003884:	d13a      	bne.n	80038fc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8003886:	4b21      	ldr	r3, [pc, #132]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800388e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003892:	d133      	bne.n	80038fc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8003894:	4b1d      	ldr	r3, [pc, #116]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d02d      	beq.n	80038fc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80038a0:	4b1a      	ldr	r3, [pc, #104]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	3301      	adds	r3, #1
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80038b4:	4b15      	ldr	r3, [pc, #84]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038be:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	0edb      	lsrs	r3, r3, #27
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80038d2:	4b0e      	ldr	r3, [pc, #56]	; (800390c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 80038de:	2311      	movs	r3, #17
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e001      	b.n	80038e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 80038e4:	2307      	movs	r3, #7
 80038e6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	fb02 f203 	mul.w	r2, r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	e000      	b.n	80038fc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80038fa:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80038fc:	69fb      	ldr	r3, [r7, #28]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3724      	adds	r7, #36	; 0x24
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	001fff68 	.word	0x001fff68

08003914 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e022      	b.n	800396c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d105      	bne.n	800393e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7fc feb3 	bl	80006a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2203      	movs	r2, #3
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f814 	bl	8003974 <HAL_SD_InitCard>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e00a      	b.n	800396c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003974:	b5b0      	push	{r4, r5, r7, lr}
 8003976:	b08e      	sub	sp, #56	; 0x38
 8003978:	af04      	add	r7, sp, #16
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800397c:	2300      	movs	r3, #0
 800397e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003984:	2300      	movs	r3, #0
 8003986:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8003990:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003994:	f7fe ff34 	bl	8002800 <HAL_RCCEx_GetPeriphCLKFreq>
 8003998:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e07b      	b.n	8003aac <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	09db      	lsrs	r3, r3, #7
 80039b8:	4a3e      	ldr	r2, [pc, #248]	; (8003ab4 <HAL_SD_InitCard+0x140>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	3b02      	subs	r3, #2
 80039c2:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681d      	ldr	r5, [r3, #0]
 80039c8:	466c      	mov	r4, sp
 80039ca:	f107 0314 	add.w	r3, r7, #20
 80039ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80039d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039d6:	f107 0308 	add.w	r3, r7, #8
 80039da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039dc:	4628      	mov	r0, r5
 80039de:	f001 fabf 	bl	8004f60 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f0:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 fafd 	bl	8004ff6 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	3302      	adds	r3, #2
 8003a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003a18:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <HAL_SD_InitCard+0x144>)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	3301      	adds	r3, #1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd f830 	bl	8000a88 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 ffdd 	bl	80049e8 <SD_PowerON>
 8003a2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e02e      	b.n	8003aac <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fefe 	bl	8004850 <SD_InitCard>
 8003a54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00b      	beq.n	8003a74 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e01b      	b.n	8003aac <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 fb4d 	bl	800511c <SDMMC_CmdBlockLength>
 8003a82:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00f      	beq.n	8003aaa <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <HAL_SD_InitCard+0x148>)
 8003a90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3728      	adds	r7, #40	; 0x28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab4:	014f8b59 	.word	0x014f8b59
 8003ab8:	00012110 	.word	0x00012110
 8003abc:	004005ff 	.word	0x004005ff

08003ac0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	; 0x30
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0a9      	b.n	8003c3c <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	f040 80a2 	bne.w	8003c3a <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	441a      	add	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d907      	bls.n	8003b1a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e090      	b.n	8003c3c <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	4a45      	ldr	r2, [pc, #276]	; (8003c44 <HAL_SD_ReadBlocks_DMA+0x184>)
 8003b30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	4a44      	ldr	r2, [pc, #272]	; (8003c48 <HAL_SD_ReadBlocks_DMA+0x188>)
 8003b38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	2200      	movs	r2, #0
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3380      	adds	r3, #128	; 0x80
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	025b      	lsls	r3, r3, #9
 8003b54:	089b      	lsrs	r3, r3, #2
 8003b56:	f7fd f985 	bl	8000e64 <HAL_DMA_Start_IT>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00f      	beq.n	8003b80 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a39      	ldr	r2, [pc, #228]	; (8003c4c <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e05d      	b.n	8003c3c <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0208 	orr.w	r2, r2, #8
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d002      	beq.n	8003b9e <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	025b      	lsls	r3, r3, #9
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	025b      	lsls	r3, r3, #9
 8003ba8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003baa:	2390      	movs	r3, #144	; 0x90
 8003bac:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f107 0210 	add.w	r2, r7, #16
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 fa7d 	bl	80050c4 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d90a      	bls.n	8003be6 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2282      	movs	r2, #130	; 0x82
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f001 fae1 	bl	80051a4 <SDMMC_CmdReadMultiBlock>
 8003be2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003be4:	e009      	b.n	8003bfa <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2281      	movs	r2, #129	; 0x81
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 fab4 	bl	8005160 <SDMMC_CmdReadSingleBlock>
 8003bf8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d012      	beq.n	8003c26 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a11      	ldr	r2, [pc, #68]	; (8003c4c <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e00a      	b.n	8003c3c <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003c34:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e000      	b.n	8003c3c <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3730      	adds	r7, #48	; 0x30
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	0800466b 	.word	0x0800466b
 8003c48:	080046dd 	.word	0x080046dd
 8003c4c:	004005ff 	.word	0x004005ff

08003c50 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08c      	sub	sp, #48	; 0x30
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d107      	bne.n	8003c78 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0ac      	b.n	8003dd2 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 80a5 	bne.w	8003dd0 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	441a      	add	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d907      	bls.n	8003caa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e093      	b.n	8003dd2 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2203      	movs	r2, #3
 8003cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	4a47      	ldr	r2, [pc, #284]	; (8003ddc <HAL_SD_WriteBlocks_DMA+0x18c>)
 8003cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	4a46      	ldr	r2, [pc, #280]	; (8003de0 <HAL_SD_WriteBlocks_DMA+0x190>)
 8003cc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	2200      	movs	r2, #0
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d002      	beq.n	8003ce0 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	025b      	lsls	r3, r3, #9
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d90a      	bls.n	8003cfc <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	22a0      	movs	r2, #160	; 0xa0
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 fa9a 	bl	800522c <SDMMC_CmdWriteMultiBlock>
 8003cf8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003cfa:	e009      	b.n	8003d10 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2290      	movs	r2, #144	; 0x90
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f001 fa6d 	bl	80051e8 <SDMMC_CmdWriteSingleBlock>
 8003d0e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d012      	beq.n	8003d3c <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a32      	ldr	r2, [pc, #200]	; (8003de4 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e04a      	b.n	8003dd2 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0208 	orr.w	r2, r2, #8
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3380      	adds	r3, #128	; 0x80
 8003d58:	461a      	mov	r2, r3
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	025b      	lsls	r3, r3, #9
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	f7fd f880 	bl	8000e64 <HAL_DMA_Start_IT>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d012      	beq.n	8003d90 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1d      	ldr	r2, [pc, #116]	; (8003de4 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003d70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e020      	b.n	8003dd2 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d94:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	025b      	lsls	r3, r3, #9
 8003d9a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003d9c:	2390      	movs	r3, #144	; 0x90
 8003d9e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003da8:	2301      	movs	r3, #1
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f107 0210 	add.w	r2, r7, #16
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 f984 	bl	80050c4 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 021a 	orr.w	r2, r2, #26
 8003dca:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3730      	adds	r7, #48	; 0x30
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	08004641 	.word	0x08004641
 8003de0:	080046dd 	.word	0x080046dd
 8003de4:	004005ff 	.word	0x004005ff

08003de8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_SD_IRQHandler+0x2e>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f001 f800 	bl	8004e14 <SD_Read_IT>
 8003e14:	e155      	b.n	80040c2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 808f 	beq.w	8003f44 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003e3e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003e42:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d039      	beq.n	8003ed2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d104      	bne.n	8003e72 <HAL_SD_IRQHandler+0x8a>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d011      	beq.n	8003e96 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f001 f9fa 	bl	8005270 <SDMMC_CmdStopTransfer>
 8003e7c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f91f 	bl	80040d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d104      	bne.n	8003ec2 <HAL_SD_IRQHandler+0xda>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f001 fe70 	bl	8005ba8 <HAL_SD_RxCpltCallback>
 8003ec8:	e0fb      	b.n	80040c2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f001 fe62 	bl	8005b94 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8003ed0:	e0f7      	b.n	80040c2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80f2 	beq.w	80040c2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d011      	beq.n	8003f0c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 f9bf 	bl	8005270 <SDMMC_CmdStopTransfer>
 8003ef2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f8e4 	bl	80040d4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f040 80d5 	bne.w	80040c2 <HAL_SD_IRQHandler+0x2da>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f040 80cf 	bne.w	80040c2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0208 	bic.w	r2, r2, #8
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f001 fe29 	bl	8005b94 <HAL_SD_TxCpltCallback>
}
 8003f42:	e0be      	b.n	80040c2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <HAL_SD_IRQHandler+0x17c>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 ffaa 	bl	8004eb6 <SD_Write_IT>
 8003f62:	e0ae      	b.n	80040c2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80a7 	beq.w	80040c2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	f043 0202 	orr.w	r2, r3, #2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	f043 0208 	orr.w	r2, r3, #8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	f043 0220 	orr.w	r2, r3, #32
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	f043 0210 	orr.w	r2, r3, #16
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003ff4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 f938 	bl	8005270 <SDMMC_CmdStopTransfer>
 8004000:	4602      	mov	r2, r0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f855 	bl	80040d4 <HAL_SD_ErrorCallback>
}
 800402a:	e04a      	b.n	80040c2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d045      	beq.n	80040c2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <HAL_SD_IRQHandler+0x262>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d011      	beq.n	800406e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <HAL_SD_IRQHandler+0x2e4>)
 8004050:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	4618      	mov	r0, r3
 8004058:	f7fc ff64 	bl	8000f24 <HAL_DMA_Abort_IT>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d02f      	beq.n	80040c2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fb84 	bl	8004774 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800406c:	e029      	b.n	80040c2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d104      	bne.n	8004082 <HAL_SD_IRQHandler+0x29a>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d011      	beq.n	80040a6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <HAL_SD_IRQHandler+0x2e8>)
 8004088:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	4618      	mov	r0, r3
 8004090:	f7fc ff48 	bl	8000f24 <HAL_DMA_Abort_IT>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d013      	beq.n	80040c2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fb9f 	bl	80047e2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80040a4:	e00d      	b.n	80040c2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f001 fd60 	bl	8005b80 <HAL_SD_AbortCallback>
}
 80040c0:	e7ff      	b.n	80040c2 <HAL_SD_IRQHandler+0x2da>
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	08004775 	.word	0x08004775
 80040d0:	080047e3 	.word	0x080047e3

080040d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f6:	0f9b      	lsrs	r3, r3, #30
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004102:	0e9b      	lsrs	r3, r3, #26
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	b2da      	uxtb	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004114:	0e1b      	lsrs	r3, r3, #24
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	b2da      	uxtb	r2, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004126:	0c1b      	lsrs	r3, r3, #16
 8004128:	b2da      	uxtb	r2, r3
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	b2da      	uxtb	r2, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413e:	b2da      	uxtb	r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004148:	0d1b      	lsrs	r3, r3, #20
 800414a:	b29a      	uxth	r2, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	b2da      	uxtb	r2, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004166:	0bdb      	lsrs	r3, r3, #15
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004178:	0b9b      	lsrs	r3, r3, #14
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	b2da      	uxtb	r2, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800418a:	0b5b      	lsrs	r3, r3, #13
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419c:	0b1b      	lsrs	r3, r3, #12
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2200      	movs	r2, #0
 80041ae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d163      	bne.n	8004280 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041bc:	009a      	lsls	r2, r3, #2
 80041be:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041c2:	4013      	ands	r3, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80041c8:	0f92      	lsrs	r2, r2, #30
 80041ca:	431a      	orrs	r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d4:	0edb      	lsrs	r3, r3, #27
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e6:	0e1b      	lsrs	r3, r3, #24
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f8:	0d5b      	lsrs	r3, r3, #21
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	b2da      	uxtb	r2, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420a:	0c9b      	lsrs	r3, r3, #18
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	b2da      	uxtb	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421c:	0bdb      	lsrs	r3, r3, #15
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	b2da      	uxtb	r2, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	7e1b      	ldrb	r3, [r3, #24]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	3302      	adds	r3, #2
 8004240:	2201      	movs	r2, #1
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800424a:	fb02 f203 	mul.w	r2, r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	7a1b      	ldrb	r3, [r3, #8]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	2201      	movs	r2, #1
 800425e:	409a      	lsls	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800426c:	0a52      	lsrs	r2, r2, #9
 800426e:	fb02 f203 	mul.w	r2, r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800427c:	661a      	str	r2, [r3, #96]	; 0x60
 800427e:	e031      	b.n	80042e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004284:	2b01      	cmp	r3, #1
 8004286:	d11d      	bne.n	80042c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800428c:	041b      	lsls	r3, r3, #16
 800428e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	431a      	orrs	r2, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	3301      	adds	r3, #1
 80042a4:	029a      	lsls	r2, r3, #10
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	661a      	str	r2, [r3, #96]	; 0x60
 80042c2:	e00f      	b.n	80042e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a58      	ldr	r2, [pc, #352]	; (800442c <HAL_SD_GetCardCSD+0x344>)
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e09d      	b.n	8004420 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e8:	0b9b      	lsrs	r3, r3, #14
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042fa:	09db      	lsrs	r3, r3, #7
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004302:	b2da      	uxtb	r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004312:	b2da      	uxtb	r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	0fdb      	lsrs	r3, r3, #31
 800431e:	b2da      	uxtb	r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	0f5b      	lsrs	r3, r3, #29
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	b2da      	uxtb	r2, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	0e9b      	lsrs	r3, r3, #26
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	b2da      	uxtb	r2, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	0d9b      	lsrs	r3, r3, #22
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	b2da      	uxtb	r2, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	0d5b      	lsrs	r3, r3, #21
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	b2da      	uxtb	r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	0c1b      	lsrs	r3, r3, #16
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	0bdb      	lsrs	r3, r3, #15
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	0b9b      	lsrs	r3, r3, #14
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	0b5b      	lsrs	r3, r3, #13
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	0b1b      	lsrs	r3, r3, #12
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	0a9b      	lsrs	r3, r3, #10
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800440e:	b2da      	uxtb	r2, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	004005ff 	.word	0x004005ff

08004430 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004488:	b5b0      	push	{r4, r5, r7, lr}
 800448a:	b090      	sub	sp, #64	; 0x40
 800448c:	af04      	add	r7, sp, #16
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2203      	movs	r2, #3
 800449c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d02e      	beq.n	8004506 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ae:	d106      	bne.n	80044be <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38
 80044bc:	e029      	b.n	8004512 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c4:	d10a      	bne.n	80044dc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fb44 	bl	8004b54 <SD_WideBus_Enable>
 80044cc:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
 80044da:	e01a      	b.n	8004512 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fb81 	bl	8004bea <SD_WideBus_Disable>
 80044e8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
 80044f6:	e00c      	b.n	8004512 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	639a      	str	r2, [r3, #56]	; 0x38
 8004504:	e005      	b.n	8004512 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	2b00      	cmp	r3, #0
 8004518:	d007      	beq.n	800452a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a35      	ldr	r2, [pc, #212]	; (80045f4 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8004520:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004528:	e042      	b.n	80045b0 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800452a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800452e:	f7fe f967 	bl	8002800 <HAL_RCCEx_GetPeriphCLKFreq>
 8004532:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	2b00      	cmp	r3, #0
 8004538:	d031      	beq.n	800459e <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	3302      	adds	r3, #2
 800455c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	4a25      	ldr	r2, [pc, #148]	; (80045f8 <HAL_SD_ConfigWideBusOperation+0x170>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d907      	bls.n	8004578 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	4a24      	ldr	r2, [pc, #144]	; (80045fc <HAL_SD_ConfigWideBusOperation+0x174>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	0ddb      	lsrs	r3, r3, #23
 8004572:	3b02      	subs	r3, #2
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	e002      	b.n	800457e <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681d      	ldr	r5, [r3, #0]
 8004582:	466c      	mov	r4, sp
 8004584:	f107 0318 	add.w	r3, r7, #24
 8004588:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800458c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004596:	4628      	mov	r0, r5
 8004598:	f000 fce2 	bl	8004f60 <SDMMC_Init>
 800459c:	e008      	b.n	80045b0 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fdaf 	bl	800511c <SDMMC_CmdBlockLength>
 80045be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80045cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80045e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3730      	adds	r7, #48	; 0x30
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bdb0      	pop	{r4, r5, r7, pc}
 80045f4:	004005ff 	.word	0x004005ff
 80045f8:	017d7840 	.word	0x017d7840
 80045fc:	55e63b89 	.word	0x55e63b89

08004600 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800460c:	f107 030c 	add.w	r3, r7, #12
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fa76 	bl	8004b04 <SD_SendStatus>
 8004618:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	0a5b      	lsrs	r3, r3, #9
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004636:	693b      	ldr	r3, [r7, #16]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800465c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	2b82      	cmp	r3, #130	; 0x82
 800467e:	d111      	bne.n	80046a4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fdf3 	bl	8005270 <SDMMC_CmdStopTransfer>
 800468a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	431a      	orrs	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff fd18 	bl	80040d4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0208 	bic.w	r2, r2, #8
 80046b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f001 fa6b 	bl	8005ba8 <HAL_SD_RxCpltCallback>
#endif
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f8:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d002      	beq.n	8004706 <SD_DMAError+0x2a>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d12d      	bne.n	8004762 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a19      	ldr	r2, [pc, #100]	; (8004770 <SD_DMAError+0x94>)
 800470c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800471c:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	f7ff ff68 	bl	8004600 <HAL_SD_GetCardState>
 8004730:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b06      	cmp	r3, #6
 8004736:	d002      	beq.n	800473e <SD_DMAError+0x62>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b05      	cmp	r3, #5
 800473c:	d10a      	bne.n	8004754 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fd94 	bl	8005270 <SDMMC_CmdStopTransfer>
 8004748:	4602      	mov	r2, r0
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	431a      	orrs	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2200      	movs	r2, #0
 8004760:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8004762:	6978      	ldr	r0, [r7, #20]
 8004764:	f7ff fcb6 	bl	80040d4 <HAL_SD_ErrorCallback>
#endif
}
 8004768:	bf00      	nop
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	004005ff 	.word	0x004005ff

08004774 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f240 523a 	movw	r2, #1338	; 0x53a
 800478a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff ff37 	bl	8004600 <HAL_SD_GetCardState>
 8004792:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b06      	cmp	r3, #6
 80047a6:	d002      	beq.n	80047ae <SD_DMATxAbort+0x3a>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b05      	cmp	r3, #5
 80047ac:	d10a      	bne.n	80047c4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fd5c 	bl	8005270 <SDMMC_CmdStopTransfer>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	431a      	orrs	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d103      	bne.n	80047d4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f001 f9d7 	bl	8005b80 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80047d2:	e002      	b.n	80047da <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff fc7d 	bl	80040d4 <HAL_SD_ErrorCallback>
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff ff00 	bl	8004600 <HAL_SD_GetCardState>
 8004800:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b06      	cmp	r3, #6
 8004814:	d002      	beq.n	800481c <SD_DMARxAbort+0x3a>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b05      	cmp	r3, #5
 800481a:	d10a      	bne.n	8004832 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fd25 	bl	8005270 <SDMMC_CmdStopTransfer>
 8004826:	4602      	mov	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	431a      	orrs	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	2b00      	cmp	r3, #0
 8004838:	d103      	bne.n	8004842 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f001 f9a0 	bl	8005b80 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004840:	e002      	b.n	8004848 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff fc46 	bl	80040d4 <HAL_SD_ErrorCallback>
}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004850:	b5b0      	push	{r4, r5, r7, lr}
 8004852:	b094      	sub	sp, #80	; 0x50
 8004854:	af04      	add	r7, sp, #16
 8004856:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004858:	2301      	movs	r3, #1
 800485a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fbd7 	bl	8005014 <SDMMC_GetPowerState>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800486c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004870:	e0b6      	b.n	80049e0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	2b03      	cmp	r3, #3
 8004878:	d02f      	beq.n	80048da <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fe00 	bl	8005484 <SDMMC_CmdSendCID>
 8004884:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <SD_InitCard+0x40>
    {
      return errorstate;
 800488c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488e:	e0a7      	b.n	80049e0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fc01 	bl	800509e <SDMMC_GetResponse>
 800489c:	4602      	mov	r2, r0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2104      	movs	r1, #4
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fbf8 	bl	800509e <SDMMC_GetResponse>
 80048ae:	4602      	mov	r2, r0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2108      	movs	r1, #8
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fbef 	bl	800509e <SDMMC_GetResponse>
 80048c0:	4602      	mov	r2, r0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	210c      	movs	r1, #12
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fbe6 	bl	800509e <SDMMC_GetResponse>
 80048d2:	4602      	mov	r2, r0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d00d      	beq.n	80048fe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f107 020e 	add.w	r2, r7, #14
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fe06 	bl	80054fe <SDMMC_CmdSetRelAdd>
 80048f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <SD_InitCard+0xae>
    {
      return errorstate;
 80048fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fc:	e070      	b.n	80049e0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	2b03      	cmp	r3, #3
 8004904:	d036      	beq.n	8004974 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004906:	89fb      	ldrh	r3, [r7, #14]
 8004908:	461a      	mov	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 fdd0 	bl	80054c0 <SDMMC_CmdSendCSD>
 8004920:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492a:	e059      	b.n	80049e0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fbb3 	bl	800509e <SDMMC_GetResponse>
 8004938:	4602      	mov	r2, r0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2104      	movs	r1, #4
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fbaa 	bl	800509e <SDMMC_GetResponse>
 800494a:	4602      	mov	r2, r0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2108      	movs	r1, #8
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fba1 	bl	800509e <SDMMC_GetResponse>
 800495c:	4602      	mov	r2, r0
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	210c      	movs	r1, #12
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fb98 	bl	800509e <SDMMC_GetResponse>
 800496e:	4602      	mov	r2, r0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2104      	movs	r1, #4
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fb8f 	bl	800509e <SDMMC_GetResponse>
 8004980:	4603      	mov	r3, r0
 8004982:	0d1a      	lsrs	r2, r3, #20
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004988:	f107 0310 	add.w	r3, r7, #16
 800498c:	4619      	mov	r1, r3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fbaa 	bl	80040e8 <HAL_SD_GetCardCSD>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800499a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800499e:	e01f      	b.n	80049e0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6819      	ldr	r1, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	461a      	mov	r2, r3
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	4608      	mov	r0, r1
 80049b2:	f000 fc7f 	bl	80052b4 <SDMMC_CmdSelDesel>
 80049b6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80049b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <SD_InitCard+0x172>
  {
    return errorstate;
 80049be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c0:	e00e      	b.n	80049e0 <SD_InitCard+0x190>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681d      	ldr	r5, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	466c      	mov	r4, sp
 80049ca:	f103 0210 	add.w	r2, r3, #16
 80049ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80049d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049d4:	3304      	adds	r3, #4
 80049d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049d8:	4628      	mov	r0, r5
 80049da:	f000 fac1 	bl	8004f60 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3740      	adds	r7, #64	; 0x40
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bdb0      	pop	{r4, r5, r7, pc}

080049e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fc7a 	bl	80052fa <SDMMC_CmdGoIdleState>
 8004a06:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	e072      	b.n	8004af8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fc8d 	bl	8005336 <SDMMC_CmdOperCond>
 8004a1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00d      	beq.n	8004a40 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fc63 	bl	80052fa <SDMMC_CmdGoIdleState>
 8004a34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	e05b      	b.n	8004af8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d137      	bne.n	8004abe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fc8d 	bl	8005374 <SDMMC_CmdAppCommand>
 8004a5a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d02d      	beq.n	8004abe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a66:	e047      	b.n	8004af8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fc80 	bl	8005374 <SDMMC_CmdAppCommand>
 8004a74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <SD_PowerON+0x98>
    {
      return errorstate;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	e03b      	b.n	8004af8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	491e      	ldr	r1, [pc, #120]	; (8004b00 <SD_PowerON+0x118>)
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fc96 	bl	80053b8 <SDMMC_CmdAppOperCommand>
 8004a8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a98:	e02e      	b.n	8004af8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fafc 	bl	800509e <SDMMC_GetResponse>
 8004aa6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	0fdb      	lsrs	r3, r3, #31
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <SD_PowerON+0xcc>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <SD_PowerON+0xce>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]

    count++;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	3301      	adds	r3, #1
 8004abc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d802      	bhi.n	8004ace <SD_PowerON+0xe6>
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0cc      	beq.n	8004a68 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d902      	bls.n	8004ade <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004adc:	e00c      	b.n	8004af8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	645a      	str	r2, [r3, #68]	; 0x44
 8004aee:	e002      	b.n	8004af6 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	c1100000 	.word	0xc1100000

08004b04 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004b14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b18:	e018      	b.n	8004b4c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f000 fd0a 	bl	8005540 <SDMMC_CmdSendStatus>
 8004b2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	e009      	b.n	8004b4c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 faad 	bl	800509e <SDMMC_GetResponse>
 8004b44:	4602      	mov	r2, r0
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fa97 	bl	800509e <SDMMC_GetResponse>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b7a:	d102      	bne.n	8004b82 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b80:	e02f      	b.n	8004be2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b82:	f107 030c 	add.w	r3, r7, #12
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f879 	bl	8004c80 <SD_FindSCR>
 8004b8e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	e023      	b.n	8004be2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01c      	beq.n	8004bde <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f000 fbdf 	bl	8005374 <SDMMC_CmdAppCommand>
 8004bb6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	e00f      	b.n	8004be2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fc18 	bl	80053fe <SDMMC_CmdBusWidth>
 8004bce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	e003      	b.n	8004be2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e001      	b.n	8004be2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004bde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fa4c 	bl	800509e <SDMMC_GetResponse>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c10:	d102      	bne.n	8004c18 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c16:	e02f      	b.n	8004c78 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c18:	f107 030c 	add.w	r3, r7, #12
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f82e 	bl	8004c80 <SD_FindSCR>
 8004c24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	e023      	b.n	8004c78 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01c      	beq.n	8004c74 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c42:	041b      	lsls	r3, r3, #16
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f000 fb94 	bl	8005374 <SDMMC_CmdAppCommand>
 8004c4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	e00f      	b.n	8004c78 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fbcd 	bl	80053fe <SDMMC_CmdBusWidth>
 8004c64:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	e003      	b.n	8004c78 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e001      	b.n	8004c78 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004c80:	b590      	push	{r4, r7, lr}
 8004c82:	b08f      	sub	sp, #60	; 0x3c
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004c8a:	f7fb fef1 	bl	8000a70 <HAL_GetTick>
 8004c8e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004c94:	2300      	movs	r3, #0
 8004c96:	60bb      	str	r3, [r7, #8]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2108      	movs	r1, #8
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fa38 	bl	800511c <SDMMC_CmdBlockLength>
 8004cac:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	e0a9      	b.n	8004e0c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc0:	041b      	lsls	r3, r3, #16
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f000 fb55 	bl	8005374 <SDMMC_CmdAppCommand>
 8004cca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	e09a      	b.n	8004e0c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cda:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004cdc:	2308      	movs	r3, #8
 8004cde:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004ce0:	2330      	movs	r3, #48	; 0x30
 8004ce2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004cec:	2301      	movs	r3, #1
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f107 0210 	add.w	r2, r7, #16
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f9e2 	bl	80050c4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fb9c 	bl	8005442 <SDMMC_CmdSendSCR>
 8004d0a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d022      	beq.n	8004d58 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	e07a      	b.n	8004e0c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6819      	ldr	r1, [r3, #0]
 8004d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	f107 0208 	add.w	r2, r7, #8
 8004d30:	18d4      	adds	r4, r2, r3
 8004d32:	4608      	mov	r0, r1
 8004d34:	f000 f941 	bl	8004fba <SDMMC_ReadFIFO>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	6023      	str	r3, [r4, #0]
      index++;
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3e:	3301      	adds	r3, #1
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004d42:	f7fb fe95 	bl	8000a70 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d50:	d102      	bne.n	8004d58 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004d52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d56:	e059      	b.n	8004e0c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d5e:	f240 432a 	movw	r3, #1066	; 0x42a
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0d6      	beq.n	8004d16 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2208      	movs	r2, #8
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004d7e:	2308      	movs	r3, #8
 8004d80:	e044      	b.n	8004e0c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2202      	movs	r2, #2
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e037      	b.n	8004e0c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2220      	movs	r2, #32
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004db2:	2320      	movs	r3, #32
 8004db4:	e02a      	b.n	8004e0c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f240 523a 	movw	r2, #1338	; 0x53a
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	061a      	lsls	r2, r3, #24
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dcc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	0a1b      	lsrs	r3, r3, #8
 8004dd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004dd6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	0e1b      	lsrs	r3, r3, #24
 8004ddc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	601a      	str	r2, [r3, #0]
    scr++;
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	3304      	adds	r3, #4
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	061a      	lsls	r2, r3, #24
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004df4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	0a1b      	lsrs	r3, r3, #8
 8004dfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004dfe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	0e1b      	lsrs	r3, r3, #24
 8004e04:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	373c      	adds	r7, #60	; 0x3c
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd90      	pop	{r4, r7, pc}

08004e14 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d03f      	beq.n	8004eae <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e033      	b.n	8004e9c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f8be 	bl	8004fba <SDMMC_ReadFIFO>
 8004e3e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3301      	adds	r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	0c1b      	lsrs	r3, r3, #16
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	0e1b      	lsrs	r3, r3, #24
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b07      	cmp	r3, #7
 8004ea0:	d9c8      	bls.n	8004e34 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004eae:	bf00      	nop
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b086      	sub	sp, #24
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d043      	beq.n	8004f58 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e037      	b.n	8004f46 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	021a      	lsls	r2, r3, #8
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	041a      	lsls	r2, r3, #16
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	061a      	lsls	r2, r3, #24
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3301      	adds	r3, #1
 8004f28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f107 0208 	add.w	r2, r7, #8
 8004f38:	4611      	mov	r1, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f84a 	bl	8004fd4 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	3301      	adds	r3, #1
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b07      	cmp	r3, #7
 8004f4a:	d9c4      	bls.n	8004ed6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004f58:	bf00      	nop
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004f60:	b084      	sub	sp, #16
 8004f62:	b480      	push	{r7}
 8004f64:	b085      	sub	sp, #20
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	f107 001c 	add.w	r0, r7, #28
 8004f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8004f7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8004f82:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004f86:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004f8a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004f8e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004f9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	b004      	add	sp, #16
 8004fb8:	4770      	bx	lr

08004fba <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2203      	movs	r2, #3
 8005002:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005004:	2002      	movs	r0, #2
 8005006:	f7fb fd3f 	bl	8000a88 <HAL_Delay>

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0303 	and.w	r3, r3, #3
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800504e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005054:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800505a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800506a:	f023 030f 	bic.w	r3, r3, #15
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	b2db      	uxtb	r3, r3
}
 8005092:	4618      	mov	r0, r3
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3314      	adds	r3, #20
 80050ac:	461a      	mov	r2, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	4413      	add	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80050ea:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80050f0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80050f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800510e:	2300      	movs	r3, #0

}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800512a:	2310      	movs	r3, #16
 800512c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800512e:	2340      	movs	r3, #64	; 0x40
 8005130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800513a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800513c:	f107 0308 	add.w	r3, r7, #8
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff ff74 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005148:	f241 3288 	movw	r2, #5000	; 0x1388
 800514c:	2110      	movs	r1, #16
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fa18 	bl	8005584 <SDMMC_GetCmdResp1>
 8005154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005156:	69fb      	ldr	r3, [r7, #28]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800516e:	2311      	movs	r3, #17
 8005170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005172:	2340      	movs	r3, #64	; 0x40
 8005174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800517a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800517e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005180:	f107 0308 	add.w	r3, r7, #8
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff ff52 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800518c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005190:	2111      	movs	r1, #17
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9f6 	bl	8005584 <SDMMC_GetCmdResp1>
 8005198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800519a:	69fb      	ldr	r3, [r7, #28]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80051b2:	2312      	movs	r3, #18
 80051b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051b6:	2340      	movs	r3, #64	; 0x40
 80051b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051c4:	f107 0308 	add.w	r3, r7, #8
 80051c8:	4619      	mov	r1, r3
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff ff30 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80051d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d4:	2112      	movs	r1, #18
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f9d4 	bl	8005584 <SDMMC_GetCmdResp1>
 80051dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051de:	69fb      	ldr	r3, [r7, #28]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80051f6:	2318      	movs	r3, #24
 80051f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051fa:	2340      	movs	r3, #64	; 0x40
 80051fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005206:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005208:	f107 0308 	add.w	r3, r7, #8
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff ff0e 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005214:	f241 3288 	movw	r2, #5000	; 0x1388
 8005218:	2118      	movs	r1, #24
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f9b2 	bl	8005584 <SDMMC_GetCmdResp1>
 8005220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005222:	69fb      	ldr	r3, [r7, #28]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800523a:	2319      	movs	r3, #25
 800523c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800523e:	2340      	movs	r3, #64	; 0x40
 8005240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800524a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800524c:	f107 0308 	add.w	r3, r7, #8
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff feec 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005258:	f241 3288 	movw	r2, #5000	; 0x1388
 800525c:	2119      	movs	r1, #25
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f990 	bl	8005584 <SDMMC_GetCmdResp1>
 8005264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005266:	69fb      	ldr	r3, [r7, #28]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800527c:	230c      	movs	r3, #12
 800527e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005280:	2340      	movs	r3, #64	; 0x40
 8005282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800528c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff fecb 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800529a:	4a05      	ldr	r2, [pc, #20]	; (80052b0 <SDMMC_CmdStopTransfer+0x40>)
 800529c:	210c      	movs	r1, #12
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f970 	bl	8005584 <SDMMC_GetCmdResp1>
 80052a4:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80052a6:	69fb      	ldr	r3, [r7, #28]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	05f5e100 	.word	0x05f5e100

080052b4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	; 0x28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80052c4:	2307      	movs	r3, #7
 80052c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052c8:	2340      	movs	r3, #64	; 0x40
 80052ca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052d4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052d6:	f107 0310 	add.w	r3, r7, #16
 80052da:	4619      	mov	r1, r3
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7ff fea7 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80052e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e6:	2107      	movs	r1, #7
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 f94b 	bl	8005584 <SDMMC_GetCmdResp1>
 80052ee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3728      	adds	r7, #40	; 0x28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b088      	sub	sp, #32
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005318:	f107 0308 	add.w	r3, r7, #8
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff fe86 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fb65 	bl	80059f4 <SDMMC_GetCmdError>
 800532a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800532c:	69fb      	ldr	r3, [r7, #28]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b088      	sub	sp, #32
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800533e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005344:	2308      	movs	r3, #8
 8005346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005348:	2340      	movs	r3, #64	; 0x40
 800534a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005356:	f107 0308 	add.w	r3, r7, #8
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff fe67 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 faf8 	bl	8005958 <SDMMC_GetCmdResp7>
 8005368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800536a:	69fb      	ldr	r3, [r7, #28]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005382:	2337      	movs	r3, #55	; 0x37
 8005384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005386:	2340      	movs	r3, #64	; 0x40
 8005388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800538e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005394:	f107 0308 	add.w	r3, r7, #8
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fe48 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80053a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a4:	2137      	movs	r1, #55	; 0x37
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f8ec 	bl	8005584 <SDMMC_GetCmdResp1>
 80053ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053ae:	69fb      	ldr	r3, [r7, #28]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3720      	adds	r7, #32
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053cc:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80053ce:	2329      	movs	r3, #41	; 0x29
 80053d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053d2:	2340      	movs	r3, #64	; 0x40
 80053d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053e0:	f107 0308 	add.w	r3, r7, #8
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff fe22 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f9ff 	bl	80057f0 <SDMMC_GetCmdResp3>
 80053f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053f4:	69fb      	ldr	r3, [r7, #28]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3720      	adds	r7, #32
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b088      	sub	sp, #32
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800540c:	2306      	movs	r3, #6
 800540e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005410:	2340      	movs	r3, #64	; 0x40
 8005412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005414:	2300      	movs	r3, #0
 8005416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800541c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800541e:	f107 0308 	add.w	r3, r7, #8
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7ff fe03 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800542a:	f241 3288 	movw	r2, #5000	; 0x1388
 800542e:	2106      	movs	r1, #6
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f8a7 	bl	8005584 <SDMMC_GetCmdResp1>
 8005436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005438:	69fb      	ldr	r3, [r7, #28]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b088      	sub	sp, #32
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800544e:	2333      	movs	r3, #51	; 0x33
 8005450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005452:	2340      	movs	r3, #64	; 0x40
 8005454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800545a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800545e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005460:	f107 0308 	add.w	r3, r7, #8
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fde2 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800546c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005470:	2133      	movs	r1, #51	; 0x33
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f886 	bl	8005584 <SDMMC_GetCmdResp1>
 8005478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800547a:	69fb      	ldr	r3, [r7, #28]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005490:	2302      	movs	r3, #2
 8005492:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005494:	23c0      	movs	r3, #192	; 0xc0
 8005496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800549c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054a2:	f107 0308 	add.w	r3, r7, #8
 80054a6:	4619      	mov	r1, r3
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff fdc1 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f956 	bl	8005760 <SDMMC_GetCmdResp2>
 80054b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054b6:	69fb      	ldr	r3, [r7, #28]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3720      	adds	r7, #32
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80054ce:	2309      	movs	r3, #9
 80054d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80054d2:	23c0      	movs	r3, #192	; 0xc0
 80054d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054e0:	f107 0308 	add.w	r3, r7, #8
 80054e4:	4619      	mov	r1, r3
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff fda2 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f937 	bl	8005760 <SDMMC_GetCmdResp2>
 80054f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054f4:	69fb      	ldr	r3, [r7, #28]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800550c:	2303      	movs	r3, #3
 800550e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005510:	2340      	movs	r3, #64	; 0x40
 8005512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800551c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800551e:	f107 0308 	add.w	r3, r7, #8
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff fd83 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	2103      	movs	r1, #3
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f99c 	bl	800586c <SDMMC_GetCmdResp6>
 8005534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005536:	69fb      	ldr	r3, [r7, #28]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3720      	adds	r7, #32
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800554e:	230d      	movs	r3, #13
 8005550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005552:	2340      	movs	r3, #64	; 0x40
 8005554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800555a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800555e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005560:	f107 0308 	add.w	r3, r7, #8
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff fd62 	bl	8005030 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800556c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005570:	210d      	movs	r1, #13
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f806 	bl	8005584 <SDMMC_GetCmdResp1>
 8005578:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800557a:	69fb      	ldr	r3, [r7, #28]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3720      	adds	r7, #32
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	460b      	mov	r3, r1
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005592:	4b70      	ldr	r3, [pc, #448]	; (8005754 <SDMMC_GetCmdResp1+0x1d0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a70      	ldr	r2, [pc, #448]	; (8005758 <SDMMC_GetCmdResp1+0x1d4>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	0a5a      	lsrs	r2, r3, #9
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	fb02 f303 	mul.w	r3, r2, r3
 80055a4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	1e5a      	subs	r2, r3, #1
 80055aa:	61fa      	str	r2, [r7, #28]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055b4:	e0c9      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ba:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0ef      	beq.n	80055a6 <SDMMC_GetCmdResp1+0x22>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1ea      	bne.n	80055a6 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2204      	movs	r2, #4
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055e2:	2304      	movs	r3, #4
 80055e4:	e0b1      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d004      	beq.n	80055fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0a6      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	22c5      	movs	r2, #197	; 0xc5
 8005600:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f7ff fd3e 	bl	8005084 <SDMMC_GetCommandResponse>
 8005608:	4603      	mov	r3, r0
 800560a:	461a      	mov	r2, r3
 800560c:	7afb      	ldrb	r3, [r7, #11]
 800560e:	4293      	cmp	r3, r2
 8005610:	d001      	beq.n	8005616 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005612:	2301      	movs	r3, #1
 8005614:	e099      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005616:	2100      	movs	r1, #0
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff fd40 	bl	800509e <SDMMC_GetResponse>
 800561e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4b4e      	ldr	r3, [pc, #312]	; (800575c <SDMMC_GetCmdResp1+0x1d8>)
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800562a:	2300      	movs	r3, #0
 800562c:	e08d      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	da02      	bge.n	800563a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005638:	e087      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005644:	2340      	movs	r3, #64	; 0x40
 8005646:	e080      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005652:	2380      	movs	r3, #128	; 0x80
 8005654:	e079      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005664:	e071      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005674:	e069      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005684:	e061      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005690:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005694:	e059      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80056a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056a4:	e051      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80056b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b4:	e049      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80056c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056c4:	e041      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80056d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d4:	e039      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80056e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056e4:	e031      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80056f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80056f4:	e029      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005700:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005704:	e021      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005710:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005714:	e019      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005720:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005724:	e011      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005730:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005734:	e009      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005740:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005744:	e001      	b.n	800574a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000000 	.word	0x20000000
 8005758:	10624dd3 	.word	0x10624dd3
 800575c:	fdffe008 	.word	0xfdffe008

08005760 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005768:	4b1f      	ldr	r3, [pc, #124]	; (80057e8 <SDMMC_GetCmdResp2+0x88>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1f      	ldr	r2, [pc, #124]	; (80057ec <SDMMC_GetCmdResp2+0x8c>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	0a5b      	lsrs	r3, r3, #9
 8005774:	f241 3288 	movw	r2, #5000	; 0x1388
 8005778:	fb02 f303 	mul.w	r3, r2, r3
 800577c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1e5a      	subs	r2, r3, #1
 8005782:	60fa      	str	r2, [r7, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d102      	bne.n	800578e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005788:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800578c:	e026      	b.n	80057dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005792:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0ef      	beq.n	800577e <SDMMC_GetCmdResp2+0x1e>
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1ea      	bne.n	800577e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d004      	beq.n	80057be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2204      	movs	r2, #4
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057ba:	2304      	movs	r3, #4
 80057bc:	e00e      	b.n	80057dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d004      	beq.n	80057d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e003      	b.n	80057dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	22c5      	movs	r2, #197	; 0xc5
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	20000000 	.word	0x20000000
 80057ec:	10624dd3 	.word	0x10624dd3

080057f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057f8:	4b1a      	ldr	r3, [pc, #104]	; (8005864 <SDMMC_GetCmdResp3+0x74>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1a      	ldr	r2, [pc, #104]	; (8005868 <SDMMC_GetCmdResp3+0x78>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	0a5b      	lsrs	r3, r3, #9
 8005804:	f241 3288 	movw	r2, #5000	; 0x1388
 8005808:	fb02 f303 	mul.w	r3, r2, r3
 800580c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1e5a      	subs	r2, r3, #1
 8005812:	60fa      	str	r2, [r7, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d102      	bne.n	800581e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800581c:	e01b      	b.n	8005856 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005822:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0ef      	beq.n	800580e <SDMMC_GetCmdResp3+0x1e>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1ea      	bne.n	800580e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2204      	movs	r2, #4
 8005848:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800584a:	2304      	movs	r3, #4
 800584c:	e003      	b.n	8005856 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	22c5      	movs	r2, #197	; 0xc5
 8005852:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000000 	.word	0x20000000
 8005868:	10624dd3 	.word	0x10624dd3

0800586c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	460b      	mov	r3, r1
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800587a:	4b35      	ldr	r3, [pc, #212]	; (8005950 <SDMMC_GetCmdResp6+0xe4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a35      	ldr	r2, [pc, #212]	; (8005954 <SDMMC_GetCmdResp6+0xe8>)
 8005880:	fba2 2303 	umull	r2, r3, r2, r3
 8005884:	0a5b      	lsrs	r3, r3, #9
 8005886:	f241 3288 	movw	r2, #5000	; 0x1388
 800588a:	fb02 f303 	mul.w	r3, r2, r3
 800588e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	1e5a      	subs	r2, r3, #1
 8005894:	61fa      	str	r2, [r7, #28]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800589a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800589e:	e052      	b.n	8005946 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0ef      	beq.n	8005890 <SDMMC_GetCmdResp6+0x24>
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1ea      	bne.n	8005890 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2204      	movs	r2, #4
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058cc:	2304      	movs	r3, #4
 80058ce:	e03a      	b.n	8005946 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d004      	beq.n	80058e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e02f      	b.n	8005946 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff fbcc 	bl	8005084 <SDMMC_GetCommandResponse>
 80058ec:	4603      	mov	r3, r0
 80058ee:	461a      	mov	r2, r3
 80058f0:	7afb      	ldrb	r3, [r7, #11]
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d001      	beq.n	80058fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e025      	b.n	8005946 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	22c5      	movs	r2, #197	; 0xc5
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005900:	2100      	movs	r1, #0
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7ff fbcb 	bl	800509e <SDMMC_GetResponse>
 8005908:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	0c1b      	lsrs	r3, r3, #16
 8005918:	b29a      	uxth	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800591e:	2300      	movs	r3, #0
 8005920:	e011      	b.n	8005946 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800592c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005930:	e009      	b.n	8005946 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800593c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005940:	e001      	b.n	8005946 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005946:	4618      	mov	r0, r3
 8005948:	3720      	adds	r7, #32
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000000 	.word	0x20000000
 8005954:	10624dd3 	.word	0x10624dd3

08005958 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005960:	4b22      	ldr	r3, [pc, #136]	; (80059ec <SDMMC_GetCmdResp7+0x94>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a22      	ldr	r2, [pc, #136]	; (80059f0 <SDMMC_GetCmdResp7+0x98>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	0a5b      	lsrs	r3, r3, #9
 800596c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005970:	fb02 f303 	mul.w	r3, r2, r3
 8005974:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1e5a      	subs	r2, r3, #1
 800597a:	60fa      	str	r2, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005980:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005984:	e02c      	b.n	80059e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0ef      	beq.n	8005976 <SDMMC_GetCmdResp7+0x1e>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ea      	bne.n	8005976 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2204      	movs	r2, #4
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059b2:	2304      	movs	r3, #4
 80059b4:	e014      	b.n	80059e0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e009      	b.n	80059e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2240      	movs	r2, #64	; 0x40
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80059de:	2300      	movs	r3, #0

}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	20000000 	.word	0x20000000
 80059f0:	10624dd3 	.word	0x10624dd3

080059f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059fc:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <SDMMC_GetCmdError+0x50>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a11      	ldr	r2, [pc, #68]	; (8005a48 <SDMMC_GetCmdError+0x54>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	0a5b      	lsrs	r3, r3, #9
 8005a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
 8005a10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1e5a      	subs	r2, r3, #1
 8005a16:	60fa      	str	r2, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a20:	e009      	b.n	8005a36 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f1      	beq.n	8005a12 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	22c5      	movs	r2, #197	; 0xc5
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	20000000 	.word	0x20000000
 8005a48:	10624dd3 	.word	0x10624dd3

08005a4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005a50:	4904      	ldr	r1, [pc, #16]	; (8005a64 <MX_FATFS_Init+0x18>)
 8005a52:	4805      	ldr	r0, [pc, #20]	; (8005a68 <MX_FATFS_Init+0x1c>)
 8005a54:	f003 f97a 	bl	8008d4c <FATFS_LinkDriver>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <MX_FATFS_Init+0x20>)
 8005a5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a60:	bf00      	nop
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	200002ec 	.word	0x200002ec
 8005a68:	08008ee0 	.word	0x08008ee0
 8005a6c:	200007e4 	.word	0x200007e4

08005a70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005a74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005a8a:	f000 f89e 	bl	8005bca <BSP_SD_IsDetected>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d001      	beq.n	8005a98 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005a94:	2302      	movs	r3, #2
 8005a96:	e012      	b.n	8005abe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005a98:	480b      	ldr	r0, [pc, #44]	; (8005ac8 <BSP_SD_Init+0x48>)
 8005a9a:	f7fd ff3b 	bl	8003914 <HAL_SD_Init>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8005aa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005aac:	4806      	ldr	r0, [pc, #24]	; (8005ac8 <BSP_SD_Init+0x48>)
 8005aae:	f7fe fceb 	bl	8004488 <HAL_SD_ConfigWideBusOperation>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005abc:	79fb      	ldrb	r3, [r7, #7]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000068 	.word	0x20000068

08005acc <BSP_SD_ITConfig>:
/**
  * @brief  Configures Interrupt mode for SD detection pin.
  * @retval Returns 0
  */
__weak uint8_t BSP_SD_ITConfig(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  /* Code to be updated by the user or replaced by one from the FW pack (in a stmxxxx_sd.c file) */

  return (uint8_t)0;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	68f9      	ldr	r1, [r7, #12]
 8005af2:	4806      	ldr	r0, [pc, #24]	; (8005b0c <BSP_SD_ReadBlocks_DMA+0x30>)
 8005af4:	f7fd ffe4 	bl	8003ac0 <HAL_SD_ReadBlocks_DMA>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20000068 	.word	0x20000068

08005b10 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	68f9      	ldr	r1, [r7, #12]
 8005b26:	4806      	ldr	r0, [pc, #24]	; (8005b40 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005b28:	f7fe f892 	bl	8003c50 <HAL_SD_WriteBlocks_DMA>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000068 	.word	0x20000068

08005b44 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005b48:	4805      	ldr	r0, [pc, #20]	; (8005b60 <BSP_SD_GetCardState+0x1c>)
 8005b4a:	f7fe fd59 	bl	8004600 <HAL_SD_GetCardState>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000068 	.word	0x20000068

08005b64 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4803      	ldr	r0, [pc, #12]	; (8005b7c <BSP_SD_GetCardInfo+0x18>)
 8005b70:	f7fe fc5e 	bl	8004430 <HAL_SD_GetCardInfo>
}
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20000068 	.word	0x20000068

08005b80 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005b88:	f000 f818 	bl	8005bbc <BSP_SD_AbortCallback>
}
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005b9c:	f000 f9a8 	bl	8005ef0 <BSP_SD_WriteCpltCallback>
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005bb0:	f000 f9aa 	bl	8005f08 <BSP_SD_ReadCpltCallback>
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0

}
 8005bc0:	bf00      	nop
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005bd4:	f000 f80c 	bl	8005bf0 <BSP_PlatformIsDetected>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005bde:	2300      	movs	r3, #0
 8005be0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	b2db      	uxtb	r3, r3
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bfe:	4806      	ldr	r0, [pc, #24]	; (8005c18 <BSP_PlatformIsDetected+0x28>)
 8005c00:	f7fb fc42 	bl	8001488 <HAL_GPIO_ReadPin>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	48000800 	.word	0x48000800

08005c1c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005c24:	f7fa ff24 	bl	8000a70 <HAL_GetTick>
 8005c28:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005c2a:	e006      	b.n	8005c3a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005c2c:	f7ff ff8a 	bl	8005b44 <BSP_SD_GetCardState>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e009      	b.n	8005c4e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005c3a:	f7fa ff19 	bl	8000a70 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d8f0      	bhi.n	8005c2c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <SD_CheckStatus+0x38>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005c68:	f7ff ff6c 	bl	8005b44 <BSP_SD_GetCardState>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d107      	bne.n	8005c82 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005c72:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <SD_CheckStatus+0x38>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <SD_CheckStatus+0x38>)
 8005c80:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005c82:	4b03      	ldr	r3, [pc, #12]	; (8005c90 <SD_CheckStatus+0x38>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	b2db      	uxtb	r3, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20000009 	.word	0x20000009

08005c94 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005c9e:	f7ff feef 	bl	8005a80 <BSP_SD_Init>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d107      	bne.n	8005cb8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff ffd4 	bl	8005c58 <SD_CheckStatus>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <SD_initialize+0x34>)
 8005cb6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005cb8:	4b03      	ldr	r3, [pc, #12]	; (8005cc8 <SD_initialize+0x34>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	b2db      	uxtb	r3, r3
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000009 	.word	0x20000009

08005ccc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff ffbd 	bl	8005c58 <SD_CheckStatus>
 8005cde:	4603      	mov	r3, r0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005cfc:	f247 5030 	movw	r0, #30000	; 0x7530
 8005d00:	f7ff ff8c 	bl	8005c1c <SD_CheckStatusWithTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	da01      	bge.n	8005d0e <SD_read+0x26>
  {
    return res;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
 8005d0c:	e03b      	b.n	8005d86 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	68b8      	ldr	r0, [r7, #8]
 8005d14:	f7ff fee2 	bl	8005adc <BSP_SD_ReadBlocks_DMA>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d132      	bne.n	8005d84 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8005d1e:	4b1c      	ldr	r3, [pc, #112]	; (8005d90 <SD_read+0xa8>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8005d24:	f7fa fea4 	bl	8000a70 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005d2a:	bf00      	nop
 8005d2c:	4b18      	ldr	r3, [pc, #96]	; (8005d90 <SD_read+0xa8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d108      	bne.n	8005d46 <SD_read+0x5e>
 8005d34:	f7fa fe9c 	bl	8000a70 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	f247 522f 	movw	r2, #29999	; 0x752f
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d9f2      	bls.n	8005d2c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005d46:	4b12      	ldr	r3, [pc, #72]	; (8005d90 <SD_read+0xa8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
 8005d52:	e017      	b.n	8005d84 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005d54:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <SD_read+0xa8>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005d5a:	f7fa fe89 	bl	8000a70 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005d60:	e007      	b.n	8005d72 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005d62:	f7ff feef 	bl	8005b44 <BSP_SD_GetCardState>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d102      	bne.n	8005d72 <SD_read+0x8a>
          {
            res = RES_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005d70:	e008      	b.n	8005d84 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005d72:	f7fa fe7d 	bl	8000a70 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	f247 522f 	movw	r2, #29999	; 0x752f
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d9ee      	bls.n	8005d62 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000030 	.word	0x20000030

08005d94 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005da8:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <SD_write+0xa8>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005dae:	f247 5030 	movw	r0, #30000	; 0x7530
 8005db2:	f7ff ff33 	bl	8005c1c <SD_CheckStatusWithTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	da01      	bge.n	8005dc0 <SD_write+0x2c>
  {
    return res;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	e038      	b.n	8005e32 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	68b8      	ldr	r0, [r7, #8]
 8005dc6:	f7ff fea3 	bl	8005b10 <BSP_SD_WriteBlocks_DMA>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d12f      	bne.n	8005e30 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8005dd0:	f7fa fe4e 	bl	8000a70 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005dd6:	bf00      	nop
 8005dd8:	4b18      	ldr	r3, [pc, #96]	; (8005e3c <SD_write+0xa8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d108      	bne.n	8005df2 <SD_write+0x5e>
 8005de0:	f7fa fe46 	bl	8000a70 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	f247 522f 	movw	r2, #29999	; 0x752f
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d9f2      	bls.n	8005dd8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8005df2:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <SD_write+0xa8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	75fb      	strb	r3, [r7, #23]
 8005dfe:	e017      	b.n	8005e30 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8005e00:	4b0e      	ldr	r3, [pc, #56]	; (8005e3c <SD_write+0xa8>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005e06:	f7fa fe33 	bl	8000a70 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005e0c:	e007      	b.n	8005e1e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005e0e:	f7ff fe99 	bl	8005b44 <BSP_SD_GetCardState>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d102      	bne.n	8005e1e <SD_write+0x8a>
          {
            res = RES_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e1c:	e008      	b.n	8005e30 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005e1e:	f7fa fe27 	bl	8000a70 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	f247 522f 	movw	r2, #29999	; 0x752f
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d9ee      	bls.n	8005e0e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	2000002c 	.word	0x2000002c

08005e40 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08c      	sub	sp, #48	; 0x30
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	603a      	str	r2, [r7, #0]
 8005e4a:	71fb      	strb	r3, [r7, #7]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005e56:	4b25      	ldr	r3, [pc, #148]	; (8005eec <SD_ioctl+0xac>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <SD_ioctl+0x28>
 8005e64:	2303      	movs	r3, #3
 8005e66:	e03c      	b.n	8005ee2 <SD_ioctl+0xa2>

  switch (cmd)
 8005e68:	79bb      	ldrb	r3, [r7, #6]
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d834      	bhi.n	8005ed8 <SD_ioctl+0x98>
 8005e6e:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <SD_ioctl+0x34>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e85 	.word	0x08005e85
 8005e78:	08005e8d 	.word	0x08005e8d
 8005e7c:	08005ea5 	.word	0x08005ea5
 8005e80:	08005ebf 	.word	0x08005ebf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005e8a:	e028      	b.n	8005ede <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005e8c:	f107 030c 	add.w	r3, r7, #12
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fe67 	bl	8005b64 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005ea2:	e01c      	b.n	8005ede <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005ea4:	f107 030c 	add.w	r3, r7, #12
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fe5b 	bl	8005b64 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005ebc:	e00f      	b.n	8005ede <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005ebe:	f107 030c 	add.w	r3, r7, #12
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff fe4e 	bl	8005b64 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	0a5a      	lsrs	r2, r3, #9
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005ed6:	e002      	b.n	8005ede <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005ed8:	2304      	movs	r3, #4
 8005eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005ede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3730      	adds	r7, #48	; 0x30
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000009 	.word	0x20000009

08005ef0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005ef4:	4b03      	ldr	r3, [pc, #12]	; (8005f04 <BSP_SD_WriteCpltCallback+0x14>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
}
 8005efa:	bf00      	nop
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	2000002c 	.word	0x2000002c

08005f08 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005f0c:	4b03      	ldr	r3, [pc, #12]	; (8005f1c <BSP_SD_ReadCpltCallback+0x14>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
}
 8005f12:	bf00      	nop
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	20000030 	.word	0x20000030

08005f20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <disk_status+0x30>)
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	79fa      	ldrb	r2, [r7, #7]
 8005f38:	4905      	ldr	r1, [pc, #20]	; (8005f50 <disk_status+0x30>)
 8005f3a:	440a      	add	r2, r1
 8005f3c:	7a12      	ldrb	r2, [r2, #8]
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4798      	blx	r3
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	2000005c 	.word	0x2000005c

08005f54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	4a0d      	ldr	r2, [pc, #52]	; (8005f9c <disk_initialize+0x48>)
 8005f66:	5cd3      	ldrb	r3, [r2, r3]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d111      	bne.n	8005f90 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	4a0b      	ldr	r2, [pc, #44]	; (8005f9c <disk_initialize+0x48>)
 8005f70:	2101      	movs	r1, #1
 8005f72:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	4a09      	ldr	r2, [pc, #36]	; (8005f9c <disk_initialize+0x48>)
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	79fa      	ldrb	r2, [r7, #7]
 8005f82:	4906      	ldr	r1, [pc, #24]	; (8005f9c <disk_initialize+0x48>)
 8005f84:	440a      	add	r2, r1
 8005f86:	7a12      	ldrb	r2, [r2, #8]
 8005f88:	4610      	mov	r0, r2
 8005f8a:	4798      	blx	r3
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	2000005c 	.word	0x2000005c

08005fa0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	4603      	mov	r3, r0
 8005fae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <disk_read+0x3c>)
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	689c      	ldr	r4, [r3, #8]
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	4a07      	ldr	r2, [pc, #28]	; (8005fdc <disk_read+0x3c>)
 8005fc0:	4413      	add	r3, r2
 8005fc2:	7a18      	ldrb	r0, [r3, #8]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	47a0      	blx	r4
 8005fcc:	4603      	mov	r3, r0
 8005fce:	75fb      	strb	r3, [r7, #23]
  return res;
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd90      	pop	{r4, r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	2000005c 	.word	0x2000005c

08005fe0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005fe0:	b590      	push	{r4, r7, lr}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	4a0a      	ldr	r2, [pc, #40]	; (800601c <disk_write+0x3c>)
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	68dc      	ldr	r4, [r3, #12]
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	4a07      	ldr	r2, [pc, #28]	; (800601c <disk_write+0x3c>)
 8006000:	4413      	add	r3, r2
 8006002:	7a18      	ldrb	r0, [r3, #8]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	47a0      	blx	r4
 800600c:	4603      	mov	r3, r0
 800600e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006010:	7dfb      	ldrb	r3, [r7, #23]
}
 8006012:	4618      	mov	r0, r3
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	bd90      	pop	{r4, r7, pc}
 800601a:	bf00      	nop
 800601c:	2000005c 	.word	0x2000005c

08006020 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	603a      	str	r2, [r7, #0]
 800602a:	71fb      	strb	r3, [r7, #7]
 800602c:	460b      	mov	r3, r1
 800602e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	4a09      	ldr	r2, [pc, #36]	; (8006058 <disk_ioctl+0x38>)
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	79fa      	ldrb	r2, [r7, #7]
 800603e:	4906      	ldr	r1, [pc, #24]	; (8006058 <disk_ioctl+0x38>)
 8006040:	440a      	add	r2, r1
 8006042:	7a10      	ldrb	r0, [r2, #8]
 8006044:	79b9      	ldrb	r1, [r7, #6]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	4798      	blx	r3
 800604a:	4603      	mov	r3, r0
 800604c:	73fb      	strb	r3, [r7, #15]
  return res;
 800604e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	2000005c 	.word	0x2000005c

0800605c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3301      	adds	r3, #1
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800606c:	89fb      	ldrh	r3, [r7, #14]
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	b21a      	sxth	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	b21b      	sxth	r3, r3
 8006078:	4313      	orrs	r3, r2
 800607a:	b21b      	sxth	r3, r3
 800607c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800607e:	89fb      	ldrh	r3, [r7, #14]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3303      	adds	r3, #3
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	3202      	adds	r2, #2
 80060a4:	7812      	ldrb	r2, [r2, #0]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	3201      	adds	r2, #1
 80060b2:	7812      	ldrb	r2, [r2, #0]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	7812      	ldrb	r2, [r2, #0]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
	return rv;
 80060c4:	68fb      	ldr	r3, [r7, #12]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	887a      	ldrh	r2, [r7, #2]
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	887b      	ldrh	r3, [r7, #2]
 80060ec:	0a1b      	lsrs	r3, r3, #8
 80060ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	887a      	ldrh	r2, [r7, #2]
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	0a1b      	lsrs	r3, r3, #8
 8006122:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	0a1b      	lsrs	r3, r3, #8
 8006134:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	0a1b      	lsrs	r3, r3, #8
 8006146:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00d      	beq.n	8006196 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	1c53      	adds	r3, r2, #1
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1c59      	adds	r1, r3, #1
 8006184:	6179      	str	r1, [r7, #20]
 8006186:	7812      	ldrb	r2, [r2, #0]
 8006188:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3b01      	subs	r3, #1
 800618e:	607b      	str	r3, [r7, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1f1      	bne.n	800617a <mem_cpy+0x1a>
	}
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80061a2:	b480      	push	{r7}
 80061a4:	b087      	sub	sp, #28
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	617a      	str	r2, [r7, #20]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	607b      	str	r3, [r7, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f3      	bne.n	80061b2 <mem_set+0x10>
}
 80061ca:	bf00      	nop
 80061cc:	bf00      	nop
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80061d8:	b480      	push	{r7}
 80061da:	b089      	sub	sp, #36	; 0x24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	61fa      	str	r2, [r7, #28]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	4619      	mov	r1, r3
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	61ba      	str	r2, [r7, #24]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	1acb      	subs	r3, r1, r3
 8006204:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3b01      	subs	r3, #1
 800620a:	607b      	str	r3, [r7, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <mem_cmp+0x40>
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0eb      	beq.n	80061f0 <mem_cmp+0x18>

	return r;
 8006218:	697b      	ldr	r3, [r7, #20]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3724      	adds	r7, #36	; 0x24
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006230:	e002      	b.n	8006238 <chk_chr+0x12>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3301      	adds	r3, #1
 8006236:	607b      	str	r3, [r7, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <chk_chr+0x26>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	4293      	cmp	r3, r2
 800624a:	d1f2      	bne.n	8006232 <chk_chr+0xc>
	return *str;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	781b      	ldrb	r3, [r3, #0]
}
 8006250:	4618      	mov	r0, r3
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006266:	2300      	movs	r3, #0
 8006268:	60bb      	str	r3, [r7, #8]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e029      	b.n	80062c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006270:	4a27      	ldr	r2, [pc, #156]	; (8006310 <chk_lock+0xb4>)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	4413      	add	r3, r2
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d01d      	beq.n	80062ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800627e:	4a24      	ldr	r2, [pc, #144]	; (8006310 <chk_lock+0xb4>)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	4413      	add	r3, r2
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d116      	bne.n	80062be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006290:	4a1f      	ldr	r2, [pc, #124]	; (8006310 <chk_lock+0xb4>)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	4413      	add	r3, r2
 8006298:	3304      	adds	r3, #4
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d10c      	bne.n	80062be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80062a4:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <chk_lock+0xb4>)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	4413      	add	r3, r2
 80062ac:	3308      	adds	r3, #8
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d102      	bne.n	80062be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80062b8:	e007      	b.n	80062ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80062ba:	2301      	movs	r3, #1
 80062bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3301      	adds	r3, #1
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d9d2      	bls.n	8006270 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d109      	bne.n	80062e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <chk_lock+0x80>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d101      	bne.n	80062e0 <chk_lock+0x84>
 80062dc:	2300      	movs	r3, #0
 80062de:	e010      	b.n	8006302 <chk_lock+0xa6>
 80062e0:	2312      	movs	r3, #18
 80062e2:	e00e      	b.n	8006302 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d108      	bne.n	80062fc <chk_lock+0xa0>
 80062ea:	4a09      	ldr	r2, [pc, #36]	; (8006310 <chk_lock+0xb4>)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	4413      	add	r3, r2
 80062f2:	330c      	adds	r3, #12
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062fa:	d101      	bne.n	8006300 <chk_lock+0xa4>
 80062fc:	2310      	movs	r3, #16
 80062fe:	e000      	b.n	8006302 <chk_lock+0xa6>
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	2000003c 	.word	0x2000003c

08006314 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800631a:	2300      	movs	r3, #0
 800631c:	607b      	str	r3, [r7, #4]
 800631e:	e002      	b.n	8006326 <enq_lock+0x12>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3301      	adds	r3, #1
 8006324:	607b      	str	r3, [r7, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d806      	bhi.n	800633a <enq_lock+0x26>
 800632c:	4a09      	ldr	r2, [pc, #36]	; (8006354 <enq_lock+0x40>)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	4413      	add	r3, r2
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f2      	bne.n	8006320 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b02      	cmp	r3, #2
 800633e:	bf14      	ite	ne
 8006340:	2301      	movne	r3, #1
 8006342:	2300      	moveq	r3, #0
 8006344:	b2db      	uxtb	r3, r3
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	2000003c 	.word	0x2000003c

08006358 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	e01f      	b.n	80063a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006368:	4a41      	ldr	r2, [pc, #260]	; (8006470 <inc_lock+0x118>)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	4413      	add	r3, r2
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d113      	bne.n	80063a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800637a:	4a3d      	ldr	r2, [pc, #244]	; (8006470 <inc_lock+0x118>)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	4413      	add	r3, r2
 8006382:	3304      	adds	r3, #4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800638a:	429a      	cmp	r2, r3
 800638c:	d109      	bne.n	80063a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800638e:	4a38      	ldr	r2, [pc, #224]	; (8006470 <inc_lock+0x118>)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	4413      	add	r3, r2
 8006396:	3308      	adds	r3, #8
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800639e:	429a      	cmp	r2, r3
 80063a0:	d006      	beq.n	80063b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3301      	adds	r3, #1
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d9dc      	bls.n	8006368 <inc_lock+0x10>
 80063ae:	e000      	b.n	80063b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80063b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d132      	bne.n	800641e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	e002      	b.n	80063c4 <inc_lock+0x6c>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3301      	adds	r3, #1
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d806      	bhi.n	80063d8 <inc_lock+0x80>
 80063ca:	4a29      	ldr	r2, [pc, #164]	; (8006470 <inc_lock+0x118>)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	4413      	add	r3, r2
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1f2      	bne.n	80063be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d101      	bne.n	80063e2 <inc_lock+0x8a>
 80063de:	2300      	movs	r3, #0
 80063e0:	e040      	b.n	8006464 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4922      	ldr	r1, [pc, #136]	; (8006470 <inc_lock+0x118>)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	440b      	add	r3, r1
 80063ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	491e      	ldr	r1, [pc, #120]	; (8006470 <inc_lock+0x118>)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	440b      	add	r3, r1
 80063fc:	3304      	adds	r3, #4
 80063fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	695a      	ldr	r2, [r3, #20]
 8006404:	491a      	ldr	r1, [pc, #104]	; (8006470 <inc_lock+0x118>)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	440b      	add	r3, r1
 800640c:	3308      	adds	r3, #8
 800640e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006410:	4a17      	ldr	r2, [pc, #92]	; (8006470 <inc_lock+0x118>)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	4413      	add	r3, r2
 8006418:	330c      	adds	r3, #12
 800641a:	2200      	movs	r2, #0
 800641c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d009      	beq.n	8006438 <inc_lock+0xe0>
 8006424:	4a12      	ldr	r2, [pc, #72]	; (8006470 <inc_lock+0x118>)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	4413      	add	r3, r2
 800642c:	330c      	adds	r3, #12
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <inc_lock+0xe0>
 8006434:	2300      	movs	r3, #0
 8006436:	e015      	b.n	8006464 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d108      	bne.n	8006450 <inc_lock+0xf8>
 800643e:	4a0c      	ldr	r2, [pc, #48]	; (8006470 <inc_lock+0x118>)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	4413      	add	r3, r2
 8006446:	330c      	adds	r3, #12
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	3301      	adds	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	e001      	b.n	8006454 <inc_lock+0xfc>
 8006450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006454:	4906      	ldr	r1, [pc, #24]	; (8006470 <inc_lock+0x118>)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	440b      	add	r3, r1
 800645c:	330c      	adds	r3, #12
 800645e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3301      	adds	r3, #1
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	2000003c 	.word	0x2000003c

08006474 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3b01      	subs	r3, #1
 8006480:	607b      	str	r3, [r7, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d825      	bhi.n	80064d4 <dec_lock+0x60>
		n = Files[i].ctr;
 8006488:	4a17      	ldr	r2, [pc, #92]	; (80064e8 <dec_lock+0x74>)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	4413      	add	r3, r2
 8006490:	330c      	adds	r3, #12
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006496:	89fb      	ldrh	r3, [r7, #14]
 8006498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800649c:	d101      	bne.n	80064a2 <dec_lock+0x2e>
 800649e:	2300      	movs	r3, #0
 80064a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80064a2:	89fb      	ldrh	r3, [r7, #14]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <dec_lock+0x3a>
 80064a8:	89fb      	ldrh	r3, [r7, #14]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80064ae:	4a0e      	ldr	r2, [pc, #56]	; (80064e8 <dec_lock+0x74>)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	4413      	add	r3, r2
 80064b6:	330c      	adds	r3, #12
 80064b8:	89fa      	ldrh	r2, [r7, #14]
 80064ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80064bc:	89fb      	ldrh	r3, [r7, #14]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d105      	bne.n	80064ce <dec_lock+0x5a>
 80064c2:	4a09      	ldr	r2, [pc, #36]	; (80064e8 <dec_lock+0x74>)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	4413      	add	r3, r2
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	737b      	strb	r3, [r7, #13]
 80064d2:	e001      	b.n	80064d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80064d4:	2302      	movs	r3, #2
 80064d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80064d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	2000003c 	.word	0x2000003c

080064ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	e010      	b.n	800651c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80064fa:	4a0d      	ldr	r2, [pc, #52]	; (8006530 <clear_lock+0x44>)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	4413      	add	r3, r2
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	429a      	cmp	r2, r3
 8006508:	d105      	bne.n	8006516 <clear_lock+0x2a>
 800650a:	4a09      	ldr	r2, [pc, #36]	; (8006530 <clear_lock+0x44>)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	4413      	add	r3, r2
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3301      	adds	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d9eb      	bls.n	80064fa <clear_lock+0xe>
	}
}
 8006522:	bf00      	nop
 8006524:	bf00      	nop
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	2000003c 	.word	0x2000003c

08006534 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	78db      	ldrb	r3, [r3, #3]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d034      	beq.n	80065b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	7858      	ldrb	r0, [r3, #1]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006558:	2301      	movs	r3, #1
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	f7ff fd40 	bl	8005fe0 <disk_write>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006566:	2301      	movs	r3, #1
 8006568:	73fb      	strb	r3, [r7, #15]
 800656a:	e022      	b.n	80065b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	1ad2      	subs	r2, r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	429a      	cmp	r2, r3
 8006580:	d217      	bcs.n	80065b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	789b      	ldrb	r3, [r3, #2]
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	e010      	b.n	80065ac <sync_window+0x78>
					wsect += fs->fsize;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	7858      	ldrb	r0, [r3, #1]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800659e:	2301      	movs	r3, #1
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	f7ff fd1d 	bl	8005fe0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d8eb      	bhi.n	800658a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d01b      	beq.n	800660c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff ffad 	bl	8006534 <sync_window>
 80065da:	4603      	mov	r3, r0
 80065dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d113      	bne.n	800660c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	7858      	ldrb	r0, [r3, #1]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065ee:	2301      	movs	r3, #1
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	f7ff fcd5 	bl	8005fa0 <disk_read>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80065fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006600:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006602:	2301      	movs	r3, #1
 8006604:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff ff87 	bl	8006534 <sync_window>
 8006626:	4603      	mov	r3, r0
 8006628:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d158      	bne.n	80066e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b03      	cmp	r3, #3
 8006636:	d148      	bne.n	80066ca <sync_fs+0xb2>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	791b      	ldrb	r3, [r3, #4]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d144      	bne.n	80066ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3330      	adds	r3, #48	; 0x30
 8006644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006648:	2100      	movs	r1, #0
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff fda9 	bl	80061a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3330      	adds	r3, #48	; 0x30
 8006654:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006658:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff fd38 	bl	80060d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3330      	adds	r3, #48	; 0x30
 8006666:	4921      	ldr	r1, [pc, #132]	; (80066ec <sync_fs+0xd4>)
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff fd4d 	bl	8006108 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3330      	adds	r3, #48	; 0x30
 8006672:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006676:	491e      	ldr	r1, [pc, #120]	; (80066f0 <sync_fs+0xd8>)
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff fd45 	bl	8006108 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3330      	adds	r3, #48	; 0x30
 8006682:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	4619      	mov	r1, r3
 800668c:	4610      	mov	r0, r2
 800668e:	f7ff fd3b 	bl	8006108 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3330      	adds	r3, #48	; 0x30
 8006696:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	4619      	mov	r1, r3
 80066a0:	4610      	mov	r0, r2
 80066a2:	f7ff fd31 	bl	8006108 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	7858      	ldrb	r0, [r3, #1]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066be:	2301      	movs	r3, #1
 80066c0:	f7ff fc8e 	bl	8005fe0 <disk_write>
			fs->fsi_flag = 0;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	2200      	movs	r2, #0
 80066d0:	2100      	movs	r1, #0
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff fca4 	bl	8006020 <disk_ioctl>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <sync_fs+0xca>
 80066de:	2301      	movs	r3, #1
 80066e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	41615252 	.word	0x41615252
 80066f0:	61417272 	.word	0x61417272

080066f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	3b02      	subs	r3, #2
 8006702:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	3b02      	subs	r3, #2
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d301      	bcc.n	8006714 <clust2sect+0x20>
 8006710:	2300      	movs	r3, #0
 8006712:	e008      	b.n	8006726 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	895b      	ldrh	r3, [r3, #10]
 8006718:	461a      	mov	r2, r3
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	fb03 f202 	mul.w	r2, r3, r2
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	4413      	add	r3, r2
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b086      	sub	sp, #24
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d904      	bls.n	8006752 <get_fat+0x20>
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d302      	bcc.n	8006758 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006752:	2301      	movs	r3, #1
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	e08f      	b.n	8006878 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800675c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b03      	cmp	r3, #3
 8006764:	d062      	beq.n	800682c <get_fat+0xfa>
 8006766:	2b03      	cmp	r3, #3
 8006768:	dc7c      	bgt.n	8006864 <get_fat+0x132>
 800676a:	2b01      	cmp	r3, #1
 800676c:	d002      	beq.n	8006774 <get_fat+0x42>
 800676e:	2b02      	cmp	r3, #2
 8006770:	d042      	beq.n	80067f8 <get_fat+0xc6>
 8006772:	e077      	b.n	8006864 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6a1a      	ldr	r2, [r3, #32]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	0a5b      	lsrs	r3, r3, #9
 800678a:	4413      	add	r3, r2
 800678c:	4619      	mov	r1, r3
 800678e:	6938      	ldr	r0, [r7, #16]
 8006790:	f7ff ff14 	bl	80065bc <move_window>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d167      	bne.n	800686a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	60fa      	str	r2, [r7, #12]
 80067a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4413      	add	r3, r2
 80067a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6a1a      	ldr	r2, [r3, #32]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	0a5b      	lsrs	r3, r3, #9
 80067b6:	4413      	add	r3, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	6938      	ldr	r0, [r7, #16]
 80067bc:	f7ff fefe 	bl	80065bc <move_window>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d153      	bne.n	800686e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4413      	add	r3, r2
 80067d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	461a      	mov	r2, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <get_fat+0xbc>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	091b      	lsrs	r3, r3, #4
 80067ec:	e002      	b.n	80067f4 <get_fat+0xc2>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067f4:	617b      	str	r3, [r7, #20]
			break;
 80067f6:	e03f      	b.n	8006878 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	6a1a      	ldr	r2, [r3, #32]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	4413      	add	r3, r2
 8006802:	4619      	mov	r1, r3
 8006804:	6938      	ldr	r0, [r7, #16]
 8006806:	f7ff fed9 	bl	80065bc <move_window>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d130      	bne.n	8006872 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800681e:	4413      	add	r3, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fc1b 	bl	800605c <ld_word>
 8006826:	4603      	mov	r3, r0
 8006828:	617b      	str	r3, [r7, #20]
			break;
 800682a:	e025      	b.n	8006878 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	6a1a      	ldr	r2, [r3, #32]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	09db      	lsrs	r3, r3, #7
 8006834:	4413      	add	r3, r2
 8006836:	4619      	mov	r1, r3
 8006838:	6938      	ldr	r0, [r7, #16]
 800683a:	f7ff febf 	bl	80065bc <move_window>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d118      	bne.n	8006876 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006852:	4413      	add	r3, r2
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff fc19 	bl	800608c <ld_dword>
 800685a:	4603      	mov	r3, r0
 800685c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006860:	617b      	str	r3, [r7, #20]
			break;
 8006862:	e009      	b.n	8006878 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006864:	2301      	movs	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	e006      	b.n	8006878 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800686a:	bf00      	nop
 800686c:	e004      	b.n	8006878 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800686e:	bf00      	nop
 8006870:	e002      	b.n	8006878 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006872:	bf00      	nop
 8006874:	e000      	b.n	8006878 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006876:	bf00      	nop
		}
	}

	return val;
 8006878:	697b      	ldr	r3, [r7, #20]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006882:	b590      	push	{r4, r7, lr}
 8006884:	b089      	sub	sp, #36	; 0x24
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800688e:	2302      	movs	r3, #2
 8006890:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b01      	cmp	r3, #1
 8006896:	f240 80d2 	bls.w	8006a3e <put_fat+0x1bc>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	f080 80cc 	bcs.w	8006a3e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	f000 8096 	beq.w	80069dc <put_fat+0x15a>
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	f300 80cd 	bgt.w	8006a50 <put_fat+0x1ce>
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d002      	beq.n	80068c0 <put_fat+0x3e>
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d06e      	beq.n	800699c <put_fat+0x11a>
 80068be:	e0c7      	b.n	8006a50 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	085b      	lsrs	r3, r3, #1
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	4413      	add	r3, r2
 80068cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1a      	ldr	r2, [r3, #32]
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	0a5b      	lsrs	r3, r3, #9
 80068d6:	4413      	add	r3, r2
 80068d8:	4619      	mov	r1, r3
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7ff fe6e 	bl	80065bc <move_window>
 80068e0:	4603      	mov	r3, r0
 80068e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068e4:	7ffb      	ldrb	r3, [r7, #31]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f040 80ab 	bne.w	8006a42 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	1c59      	adds	r1, r3, #1
 80068f6:	61b9      	str	r1, [r7, #24]
 80068f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fc:	4413      	add	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00d      	beq.n	8006926 <put_fat+0xa4>
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	b25b      	sxtb	r3, r3
 8006910:	f003 030f 	and.w	r3, r3, #15
 8006914:	b25a      	sxtb	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	b25b      	sxtb	r3, r3
 800691e:	4313      	orrs	r3, r2
 8006920:	b25b      	sxtb	r3, r3
 8006922:	b2db      	uxtb	r3, r3
 8006924:	e001      	b.n	800692a <put_fat+0xa8>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a1a      	ldr	r2, [r3, #32]
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	0a5b      	lsrs	r3, r3, #9
 800693c:	4413      	add	r3, r2
 800693e:	4619      	mov	r1, r3
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7ff fe3b 	bl	80065bc <move_window>
 8006946:	4603      	mov	r3, r0
 8006948:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800694a:	7ffb      	ldrb	r3, [r7, #31]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d17a      	bne.n	8006a46 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695c:	4413      	add	r3, r2
 800695e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <put_fat+0xf0>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	091b      	lsrs	r3, r3, #4
 800696e:	b2db      	uxtb	r3, r3
 8006970:	e00e      	b.n	8006990 <put_fat+0x10e>
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	b25b      	sxtb	r3, r3
 8006978:	f023 030f 	bic.w	r3, r3, #15
 800697c:	b25a      	sxtb	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	0a1b      	lsrs	r3, r3, #8
 8006982:	b25b      	sxtb	r3, r3
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	b25b      	sxtb	r3, r3
 800698a:	4313      	orrs	r3, r2
 800698c:	b25b      	sxtb	r3, r3
 800698e:	b2db      	uxtb	r3, r3
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	70da      	strb	r2, [r3, #3]
			break;
 800699a:	e059      	b.n	8006a50 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a1a      	ldr	r2, [r3, #32]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	0a1b      	lsrs	r3, r3, #8
 80069a4:	4413      	add	r3, r2
 80069a6:	4619      	mov	r1, r3
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f7ff fe07 	bl	80065bc <move_window>
 80069ae:	4603      	mov	r3, r0
 80069b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069b2:	7ffb      	ldrb	r3, [r7, #31]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d148      	bne.n	8006a4a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80069c6:	4413      	add	r3, r2
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	b292      	uxth	r2, r2
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff fb7f 	bl	80060d2 <st_word>
			fs->wflag = 1;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	70da      	strb	r2, [r3, #3]
			break;
 80069da:	e039      	b.n	8006a50 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a1a      	ldr	r2, [r3, #32]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	09db      	lsrs	r3, r3, #7
 80069e4:	4413      	add	r3, r2
 80069e6:	4619      	mov	r1, r3
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f7ff fde7 	bl	80065bc <move_window>
 80069ee:	4603      	mov	r3, r0
 80069f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069f2:	7ffb      	ldrb	r3, [r7, #31]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d12a      	bne.n	8006a4e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006a0c:	4413      	add	r3, r2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff fb3c 	bl	800608c <ld_dword>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a1a:	4323      	orrs	r3, r4
 8006a1c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006a2c:	4413      	add	r3, r2
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff fb69 	bl	8006108 <st_dword>
			fs->wflag = 1;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	70da      	strb	r2, [r3, #3]
			break;
 8006a3c:	e008      	b.n	8006a50 <put_fat+0x1ce>
		}
	}
 8006a3e:	bf00      	nop
 8006a40:	e006      	b.n	8006a50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006a42:	bf00      	nop
 8006a44:	e004      	b.n	8006a50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006a46:	bf00      	nop
 8006a48:	e002      	b.n	8006a50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006a4a:	bf00      	nop
 8006a4c:	e000      	b.n	8006a50 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006a4e:	bf00      	nop
	return res;
 8006a50:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3724      	adds	r7, #36	; 0x24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd90      	pop	{r4, r7, pc}

08006a5a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b088      	sub	sp, #32
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d904      	bls.n	8006a80 <remove_chain+0x26>
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d301      	bcc.n	8006a84 <remove_chain+0x2a>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e04b      	b.n	8006b1c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00c      	beq.n	8006aa4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	69b8      	ldr	r0, [r7, #24]
 8006a92:	f7ff fef6 	bl	8006882 <put_fat>
 8006a96:	4603      	mov	r3, r0
 8006a98:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006a9a:	7ffb      	ldrb	r3, [r7, #31]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <remove_chain+0x4a>
 8006aa0:	7ffb      	ldrb	r3, [r7, #31]
 8006aa2:	e03b      	b.n	8006b1c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f7ff fe43 	bl	8006732 <get_fat>
 8006aac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d031      	beq.n	8006b18 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <remove_chain+0x64>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e02e      	b.n	8006b1c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac4:	d101      	bne.n	8006aca <remove_chain+0x70>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e028      	b.n	8006b1c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006aca:	2200      	movs	r2, #0
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	69b8      	ldr	r0, [r7, #24]
 8006ad0:	f7ff fed7 	bl	8006882 <put_fat>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006ad8:	7ffb      	ldrb	r3, [r7, #31]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <remove_chain+0x88>
 8006ade:	7ffb      	ldrb	r3, [r7, #31]
 8006ae0:	e01c      	b.n	8006b1c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	691a      	ldr	r2, [r3, #16]
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	3b02      	subs	r3, #2
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d20b      	bcs.n	8006b08 <remove_chain+0xae>
			fs->free_clst++;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	791b      	ldrb	r3, [r3, #4]
 8006afe:	f043 0301 	orr.w	r3, r3, #1
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d3c6      	bcc.n	8006aa4 <remove_chain+0x4a>
 8006b16:	e000      	b.n	8006b1a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006b18:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3720      	adds	r7, #32
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10d      	bne.n	8006b56 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <create_chain+0x2c>
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d31b      	bcc.n	8006b88 <create_chain+0x64>
 8006b50:	2301      	movs	r3, #1
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	e018      	b.n	8006b88 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff fdea 	bl	8006732 <get_fat>
 8006b5e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d801      	bhi.n	8006b6a <create_chain+0x46>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e070      	b.n	8006c4c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b70:	d101      	bne.n	8006b76 <create_chain+0x52>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	e06a      	b.n	8006c4c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d201      	bcs.n	8006b84 <create_chain+0x60>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	e063      	b.n	8006c4c <create_chain+0x128>
		scl = clst;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d307      	bcc.n	8006bac <create_chain+0x88>
				ncl = 2;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d901      	bls.n	8006bac <create_chain+0x88>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e04f      	b.n	8006c4c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006bac:	69f9      	ldr	r1, [r7, #28]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff fdbf 	bl	8006732 <get_fat>
 8006bb4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00e      	beq.n	8006bda <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d003      	beq.n	8006bca <create_chain+0xa6>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc8:	d101      	bne.n	8006bce <create_chain+0xaa>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	e03e      	b.n	8006c4c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d1da      	bne.n	8006b8c <create_chain+0x68>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	e038      	b.n	8006c4c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006bda:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006be0:	69f9      	ldr	r1, [r7, #28]
 8006be2:	6938      	ldr	r0, [r7, #16]
 8006be4:	f7ff fe4d 	bl	8006882 <put_fat>
 8006be8:	4603      	mov	r3, r0
 8006bea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <create_chain+0xe2>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d006      	beq.n	8006c06 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6938      	ldr	r0, [r7, #16]
 8006bfe:	f7ff fe40 	bl	8006882 <put_fat>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d116      	bne.n	8006c3a <create_chain+0x116>
		fs->last_clst = ncl;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	3b02      	subs	r3, #2
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d804      	bhi.n	8006c2a <create_chain+0x106>
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	1e5a      	subs	r2, r3, #1
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	791b      	ldrb	r3, [r3, #4]
 8006c2e:	f043 0301 	orr.w	r3, r3, #1
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	711a      	strb	r2, [r3, #4]
 8006c38:	e007      	b.n	8006c4a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d102      	bne.n	8006c46 <create_chain+0x122>
 8006c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c44:	e000      	b.n	8006c48 <create_chain+0x124>
 8006c46:	2301      	movs	r3, #1
 8006c48:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006c4a:	69fb      	ldr	r3, [r7, #28]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3720      	adds	r7, #32
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	3304      	adds	r3, #4
 8006c6a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	0a5b      	lsrs	r3, r3, #9
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	8952      	ldrh	r2, [r2, #10]
 8006c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c78:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1d1a      	adds	r2, r3, #4
 8006c7e:	613a      	str	r2, [r7, #16]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <clmt_clust+0x3a>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e010      	b.n	8006cb0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d307      	bcc.n	8006ca6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ca4:	e7e9      	b.n	8006c7a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006ca6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	4413      	add	r3, r2
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	371c      	adds	r7, #28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cd2:	d204      	bcs.n	8006cde <dir_sdi+0x22>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	f003 031f 	and.w	r3, r3, #31
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e063      	b.n	8006daa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d106      	bne.n	8006d02 <dir_sdi+0x46>
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d902      	bls.n	8006d02 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10c      	bne.n	8006d22 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	8912      	ldrh	r2, [r2, #8]
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d301      	bcc.n	8006d18 <dir_sdi+0x5c>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e048      	b.n	8006daa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	61da      	str	r2, [r3, #28]
 8006d20:	e029      	b.n	8006d76 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	895b      	ldrh	r3, [r3, #10]
 8006d26:	025b      	lsls	r3, r3, #9
 8006d28:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d2a:	e019      	b.n	8006d60 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6979      	ldr	r1, [r7, #20]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fcfe 	bl	8006732 <get_fat>
 8006d36:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d3e:	d101      	bne.n	8006d44 <dir_sdi+0x88>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e032      	b.n	8006daa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d904      	bls.n	8006d54 <dir_sdi+0x98>
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d301      	bcc.n	8006d58 <dir_sdi+0x9c>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e028      	b.n	8006daa <dir_sdi+0xee>
			ofs -= csz;
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d2e1      	bcs.n	8006d2c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006d68:	6979      	ldr	r1, [r7, #20]
 8006d6a:	6938      	ldr	r0, [r7, #16]
 8006d6c:	f7ff fcc2 	bl	80066f4 <clust2sect>
 8006d70:	4602      	mov	r2, r0
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <dir_sdi+0xcc>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e010      	b.n	8006daa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	69da      	ldr	r2, [r3, #28]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	0a5b      	lsrs	r3, r3, #9
 8006d90:	441a      	add	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da2:	441a      	add	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b086      	sub	sp, #24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	3320      	adds	r3, #32
 8006dc8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <dir_next+0x28>
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dd8:	d301      	bcc.n	8006dde <dir_next+0x2c>
 8006dda:	2304      	movs	r3, #4
 8006ddc:	e0aa      	b.n	8006f34 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f040 8098 	bne.w	8006f1a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	8912      	ldrh	r2, [r2, #8]
 8006e04:	4293      	cmp	r3, r2
 8006e06:	f0c0 8088 	bcc.w	8006f1a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	61da      	str	r2, [r3, #28]
 8006e10:	2304      	movs	r3, #4
 8006e12:	e08f      	b.n	8006f34 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	0a5b      	lsrs	r3, r3, #9
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	8952      	ldrh	r2, [r2, #10]
 8006e1c:	3a01      	subs	r2, #1
 8006e1e:	4013      	ands	r3, r2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d17a      	bne.n	8006f1a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	f7ff fc80 	bl	8006732 <get_fat>
 8006e32:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d801      	bhi.n	8006e3e <dir_next+0x8c>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e07a      	b.n	8006f34 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e44:	d101      	bne.n	8006e4a <dir_next+0x98>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e074      	b.n	8006f34 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d358      	bcc.n	8006f06 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d104      	bne.n	8006e64 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	61da      	str	r2, [r3, #28]
 8006e60:	2304      	movs	r3, #4
 8006e62:	e067      	b.n	8006f34 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	f7ff fe59 	bl	8006b24 <create_chain>
 8006e72:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <dir_next+0xcc>
 8006e7a:	2307      	movs	r3, #7
 8006e7c:	e05a      	b.n	8006f34 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <dir_next+0xd6>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e055      	b.n	8006f34 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e8e:	d101      	bne.n	8006e94 <dir_next+0xe2>
 8006e90:	2301      	movs	r3, #1
 8006e92:	e04f      	b.n	8006f34 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7ff fb4d 	bl	8006534 <sync_window>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <dir_next+0xf2>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e047      	b.n	8006f34 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3330      	adds	r3, #48	; 0x30
 8006ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff f977 	bl	80061a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	6979      	ldr	r1, [r7, #20]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7ff fc1a 	bl	80066f4 <clust2sect>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ec6:	e012      	b.n	8006eee <dir_next+0x13c>
						fs->wflag = 1;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7ff fb30 	bl	8006534 <sync_window>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <dir_next+0x12c>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e02a      	b.n	8006f34 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	613b      	str	r3, [r7, #16]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	62da      	str	r2, [r3, #44]	; 0x2c
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	895b      	ldrh	r3, [r3, #10]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d3e6      	bcc.n	8006ec8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad2      	subs	r2, r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006f0c:	6979      	ldr	r1, [r7, #20]
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f7ff fbf0 	bl	80066f4 <clust2sect>
 8006f14:	4602      	mov	r2, r0
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2c:	441a      	add	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff feb4 	bl	8006cbc <dir_sdi>
 8006f54:	4603      	mov	r3, r0
 8006f56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d12b      	bne.n	8006fb6 <dir_alloc+0x7a>
		n = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	4619      	mov	r1, r3
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f7ff fb27 	bl	80065bc <move_window>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d11d      	bne.n	8006fb4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2be5      	cmp	r3, #229	; 0xe5
 8006f80:	d004      	beq.n	8006f8c <dir_alloc+0x50>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d107      	bne.n	8006f9c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d102      	bne.n	8006fa0 <dir_alloc+0x64>
 8006f9a:	e00c      	b.n	8006fb6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff ff05 	bl	8006db2 <dir_next>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0d7      	beq.n	8006f62 <dir_alloc+0x26>
 8006fb2:	e000      	b.n	8006fb6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006fb4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d101      	bne.n	8006fc0 <dir_alloc+0x84>
 8006fbc:	2307      	movs	r3, #7
 8006fbe:	75fb      	strb	r3, [r7, #23]
	return res;
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	331a      	adds	r3, #26
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff f83f 	bl	800605c <ld_word>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d109      	bne.n	8006ffe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	3314      	adds	r3, #20
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff f834 	bl	800605c <ld_word>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	041b      	lsls	r3, r3, #16
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	331a      	adds	r3, #26
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	b292      	uxth	r2, r2
 800701c:	4611      	mov	r1, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff f857 	bl	80060d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b03      	cmp	r3, #3
 800702a:	d109      	bne.n	8007040 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f103 0214 	add.w	r2, r3, #20
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	0c1b      	lsrs	r3, r3, #16
 8007036:	b29b      	uxth	r3, r3
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f7ff f849 	bl	80060d2 <st_word>
	}
}
 8007040:	bf00      	nop
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007056:	2100      	movs	r1, #0
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff fe2f 	bl	8006cbc <dir_sdi>
 800705e:	4603      	mov	r3, r0
 8007060:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <dir_find+0x24>
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	e03e      	b.n	80070ea <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	4619      	mov	r1, r3
 8007072:	6938      	ldr	r0, [r7, #16]
 8007074:	f7ff faa2 	bl	80065bc <move_window>
 8007078:	4603      	mov	r3, r0
 800707a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d12f      	bne.n	80070e2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d102      	bne.n	8007096 <dir_find+0x4e>
 8007090:	2304      	movs	r3, #4
 8007092:	75fb      	strb	r3, [r7, #23]
 8007094:	e028      	b.n	80070e8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	330b      	adds	r3, #11
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	330b      	adds	r3, #11
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f003 0308 	and.w	r3, r3, #8
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <dir_find+0x86>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a18      	ldr	r0, [r3, #32]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3324      	adds	r3, #36	; 0x24
 80070c0:	220b      	movs	r2, #11
 80070c2:	4619      	mov	r1, r3
 80070c4:	f7ff f888 	bl	80061d8 <mem_cmp>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00b      	beq.n	80070e6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80070ce:	2100      	movs	r1, #0
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff fe6e 	bl	8006db2 <dir_next>
 80070d6:	4603      	mov	r3, r0
 80070d8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80070da:	7dfb      	ldrb	r3, [r7, #23]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0c5      	beq.n	800706c <dir_find+0x24>
 80070e0:	e002      	b.n	80070e8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80070e2:	bf00      	nop
 80070e4:	e000      	b.n	80070e8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80070e6:	bf00      	nop

	return res;
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007100:	2101      	movs	r1, #1
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7ff ff1a 	bl	8006f3c <dir_alloc>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d11c      	bne.n	800714c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	4619      	mov	r1, r3
 8007118:	68b8      	ldr	r0, [r7, #8]
 800711a:	f7ff fa4f 	bl	80065bc <move_window>
 800711e:	4603      	mov	r3, r0
 8007120:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d111      	bne.n	800714c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	2220      	movs	r2, #32
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff f836 	bl	80061a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a18      	ldr	r0, [r3, #32]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3324      	adds	r3, #36	; 0x24
 800713e:	220b      	movs	r2, #11
 8007140:	4619      	mov	r1, r3
 8007142:	f7ff f80d 	bl	8006160 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2201      	movs	r2, #1
 800714a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3324      	adds	r3, #36	; 0x24
 800716c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800716e:	220b      	movs	r2, #11
 8007170:	2120      	movs	r1, #32
 8007172:	68b8      	ldr	r0, [r7, #8]
 8007174:	f7ff f815 	bl	80061a2 <mem_set>
	si = i = 0; ni = 8;
 8007178:	2300      	movs	r3, #0
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	61fb      	str	r3, [r7, #28]
 8007180:	2308      	movs	r3, #8
 8007182:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	61fa      	str	r2, [r7, #28]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007192:	7efb      	ldrb	r3, [r7, #27]
 8007194:	2b20      	cmp	r3, #32
 8007196:	d94e      	bls.n	8007236 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007198:	7efb      	ldrb	r3, [r7, #27]
 800719a:	2b2f      	cmp	r3, #47	; 0x2f
 800719c:	d006      	beq.n	80071ac <create_name+0x54>
 800719e:	7efb      	ldrb	r3, [r7, #27]
 80071a0:	2b5c      	cmp	r3, #92	; 0x5c
 80071a2:	d110      	bne.n	80071c6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80071a4:	e002      	b.n	80071ac <create_name+0x54>
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	3301      	adds	r3, #1
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b2f      	cmp	r3, #47	; 0x2f
 80071b6:	d0f6      	beq.n	80071a6 <create_name+0x4e>
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	4413      	add	r3, r2
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b5c      	cmp	r3, #92	; 0x5c
 80071c2:	d0f0      	beq.n	80071a6 <create_name+0x4e>
			break;
 80071c4:	e038      	b.n	8007238 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80071c6:	7efb      	ldrb	r3, [r7, #27]
 80071c8:	2b2e      	cmp	r3, #46	; 0x2e
 80071ca:	d003      	beq.n	80071d4 <create_name+0x7c>
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d30c      	bcc.n	80071ee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2b0b      	cmp	r3, #11
 80071d8:	d002      	beq.n	80071e0 <create_name+0x88>
 80071da:	7efb      	ldrb	r3, [r7, #27]
 80071dc:	2b2e      	cmp	r3, #46	; 0x2e
 80071de:	d001      	beq.n	80071e4 <create_name+0x8c>
 80071e0:	2306      	movs	r3, #6
 80071e2:	e044      	b.n	800726e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80071e4:	2308      	movs	r3, #8
 80071e6:	613b      	str	r3, [r7, #16]
 80071e8:	230b      	movs	r3, #11
 80071ea:	617b      	str	r3, [r7, #20]
			continue;
 80071ec:	e022      	b.n	8007234 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80071ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	da04      	bge.n	8007200 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80071f6:	7efb      	ldrb	r3, [r7, #27]
 80071f8:	3b80      	subs	r3, #128	; 0x80
 80071fa:	4a1f      	ldr	r2, [pc, #124]	; (8007278 <create_name+0x120>)
 80071fc:	5cd3      	ldrb	r3, [r2, r3]
 80071fe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007200:	7efb      	ldrb	r3, [r7, #27]
 8007202:	4619      	mov	r1, r3
 8007204:	481d      	ldr	r0, [pc, #116]	; (800727c <create_name+0x124>)
 8007206:	f7ff f80e 	bl	8006226 <chk_chr>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <create_name+0xbc>
 8007210:	2306      	movs	r3, #6
 8007212:	e02c      	b.n	800726e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007214:	7efb      	ldrb	r3, [r7, #27]
 8007216:	2b60      	cmp	r3, #96	; 0x60
 8007218:	d905      	bls.n	8007226 <create_name+0xce>
 800721a:	7efb      	ldrb	r3, [r7, #27]
 800721c:	2b7a      	cmp	r3, #122	; 0x7a
 800721e:	d802      	bhi.n	8007226 <create_name+0xce>
 8007220:	7efb      	ldrb	r3, [r7, #27]
 8007222:	3b20      	subs	r3, #32
 8007224:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	613a      	str	r2, [r7, #16]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	4413      	add	r3, r2
 8007230:	7efa      	ldrb	r2, [r7, #27]
 8007232:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007234:	e7a6      	b.n	8007184 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007236:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	441a      	add	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <create_name+0xf4>
 8007248:	2306      	movs	r3, #6
 800724a:	e010      	b.n	800726e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2be5      	cmp	r3, #229	; 0xe5
 8007252:	d102      	bne.n	800725a <create_name+0x102>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2205      	movs	r2, #5
 8007258:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800725a:	7efb      	ldrb	r3, [r7, #27]
 800725c:	2b20      	cmp	r3, #32
 800725e:	d801      	bhi.n	8007264 <create_name+0x10c>
 8007260:	2204      	movs	r2, #4
 8007262:	e000      	b.n	8007266 <create_name+0x10e>
 8007264:	2200      	movs	r2, #0
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	330b      	adds	r3, #11
 800726a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800726c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800726e:	4618      	mov	r0, r3
 8007270:	3720      	adds	r7, #32
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	08008ef4 	.word	0x08008ef4
 800727c:	08008e54 	.word	0x08008e54

08007280 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007294:	e002      	b.n	800729c <follow_path+0x1c>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	3301      	adds	r3, #1
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b2f      	cmp	r3, #47	; 0x2f
 80072a2:	d0f8      	beq.n	8007296 <follow_path+0x16>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b5c      	cmp	r3, #92	; 0x5c
 80072aa:	d0f4      	beq.n	8007296 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2200      	movs	r2, #0
 80072b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	2b1f      	cmp	r3, #31
 80072b8:	d80a      	bhi.n	80072d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2280      	movs	r2, #128	; 0x80
 80072be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80072c2:	2100      	movs	r1, #0
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff fcf9 	bl	8006cbc <dir_sdi>
 80072ca:	4603      	mov	r3, r0
 80072cc:	75fb      	strb	r3, [r7, #23]
 80072ce:	e043      	b.n	8007358 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80072d0:	463b      	mov	r3, r7
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff ff3f 	bl	8007158 <create_name>
 80072da:	4603      	mov	r3, r0
 80072dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d134      	bne.n	800734e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7ff feaf 	bl	8007048 <dir_find>
 80072ea:	4603      	mov	r3, r0
 80072ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80072f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80072fc:	7dfb      	ldrb	r3, [r7, #23]
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d127      	bne.n	8007352 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007302:	7afb      	ldrb	r3, [r7, #11]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d122      	bne.n	8007352 <follow_path+0xd2>
 800730c:	2305      	movs	r3, #5
 800730e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007310:	e01f      	b.n	8007352 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007312:	7afb      	ldrb	r3, [r7, #11]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11c      	bne.n	8007356 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	799b      	ldrb	r3, [r3, #6]
 8007320:	f003 0310 	and.w	r3, r3, #16
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007328:	2305      	movs	r3, #5
 800732a:	75fb      	strb	r3, [r7, #23]
 800732c:	e014      	b.n	8007358 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733c:	4413      	add	r3, r2
 800733e:	4619      	mov	r1, r3
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7ff fe42 	bl	8006fca <ld_clust>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800734c:	e7c0      	b.n	80072d0 <follow_path+0x50>
			if (res != FR_OK) break;
 800734e:	bf00      	nop
 8007350:	e002      	b.n	8007358 <follow_path+0xd8>
				break;
 8007352:	bf00      	nop
 8007354:	e000      	b.n	8007358 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007356:	bf00      	nop
			}
		}
	}

	return res;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007362:	b480      	push	{r7}
 8007364:	b087      	sub	sp, #28
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800736a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800736e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d031      	beq.n	80073dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	e002      	b.n	8007386 <get_ldnumber+0x24>
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	3301      	adds	r3, #1
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b20      	cmp	r3, #32
 800738c:	d903      	bls.n	8007396 <get_ldnumber+0x34>
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b3a      	cmp	r3, #58	; 0x3a
 8007394:	d1f4      	bne.n	8007380 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b3a      	cmp	r3, #58	; 0x3a
 800739c:	d11c      	bne.n	80073d8 <get_ldnumber+0x76>
			tp = *path;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	60fa      	str	r2, [r7, #12]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	3b30      	subs	r3, #48	; 0x30
 80073ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2b09      	cmp	r3, #9
 80073b4:	d80e      	bhi.n	80073d4 <get_ldnumber+0x72>
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d10a      	bne.n	80073d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d107      	bne.n	80073d4 <get_ldnumber+0x72>
					vol = (int)i;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	3301      	adds	r3, #1
 80073cc:	617b      	str	r3, [r7, #20]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	e002      	b.n	80073de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80073d8:	2300      	movs	r3, #0
 80073da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80073dc:	693b      	ldr	r3, [r7, #16]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	70da      	strb	r2, [r3, #3]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007402:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff f8d8 	bl	80065bc <move_window>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <check_fs+0x2a>
 8007412:	2304      	movs	r3, #4
 8007414:	e038      	b.n	8007488 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3330      	adds	r3, #48	; 0x30
 800741a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fe1c 	bl	800605c <ld_word>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800742c:	429a      	cmp	r2, r3
 800742e:	d001      	beq.n	8007434 <check_fs+0x48>
 8007430:	2303      	movs	r3, #3
 8007432:	e029      	b.n	8007488 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800743a:	2be9      	cmp	r3, #233	; 0xe9
 800743c:	d009      	beq.n	8007452 <check_fs+0x66>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007444:	2beb      	cmp	r3, #235	; 0xeb
 8007446:	d11e      	bne.n	8007486 <check_fs+0x9a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800744e:	2b90      	cmp	r3, #144	; 0x90
 8007450:	d119      	bne.n	8007486 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3330      	adds	r3, #48	; 0x30
 8007456:	3336      	adds	r3, #54	; 0x36
 8007458:	4618      	mov	r0, r3
 800745a:	f7fe fe17 	bl	800608c <ld_dword>
 800745e:	4603      	mov	r3, r0
 8007460:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007464:	4a0a      	ldr	r2, [pc, #40]	; (8007490 <check_fs+0xa4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d101      	bne.n	800746e <check_fs+0x82>
 800746a:	2300      	movs	r3, #0
 800746c:	e00c      	b.n	8007488 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3330      	adds	r3, #48	; 0x30
 8007472:	3352      	adds	r3, #82	; 0x52
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe fe09 	bl	800608c <ld_dword>
 800747a:	4603      	mov	r3, r0
 800747c:	4a05      	ldr	r2, [pc, #20]	; (8007494 <check_fs+0xa8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d101      	bne.n	8007486 <check_fs+0x9a>
 8007482:	2300      	movs	r3, #0
 8007484:	e000      	b.n	8007488 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007486:	2302      	movs	r3, #2
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	00544146 	.word	0x00544146
 8007494:	33544146 	.word	0x33544146

08007498 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b096      	sub	sp, #88	; 0x58
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7ff ff58 	bl	8007362 <get_ldnumber>
 80074b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80074b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da01      	bge.n	80074be <find_volume+0x26>
 80074ba:	230b      	movs	r3, #11
 80074bc:	e22e      	b.n	800791c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80074be:	4aa8      	ldr	r2, [pc, #672]	; (8007760 <find_volume+0x2c8>)
 80074c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <find_volume+0x3a>
 80074ce:	230c      	movs	r3, #12
 80074d0:	e224      	b.n	800791c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	f023 0301 	bic.w	r3, r3, #1
 80074de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d01a      	beq.n	800751e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	785b      	ldrb	r3, [r3, #1]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fe fd17 	bl	8005f20 <disk_status>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80074f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10c      	bne.n	800751e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007504:	79fb      	ldrb	r3, [r7, #7]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <find_volume+0x82>
 800750a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800750e:	f003 0304 	and.w	r3, r3, #4
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007516:	230a      	movs	r3, #10
 8007518:	e200      	b.n	800791c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800751a:	2300      	movs	r3, #0
 800751c:	e1fe      	b.n	800791c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007526:	b2da      	uxtb	r2, r3
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	785b      	ldrb	r3, [r3, #1]
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe fd0f 	bl	8005f54 <disk_initialize>
 8007536:	4603      	mov	r3, r0
 8007538:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800753c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007548:	2303      	movs	r3, #3
 800754a:	e1e7      	b.n	800791c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <find_volume+0xca>
 8007552:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800755e:	230a      	movs	r3, #10
 8007560:	e1dc      	b.n	800791c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007568:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800756a:	f7ff ff3f 	bl	80073ec <check_fs>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007578:	2b02      	cmp	r3, #2
 800757a:	d14b      	bne.n	8007614 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800757c:	2300      	movs	r3, #0
 800757e:	643b      	str	r3, [r7, #64]	; 0x40
 8007580:	e01f      	b.n	80075c2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007590:	4413      	add	r3, r2
 8007592:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	3304      	adds	r3, #4
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d006      	beq.n	80075ac <find_volume+0x114>
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	3308      	adds	r3, #8
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fd72 	bl	800608c <ld_dword>
 80075a8:	4602      	mov	r2, r0
 80075aa:	e000      	b.n	80075ae <find_volume+0x116>
 80075ac:	2200      	movs	r2, #0
 80075ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80075b6:	440b      	add	r3, r1
 80075b8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80075bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075be:	3301      	adds	r3, #1
 80075c0:	643b      	str	r3, [r7, #64]	; 0x40
 80075c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d9dc      	bls.n	8007582 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80075c8:	2300      	movs	r3, #0
 80075ca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80075cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <find_volume+0x140>
 80075d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075d4:	3b01      	subs	r3, #1
 80075d6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80075d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80075e0:	4413      	add	r3, r2
 80075e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80075e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80075e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <find_volume+0x162>
 80075ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075f2:	f7ff fefb 	bl	80073ec <check_fs>
 80075f6:	4603      	mov	r3, r0
 80075f8:	e000      	b.n	80075fc <find_volume+0x164>
 80075fa:	2303      	movs	r3, #3
 80075fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007604:	2b01      	cmp	r3, #1
 8007606:	d905      	bls.n	8007614 <find_volume+0x17c>
 8007608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800760a:	3301      	adds	r3, #1
 800760c:	643b      	str	r3, [r7, #64]	; 0x40
 800760e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007610:	2b03      	cmp	r3, #3
 8007612:	d9e1      	bls.n	80075d8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007614:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007618:	2b04      	cmp	r3, #4
 800761a:	d101      	bne.n	8007620 <find_volume+0x188>
 800761c:	2301      	movs	r3, #1
 800761e:	e17d      	b.n	800791c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007620:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007624:	2b01      	cmp	r3, #1
 8007626:	d901      	bls.n	800762c <find_volume+0x194>
 8007628:	230d      	movs	r3, #13
 800762a:	e177      	b.n	800791c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	3330      	adds	r3, #48	; 0x30
 8007630:	330b      	adds	r3, #11
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fd12 	bl	800605c <ld_word>
 8007638:	4603      	mov	r3, r0
 800763a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800763e:	d001      	beq.n	8007644 <find_volume+0x1ac>
 8007640:	230d      	movs	r3, #13
 8007642:	e16b      	b.n	800791c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007646:	3330      	adds	r3, #48	; 0x30
 8007648:	3316      	adds	r3, #22
 800764a:	4618      	mov	r0, r3
 800764c:	f7fe fd06 	bl	800605c <ld_word>
 8007650:	4603      	mov	r3, r0
 8007652:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007656:	2b00      	cmp	r3, #0
 8007658:	d106      	bne.n	8007668 <find_volume+0x1d0>
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	3330      	adds	r3, #48	; 0x30
 800765e:	3324      	adds	r3, #36	; 0x24
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe fd13 	bl	800608c <ld_dword>
 8007666:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800766c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800766e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007670:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007676:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767a:	789b      	ldrb	r3, [r3, #2]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d005      	beq.n	800768c <find_volume+0x1f4>
 8007680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007682:	789b      	ldrb	r3, [r3, #2]
 8007684:	2b02      	cmp	r3, #2
 8007686:	d001      	beq.n	800768c <find_volume+0x1f4>
 8007688:	230d      	movs	r3, #13
 800768a:	e147      	b.n	800791c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	789b      	ldrb	r3, [r3, #2]
 8007690:	461a      	mov	r2, r3
 8007692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007694:	fb02 f303 	mul.w	r3, r2, r3
 8007698:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80076a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a8:	895b      	ldrh	r3, [r3, #10]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <find_volume+0x228>
 80076ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b0:	895b      	ldrh	r3, [r3, #10]
 80076b2:	461a      	mov	r2, r3
 80076b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b6:	895b      	ldrh	r3, [r3, #10]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	4013      	ands	r3, r2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <find_volume+0x22c>
 80076c0:	230d      	movs	r3, #13
 80076c2:	e12b      	b.n	800791c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	3330      	adds	r3, #48	; 0x30
 80076c8:	3311      	adds	r3, #17
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe fcc6 	bl	800605c <ld_word>
 80076d0:	4603      	mov	r3, r0
 80076d2:	461a      	mov	r2, r3
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	891b      	ldrh	r3, [r3, #8]
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <find_volume+0x252>
 80076e6:	230d      	movs	r3, #13
 80076e8:	e118      	b.n	800791c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	3330      	adds	r3, #48	; 0x30
 80076ee:	3313      	adds	r3, #19
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe fcb3 	bl	800605c <ld_word>
 80076f6:	4603      	mov	r3, r0
 80076f8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80076fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <find_volume+0x276>
 8007700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007702:	3330      	adds	r3, #48	; 0x30
 8007704:	3320      	adds	r3, #32
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe fcc0 	bl	800608c <ld_dword>
 800770c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	3330      	adds	r3, #48	; 0x30
 8007712:	330e      	adds	r3, #14
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe fca1 	bl	800605c <ld_word>
 800771a:	4603      	mov	r3, r0
 800771c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800771e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <find_volume+0x290>
 8007724:	230d      	movs	r3, #13
 8007726:	e0f9      	b.n	800791c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007728:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800772a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800772c:	4413      	add	r3, r2
 800772e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007730:	8912      	ldrh	r2, [r2, #8]
 8007732:	0912      	lsrs	r2, r2, #4
 8007734:	b292      	uxth	r2, r2
 8007736:	4413      	add	r3, r2
 8007738:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800773a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	429a      	cmp	r2, r3
 8007740:	d201      	bcs.n	8007746 <find_volume+0x2ae>
 8007742:	230d      	movs	r3, #13
 8007744:	e0ea      	b.n	800791c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800774e:	8952      	ldrh	r2, [r2, #10]
 8007750:	fbb3 f3f2 	udiv	r3, r3, r2
 8007754:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	2b00      	cmp	r3, #0
 800775a:	d103      	bne.n	8007764 <find_volume+0x2cc>
 800775c:	230d      	movs	r3, #13
 800775e:	e0dd      	b.n	800791c <find_volume+0x484>
 8007760:	20000034 	.word	0x20000034
		fmt = FS_FAT32;
 8007764:	2303      	movs	r3, #3
 8007766:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007770:	4293      	cmp	r3, r2
 8007772:	d802      	bhi.n	800777a <find_volume+0x2e2>
 8007774:	2302      	movs	r3, #2
 8007776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007780:	4293      	cmp	r3, r2
 8007782:	d802      	bhi.n	800778a <find_volume+0x2f2>
 8007784:	2301      	movs	r3, #1
 8007786:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	1c9a      	adds	r2, r3, #2
 800778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007790:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007794:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007796:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007798:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800779a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800779c:	441a      	add	r2, r3
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80077a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a6:	441a      	add	r2, r3
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80077ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d11e      	bne.n	80077f2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80077b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b6:	3330      	adds	r3, #48	; 0x30
 80077b8:	332a      	adds	r3, #42	; 0x2a
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fc4e 	bl	800605c <ld_word>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <find_volume+0x332>
 80077c6:	230d      	movs	r3, #13
 80077c8:	e0a8      	b.n	800791c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80077ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077cc:	891b      	ldrh	r3, [r3, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <find_volume+0x33e>
 80077d2:	230d      	movs	r3, #13
 80077d4:	e0a2      	b.n	800791c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	3330      	adds	r3, #48	; 0x30
 80077da:	332c      	adds	r3, #44	; 0x2c
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe fc55 	bl	800608c <ld_dword>
 80077e2:	4602      	mov	r2, r0
 80077e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	647b      	str	r3, [r7, #68]	; 0x44
 80077f0:	e01f      	b.n	8007832 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80077f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f4:	891b      	ldrh	r3, [r3, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <find_volume+0x366>
 80077fa:	230d      	movs	r3, #13
 80077fc:	e08e      	b.n	800791c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	6a1a      	ldr	r2, [r3, #32]
 8007802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007804:	441a      	add	r2, r3
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800780a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800780e:	2b02      	cmp	r3, #2
 8007810:	d103      	bne.n	800781a <find_volume+0x382>
 8007812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	e00a      	b.n	8007830 <find_volume+0x398>
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	695a      	ldr	r2, [r3, #20]
 800781e:	4613      	mov	r3, r2
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	4413      	add	r3, r2
 8007824:	085a      	lsrs	r2, r3, #1
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007830:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	699a      	ldr	r2, [r3, #24]
 8007836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007838:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800783c:	0a5b      	lsrs	r3, r3, #9
 800783e:	429a      	cmp	r2, r3
 8007840:	d201      	bcs.n	8007846 <find_volume+0x3ae>
 8007842:	230d      	movs	r3, #13
 8007844:	e06a      	b.n	800791c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800784c:	611a      	str	r2, [r3, #16]
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	691a      	ldr	r2, [r3, #16]
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007858:	2280      	movs	r2, #128	; 0x80
 800785a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800785c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007860:	2b03      	cmp	r3, #3
 8007862:	d149      	bne.n	80078f8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	3330      	adds	r3, #48	; 0x30
 8007868:	3330      	adds	r3, #48	; 0x30
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe fbf6 	bl	800605c <ld_word>
 8007870:	4603      	mov	r3, r0
 8007872:	2b01      	cmp	r3, #1
 8007874:	d140      	bne.n	80078f8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007878:	3301      	adds	r3, #1
 800787a:	4619      	mov	r1, r3
 800787c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800787e:	f7fe fe9d 	bl	80065bc <move_window>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d137      	bne.n	80078f8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788a:	2200      	movs	r2, #0
 800788c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800788e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007890:	3330      	adds	r3, #48	; 0x30
 8007892:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe fbe0 	bl	800605c <ld_word>
 800789c:	4603      	mov	r3, r0
 800789e:	461a      	mov	r2, r3
 80078a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d127      	bne.n	80078f8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80078a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078aa:	3330      	adds	r3, #48	; 0x30
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe fbed 	bl	800608c <ld_dword>
 80078b2:	4603      	mov	r3, r0
 80078b4:	4a1b      	ldr	r2, [pc, #108]	; (8007924 <find_volume+0x48c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d11e      	bne.n	80078f8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80078ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078bc:	3330      	adds	r3, #48	; 0x30
 80078be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe fbe2 	bl	800608c <ld_dword>
 80078c8:	4603      	mov	r3, r0
 80078ca:	4a17      	ldr	r2, [pc, #92]	; (8007928 <find_volume+0x490>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d113      	bne.n	80078f8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	3330      	adds	r3, #48	; 0x30
 80078d4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fbd7 	bl	800608c <ld_dword>
 80078de:	4602      	mov	r2, r0
 80078e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	3330      	adds	r3, #48	; 0x30
 80078e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe fbcd 	bl	800608c <ld_dword>
 80078f2:	4602      	mov	r2, r0
 80078f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80078fe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007900:	4b0a      	ldr	r3, [pc, #40]	; (800792c <find_volume+0x494>)
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	3301      	adds	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	4b08      	ldr	r3, [pc, #32]	; (800792c <find_volume+0x494>)
 800790a:	801a      	strh	r2, [r3, #0]
 800790c:	4b07      	ldr	r3, [pc, #28]	; (800792c <find_volume+0x494>)
 800790e:	881a      	ldrh	r2, [r3, #0]
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007914:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007916:	f7fe fde9 	bl	80064ec <clear_lock>
#endif
	return FR_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3758      	adds	r7, #88	; 0x58
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	41615252 	.word	0x41615252
 8007928:	61417272 	.word	0x61417272
 800792c:	20000038 	.word	0x20000038

08007930 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800793a:	2309      	movs	r3, #9
 800793c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d01c      	beq.n	800797e <validate+0x4e>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d018      	beq.n	800797e <validate+0x4e>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d013      	beq.n	800797e <validate+0x4e>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	889a      	ldrh	r2, [r3, #4]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	88db      	ldrh	r3, [r3, #6]
 8007960:	429a      	cmp	r2, r3
 8007962:	d10c      	bne.n	800797e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	785b      	ldrb	r3, [r3, #1]
 800796a:	4618      	mov	r0, r3
 800796c:	f7fe fad8 	bl	8005f20 <disk_status>
 8007970:	4603      	mov	r3, r0
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <validate+0x4e>
			res = FR_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d102      	bne.n	800798a <validate+0x5a>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	e000      	b.n	800798c <validate+0x5c>
 800798a:	2300      	movs	r3, #0
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	6013      	str	r3, [r2, #0]
	return res;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	4613      	mov	r3, r2
 80079a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80079ae:	f107 0310 	add.w	r3, r7, #16
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7ff fcd5 	bl	8007362 <get_ldnumber>
 80079b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	da01      	bge.n	80079c4 <f_mount+0x28>
 80079c0:	230b      	movs	r3, #11
 80079c2:	e02b      	b.n	8007a1c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80079c4:	4a17      	ldr	r2, [pc, #92]	; (8007a24 <f_mount+0x88>)
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80079d4:	69b8      	ldr	r0, [r7, #24]
 80079d6:	f7fe fd89 	bl	80064ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	2200      	movs	r2, #0
 80079de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	490d      	ldr	r1, [pc, #52]	; (8007a24 <f_mount+0x88>)
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <f_mount+0x66>
 80079fc:	79fb      	ldrb	r3, [r7, #7]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d001      	beq.n	8007a06 <f_mount+0x6a>
 8007a02:	2300      	movs	r3, #0
 8007a04:	e00a      	b.n	8007a1c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007a06:	f107 010c 	add.w	r1, r7, #12
 8007a0a:	f107 0308 	add.w	r3, r7, #8
 8007a0e:	2200      	movs	r2, #0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff fd41 	bl	8007498 <find_volume>
 8007a16:	4603      	mov	r3, r0
 8007a18:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3720      	adds	r7, #32
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20000034 	.word	0x20000034

08007a28 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b098      	sub	sp, #96	; 0x60
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	4613      	mov	r3, r2
 8007a34:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <f_open+0x18>
 8007a3c:	2309      	movs	r3, #9
 8007a3e:	e1ad      	b.n	8007d9c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007a40:	79fb      	ldrb	r3, [r7, #7]
 8007a42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a46:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007a48:	79fa      	ldrb	r2, [r7, #7]
 8007a4a:	f107 0110 	add.w	r1, r7, #16
 8007a4e:	f107 0308 	add.w	r3, r7, #8
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7ff fd20 	bl	8007498 <find_volume>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f040 8191 	bne.w	8007d8a <f_open+0x362>
		dj.obj.fs = fs;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	f107 0314 	add.w	r3, r7, #20
 8007a72:	4611      	mov	r1, r2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff fc03 	bl	8007280 <follow_path>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11a      	bne.n	8007abe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007a88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a8c:	b25b      	sxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	da03      	bge.n	8007a9a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007a92:	2306      	movs	r3, #6
 8007a94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007a98:	e011      	b.n	8007abe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	bf14      	ite	ne
 8007aa4:	2301      	movne	r3, #1
 8007aa6:	2300      	moveq	r3, #0
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f107 0314 	add.w	r3, r7, #20
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe fbd2 	bl	800625c <chk_lock>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007abe:	79fb      	ldrb	r3, [r7, #7]
 8007ac0:	f003 031c 	and.w	r3, r3, #28
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d07f      	beq.n	8007bc8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d017      	beq.n	8007b00 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007ad0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d10e      	bne.n	8007af6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007ad8:	f7fe fc1c 	bl	8006314 <enq_lock>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d006      	beq.n	8007af0 <f_open+0xc8>
 8007ae2:	f107 0314 	add.w	r3, r7, #20
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff fb03 	bl	80070f2 <dir_register>
 8007aec:	4603      	mov	r3, r0
 8007aee:	e000      	b.n	8007af2 <f_open+0xca>
 8007af0:	2312      	movs	r3, #18
 8007af2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	f043 0308 	orr.w	r3, r3, #8
 8007afc:	71fb      	strb	r3, [r7, #7]
 8007afe:	e010      	b.n	8007b22 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007b00:	7ebb      	ldrb	r3, [r7, #26]
 8007b02:	f003 0311 	and.w	r3, r3, #17
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <f_open+0xea>
					res = FR_DENIED;
 8007b0a:	2307      	movs	r3, #7
 8007b0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007b10:	e007      	b.n	8007b22 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <f_open+0xfa>
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007b22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d168      	bne.n	8007bfc <f_open+0x1d4>
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	f003 0308 	and.w	r3, r3, #8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d063      	beq.n	8007bfc <f_open+0x1d4>
				dw = GET_FATTIME();
 8007b34:	f7fd ff9c 	bl	8005a70 <get_fattime>
 8007b38:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3c:	330e      	adds	r3, #14
 8007b3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe fae1 	bl	8006108 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b48:	3316      	adds	r3, #22
 8007b4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe fadb 	bl	8006108 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b54:	330b      	adds	r3, #11
 8007b56:	2220      	movs	r2, #32
 8007b58:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff fa32 	bl	8006fca <ld_clust>
 8007b66:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff fa4a 	bl	8007008 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b76:	331c      	adds	r3, #28
 8007b78:	2100      	movs	r1, #0
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fe fac4 	bl	8006108 <st_dword>
					fs->wflag = 1;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2201      	movs	r2, #1
 8007b84:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d037      	beq.n	8007bfc <f_open+0x1d4>
						dw = fs->winsect;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007b92:	f107 0314 	add.w	r3, r7, #20
 8007b96:	2200      	movs	r2, #0
 8007b98:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fe ff5d 	bl	8006a5a <remove_chain>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d126      	bne.n	8007bfc <f_open+0x1d4>
							res = move_window(fs, dw);
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fe fd02 	bl	80065bc <move_window>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bc2:	3a01      	subs	r2, #1
 8007bc4:	60da      	str	r2, [r3, #12]
 8007bc6:	e019      	b.n	8007bfc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007bc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d115      	bne.n	8007bfc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007bd0:	7ebb      	ldrb	r3, [r7, #26]
 8007bd2:	f003 0310 	and.w	r3, r3, #16
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8007bda:	2304      	movs	r3, #4
 8007bdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007be0:	e00c      	b.n	8007bfc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d007      	beq.n	8007bfc <f_open+0x1d4>
 8007bec:	7ebb      	ldrb	r3, [r7, #26]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <f_open+0x1d4>
						res = FR_DENIED;
 8007bf6:	2307      	movs	r3, #7
 8007bf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d128      	bne.n	8007c56 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	f003 0308 	and.w	r3, r3, #8
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c14:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	f023 0301 	bic.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bf14      	ite	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	2300      	moveq	r3, #0
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	f107 0314 	add.w	r3, r7, #20
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe fb8b 	bl	8006358 <inc_lock>
 8007c42:	4602      	mov	r2, r0
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d102      	bne.n	8007c56 <f_open+0x22e>
 8007c50:	2302      	movs	r3, #2
 8007c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007c56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f040 8095 	bne.w	8007d8a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c64:	4611      	mov	r1, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff f9af 	bl	8006fca <ld_clust>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c74:	331c      	adds	r3, #28
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fa08 	bl	800608c <ld_dword>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	88da      	ldrh	r2, [r3, #6]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	79fa      	ldrb	r2, [r7, #7]
 8007c9a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3330      	adds	r3, #48	; 0x30
 8007cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fe fa72 	bl	80061a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007cbe:	79fb      	ldrb	r3, [r7, #7]
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d060      	beq.n	8007d8a <f_open+0x362>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d05c      	beq.n	8007d8a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	895b      	ldrh	r3, [r3, #10]
 8007cdc:	025b      	lsls	r3, r3, #9
 8007cde:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	657b      	str	r3, [r7, #84]	; 0x54
 8007cec:	e016      	b.n	8007d1c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fd1d 	bl	8006732 <get_fat>
 8007cf8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d802      	bhi.n	8007d06 <f_open+0x2de>
 8007d00:	2302      	movs	r3, #2
 8007d02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d0c:	d102      	bne.n	8007d14 <f_open+0x2ec>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007d14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	657b      	str	r3, [r7, #84]	; 0x54
 8007d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d103      	bne.n	8007d2c <f_open+0x304>
 8007d24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d8e0      	bhi.n	8007cee <f_open+0x2c6>
				}
				fp->clust = clst;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d30:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007d32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d127      	bne.n	8007d8a <f_open+0x362>
 8007d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d022      	beq.n	8007d8a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fe fcd3 	bl	80066f4 <clust2sect>
 8007d4e:	6478      	str	r0, [r7, #68]	; 0x44
 8007d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d103      	bne.n	8007d5e <f_open+0x336>
						res = FR_INT_ERR;
 8007d56:	2302      	movs	r3, #2
 8007d58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007d5c:	e015      	b.n	8007d8a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d60:	0a5a      	lsrs	r2, r3, #9
 8007d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d64:	441a      	add	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	7858      	ldrb	r0, [r3, #1]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6a1a      	ldr	r2, [r3, #32]
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f7fe f911 	bl	8005fa0 <disk_read>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <f_open+0x362>
 8007d84:	2301      	movs	r3, #1
 8007d86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <f_open+0x370>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007d98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3760      	adds	r7, #96	; 0x60
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08e      	sub	sp, #56	; 0x38
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f107 0214 	add.w	r2, r7, #20
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff fdb3 	bl	8007930 <validate>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007dd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d107      	bne.n	8007de8 <f_read+0x44>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	7d5b      	ldrb	r3, [r3, #21]
 8007ddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007de0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <f_read+0x4a>
 8007de8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007dec:	e115      	b.n	800801a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	7d1b      	ldrb	r3, [r3, #20]
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <f_read+0x5a>
 8007dfa:	2307      	movs	r3, #7
 8007dfc:	e10d      	b.n	800801a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	f240 80fe 	bls.w	8008010 <f_read+0x26c>
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007e18:	e0fa      	b.n	8008010 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f040 80c6 	bne.w	8007fb4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	0a5b      	lsrs	r3, r3, #9
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	8952      	ldrh	r2, [r2, #10]
 8007e32:	3a01      	subs	r2, #1
 8007e34:	4013      	ands	r3, r2
 8007e36:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d12f      	bne.n	8007e9e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d103      	bne.n	8007e4e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e4c:	e013      	b.n	8007e76 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d007      	beq.n	8007e66 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f7fe fef9 	bl	8006c54 <clmt_clust>
 8007e62:	6338      	str	r0, [r7, #48]	; 0x30
 8007e64:	e007      	b.n	8007e76 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	4610      	mov	r0, r2
 8007e70:	f7fe fc5f 	bl	8006732 <get_fat>
 8007e74:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d804      	bhi.n	8007e86 <f_read+0xe2>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	755a      	strb	r2, [r3, #21]
 8007e82:	2302      	movs	r3, #2
 8007e84:	e0c9      	b.n	800801a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e8c:	d104      	bne.n	8007e98 <f_read+0xf4>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2201      	movs	r2, #1
 8007e92:	755a      	strb	r2, [r3, #21]
 8007e94:	2301      	movs	r3, #1
 8007e96:	e0c0      	b.n	800801a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	69db      	ldr	r3, [r3, #28]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	f7fe fc24 	bl	80066f4 <clust2sect>
 8007eac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d104      	bne.n	8007ebe <f_read+0x11a>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	755a      	strb	r2, [r3, #21]
 8007eba:	2302      	movs	r3, #2
 8007ebc:	e0ad      	b.n	800801a <f_read+0x276>
			sect += csect;
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	0a5b      	lsrs	r3, r3, #9
 8007eca:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d039      	beq.n	8007f46 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007ed2:	69fa      	ldr	r2, [r7, #28]
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	4413      	add	r3, r2
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	8952      	ldrh	r2, [r2, #10]
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d905      	bls.n	8007eec <f_read+0x148>
					cc = fs->csize - csect;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	895b      	ldrh	r3, [r3, #10]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	7858      	ldrb	r0, [r3, #1]
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ef6:	f7fe f853 	bl	8005fa0 <disk_read>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d004      	beq.n	8007f0a <f_read+0x166>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	755a      	strb	r2, [r3, #21]
 8007f06:	2301      	movs	r3, #1
 8007f08:	e087      	b.n	800801a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	7d1b      	ldrb	r3, [r3, #20]
 8007f0e:	b25b      	sxtb	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	da14      	bge.n	8007f3e <f_read+0x19a>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a1a      	ldr	r2, [r3, #32]
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d90d      	bls.n	8007f3e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a1a      	ldr	r2, [r3, #32]
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	025b      	lsls	r3, r3, #9
 8007f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f2e:	18d0      	adds	r0, r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3330      	adds	r3, #48	; 0x30
 8007f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f38:	4619      	mov	r1, r3
 8007f3a:	f7fe f911 	bl	8006160 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	025b      	lsls	r3, r3, #9
 8007f42:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007f44:	e050      	b.n	8007fe8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d02e      	beq.n	8007fae <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	7d1b      	ldrb	r3, [r3, #20]
 8007f54:	b25b      	sxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	da18      	bge.n	8007f8c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	7858      	ldrb	r0, [r3, #1]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a1a      	ldr	r2, [r3, #32]
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f7fe f839 	bl	8005fe0 <disk_write>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d004      	beq.n	8007f7e <f_read+0x1da>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2201      	movs	r2, #1
 8007f78:	755a      	strb	r2, [r3, #21]
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e04d      	b.n	800801a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	7d1b      	ldrb	r3, [r3, #20]
 8007f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	7858      	ldrb	r0, [r3, #1]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f96:	2301      	movs	r3, #1
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	f7fe f801 	bl	8005fa0 <disk_read>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d004      	beq.n	8007fae <f_read+0x20a>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	755a      	strb	r2, [r3, #21]
 8007faa:	2301      	movs	r3, #1
 8007fac:	e035      	b.n	800801a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d901      	bls.n	8007fce <f_read+0x22a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fdc:	4413      	add	r3, r2
 8007fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fe4:	f7fe f8bc 	bl	8006160 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	4413      	add	r3, r2
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	699a      	ldr	r2, [r3, #24]
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	441a      	add	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	619a      	str	r2, [r3, #24]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	441a      	add	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	f47f af01 	bne.w	8007e1a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3738      	adds	r7, #56	; 0x38
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b08c      	sub	sp, #48	; 0x30
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2200      	movs	r2, #0
 8008038:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f107 0210 	add.w	r2, r7, #16
 8008040:	4611      	mov	r1, r2
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff fc74 	bl	8007930 <validate>
 8008048:	4603      	mov	r3, r0
 800804a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800804e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008052:	2b00      	cmp	r3, #0
 8008054:	d107      	bne.n	8008066 <f_write+0x44>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	7d5b      	ldrb	r3, [r3, #21]
 800805a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800805e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008062:	2b00      	cmp	r3, #0
 8008064:	d002      	beq.n	800806c <f_write+0x4a>
 8008066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800806a:	e14b      	b.n	8008304 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	7d1b      	ldrb	r3, [r3, #20]
 8008070:	f003 0302 	and.w	r3, r3, #2
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <f_write+0x5a>
 8008078:	2307      	movs	r3, #7
 800807a:	e143      	b.n	8008304 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	699a      	ldr	r2, [r3, #24]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	441a      	add	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	429a      	cmp	r2, r3
 800808a:	f080 812d 	bcs.w	80082e8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	43db      	mvns	r3, r3
 8008094:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008096:	e127      	b.n	80082e8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f040 80e3 	bne.w	800826c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	0a5b      	lsrs	r3, r3, #9
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	8952      	ldrh	r2, [r2, #10]
 80080b0:	3a01      	subs	r2, #1
 80080b2:	4013      	ands	r3, r2
 80080b4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d143      	bne.n	8008144 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10c      	bne.n	80080de <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d11a      	bne.n	8008106 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2100      	movs	r1, #0
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe fd25 	bl	8006b24 <create_chain>
 80080da:	62b8      	str	r0, [r7, #40]	; 0x28
 80080dc:	e013      	b.n	8008106 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	4619      	mov	r1, r3
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f7fe fdb1 	bl	8006c54 <clmt_clust>
 80080f2:	62b8      	str	r0, [r7, #40]	; 0x28
 80080f4:	e007      	b.n	8008106 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	4619      	mov	r1, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	f7fe fd10 	bl	8006b24 <create_chain>
 8008104:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80f2 	beq.w	80082f2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	2b01      	cmp	r3, #1
 8008112:	d104      	bne.n	800811e <f_write+0xfc>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2202      	movs	r2, #2
 8008118:	755a      	strb	r2, [r3, #21]
 800811a:	2302      	movs	r3, #2
 800811c:	e0f2      	b.n	8008304 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008124:	d104      	bne.n	8008130 <f_write+0x10e>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	755a      	strb	r2, [r3, #21]
 800812c:	2301      	movs	r3, #1
 800812e:	e0e9      	b.n	8008304 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008134:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <f_write+0x122>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008142:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	7d1b      	ldrb	r3, [r3, #20]
 8008148:	b25b      	sxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	da18      	bge.n	8008180 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	7858      	ldrb	r0, [r3, #1]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6a1a      	ldr	r2, [r3, #32]
 800815c:	2301      	movs	r3, #1
 800815e:	f7fd ff3f 	bl	8005fe0 <disk_write>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d004      	beq.n	8008172 <f_write+0x150>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2201      	movs	r2, #1
 800816c:	755a      	strb	r2, [r3, #21]
 800816e:	2301      	movs	r3, #1
 8008170:	e0c8      	b.n	8008304 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	7d1b      	ldrb	r3, [r3, #20]
 8008176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800817a:	b2da      	uxtb	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	4619      	mov	r1, r3
 8008188:	4610      	mov	r0, r2
 800818a:	f7fe fab3 	bl	80066f4 <clust2sect>
 800818e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d104      	bne.n	80081a0 <f_write+0x17e>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2202      	movs	r2, #2
 800819a:	755a      	strb	r2, [r3, #21]
 800819c:	2302      	movs	r3, #2
 800819e:	e0b1      	b.n	8008304 <f_write+0x2e2>
			sect += csect;
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	4413      	add	r3, r2
 80081a6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	0a5b      	lsrs	r3, r3, #9
 80081ac:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d03c      	beq.n	800822e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	4413      	add	r3, r2
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	8952      	ldrh	r2, [r2, #10]
 80081be:	4293      	cmp	r3, r2
 80081c0:	d905      	bls.n	80081ce <f_write+0x1ac>
					cc = fs->csize - csect;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	895b      	ldrh	r3, [r3, #10]
 80081c6:	461a      	mov	r2, r3
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	7858      	ldrb	r0, [r3, #1]
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	69f9      	ldr	r1, [r7, #28]
 80081d8:	f7fd ff02 	bl	8005fe0 <disk_write>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d004      	beq.n	80081ec <f_write+0x1ca>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	755a      	strb	r2, [r3, #21]
 80081e8:	2301      	movs	r3, #1
 80081ea:	e08b      	b.n	8008304 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a1a      	ldr	r2, [r3, #32]
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	6a3a      	ldr	r2, [r7, #32]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d915      	bls.n	8008226 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a1a      	ldr	r2, [r3, #32]
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	025b      	lsls	r3, r3, #9
 800820a:	69fa      	ldr	r2, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008212:	4619      	mov	r1, r3
 8008214:	f7fd ffa4 	bl	8006160 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	7d1b      	ldrb	r3, [r3, #20]
 800821c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008220:	b2da      	uxtb	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	025b      	lsls	r3, r3, #9
 800822a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800822c:	e03f      	b.n	80082ae <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	429a      	cmp	r2, r3
 8008236:	d016      	beq.n	8008266 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	699a      	ldr	r2, [r3, #24]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008240:	429a      	cmp	r2, r3
 8008242:	d210      	bcs.n	8008266 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	7858      	ldrb	r0, [r3, #1]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800824e:	2301      	movs	r3, #1
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	f7fd fea5 	bl	8005fa0 <disk_read>
 8008256:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008258:	2b00      	cmp	r3, #0
 800825a:	d004      	beq.n	8008266 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	755a      	strb	r2, [r3, #21]
 8008262:	2301      	movs	r3, #1
 8008264:	e04e      	b.n	8008304 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008274:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800827a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	429a      	cmp	r2, r3
 8008280:	d901      	bls.n	8008286 <f_write+0x264>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008294:	4413      	add	r3, r2
 8008296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008298:	69f9      	ldr	r1, [r7, #28]
 800829a:	4618      	mov	r0, r3
 800829c:	f7fd ff60 	bl	8006160 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	7d1b      	ldrb	r3, [r3, #20]
 80082a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	4413      	add	r3, r2
 80082b4:	61fb      	str	r3, [r7, #28]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	699a      	ldr	r2, [r3, #24]
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	441a      	add	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	619a      	str	r2, [r3, #24]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	bf38      	it	cc
 80082ce:	461a      	movcc	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	60da      	str	r2, [r3, #12]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	441a      	add	r2, r3
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f47f aed4 	bne.w	8008098 <f_write+0x76>
 80082f0:	e000      	b.n	80082f4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80082f2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	7d1b      	ldrb	r3, [r3, #20]
 80082f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3730      	adds	r7, #48	; 0x30
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f107 0208 	add.w	r2, r7, #8
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff fb07 	bl	8007930 <validate>
 8008322:	4603      	mov	r3, r0
 8008324:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d168      	bne.n	80083fe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	7d1b      	ldrb	r3, [r3, #20]
 8008330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008334:	2b00      	cmp	r3, #0
 8008336:	d062      	beq.n	80083fe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	7d1b      	ldrb	r3, [r3, #20]
 800833c:	b25b      	sxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	da15      	bge.n	800836e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	7858      	ldrb	r0, [r3, #1]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a1a      	ldr	r2, [r3, #32]
 8008350:	2301      	movs	r3, #1
 8008352:	f7fd fe45 	bl	8005fe0 <disk_write>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <f_sync+0x54>
 800835c:	2301      	movs	r3, #1
 800835e:	e04f      	b.n	8008400 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	7d1b      	ldrb	r3, [r3, #20]
 8008364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008368:	b2da      	uxtb	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800836e:	f7fd fb7f 	bl	8005a70 <get_fattime>
 8008372:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	4619      	mov	r1, r3
 800837c:	4610      	mov	r0, r2
 800837e:	f7fe f91d 	bl	80065bc <move_window>
 8008382:	4603      	mov	r3, r0
 8008384:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008386:	7dfb      	ldrb	r3, [r7, #23]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d138      	bne.n	80083fe <f_sync+0xf2>
					dir = fp->dir_ptr;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008390:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	330b      	adds	r3, #11
 8008396:	781a      	ldrb	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	330b      	adds	r3, #11
 800839c:	f042 0220 	orr.w	r2, r2, #32
 80083a0:	b2d2      	uxtb	r2, r2
 80083a2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6818      	ldr	r0, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	461a      	mov	r2, r3
 80083ae:	68f9      	ldr	r1, [r7, #12]
 80083b0:	f7fe fe2a 	bl	8007008 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f103 021c 	add.w	r2, r3, #28
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	4619      	mov	r1, r3
 80083c0:	4610      	mov	r0, r2
 80083c2:	f7fd fea1 	bl	8006108 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3316      	adds	r3, #22
 80083ca:	6939      	ldr	r1, [r7, #16]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fd fe9b 	bl	8006108 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3312      	adds	r3, #18
 80083d6:	2100      	movs	r1, #0
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fd fe7a 	bl	80060d2 <st_word>
					fs->wflag = 1;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2201      	movs	r2, #1
 80083e2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe f916 	bl	8006618 <sync_fs>
 80083ec:	4603      	mov	r3, r0
 80083ee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	7d1b      	ldrb	r3, [r3, #20]
 80083f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7ff ff7b 	bl	800830c <f_sync>
 8008416:	4603      	mov	r3, r0
 8008418:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d118      	bne.n	8008452 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f107 0208 	add.w	r2, r7, #8
 8008426:	4611      	mov	r1, r2
 8008428:	4618      	mov	r0, r3
 800842a:	f7ff fa81 	bl	8007930 <validate>
 800842e:	4603      	mov	r3, r0
 8008430:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10c      	bne.n	8008452 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	4618      	mov	r0, r3
 800843e:	f7fe f819 	bl	8006474 <dec_lock>
 8008442:	4603      	mov	r3, r0
 8008444:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d102      	bne.n	8008452 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800845c:	b590      	push	{r4, r7, lr}
 800845e:	b09d      	sub	sp, #116	; 0x74
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	607a      	str	r2, [r7, #4]
 8008466:	603b      	str	r3, [r7, #0]
 8008468:	460b      	mov	r3, r1
 800846a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800846c:	2301      	movs	r3, #1
 800846e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8008470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008474:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe ff71 	bl	8007362 <get_ldnumber>
 8008480:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008484:	2b00      	cmp	r3, #0
 8008486:	da02      	bge.n	800848e <f_mkfs+0x32>
 8008488:	230b      	movs	r3, #11
 800848a:	f000 bc0d 	b.w	8008ca8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800848e:	4a94      	ldr	r2, [pc, #592]	; (80086e0 <f_mkfs+0x284>)
 8008490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d005      	beq.n	80084a6 <f_mkfs+0x4a>
 800849a:	4a91      	ldr	r2, [pc, #580]	; (80086e0 <f_mkfs+0x284>)
 800849c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084a2:	2200      	movs	r2, #0
 80084a4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80084a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80084ac:	2300      	movs	r3, #0
 80084ae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80084b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fd fd4c 	bl	8005f54 <disk_initialize>
 80084bc:	4603      	mov	r3, r0
 80084be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80084c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <f_mkfs+0x76>
 80084ce:	2303      	movs	r3, #3
 80084d0:	e3ea      	b.n	8008ca8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80084d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <f_mkfs+0x86>
 80084de:	230a      	movs	r3, #10
 80084e0:	e3e2      	b.n	8008ca8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80084e2:	f107 0214 	add.w	r2, r7, #20
 80084e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80084ea:	2103      	movs	r1, #3
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fd fd97 	bl	8006020 <disk_ioctl>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10c      	bne.n	8008512 <f_mkfs+0xb6>
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <f_mkfs+0xb6>
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008504:	d805      	bhi.n	8008512 <f_mkfs+0xb6>
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	1e5a      	subs	r2, r3, #1
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	4013      	ands	r3, r2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <f_mkfs+0xba>
 8008512:	2301      	movs	r3, #1
 8008514:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8008516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <f_mkfs+0xce>
 8008522:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	429a      	cmp	r2, r3
 8008528:	d309      	bcc.n	800853e <f_mkfs+0xe2>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008530:	d805      	bhi.n	800853e <f_mkfs+0xe2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	1e5a      	subs	r2, r3, #1
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4013      	ands	r3, r2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <f_mkfs+0xe6>
 800853e:	2313      	movs	r3, #19
 8008540:	e3b2      	b.n	8008ca8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8008542:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	fbb2 f3f3 	udiv	r3, r2, r3
 800854a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8008550:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008552:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008556:	fbb2 f3f3 	udiv	r3, r2, r3
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800855c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008560:	fb02 f303 	mul.w	r3, r2, r3
 8008564:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <f_mkfs+0x114>
 800856c:	230e      	movs	r3, #14
 800856e:	e39b      	b.n	8008ca8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8008570:	f107 0210 	add.w	r2, r7, #16
 8008574:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008578:	2101      	movs	r1, #1
 800857a:	4618      	mov	r0, r3
 800857c:	f7fd fd50 	bl	8006020 <disk_ioctl>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <f_mkfs+0x12e>
 8008586:	2301      	movs	r3, #1
 8008588:	e38e      	b.n	8008ca8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800858a:	7afb      	ldrb	r3, [r7, #11]
 800858c:	f003 0308 	and.w	r3, r3, #8
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <f_mkfs+0x13c>
 8008594:	2300      	movs	r3, #0
 8008596:	e000      	b.n	800859a <f_mkfs+0x13e>
 8008598:	233f      	movs	r3, #63	; 0x3f
 800859a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d901      	bls.n	80085a8 <f_mkfs+0x14c>
 80085a4:	230e      	movs	r3, #14
 80085a6:	e37f      	b.n	8008ca8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	2b7f      	cmp	r3, #127	; 0x7f
 80085b4:	d801      	bhi.n	80085ba <f_mkfs+0x15e>
 80085b6:	230e      	movs	r3, #14
 80085b8:	e376      	b.n	8008ca8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b80      	cmp	r3, #128	; 0x80
 80085be:	d901      	bls.n	80085c4 <f_mkfs+0x168>
 80085c0:	2313      	movs	r3, #19
 80085c2:	e371      	b.n	8008ca8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80085c4:	7afb      	ldrb	r3, [r7, #11]
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00d      	beq.n	80085ea <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80085ce:	7afb      	ldrb	r3, [r7, #11]
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d004      	beq.n	80085e2 <f_mkfs+0x186>
 80085d8:	7afb      	ldrb	r3, [r7, #11]
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d103      	bne.n	80085ea <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80085e2:	2303      	movs	r3, #3
 80085e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80085e8:	e009      	b.n	80085fe <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80085ea:	7afb      	ldrb	r3, [r7, #11]
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <f_mkfs+0x19c>
 80085f4:	2313      	movs	r3, #19
 80085f6:	e357      	b.n	8008ca8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80085f8:	2302      	movs	r3, #2
 80085fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8008602:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008606:	2b03      	cmp	r3, #3
 8008608:	d13c      	bne.n	8008684 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800860a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800860c:	2b00      	cmp	r3, #0
 800860e:	d11b      	bne.n	8008648 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	0c5b      	lsrs	r3, r3, #17
 8008614:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8008616:	2300      	movs	r3, #0
 8008618:	64bb      	str	r3, [r7, #72]	; 0x48
 800861a:	2301      	movs	r3, #1
 800861c:	653b      	str	r3, [r7, #80]	; 0x50
 800861e:	e005      	b.n	800862c <f_mkfs+0x1d0>
 8008620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008622:	3301      	adds	r3, #1
 8008624:	64bb      	str	r3, [r7, #72]	; 0x48
 8008626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	653b      	str	r3, [r7, #80]	; 0x50
 800862c:	4a2d      	ldr	r2, [pc, #180]	; (80086e4 <f_mkfs+0x288>)
 800862e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d007      	beq.n	8008648 <f_mkfs+0x1ec>
 8008638:	4a2a      	ldr	r2, [pc, #168]	; (80086e4 <f_mkfs+0x288>)
 800863a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800863c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008640:	461a      	mov	r2, r3
 8008642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008644:	4293      	cmp	r3, r2
 8008646:	d2eb      	bcs.n	8008620 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800864c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008650:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	3302      	adds	r3, #2
 8008656:	009a      	lsls	r2, r3, #2
 8008658:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800865a:	4413      	add	r3, r2
 800865c:	1e5a      	subs	r2, r3, #1
 800865e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008660:	fbb2 f3f3 	udiv	r3, r2, r3
 8008664:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8008666:	2320      	movs	r3, #32
 8008668:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800866a:	2300      	movs	r3, #0
 800866c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008674:	4293      	cmp	r3, r2
 8008676:	d903      	bls.n	8008680 <f_mkfs+0x224>
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	4a1b      	ldr	r2, [pc, #108]	; (80086e8 <f_mkfs+0x28c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d952      	bls.n	8008726 <f_mkfs+0x2ca>
 8008680:	230e      	movs	r3, #14
 8008682:	e311      	b.n	8008ca8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8008684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008686:	2b00      	cmp	r3, #0
 8008688:	d11b      	bne.n	80086c2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	0b1b      	lsrs	r3, r3, #12
 800868e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8008690:	2300      	movs	r3, #0
 8008692:	64bb      	str	r3, [r7, #72]	; 0x48
 8008694:	2301      	movs	r3, #1
 8008696:	653b      	str	r3, [r7, #80]	; 0x50
 8008698:	e005      	b.n	80086a6 <f_mkfs+0x24a>
 800869a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800869c:	3301      	adds	r3, #1
 800869e:	64bb      	str	r3, [r7, #72]	; 0x48
 80086a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	653b      	str	r3, [r7, #80]	; 0x50
 80086a6:	4a11      	ldr	r2, [pc, #68]	; (80086ec <f_mkfs+0x290>)
 80086a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d007      	beq.n	80086c2 <f_mkfs+0x266>
 80086b2:	4a0e      	ldr	r2, [pc, #56]	; (80086ec <f_mkfs+0x290>)
 80086b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ba:	461a      	mov	r2, r3
 80086bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086be:	4293      	cmp	r3, r2
 80086c0:	d2eb      	bcs.n	800869a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ca:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d90c      	bls.n	80086f0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	3302      	adds	r3, #2
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086de:	e012      	b.n	8008706 <f_mkfs+0x2aa>
 80086e0:	20000034 	.word	0x20000034
 80086e4:	08008f74 	.word	0x08008f74
 80086e8:	0ffffff5 	.word	0x0ffffff5
 80086ec:	08008f84 	.word	0x08008f84
				} else {
					fmt = FS_FAT12;
 80086f0:	2301      	movs	r3, #1
 80086f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80086f6:	6a3a      	ldr	r2, [r7, #32]
 80086f8:	4613      	mov	r3, r2
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	4413      	add	r3, r2
 80086fe:	3301      	adds	r3, #1
 8008700:	085b      	lsrs	r3, r3, #1
 8008702:	3303      	adds	r3, #3
 8008704:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8008706:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800870a:	4413      	add	r3, r2
 800870c:	1e5a      	subs	r2, r3, #1
 800870e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008710:	fbb2 f3f3 	udiv	r3, r2, r3
 8008714:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8008716:	2301      	movs	r3, #1
 8008718:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800871a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008720:	fbb2 f3f3 	udiv	r3, r2, r3
 8008724:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8008726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800872a:	4413      	add	r3, r2
 800872c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800872e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008732:	fb02 f203 	mul.w	r2, r2, r3
 8008736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008738:	4413      	add	r3, r2
 800873a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800873c:	4413      	add	r3, r2
 800873e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	4413      	add	r3, r2
 8008746:	1e5a      	subs	r2, r3, #1
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	425b      	negs	r3, r3
 800874c:	401a      	ands	r2, r3
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8008754:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008758:	2b03      	cmp	r3, #3
 800875a:	d108      	bne.n	800876e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800875c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800875e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008760:	4413      	add	r3, r2
 8008762:	657b      	str	r3, [r7, #84]	; 0x54
 8008764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008768:	4413      	add	r3, r2
 800876a:	65bb      	str	r3, [r7, #88]	; 0x58
 800876c:	e006      	b.n	800877c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800876e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008772:	fbb2 f3f3 	udiv	r3, r2, r3
 8008776:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008778:	4413      	add	r3, r2
 800877a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800877c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800877e:	011a      	lsls	r2, r3, #4
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	441a      	add	r2, r3
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	1ad2      	subs	r2, r2, r3
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	429a      	cmp	r2, r3
 800878c:	d901      	bls.n	8008792 <f_mkfs+0x336>
 800878e:	230e      	movs	r3, #14
 8008790:	e28a      	b.n	8008ca8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008796:	1ad2      	subs	r2, r2, r3
 8008798:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800879a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800879c:	fb01 f303 	mul.w	r3, r1, r3
 80087a0:	1ad2      	subs	r2, r2, r3
 80087a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a4:	1ad2      	subs	r2, r2, r3
 80087a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ac:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80087ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d10f      	bne.n	80087d6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80087bc:	4293      	cmp	r3, r2
 80087be:	d80a      	bhi.n	80087d6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d105      	bne.n	80087d2 <f_mkfs+0x376>
 80087c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087c8:	085b      	lsrs	r3, r3, #1
 80087ca:	607b      	str	r3, [r7, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d144      	bne.n	800885c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80087d2:	230e      	movs	r3, #14
 80087d4:	e268      	b.n	8008ca8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80087d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d133      	bne.n	8008846 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d91e      	bls.n	8008826 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d107      	bne.n	80087fe <f_mkfs+0x3a2>
 80087ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	2b40      	cmp	r3, #64	; 0x40
 80087f4:	d803      	bhi.n	80087fe <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80087f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	607b      	str	r3, [r7, #4]
 80087fc:	e033      	b.n	8008866 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80087fe:	7afb      	ldrb	r3, [r7, #11]
 8008800:	f003 0302 	and.w	r3, r3, #2
 8008804:	2b00      	cmp	r3, #0
 8008806:	d003      	beq.n	8008810 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8008808:	2303      	movs	r3, #3
 800880a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800880e:	e02a      	b.n	8008866 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d105      	bne.n	8008822 <f_mkfs+0x3c6>
 8008816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	607b      	str	r3, [r7, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b80      	cmp	r3, #128	; 0x80
 8008820:	d91e      	bls.n	8008860 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8008822:	230e      	movs	r3, #14
 8008824:	e240      	b.n	8008ca8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	f640 72f5 	movw	r2, #4085	; 0xff5
 800882c:	4293      	cmp	r3, r2
 800882e:	d80a      	bhi.n	8008846 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d105      	bne.n	8008842 <f_mkfs+0x3e6>
 8008836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	607b      	str	r3, [r7, #4]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b80      	cmp	r3, #128	; 0x80
 8008840:	d910      	bls.n	8008864 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8008842:	230e      	movs	r3, #14
 8008844:	e230      	b.n	8008ca8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8008846:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800884a:	2b01      	cmp	r3, #1
 800884c:	d10c      	bne.n	8008868 <f_mkfs+0x40c>
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008854:	4293      	cmp	r3, r2
 8008856:	d907      	bls.n	8008868 <f_mkfs+0x40c>
 8008858:	230e      	movs	r3, #14
 800885a:	e225      	b.n	8008ca8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800885c:	bf00      	nop
 800885e:	e6ce      	b.n	80085fe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008860:	bf00      	nop
 8008862:	e6cc      	b.n	80085fe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008864:	bf00      	nop
			pau = au;
 8008866:	e6ca      	b.n	80085fe <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8008868:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800886a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800886c:	461a      	mov	r2, r3
 800886e:	2100      	movs	r1, #0
 8008870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008872:	f7fd fc96 	bl	80061a2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8008876:	220b      	movs	r2, #11
 8008878:	49bc      	ldr	r1, [pc, #752]	; (8008b6c <f_mkfs+0x710>)
 800887a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800887c:	f7fd fc70 	bl	8006160 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8008880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008882:	330b      	adds	r3, #11
 8008884:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008886:	4611      	mov	r1, r2
 8008888:	4618      	mov	r0, r3
 800888a:	f7fd fc22 	bl	80060d2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	330d      	adds	r3, #13
 8008892:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008894:	b2d2      	uxtb	r2, r2
 8008896:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8008898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889a:	330e      	adds	r3, #14
 800889c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800889e:	b292      	uxth	r2, r2
 80088a0:	4611      	mov	r1, r2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fd fc15 	bl	80060d2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	3310      	adds	r3, #16
 80088ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088ae:	b2d2      	uxtb	r2, r2
 80088b0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	f103 0211 	add.w	r2, r3, #17
 80088b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d002      	beq.n	80088c6 <f_mkfs+0x46a>
 80088c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	e000      	b.n	80088c8 <f_mkfs+0x46c>
 80088c6:	2300      	movs	r3, #0
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	f7fd fc01 	bl	80060d2 <st_word>
		if (sz_vol < 0x10000) {
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d6:	d208      	bcs.n	80088ea <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	3313      	adds	r3, #19
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	b292      	uxth	r2, r2
 80088e0:	4611      	mov	r1, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fd fbf5 	bl	80060d2 <st_word>
 80088e8:	e006      	b.n	80088f8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	3320      	adds	r3, #32
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	4611      	mov	r1, r2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fd fc08 	bl	8006108 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80088f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fa:	3315      	adds	r3, #21
 80088fc:	22f8      	movs	r2, #248	; 0xf8
 80088fe:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	3318      	adds	r3, #24
 8008904:	213f      	movs	r1, #63	; 0x3f
 8008906:	4618      	mov	r0, r3
 8008908:	f7fd fbe3 	bl	80060d2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	331a      	adds	r3, #26
 8008910:	21ff      	movs	r1, #255	; 0xff
 8008912:	4618      	mov	r0, r3
 8008914:	f7fd fbdd 	bl	80060d2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	331c      	adds	r3, #28
 800891c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800891e:	4618      	mov	r0, r3
 8008920:	f7fd fbf2 	bl	8006108 <st_dword>
		if (fmt == FS_FAT32) {
 8008924:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008928:	2b03      	cmp	r3, #3
 800892a:	d131      	bne.n	8008990 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800892c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8008932:	f7fd f89d 	bl	8005a70 <get_fattime>
 8008936:	4603      	mov	r3, r0
 8008938:	4619      	mov	r1, r3
 800893a:	4620      	mov	r0, r4
 800893c:	f7fd fbe4 	bl	8006108 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	3324      	adds	r3, #36	; 0x24
 8008944:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008946:	4618      	mov	r0, r3
 8008948:	f7fd fbde 	bl	8006108 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	332c      	adds	r3, #44	; 0x2c
 8008950:	2102      	movs	r1, #2
 8008952:	4618      	mov	r0, r3
 8008954:	f7fd fbd8 	bl	8006108 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8008958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895a:	3330      	adds	r3, #48	; 0x30
 800895c:	2101      	movs	r1, #1
 800895e:	4618      	mov	r0, r3
 8008960:	f7fd fbb7 	bl	80060d2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	3332      	adds	r3, #50	; 0x32
 8008968:	2106      	movs	r1, #6
 800896a:	4618      	mov	r0, r3
 800896c:	f7fd fbb1 	bl	80060d2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	3340      	adds	r3, #64	; 0x40
 8008974:	2280      	movs	r2, #128	; 0x80
 8008976:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	3342      	adds	r3, #66	; 0x42
 800897c:	2229      	movs	r2, #41	; 0x29
 800897e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	3347      	adds	r3, #71	; 0x47
 8008984:	2213      	movs	r2, #19
 8008986:	497a      	ldr	r1, [pc, #488]	; (8008b70 <f_mkfs+0x714>)
 8008988:	4618      	mov	r0, r3
 800898a:	f7fd fbe9 	bl	8006160 <mem_cpy>
 800898e:	e020      	b.n	80089d2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8008996:	f7fd f86b 	bl	8005a70 <get_fattime>
 800899a:	4603      	mov	r3, r0
 800899c:	4619      	mov	r1, r3
 800899e:	4620      	mov	r0, r4
 80089a0:	f7fd fbb2 	bl	8006108 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	3316      	adds	r3, #22
 80089a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089aa:	b292      	uxth	r2, r2
 80089ac:	4611      	mov	r1, r2
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fd fb8f 	bl	80060d2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	3324      	adds	r3, #36	; 0x24
 80089b8:	2280      	movs	r2, #128	; 0x80
 80089ba:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	3326      	adds	r3, #38	; 0x26
 80089c0:	2229      	movs	r2, #41	; 0x29
 80089c2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	332b      	adds	r3, #43	; 0x2b
 80089c8:	2213      	movs	r2, #19
 80089ca:	496a      	ldr	r1, [pc, #424]	; (8008b74 <f_mkfs+0x718>)
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fd fbc7 	bl	8006160 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80089d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fd fb78 	bl	80060d2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80089e2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80089e6:	2301      	movs	r3, #1
 80089e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089ec:	f7fd faf8 	bl	8005fe0 <disk_write>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <f_mkfs+0x59e>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e156      	b.n	8008ca8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80089fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d140      	bne.n	8008a84 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	1d9a      	adds	r2, r3, #6
 8008a06:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a0e:	f7fd fae7 	bl	8005fe0 <disk_write>
			mem_set(buf, 0, ss);
 8008a12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a14:	461a      	mov	r2, r3
 8008a16:	2100      	movs	r1, #0
 8008a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a1a:	f7fd fbc2 	bl	80061a2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8008a1e:	4956      	ldr	r1, [pc, #344]	; (8008b78 <f_mkfs+0x71c>)
 8008a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a22:	f7fd fb71 	bl	8006108 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008a2c:	4953      	ldr	r1, [pc, #332]	; (8008b7c <f_mkfs+0x720>)
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fd fb6a 	bl	8006108 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4610      	mov	r0, r2
 8008a42:	f7fd fb61 	bl	8006108 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008a4c:	2102      	movs	r1, #2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fd fb5a 	bl	8006108 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a5a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fd fb37 	bl	80060d2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	1dda      	adds	r2, r3, #7
 8008a68:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a70:	f7fd fab6 	bl	8005fe0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a80:	f7fd faae 	bl	8005fe0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8008a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a86:	2100      	movs	r1, #0
 8008a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a8a:	f7fd fb8a 	bl	80061a2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8008a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a90:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8008a92:	2300      	movs	r3, #0
 8008a94:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a96:	e04b      	b.n	8008b30 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8008a98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	d113      	bne.n	8008ac8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8008aa0:	f06f 0107 	mvn.w	r1, #7
 8008aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aa6:	f7fd fb2f 	bl	8006108 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	3304      	adds	r3, #4
 8008aae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fd fb28 	bl	8006108 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	3308      	adds	r3, #8
 8008abc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fd fb21 	bl	8006108 <st_dword>
 8008ac6:	e00b      	b.n	8008ae0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8008ac8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d101      	bne.n	8008ad4 <f_mkfs+0x678>
 8008ad0:	4b2b      	ldr	r3, [pc, #172]	; (8008b80 <f_mkfs+0x724>)
 8008ad2:	e001      	b.n	8008ad8 <f_mkfs+0x67c>
 8008ad4:	f06f 0307 	mvn.w	r3, #7
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008adc:	f7fd fb14 	bl	8006108 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8008ae0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ae2:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8008ae4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	bf28      	it	cs
 8008aec:	4613      	movcs	r3, r2
 8008aee:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8008af0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008af6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008af8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008afa:	f7fd fa71 	bl	8005fe0 <disk_write>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <f_mkfs+0x6ac>
 8008b04:	2301      	movs	r3, #1
 8008b06:	e0cf      	b.n	8008ca8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8008b08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b10:	f7fd fb47 	bl	80061a2 <mem_set>
				sect += n; nsect -= n;
 8008b14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b18:	4413      	add	r3, r2
 8008b1a:	667b      	str	r3, [r7, #100]	; 0x64
 8008b1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8008b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1dc      	bne.n	8008ae4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8008b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d3af      	bcc.n	8008a98 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8008b38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d101      	bne.n	8008b44 <f_mkfs+0x6e8>
 8008b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b42:	e000      	b.n	8008b46 <f_mkfs+0x6ea>
 8008b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b46:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8008b48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	bf28      	it	cs
 8008b50:	4613      	movcs	r3, r2
 8008b52:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8008b54:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b5e:	f7fd fa3f 	bl	8005fe0 <disk_write>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00d      	beq.n	8008b84 <f_mkfs+0x728>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e09d      	b.n	8008ca8 <f_mkfs+0x84c>
 8008b6c:	08008e64 	.word	0x08008e64
 8008b70:	08008e70 	.word	0x08008e70
 8008b74:	08008e84 	.word	0x08008e84
 8008b78:	41615252 	.word	0x41615252
 8008b7c:	61417272 	.word	0x61417272
 8008b80:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8008b84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b88:	4413      	add	r3, r2
 8008b8a:	667b      	str	r3, [r7, #100]	; 0x64
 8008b8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8008b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1d6      	bne.n	8008b48 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8008b9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d103      	bne.n	8008baa <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8008ba2:	230c      	movs	r3, #12
 8008ba4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8008ba8:	e010      	b.n	8008bcc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bb0:	d303      	bcc.n	8008bba <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8008bb2:	2306      	movs	r3, #6
 8008bb4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8008bb8:	e008      	b.n	8008bcc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8008bba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d101      	bne.n	8008bc6 <f_mkfs+0x76a>
 8008bc2:	2304      	movs	r3, #4
 8008bc4:	e000      	b.n	8008bc8 <f_mkfs+0x76c>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8008bcc:	7afb      	ldrb	r3, [r7, #11]
 8008bce:	f003 0308 	and.w	r3, r3, #8
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d15b      	bne.n	8008c8e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8008bd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008bd8:	461a      	mov	r2, r3
 8008bda:	2100      	movs	r1, #0
 8008bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bde:	f7fd fae0 	bl	80061a2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008be8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fd fa70 	bl	80060d2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008bf8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	3301      	adds	r3, #1
 8008c04:	2201      	movs	r2, #1
 8008c06:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	3302      	adds	r3, #2
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	3303      	adds	r3, #3
 8008c14:	2200      	movs	r2, #0
 8008c16:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8008c20:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	441a      	add	r2, r3
 8008c28:	4b21      	ldr	r3, [pc, #132]	; (8008cb0 <f_mkfs+0x854>)
 8008c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	0852      	lsrs	r2, r2, #1
 8008c32:	4413      	add	r3, r2
 8008c34:	0b5b      	lsrs	r3, r3, #13
 8008c36:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	3305      	adds	r3, #5
 8008c3c:	22fe      	movs	r2, #254	; 0xfe
 8008c3e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8008c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c42:	089b      	lsrs	r3, r3, #2
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	3306      	adds	r3, #6
 8008c4a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8008c4e:	b2d2      	uxtb	r2, r2
 8008c50:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	3307      	adds	r3, #7
 8008c56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c58:	b2d2      	uxtb	r2, r2
 8008c5a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	3308      	adds	r3, #8
 8008c60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fd fa50 	bl	8006108 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	330c      	adds	r3, #12
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fd fa49 	bl	8006108 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8008c76:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c80:	f7fd f9ae 	bl	8005fe0 <disk_write>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <f_mkfs+0x832>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e00c      	b.n	8008ca8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8008c8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008c92:	2200      	movs	r2, #0
 8008c94:	2100      	movs	r1, #0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fd f9c2 	bl	8006020 <disk_ioctl>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <f_mkfs+0x84a>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e000      	b.n	8008ca8 <f_mkfs+0x84c>

	return FR_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3774      	adds	r7, #116	; 0x74
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd90      	pop	{r4, r7, pc}
 8008cb0:	0515565b 	.word	0x0515565b

08008cb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008cca:	4b1f      	ldr	r3, [pc, #124]	; (8008d48 <FATFS_LinkDriverEx+0x94>)
 8008ccc:	7a5b      	ldrb	r3, [r3, #9]
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d131      	bne.n	8008d38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008cd4:	4b1c      	ldr	r3, [pc, #112]	; (8008d48 <FATFS_LinkDriverEx+0x94>)
 8008cd6:	7a5b      	ldrb	r3, [r3, #9]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	461a      	mov	r2, r3
 8008cdc:	4b1a      	ldr	r3, [pc, #104]	; (8008d48 <FATFS_LinkDriverEx+0x94>)
 8008cde:	2100      	movs	r1, #0
 8008ce0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008ce2:	4b19      	ldr	r3, [pc, #100]	; (8008d48 <FATFS_LinkDriverEx+0x94>)
 8008ce4:	7a5b      	ldrb	r3, [r3, #9]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	4a17      	ldr	r2, [pc, #92]	; (8008d48 <FATFS_LinkDriverEx+0x94>)
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <FATFS_LinkDriverEx+0x94>)
 8008cf4:	7a5b      	ldrb	r3, [r3, #9]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	4b13      	ldr	r3, [pc, #76]	; (8008d48 <FATFS_LinkDriverEx+0x94>)
 8008cfc:	4413      	add	r3, r2
 8008cfe:	79fa      	ldrb	r2, [r7, #7]
 8008d00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d02:	4b11      	ldr	r3, [pc, #68]	; (8008d48 <FATFS_LinkDriverEx+0x94>)
 8008d04:	7a5b      	ldrb	r3, [r3, #9]
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	b2d1      	uxtb	r1, r2
 8008d0c:	4a0e      	ldr	r2, [pc, #56]	; (8008d48 <FATFS_LinkDriverEx+0x94>)
 8008d0e:	7251      	strb	r1, [r2, #9]
 8008d10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d12:	7dbb      	ldrb	r3, [r7, #22]
 8008d14:	3330      	adds	r3, #48	; 0x30
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	223a      	movs	r2, #58	; 0x3a
 8008d22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	3302      	adds	r3, #2
 8008d28:	222f      	movs	r2, #47	; 0x2f
 8008d2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	3303      	adds	r3, #3
 8008d30:	2200      	movs	r2, #0
 8008d32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d34:	2300      	movs	r3, #0
 8008d36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	2000005c 	.word	0x2000005c

08008d4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d56:	2200      	movs	r2, #0
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7ff ffaa 	bl	8008cb4 <FATFS_LinkDriverEx>
 8008d60:	4603      	mov	r3, r0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <__libc_init_array>:
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	4d0d      	ldr	r5, [pc, #52]	; (8008da4 <__libc_init_array+0x38>)
 8008d70:	4c0d      	ldr	r4, [pc, #52]	; (8008da8 <__libc_init_array+0x3c>)
 8008d72:	1b64      	subs	r4, r4, r5
 8008d74:	10a4      	asrs	r4, r4, #2
 8008d76:	2600      	movs	r6, #0
 8008d78:	42a6      	cmp	r6, r4
 8008d7a:	d109      	bne.n	8008d90 <__libc_init_array+0x24>
 8008d7c:	4d0b      	ldr	r5, [pc, #44]	; (8008dac <__libc_init_array+0x40>)
 8008d7e:	4c0c      	ldr	r4, [pc, #48]	; (8008db0 <__libc_init_array+0x44>)
 8008d80:	f000 f82e 	bl	8008de0 <_init>
 8008d84:	1b64      	subs	r4, r4, r5
 8008d86:	10a4      	asrs	r4, r4, #2
 8008d88:	2600      	movs	r6, #0
 8008d8a:	42a6      	cmp	r6, r4
 8008d8c:	d105      	bne.n	8008d9a <__libc_init_array+0x2e>
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
 8008d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d94:	4798      	blx	r3
 8008d96:	3601      	adds	r6, #1
 8008d98:	e7ee      	b.n	8008d78 <__libc_init_array+0xc>
 8008d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d9e:	4798      	blx	r3
 8008da0:	3601      	adds	r6, #1
 8008da2:	e7f2      	b.n	8008d8a <__libc_init_array+0x1e>
 8008da4:	08008f94 	.word	0x08008f94
 8008da8:	08008f94 	.word	0x08008f94
 8008dac:	08008f94 	.word	0x08008f94
 8008db0:	08008f98 	.word	0x08008f98

08008db4 <memcpy>:
 8008db4:	440a      	add	r2, r1
 8008db6:	4291      	cmp	r1, r2
 8008db8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008dbc:	d100      	bne.n	8008dc0 <memcpy+0xc>
 8008dbe:	4770      	bx	lr
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dca:	4291      	cmp	r1, r2
 8008dcc:	d1f9      	bne.n	8008dc2 <memcpy+0xe>
 8008dce:	bd10      	pop	{r4, pc}

08008dd0 <memset>:
 8008dd0:	4402      	add	r2, r0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d100      	bne.n	8008dda <memset+0xa>
 8008dd8:	4770      	bx	lr
 8008dda:	f803 1b01 	strb.w	r1, [r3], #1
 8008dde:	e7f9      	b.n	8008dd4 <memset+0x4>

08008de0 <_init>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	bf00      	nop
 8008de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de6:	bc08      	pop	{r3}
 8008de8:	469e      	mov	lr, r3
 8008dea:	4770      	bx	lr

08008dec <_fini>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	bf00      	nop
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr
