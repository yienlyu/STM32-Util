
SDcard-example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094ec  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096f8  080096f8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080096f8  080096f8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096f8  080096f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096f8  080096f8  000196f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096fc  080096fc  000196fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eac  20000088  08009788  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f34  08009788  00020f34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5d6  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003621  00000000  00000000  0003e68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00041cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  00043138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bdc8  00000000  00000000  00044438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d5b  00000000  00000000  00070200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103b81  00000000  00000000  00086f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018aadc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a0  00000000  00000000  0018ab30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000088 	.word	0x20000088
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009680 	.word	0x08009680

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000008c 	.word	0x2000008c
 80001e8:	08009680 	.word	0x08009680

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f2:	f002 fc5f 	bl	8002ab4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f6:	f000 f863 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fa:	f000 f9b5 	bl	8000568 <MX_GPIO_Init>
  MX_DMA_Init();
 80001fe:	f000 f911 	bl	8000424 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000202:	f000 f8ef 	bl	80003e4 <MX_SDMMC1_SD_Init>
  MX_I2C2_Init();
 8000206:	f000 f8ad 	bl	8000364 <MX_I2C2_Init>
  MX_FATFS_Init();
 800020a:	f009 f81d 	bl	8009248 <MX_FATFS_Init>
  MX_FMC_Init();
 800020e:	f000 f94b 	bl	80004a8 <MX_FMC_Init>

  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED2);
 8000212:	2001      	movs	r0, #1
 8000214:	f001 fe12 	bl	8001e3c <BSP_LED_Init>
  BSP_LED_Init(LED1);
 8000218:	2000      	movs	r0, #0
 800021a:	f001 fe0f 	bl	8001e3c <BSP_LED_Init>

  // init MFX
  uint8_t ret_mfx = IO_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	71fb      	strb	r3, [r7, #7]

  ret_mfx = BSP_IO_Init();
 8000222:	f002 f971 	bl	8002508 <BSP_IO_Init>
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
  BSP_LED_Off(LED2);
 800022a:	2001      	movs	r0, #1
 800022c:	f001 fe76 	bl	8001f1c <BSP_LED_Off>

  if (ret_mfx == IO_OK || ret_mfx == IO_ALREADY_INITIALIZED) {
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <main+0x50>
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	2b03      	cmp	r3, #3
 800023a:	d102      	bne.n	8000242 <main+0x56>
	  BSP_LED_On(LED2);
 800023c:	2001      	movs	r0, #1
 800023e:	f001 fe4b 	bl	8001ed8 <BSP_LED_On>
  }


  /* 1- Link the micro SD disk I/O driver */
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8000242:	491b      	ldr	r1, [pc, #108]	; (80002b0 <main+0xc4>)
 8000244:	481b      	ldr	r0, [pc, #108]	; (80002b4 <main+0xc8>)
 8000246:	f009 f9df 	bl	8009608 <FATFS_LinkDriver>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d10a      	bne.n	8000266 <main+0x7a>
  {
    /*##-2- Init the SD Card #################################################*/

    SD_Initialize();
 8000250:	f000 f9fe 	bl	8000650 <SD_Initialize>

    if(BSP_SD_IsDetected())
 8000254:	f002 fa57 	bl	8002706 <BSP_SD_IsDetected>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d006      	beq.n	800026c <main+0x80>
    {
      Appli_state = APPLICATION_RUNNING;
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <main+0xcc>)
 8000260:	2201      	movs	r2, #1
 8000262:	701a      	strb	r2, [r3, #0]
 8000264:	e002      	b.n	800026c <main+0x80>
    }
  }
  else
  {
    Error_Handler();
 8000266:	f000 fa15 	bl	8000694 <Error_Handler>
    while(1) {};
 800026a:	e7fe      	b.n	800026a <main+0x7e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(Appli_state)
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <main+0xcc>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2b02      	cmp	r3, #2
 8000272:	d00c      	beq.n	800028e <main+0xa2>
 8000274:	2b02      	cmp	r3, #2
 8000276:	dc17      	bgt.n	80002a8 <main+0xbc>
 8000278:	2b00      	cmp	r3, #0
 800027a:	d017      	beq.n	80002ac <main+0xc0>
 800027c:	2b01      	cmp	r3, #1
 800027e:	d113      	bne.n	80002a8 <main+0xbc>
	{
	case APPLICATION_RUNNING:
	  BSP_LED_Off(LED1);
 8000280:	2000      	movs	r0, #0
 8000282:	f001 fe4b 	bl	8001f1c <BSP_LED_Off>
//	  SD_Initialize();
//	  FS_FileOperations();
	  Appli_state = APPLICATION_IDLE;
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <main+0xcc>)
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]
	  break;
 800028c:	e00f      	b.n	80002ae <main+0xc2>

	case APPLICATION_IDLE:
	  break;

	case APPLICATION_SD_UNPLUGGED:
	  if (isInitialized == 1)
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <main+0xd0>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d104      	bne.n	80002a0 <main+0xb4>
	  {
		Error_Handler();
 8000296:	f000 f9fd 	bl	8000694 <Error_Handler>
		isInitialized = 0;
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <main+0xd0>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
	  }

	  Appli_state = APPLICATION_IDLE;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <main+0xcc>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
	  break;
 80002a6:	e002      	b.n	80002ae <main+0xc2>

	default:
	  break;
 80002a8:	bf00      	nop
 80002aa:	e7df      	b.n	800026c <main+0x80>
	  break;
 80002ac:	bf00      	nop
	switch(Appli_state)
 80002ae:	e7dd      	b.n	800026c <main+0x80>
 80002b0:	20000554 	.word	0x20000554
 80002b4:	080096e4 	.word	0x080096e4
 80002b8:	200000a4 	.word	0x200000a4
 80002bc:	200000a5 	.word	0x200000a5

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b096      	sub	sp, #88	; 0x58
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0314 	add.w	r3, r7, #20
 80002ca:	2244      	movs	r2, #68	; 0x44
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f009 f9ce 	bl	8009670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	463b      	mov	r3, r7
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e6:	f004 fab3 	bl	8004850 <HAL_PWREx_ControlVoltageScaling>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002f0:	f000 f9d0 	bl	8000694 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f4:	2310      	movs	r3, #16
 80002f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000300:	2360      	movs	r3, #96	; 0x60
 8000302:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000308:	2301      	movs	r3, #1
 800030a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800030c:	2301      	movs	r3, #1
 800030e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000310:	2328      	movs	r3, #40	; 0x28
 8000312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000314:	2302      	movs	r3, #2
 8000316:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000318:	2308      	movs	r3, #8
 800031a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800031c:	2302      	movs	r3, #2
 800031e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 0314 	add.w	r3, r7, #20
 8000324:	4618      	mov	r0, r3
 8000326:	f004 fae9 	bl	80048fc <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000330:	f000 f9b0 	bl	8000694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	2303      	movs	r3, #3
 800033a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000348:	463b      	mov	r3, r7
 800034a:	2104      	movs	r1, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f004 fefb 	bl	8005148 <HAL_RCC_ClockConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000358:	f000 f99c 	bl	8000694 <Error_Handler>
  }
}
 800035c:	bf00      	nop
 800035e:	3758      	adds	r7, #88	; 0x58
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <MX_I2C2_Init+0x74>)
 800036a:	4a1c      	ldr	r2, [pc, #112]	; (80003dc <MX_I2C2_Init+0x78>)
 800036c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <MX_I2C2_Init+0x74>)
 8000370:	4a1b      	ldr	r2, [pc, #108]	; (80003e0 <MX_I2C2_Init+0x7c>)
 8000372:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_I2C2_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <MX_I2C2_Init+0x74>)
 800037c:	2201      	movs	r2, #1
 800037e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_I2C2_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_I2C2_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_I2C2_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_I2C2_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_I2C2_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800039e:	480e      	ldr	r0, [pc, #56]	; (80003d8 <MX_I2C2_Init+0x74>)
 80003a0:	f003 fb08 	bl	80039b4 <HAL_I2C_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003aa:	f000 f973 	bl	8000694 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ae:	2100      	movs	r1, #0
 80003b0:	4809      	ldr	r0, [pc, #36]	; (80003d8 <MX_I2C2_Init+0x74>)
 80003b2:	f004 f9a7 	bl	8004704 <HAL_I2CEx_ConfigAnalogFilter>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003bc:	f000 f96a 	bl	8000694 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003c0:	2100      	movs	r1, #0
 80003c2:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_I2C2_Init+0x74>)
 80003c4:	f004 f9e9 	bl	800479a <HAL_I2CEx_ConfigDigitalFilter>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003ce:	f000 f961 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200001a4 	.word	0x200001a4
 80003dc:	40005800 	.word	0x40005800
 80003e0:	10909cec 	.word	0x10909cec

080003e4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 80003ea:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <MX_SDMMC1_SD_Init+0x3c>)
 80003ec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000406:	4b05      	ldr	r3, [pc, #20]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 800040e:	2200      	movs	r2, #0
 8000410:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	200001f0 	.word	0x200001f0
 8000420:	40012800 	.word	0x40012800

08000424 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800042a:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <MX_DMA_Init+0x80>)
 800042c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800042e:	4a1d      	ldr	r2, [pc, #116]	; (80004a4 <MX_DMA_Init+0x80>)
 8000430:	f043 0302 	orr.w	r3, r3, #2
 8000434:	6493      	str	r3, [r2, #72]	; 0x48
 8000436:	4b1b      	ldr	r3, [pc, #108]	; (80004a4 <MX_DMA_Init+0x80>)
 8000438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800043a:	f003 0302 	and.w	r3, r3, #2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000442:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <MX_DMA_Init+0x80>)
 8000444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000446:	4a17      	ldr	r2, [pc, #92]	; (80004a4 <MX_DMA_Init+0x80>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6493      	str	r3, [r2, #72]	; 0x48
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <MX_DMA_Init+0x80>)
 8000450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	200e      	movs	r0, #14
 8000460:	f002 fcbf 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000464:	200e      	movs	r0, #14
 8000466:	f002 fcd8 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	200f      	movs	r0, #15
 8000470:	f002 fcb7 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000474:	200f      	movs	r0, #15
 8000476:	f002 fcd0 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	203b      	movs	r0, #59	; 0x3b
 8000480:	f002 fcaf 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000484:	203b      	movs	r0, #59	; 0x3b
 8000486:	f002 fcc8 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	203c      	movs	r0, #60	; 0x3c
 8000490:	f002 fca7 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000494:	203c      	movs	r0, #60	; 0x3c
 8000496:	f002 fcc0 	bl	8002e1a <HAL_NVIC_EnableIRQ>

}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80004ae:	463b      	mov	r3, r7
 80004b0:	2220      	movs	r2, #32
 80004b2:	2100      	movs	r1, #0
 80004b4:	4618      	mov	r0, r3
 80004b6:	f009 f8db 	bl	8009670 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80004ba:	4b29      	ldr	r3, [pc, #164]	; (8000560 <MX_FMC_Init+0xb8>)
 80004bc:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80004c0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80004c2:	4b27      	ldr	r3, [pc, #156]	; (8000560 <MX_FMC_Init+0xb8>)
 80004c4:	4a27      	ldr	r2, [pc, #156]	; (8000564 <MX_FMC_Init+0xbc>)
 80004c6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80004c8:	4b25      	ldr	r3, [pc, #148]	; (8000560 <MX_FMC_Init+0xb8>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80004ce:	4b24      	ldr	r3, [pc, #144]	; (8000560 <MX_FMC_Init+0xb8>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80004d4:	4b22      	ldr	r3, [pc, #136]	; (8000560 <MX_FMC_Init+0xb8>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80004da:	4b21      	ldr	r3, [pc, #132]	; (8000560 <MX_FMC_Init+0xb8>)
 80004dc:	2200      	movs	r2, #0
 80004de:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <MX_FMC_Init+0xb8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80004e6:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <MX_FMC_Init+0xb8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <MX_FMC_Init+0xb8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_FMC_Init+0xb8>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80004f8:	4b19      	ldr	r3, [pc, #100]	; (8000560 <MX_FMC_Init+0xb8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80004fe:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_FMC_Init+0xb8>)
 8000500:	2200      	movs	r2, #0
 8000502:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_FMC_Init+0xb8>)
 8000506:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800050a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_FMC_Init+0xb8>)
 800050e:	2200      	movs	r2, #0
 8000510:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_FMC_Init+0xb8>)
 8000514:	2200      	movs	r2, #0
 8000516:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_FMC_Init+0xb8>)
 800051a:	2200      	movs	r2, #0
 800051c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <MX_FMC_Init+0xb8>)
 8000520:	2200      	movs	r2, #0
 8000522:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000524:	230f      	movs	r3, #15
 8000526:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000528:	230f      	movs	r3, #15
 800052a:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800052c:	23ff      	movs	r3, #255	; 0xff
 800052e:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000530:	230f      	movs	r3, #15
 8000532:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000534:	2310      	movs	r3, #16
 8000536:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000538:	2311      	movs	r3, #17
 800053a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000540:	463b      	mov	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	4619      	mov	r1, r3
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <MX_FMC_Init+0xb8>)
 8000548:	f007 ffa8 	bl	800849c <HAL_SRAM_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_FMC_Init+0xae>
  {
    Error_Handler( );
 8000552:	f000 f89f 	bl	8000694 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000556:	bf00      	nop
 8000558:	3720      	adds	r7, #32
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000274 	.word	0x20000274
 8000564:	a0000104 	.word	0xa0000104

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	; 0x30
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b32      	ldr	r3, [pc, #200]	; (8000648 <MX_GPIO_Init+0xe0>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a31      	ldr	r2, [pc, #196]	; (8000648 <MX_GPIO_Init+0xe0>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b2f      	ldr	r3, [pc, #188]	; (8000648 <MX_GPIO_Init+0xe0>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	61bb      	str	r3, [r7, #24]
 8000594:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <MX_GPIO_Init+0xe0>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a2b      	ldr	r2, [pc, #172]	; (8000648 <MX_GPIO_Init+0xe0>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b29      	ldr	r3, [pc, #164]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b26      	ldr	r3, [pc, #152]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a25      	ldr	r2, [pc, #148]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c6:	4b20      	ldr	r3, [pc, #128]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005cc:	f043 0320 	orr.w	r3, r3, #32
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a19      	ldr	r2, [pc, #100]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005e4:	f043 0310 	orr.w	r3, r3, #16
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0310 	and.w	r3, r3, #16
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_GPIO_Init+0xe0>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_GPIO_Init+0xe0>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <MX_GPIO_Init+0xe0>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_GPIO_Init+0xe0>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_GPIO_Init+0xe4>)
 800063c:	f002 ff1e 	bl	800347c <HAL_GPIO_Init>

}
 8000640:	bf00      	nop
 8000642:	3730      	adds	r7, #48	; 0x30
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	48000400 	.word	0x48000400

08000650 <SD_Initialize>:
  /* Error */
  Error_Handler();
}

static void SD_Initialize(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  if (isInitialized == 0)
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <SD_Initialize+0x40>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d116      	bne.n	800068a <SD_Initialize+0x3a>
  {
    if (BSP_SD_Init() == MSD_OK)
 800065c:	f001 fff0 	bl	8002640 <BSP_SD_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d105      	bne.n	8000672 <SD_Initialize+0x22>
    {
      BSP_SD_ITConfig();
 8000666:	f002 f835 	bl	80026d4 <BSP_SD_ITConfig>
      isInitialized = 1;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <SD_Initialize+0x40>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
      while (BSP_SD_IsDetected() != SD_PRESENT)
      {}
      BSP_LED_Off(LED1);
    }
  }
}
 8000670:	e00b      	b.n	800068a <SD_Initialize+0x3a>
      BSP_LED_On(LED1);
 8000672:	2000      	movs	r0, #0
 8000674:	f001 fc30 	bl	8001ed8 <BSP_LED_On>
      while (BSP_SD_IsDetected() != SD_PRESENT)
 8000678:	bf00      	nop
 800067a:	f002 f844 	bl	8002706 <BSP_SD_IsDetected>
 800067e:	4603      	mov	r3, r0
 8000680:	2b01      	cmp	r3, #1
 8000682:	d1fa      	bne.n	800067a <SD_Initialize+0x2a>
      BSP_LED_Off(LED1);
 8000684:	2000      	movs	r0, #0
 8000686:	f001 fc49 	bl	8001f1c <BSP_LED_Off>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000a5 	.word	0x200000a5

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_MspInit+0x44>)
 80006a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <HAL_MspInit+0x44>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6613      	str	r3, [r2, #96]	; 0x60
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_MspInit+0x44>)
 80006b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_MspInit+0x44>)
 80006c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x44>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6593      	str	r3, [r2, #88]	; 0x58
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x44>)
 80006cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0ae      	sub	sp, #184	; 0xb8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	228c      	movs	r2, #140	; 0x8c
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f008 ffb1 	bl	8009670 <memset>
  if(hi2c->Instance==I2C2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a5b      	ldr	r2, [pc, #364]	; (8000880 <HAL_I2C_MspInit+0x198>)
 8000714:	4293      	cmp	r3, r2
 8000716:	f040 80af 	bne.w	8000878 <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800071e:	2300      	movs	r3, #0
 8000720:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000722:	f107 0318 	add.w	r3, r7, #24
 8000726:	4618      	mov	r0, r3
 8000728:	f004 ff14 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000732:	f7ff ffaf 	bl	8000694 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b53      	ldr	r3, [pc, #332]	; (8000884 <HAL_I2C_MspInit+0x19c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a52      	ldr	r2, [pc, #328]	; (8000884 <HAL_I2C_MspInit+0x19c>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b50      	ldr	r3, [pc, #320]	; (8000884 <HAL_I2C_MspInit+0x19c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b4d      	ldr	r3, [pc, #308]	; (8000884 <HAL_I2C_MspInit+0x19c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a4c      	ldr	r2, [pc, #304]	; (8000884 <HAL_I2C_MspInit+0x19c>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b4a      	ldr	r3, [pc, #296]	; (8000884 <HAL_I2C_MspInit+0x19c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000766:	2310      	movs	r3, #16
 8000768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076c:	2312      	movs	r3, #18
 800076e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800077e:	2304      	movs	r3, #4
 8000780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000784:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000788:	4619      	mov	r1, r3
 800078a:	483f      	ldr	r0, [pc, #252]	; (8000888 <HAL_I2C_MspInit+0x1a0>)
 800078c:	f002 fe76 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000790:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000794:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000798:	2312      	movs	r3, #18
 800079a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007aa:	2304      	movs	r3, #4
 80007ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4835      	ldr	r0, [pc, #212]	; (800088c <HAL_I2C_MspInit+0x1a4>)
 80007b8:	f002 fe60 	bl	800347c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007bc:	4b31      	ldr	r3, [pc, #196]	; (8000884 <HAL_I2C_MspInit+0x19c>)
 80007be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c0:	4a30      	ldr	r2, [pc, #192]	; (8000884 <HAL_I2C_MspInit+0x19c>)
 80007c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c6:	6593      	str	r3, [r2, #88]	; 0x58
 80007c8:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <HAL_I2C_MspInit+0x19c>)
 80007ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80007d4:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <HAL_I2C_MspInit+0x1a8>)
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <HAL_I2C_MspInit+0x1ac>)
 80007d8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <HAL_I2C_MspInit+0x1a8>)
 80007dc:	2203      	movs	r2, #3
 80007de:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <HAL_I2C_MspInit+0x1a8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e6:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <HAL_I2C_MspInit+0x1a8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <HAL_I2C_MspInit+0x1a8>)
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <HAL_I2C_MspInit+0x1a8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <HAL_I2C_MspInit+0x1a8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <HAL_I2C_MspInit+0x1a8>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <HAL_I2C_MspInit+0x1a8>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800080a:	4821      	ldr	r0, [pc, #132]	; (8000890 <HAL_I2C_MspInit+0x1a8>)
 800080c:	f002 fb2e 	bl	8002e6c <HAL_DMA_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_I2C_MspInit+0x132>
    {
      Error_Handler();
 8000816:	f7ff ff3d 	bl	8000694 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <HAL_I2C_MspInit+0x1a8>)
 800081e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <HAL_I2C_MspInit+0x1a8>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <HAL_I2C_MspInit+0x1b0>)
 8000828:	4a1c      	ldr	r2, [pc, #112]	; (800089c <HAL_I2C_MspInit+0x1b4>)
 800082a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <HAL_I2C_MspInit+0x1b0>)
 800082e:	2203      	movs	r2, #3
 8000830:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <HAL_I2C_MspInit+0x1b0>)
 8000834:	2210      	movs	r2, #16
 8000836:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <HAL_I2C_MspInit+0x1b0>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <HAL_I2C_MspInit+0x1b0>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_I2C_MspInit+0x1b0>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <HAL_I2C_MspInit+0x1b0>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_I2C_MspInit+0x1b0>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_I2C_MspInit+0x1b0>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800085c:	480e      	ldr	r0, [pc, #56]	; (8000898 <HAL_I2C_MspInit+0x1b0>)
 800085e:	f002 fb05 	bl	8002e6c <HAL_DMA_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <HAL_I2C_MspInit+0x184>
    {
      Error_Handler();
 8000868:	f7ff ff14 	bl	8000694 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_I2C_MspInit+0x1b0>)
 8000870:	639a      	str	r2, [r3, #56]	; 0x38
 8000872:	4a09      	ldr	r2, [pc, #36]	; (8000898 <HAL_I2C_MspInit+0x1b0>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000878:	bf00      	nop
 800087a:	37b8      	adds	r7, #184	; 0xb8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40005800 	.word	0x40005800
 8000884:	40021000 	.word	0x40021000
 8000888:	48001c00 	.word	0x48001c00
 800088c:	48000400 	.word	0x48000400
 8000890:	200002c4 	.word	0x200002c4
 8000894:	40020058 	.word	0x40020058
 8000898:	2000030c 	.word	0x2000030c
 800089c:	40020044 	.word	0x40020044

080008a0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <HAL_I2C_MspDeInit+0x4c>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d118      	bne.n	80008e4 <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_I2C_MspDeInit+0x50>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_I2C_MspDeInit+0x50>)
 80008b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80008bc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 80008be:	2110      	movs	r1, #16
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <HAL_I2C_MspDeInit+0x54>)
 80008c2:	f002 ff6d 	bl	80037a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14);
 80008c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <HAL_I2C_MspDeInit+0x58>)
 80008cc:	f002 ff68 	bl	80037a0 <HAL_GPIO_DeInit>

    /* I2C2 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fb81 	bl	8002fdc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 fb7c 	bl	8002fdc <HAL_DMA_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40005800 	.word	0x40005800
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48001c00 	.word	0x48001c00
 80008f8:	48000400 	.word	0x48000400

080008fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0ae      	sub	sp, #184	; 0xb8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	228c      	movs	r2, #140	; 0x8c
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f008 fea7 	bl	8009670 <memset>
  if(hsd->Instance==SDMMC1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a6a      	ldr	r2, [pc, #424]	; (8000ad0 <HAL_SD_MspInit+0x1d4>)
 8000928:	4293      	cmp	r3, r2
 800092a:	f040 80cd 	bne.w	8000ac8 <HAL_SD_MspInit+0x1cc>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800092e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000932:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000934:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800093c:	2301      	movs	r3, #1
 800093e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000944:	2310      	movs	r3, #16
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800094c:	2302      	movs	r3, #2
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000954:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000958:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fdf8 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_SD_MspInit+0x72>
    {
      Error_Handler();
 800096a:	f7ff fe93 	bl	8000694 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800096e:	4b59      	ldr	r3, [pc, #356]	; (8000ad4 <HAL_SD_MspInit+0x1d8>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	4a58      	ldr	r2, [pc, #352]	; (8000ad4 <HAL_SD_MspInit+0x1d8>)
 8000974:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000978:	6613      	str	r3, [r2, #96]	; 0x60
 800097a:	4b56      	ldr	r3, [pc, #344]	; (8000ad4 <HAL_SD_MspInit+0x1d8>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	4b53      	ldr	r3, [pc, #332]	; (8000ad4 <HAL_SD_MspInit+0x1d8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a52      	ldr	r2, [pc, #328]	; (8000ad4 <HAL_SD_MspInit+0x1d8>)
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b50      	ldr	r3, [pc, #320]	; (8000ad4 <HAL_SD_MspInit+0x1d8>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b4d      	ldr	r3, [pc, #308]	; (8000ad4 <HAL_SD_MspInit+0x1d8>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a4c      	ldr	r2, [pc, #304]	; (8000ad4 <HAL_SD_MspInit+0x1d8>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b4a      	ldr	r3, [pc, #296]	; (8000ad4 <HAL_SD_MspInit+0x1d8>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b6:	2304      	movs	r3, #4
 80009b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009ce:	230c      	movs	r3, #12
 80009d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009d8:	4619      	mov	r1, r3
 80009da:	483f      	ldr	r0, [pc, #252]	; (8000ad8 <HAL_SD_MspInit+0x1dc>)
 80009dc:	f002 fd4e 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_9
 80009e0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80009e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009fa:	230c      	movs	r3, #12
 80009fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4835      	ldr	r0, [pc, #212]	; (8000adc <HAL_SD_MspInit+0x1e0>)
 8000a08:	f002 fd38 	bl	800347c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 8000a0c:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <HAL_SD_MspInit+0x1e4>)
 8000a0e:	4a35      	ldr	r2, [pc, #212]	; (8000ae4 <HAL_SD_MspInit+0x1e8>)
 8000a10:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 8000a12:	4b33      	ldr	r3, [pc, #204]	; (8000ae0 <HAL_SD_MspInit+0x1e4>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a18:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <HAL_SD_MspInit+0x1e4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <HAL_SD_MspInit+0x1e4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <HAL_SD_MspInit+0x1e4>)
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <HAL_SD_MspInit+0x1e4>)
 8000a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a30:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a32:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <HAL_SD_MspInit+0x1e4>)
 8000a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a38:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 8000a3a:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <HAL_SD_MspInit+0x1e4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a40:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <HAL_SD_MspInit+0x1e4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000a46:	4826      	ldr	r0, [pc, #152]	; (8000ae0 <HAL_SD_MspInit+0x1e4>)
 8000a48:	f002 fa10 	bl	8002e6c <HAL_DMA_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_SD_MspInit+0x15a>
    {
      Error_Handler();
 8000a52:	f7ff fe1f 	bl	8000694 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <HAL_SD_MspInit+0x1e4>)
 8000a5a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a5c:	4a20      	ldr	r2, [pc, #128]	; (8000ae0 <HAL_SD_MspInit+0x1e4>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <HAL_SD_MspInit+0x1ec>)
 8000a64:	4a21      	ldr	r2, [pc, #132]	; (8000aec <HAL_SD_MspInit+0x1f0>)
 8000a66:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <HAL_SD_MspInit+0x1ec>)
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <HAL_SD_MspInit+0x1ec>)
 8000a70:	2210      	movs	r2, #16
 8000a72:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_SD_MspInit+0x1ec>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <HAL_SD_MspInit+0x1ec>)
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_SD_MspInit+0x1ec>)
 8000a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a86:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_SD_MspInit+0x1ec>)
 8000a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a8e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_SD_MspInit+0x1ec>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_SD_MspInit+0x1ec>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000a9c:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <HAL_SD_MspInit+0x1ec>)
 8000a9e:	f002 f9e5 	bl	8002e6c <HAL_DMA_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8000aa8:	f7ff fdf4 	bl	8000694 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <HAL_SD_MspInit+0x1ec>)
 8000ab0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab2:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_SD_MspInit+0x1ec>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2031      	movs	r0, #49	; 0x31
 8000abe:	f002 f990 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000ac2:	2031      	movs	r0, #49	; 0x31
 8000ac4:	f002 f9a9 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	37b8      	adds	r7, #184	; 0xb8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40012800 	.word	0x40012800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	48000c00 	.word	0x48000c00
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	200009b8 	.word	0x200009b8
 8000ae4:	40020444 	.word	0x40020444
 8000ae8:	20000a00 	.word	0x20000a00
 8000aec:	40020458 	.word	0x40020458

08000af0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <HAL_FMC_MspInit+0xa4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d13e      	bne.n	8000b8a <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8000b0c:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <HAL_FMC_MspInit+0xa4>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <HAL_FMC_MspInit+0xa8>)
 8000b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b16:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <HAL_FMC_MspInit+0xa8>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6513      	str	r3, [r2, #80]	; 0x50
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <HAL_FMC_MspInit+0xa8>)
 8000b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  PE9   ------> FMC_D6
  PE8   ------> FMC_D5
  PD14   ------> FMC_D0
  PE7   ------> FMC_D4
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_5
 8000b2a:	f24c 03f3 	movw	r3, #49395	; 0xc0f3
 8000b2e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	4815      	ldr	r0, [pc, #84]	; (8000b9c <HAL_FMC_MspInit+0xac>)
 8000b46:	f002 fc99 	bl	800347c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3;
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	480f      	ldr	r0, [pc, #60]	; (8000ba0 <HAL_FMC_MspInit+0xb0>)
 8000b64:	f002 fc8a 	bl	800347c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 8000b68:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000b6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <HAL_FMC_MspInit+0xb4>)
 8000b84:	f002 fc7a 	bl	800347c <HAL_GPIO_Init>
 8000b88:	e000      	b.n	8000b8c <HAL_FMC_MspInit+0x9c>
    return;
 8000b8a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000a8 	.word	0x200000a8
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	48000c00 	.word	0x48000c00
 8000ba0:	48001400 	.word	0x48001400
 8000ba4:	48001000 	.word	0x48001000

08000ba8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000bb0:	f7ff ff9e 	bl	8000af0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f001 ffa8 	bl	8002b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <DMA1_Channel4_IRQHandler+0x10>)
 8000c16:	f002 fb52 	bl	80032be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000030c 	.word	0x2000030c

08000c24 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <DMA1_Channel5_IRQHandler+0x10>)
 8000c2a:	f002 fb48 	bl	80032be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200002c4 	.word	0x200002c4

08000c38 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <SDMMC1_IRQHandler+0x10>)
 8000c3e:	f006 fb71 	bl	8007324 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001f0 	.word	0x200001f0

08000c4c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <DMA2_Channel4_IRQHandler+0x10>)
 8000c52:	f002 fb34 	bl	80032be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200009b8 	.word	0x200009b8

08000c60 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <DMA2_Channel5_IRQHandler+0x10>)
 8000c66:	f002 fb2a 	bl	80032be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000a00 	.word	0x20000a00

08000c74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c9c:	f7ff ffea 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <LoopForever+0xe>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <LoopForever+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f008 fcaf 	bl	8009628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cca:	f7ff fa8f 	bl	80001ec <main>

08000cce <LoopForever>:

LoopForever:
    b LoopForever
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000cdc:	08009700 	.word	0x08009700
  ldr r2, =_sbss
 8000ce0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000ce4:	20000f34 	.word	0x20000f34

08000ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_2_IRQHandler>
	...

08000cec <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 ffd1 	bl	8001ca0 <mfxstm32l152_GetInstance>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	2bff      	cmp	r3, #255	; 0xff
 8000d06:	d10e      	bne.n	8000d26 <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f000 ffc9 	bl	8001ca0 <mfxstm32l152_GetInstance>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8000d12:	7bbb      	ldrb	r3, [r7, #14]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d806      	bhi.n	8000d26 <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	88fa      	ldrh	r2, [r7, #6]
 8000d1c:	b2d1      	uxtb	r1, r2
 8000d1e:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <mfxstm32l152_Init+0x58>)
 8000d20:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8000d22:	f001 faf1 	bl	8002308 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	2102      	movs	r1, #2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f8db 	bl	8000ee6 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	2101      	movs	r1, #1
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 f8fc 	bl	8000f32 <mfxstm32l152_SetIrqOutPinType>
}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200000ac 	.word	0x200000ac

08000d48 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 ffc3 	bl	8001ce0 <mfxstm32l152_ReleaseInstance>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	2bff      	cmp	r3, #255	; 0xff
 8000d62:	d001      	beq.n	8000d68 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8000d64:	f001 fae0 	bl	8002328 <MFX_IO_DeInit>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	4618      	mov	r0, r3
 8000d82:	f001 fb73 	bl	800246c <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8000d86:	200a      	movs	r0, #10
 8000d88:	f001 fbb2 	bl	80024f0 <MFX_IO_Delay>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	2240      	movs	r2, #64	; 0x40
 8000da2:	2140      	movs	r1, #64	; 0x40
 8000da4:	4618      	mov	r0, r3
 8000da6:	f001 fb61 	bl	800246c <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8000daa:	f001 fb27 	bl	80023fc <MFX_IO_EnableWakeupPin>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 ff6c 	bl	8001ca0 <mfxstm32l152_GetInstance>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	2bff      	cmp	r3, #255	; 0xff
 8000dd0:	d101      	bne.n	8000dd6 <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 8000dd2:	f001 fb13 	bl	80023fc <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 8000dd6:	f001 fb35 	bl	8002444 <MFX_IO_Wakeup>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f001 fb7f 	bl	80024f0 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8000df2:	f001 fa89 	bl	8002308 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fb4a 	bl	8002494 <MFX_IO_Read>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	b29b      	uxth	r3, r3
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	80fb      	strh	r3, [r7, #6]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	2142      	movs	r1, #66	; 0x42
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 fb33 	bl	8002494 <MFX_IO_Read>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8000e32:	7bfa      	ldrb	r2, [r7, #15]
 8000e34:	797b      	ldrb	r3, [r7, #5]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000e3a:	7bfa      	ldrb	r2, [r7, #15]
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	2142      	movs	r1, #66	; 0x42
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fb13 	bl	800246c <MFX_IO_Write>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	460a      	mov	r2, r1
 8000e58:	80fb      	strh	r3, [r7, #6]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	2142      	movs	r1, #66	; 0x42
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fb14 	bl	8002494 <MFX_IO_Read>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8000e70:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	b25a      	sxtb	r2, r3
 8000e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000e82:	7bfa      	ldrb	r2, [r7, #15]
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	2142      	movs	r1, #66	; 0x42
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 faef 	bl	800246c <MFX_IO_Write>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	460a      	mov	r2, r1
 8000ea0:	80fb      	strh	r3, [r7, #6]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 faf2 	bl	8002494 <MFX_IO_Read>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	797b      	ldrb	r3, [r7, #5]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	b2db      	uxtb	r3, r3
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	460a      	mov	r2, r1
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8000ed2:	797a      	ldrb	r2, [r7, #5]
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	2144      	movs	r1, #68	; 0x44
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fac7 	bl	800246c <MFX_IO_Write>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	460a      	mov	r2, r1
 8000ef0:	80fb      	strh	r3, [r7, #6]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	2141      	movs	r1, #65	; 0x41
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fac8 	bl	8002494 <MFX_IO_Read>
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	f023 0302 	bic.w	r3, r3, #2
 8000f0e:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	797b      	ldrb	r3, [r7, #5]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	2141      	movs	r1, #65	; 0x41
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 faa4 	bl	800246c <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f001 fae3 	bl	80024f0 <MFX_IO_Delay>

}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	460a      	mov	r2, r1
 8000f3c:	80fb      	strh	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	2141      	movs	r1, #65	; 0x41
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 faa2 	bl	8002494 <MFX_IO_Read>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f023 0301 	bic.w	r3, r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	797b      	ldrb	r3, [r7, #5]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	2141      	movs	r1, #65	; 0x41
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 fa7e 	bl	800246c <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f001 fabd 	bl	80024f0 <MFX_IO_Delay>

}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	6039      	str	r1, [r7, #0]
 8000f88:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 fa80 	bl	8002494 <MFX_IO_Read>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa6:	d304      	bcc.n	8000fb2 <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e003      	b.n	8000fba <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f023 0308 	bic.w	r3, r3, #8
 8000fb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	2140      	movs	r1, #64	; 0x40
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 fa53 	bl	800246c <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f001 fa92 	bl	80024f0 <MFX_IO_Delay>
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	80fb      	strh	r3, [r7, #6]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8000fe8:	797b      	ldrb	r3, [r7, #5]
 8000fea:	2b17      	cmp	r3, #23
 8000fec:	f200 82d4 	bhi.w	8001598 <mfxstm32l152_IO_Config+0x5c4>
 8000ff0:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <mfxstm32l152_IO_Config+0x24>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001089 	.word	0x08001089
 8000ffc:	08001119 	.word	0x08001119
 8001000:	080011d9 	.word	0x080011d9
 8001004:	080012c9 	.word	0x080012c9
 8001008:	080013b9 	.word	0x080013b9
 800100c:	080014a9 	.word	0x080014a9
 8001010:	08001059 	.word	0x08001059
 8001014:	08001059 	.word	0x08001059
 8001018:	080010b9 	.word	0x080010b9
 800101c:	080010e9 	.word	0x080010e9
 8001020:	08001599 	.word	0x08001599
 8001024:	080011a9 	.word	0x080011a9
 8001028:	08001179 	.word	0x08001179
 800102c:	08001599 	.word	0x08001599
 8001030:	08001149 	.word	0x08001149
 8001034:	08001119 	.word	0x08001119
 8001038:	08001229 	.word	0x08001229
 800103c:	08001279 	.word	0x08001279
 8001040:	08001319 	.word	0x08001319
 8001044:	08001369 	.word	0x08001369
 8001048:	08001409 	.word	0x08001409
 800104c:	08001459 	.word	0x08001459
 8001050:	080014f9 	.word	0x080014f9
 8001054:	08001549 	.word	0x08001549
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fb67 	bl	8001730 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2200      	movs	r2, #0
 8001066:	6839      	ldr	r1, [r7, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fa9d 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800106e:	88f8      	ldrh	r0, [r7, #6]
 8001070:	2300      	movs	r3, #0
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	2164      	movs	r1, #100	; 0x64
 8001076:	f000 fe57 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800107a:	88f8      	ldrh	r0, [r7, #6]
 800107c:	2300      	movs	r3, #0
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	2168      	movs	r1, #104	; 0x68
 8001082:	f000 fe51 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    break;
 8001086:	e28a      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	6839      	ldr	r1, [r7, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fb4f 	bl	8001730 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	2200      	movs	r2, #0
 8001096:	6839      	ldr	r1, [r7, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fa85 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800109e:	88f8      	ldrh	r0, [r7, #6]
 80010a0:	2300      	movs	r3, #0
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	2164      	movs	r1, #100	; 0x64
 80010a6:	f000 fe3f 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80010aa:	88f8      	ldrh	r0, [r7, #6]
 80010ac:	2301      	movs	r3, #1
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	2168      	movs	r1, #104	; 0x68
 80010b2:	f000 fe39 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    break;
 80010b6:	e272      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	6839      	ldr	r1, [r7, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fb37 	bl	8001730 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	2200      	movs	r2, #0
 80010c6:	6839      	ldr	r1, [r7, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fa6d 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80010ce:	88f8      	ldrh	r0, [r7, #6]
 80010d0:	2301      	movs	r3, #1
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	2164      	movs	r1, #100	; 0x64
 80010d6:	f000 fe27 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80010da:	88f8      	ldrh	r0, [r7, #6]
 80010dc:	2301      	movs	r3, #1
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	2168      	movs	r1, #104	; 0x68
 80010e2:	f000 fe21 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    break;
 80010e6:	e25a      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	6839      	ldr	r1, [r7, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fb1f 	bl	8001730 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	2200      	movs	r2, #0
 80010f6:	6839      	ldr	r1, [r7, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fa55 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80010fe:	88f8      	ldrh	r0, [r7, #6]
 8001100:	2301      	movs	r3, #1
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	2164      	movs	r1, #100	; 0x64
 8001106:	f000 fe0f 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800110a:	88f8      	ldrh	r0, [r7, #6]
 800110c:	2300      	movs	r3, #0
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	2168      	movs	r1, #104	; 0x68
 8001112:	f000 fe09 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    break;
 8001116:	e242      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	6839      	ldr	r1, [r7, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fb07 	bl	8001730 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	2201      	movs	r2, #1
 8001126:	6839      	ldr	r1, [r7, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fa3d 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 800112e:	88f8      	ldrh	r0, [r7, #6]
 8001130:	2300      	movs	r3, #0
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	2164      	movs	r1, #100	; 0x64
 8001136:	f000 fdf7 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800113a:	88f8      	ldrh	r0, [r7, #6]
 800113c:	2300      	movs	r3, #0
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	2168      	movs	r1, #104	; 0x68
 8001142:	f000 fdf1 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    break;
 8001146:	e22a      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	6839      	ldr	r1, [r7, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 faef 	bl	8001730 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	2201      	movs	r2, #1
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fa25 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 800115e:	88f8      	ldrh	r0, [r7, #6]
 8001160:	2300      	movs	r3, #0
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	2164      	movs	r1, #100	; 0x64
 8001166:	f000 fddf 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800116a:	88f8      	ldrh	r0, [r7, #6]
 800116c:	2301      	movs	r3, #1
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	2168      	movs	r1, #104	; 0x68
 8001172:	f000 fdd9 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    break;
 8001176:	e212      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fad7 	bl	8001730 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	2201      	movs	r2, #1
 8001186:	6839      	ldr	r1, [r7, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fa0d 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800118e:	88f8      	ldrh	r0, [r7, #6]
 8001190:	2301      	movs	r3, #1
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	2164      	movs	r1, #100	; 0x64
 8001196:	f000 fdc7 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800119a:	88f8      	ldrh	r0, [r7, #6]
 800119c:	2300      	movs	r3, #0
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	2168      	movs	r1, #104	; 0x68
 80011a2:	f000 fdc1 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    break;
 80011a6:	e1fa      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	6839      	ldr	r1, [r7, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fabf 	bl	8001730 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	2201      	movs	r2, #1
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f9f5 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80011be:	88f8      	ldrh	r0, [r7, #6]
 80011c0:	2301      	movs	r3, #1
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	2164      	movs	r1, #100	; 0x64
 80011c6:	f000 fdaf 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80011ca:	88f8      	ldrh	r0, [r7, #6]
 80011cc:	2301      	movs	r3, #1
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	2168      	movs	r1, #104	; 0x68
 80011d2:	f000 fda9 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    break;
 80011d6:	e1e2      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fa7a 	bl	80016d4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	2200      	movs	r2, #0
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f9de 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80011ec:	88f8      	ldrh	r0, [r7, #6]
 80011ee:	2300      	movs	r3, #0
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	2164      	movs	r1, #100	; 0x64
 80011f4:	f000 fd98 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80011f8:	88f8      	ldrh	r0, [r7, #6]
 80011fa:	2301      	movs	r3, #1
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	2168      	movs	r1, #104	; 0x68
 8001200:	f000 fd92 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	2201      	movs	r2, #1
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f9de 	bl	80015cc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	2201      	movs	r2, #1
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f9ed 	bl	80015f6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fa75 	bl	8001710 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001226:	e1ba      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fa52 	bl	80016d4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	2200      	movs	r2, #0
 8001234:	6839      	ldr	r1, [r7, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f9b6 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800123c:	88f8      	ldrh	r0, [r7, #6]
 800123e:	2301      	movs	r3, #1
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	2164      	movs	r1, #100	; 0x64
 8001244:	f000 fd70 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001248:	88f8      	ldrh	r0, [r7, #6]
 800124a:	2301      	movs	r3, #1
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	2168      	movs	r1, #104	; 0x68
 8001250:	f000 fd6a 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	2201      	movs	r2, #1
 8001258:	6839      	ldr	r1, [r7, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f9b6 	bl	80015cc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	2201      	movs	r2, #1
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f9c5 	bl	80015f6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	6839      	ldr	r1, [r7, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fa4d 	bl	8001710 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001276:	e192      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fa2a 	bl	80016d4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	2200      	movs	r2, #0
 8001284:	6839      	ldr	r1, [r7, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f98e 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800128c:	88f8      	ldrh	r0, [r7, #6]
 800128e:	2301      	movs	r3, #1
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	2164      	movs	r1, #100	; 0x64
 8001294:	f000 fd48 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001298:	88f8      	ldrh	r0, [r7, #6]
 800129a:	2300      	movs	r3, #0
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	2168      	movs	r1, #104	; 0x68
 80012a0:	f000 fd42 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	2201      	movs	r2, #1
 80012a8:	6839      	ldr	r1, [r7, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f98e 	bl	80015cc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	2201      	movs	r2, #1
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f99d 	bl	80015f6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fa25 	bl	8001710 <mfxstm32l152_IO_EnablePinIT>
    break;
 80012c6:	e16a      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fa02 	bl	80016d4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	2200      	movs	r2, #0
 80012d4:	6839      	ldr	r1, [r7, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f966 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80012dc:	88f8      	ldrh	r0, [r7, #6]
 80012de:	2300      	movs	r3, #0
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	2164      	movs	r1, #100	; 0x64
 80012e4:	f000 fd20 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80012e8:	88f8      	ldrh	r0, [r7, #6]
 80012ea:	2301      	movs	r3, #1
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	2168      	movs	r1, #104	; 0x68
 80012f0:	f000 fd1a 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	2201      	movs	r2, #1
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f966 	bl	80015cc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	2200      	movs	r2, #0
 8001304:	6839      	ldr	r1, [r7, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f975 	bl	80015f6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	6839      	ldr	r1, [r7, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f9fd 	bl	8001710 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001316:	e142      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f9da 	bl	80016d4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	2200      	movs	r2, #0
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f93e 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800132c:	88f8      	ldrh	r0, [r7, #6]
 800132e:	2301      	movs	r3, #1
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	2164      	movs	r1, #100	; 0x64
 8001334:	f000 fcf8 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001338:	88f8      	ldrh	r0, [r7, #6]
 800133a:	2301      	movs	r3, #1
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	2168      	movs	r1, #104	; 0x68
 8001340:	f000 fcf2 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	2201      	movs	r2, #1
 8001348:	6839      	ldr	r1, [r7, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f93e 	bl	80015cc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	2200      	movs	r2, #0
 8001354:	6839      	ldr	r1, [r7, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f94d 	bl	80015f6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f9d5 	bl	8001710 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001366:	e11a      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f9b2 	bl	80016d4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	2200      	movs	r2, #0
 8001374:	6839      	ldr	r1, [r7, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f916 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800137c:	88f8      	ldrh	r0, [r7, #6]
 800137e:	2301      	movs	r3, #1
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	2164      	movs	r1, #100	; 0x64
 8001384:	f000 fcd0 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001388:	88f8      	ldrh	r0, [r7, #6]
 800138a:	2300      	movs	r3, #0
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	2168      	movs	r1, #104	; 0x68
 8001390:	f000 fcca 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	2201      	movs	r2, #1
 8001398:	6839      	ldr	r1, [r7, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f916 	bl	80015cc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	2200      	movs	r2, #0
 80013a4:	6839      	ldr	r1, [r7, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f925 	bl	80015f6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f9ad 	bl	8001710 <mfxstm32l152_IO_EnablePinIT>
    break;
 80013b6:	e0f2      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f98a 	bl	80016d4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	2200      	movs	r2, #0
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f8ee 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80013cc:	88f8      	ldrh	r0, [r7, #6]
 80013ce:	2300      	movs	r3, #0
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	2164      	movs	r1, #100	; 0x64
 80013d4:	f000 fca8 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80013d8:	88f8      	ldrh	r0, [r7, #6]
 80013da:	2301      	movs	r3, #1
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	2168      	movs	r1, #104	; 0x68
 80013e0:	f000 fca2 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	2200      	movs	r2, #0
 80013e8:	6839      	ldr	r1, [r7, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f8ee 	bl	80015cc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	2200      	movs	r2, #0
 80013f4:	6839      	ldr	r1, [r7, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f8fd 	bl	80015f6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f985 	bl	8001710 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001406:	e0ca      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f962 	bl	80016d4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	2200      	movs	r2, #0
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f8c6 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800141c:	88f8      	ldrh	r0, [r7, #6]
 800141e:	2301      	movs	r3, #1
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	2164      	movs	r1, #100	; 0x64
 8001424:	f000 fc80 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001428:	88f8      	ldrh	r0, [r7, #6]
 800142a:	2301      	movs	r3, #1
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	2168      	movs	r1, #104	; 0x68
 8001430:	f000 fc7a 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	2200      	movs	r2, #0
 8001438:	6839      	ldr	r1, [r7, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f8c6 	bl	80015cc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	2200      	movs	r2, #0
 8001444:	6839      	ldr	r1, [r7, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f8d5 	bl	80015f6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	6839      	ldr	r1, [r7, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f95d 	bl	8001710 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001456:	e0a2      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f93a 	bl	80016d4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	2200      	movs	r2, #0
 8001464:	6839      	ldr	r1, [r7, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f89e 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800146c:	88f8      	ldrh	r0, [r7, #6]
 800146e:	2301      	movs	r3, #1
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	2164      	movs	r1, #100	; 0x64
 8001474:	f000 fc58 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001478:	88f8      	ldrh	r0, [r7, #6]
 800147a:	2300      	movs	r3, #0
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	2168      	movs	r1, #104	; 0x68
 8001480:	f000 fc52 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	2200      	movs	r2, #0
 8001488:	6839      	ldr	r1, [r7, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f89e 	bl	80015cc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	2200      	movs	r2, #0
 8001494:	6839      	ldr	r1, [r7, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f8ad 	bl	80015f6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	6839      	ldr	r1, [r7, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f935 	bl	8001710 <mfxstm32l152_IO_EnablePinIT>
    break;
 80014a6:	e07a      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f912 	bl	80016d4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	2200      	movs	r2, #0
 80014b4:	6839      	ldr	r1, [r7, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f876 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80014bc:	88f8      	ldrh	r0, [r7, #6]
 80014be:	2300      	movs	r3, #0
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	2164      	movs	r1, #100	; 0x64
 80014c4:	f000 fc30 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80014c8:	88f8      	ldrh	r0, [r7, #6]
 80014ca:	2301      	movs	r3, #1
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	2168      	movs	r1, #104	; 0x68
 80014d0:	f000 fc2a 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	2200      	movs	r2, #0
 80014d8:	6839      	ldr	r1, [r7, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f876 	bl	80015cc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	2201      	movs	r2, #1
 80014e4:	6839      	ldr	r1, [r7, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f885 	bl	80015f6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f90d 	bl	8001710 <mfxstm32l152_IO_EnablePinIT>
    break;
 80014f6:	e052      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f8ea 	bl	80016d4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	2200      	movs	r2, #0
 8001504:	6839      	ldr	r1, [r7, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f84e 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800150c:	88f8      	ldrh	r0, [r7, #6]
 800150e:	2301      	movs	r3, #1
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	2164      	movs	r1, #100	; 0x64
 8001514:	f000 fc08 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001518:	88f8      	ldrh	r0, [r7, #6]
 800151a:	2301      	movs	r3, #1
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	2168      	movs	r1, #104	; 0x68
 8001520:	f000 fc02 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	2200      	movs	r2, #0
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f84e 	bl	80015cc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	2201      	movs	r2, #1
 8001534:	6839      	ldr	r1, [r7, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f85d 	bl	80015f6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	6839      	ldr	r1, [r7, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f8e5 	bl	8001710 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001546:	e02a      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f8c2 	bl	80016d4 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	2200      	movs	r2, #0
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f826 	bl	80015a8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800155c:	88f8      	ldrh	r0, [r7, #6]
 800155e:	2301      	movs	r3, #1
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	2164      	movs	r1, #100	; 0x64
 8001564:	f000 fbe0 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001568:	88f8      	ldrh	r0, [r7, #6]
 800156a:	2300      	movs	r3, #0
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	2168      	movs	r1, #104	; 0x68
 8001570:	f000 fbda 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	2200      	movs	r2, #0
 8001578:	6839      	ldr	r1, [r7, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f826 	bl	80015cc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	2201      	movs	r2, #1
 8001584:	6839      	ldr	r1, [r7, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f835 	bl	80015f6 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f8bd 	bl	8001710 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001596:	e002      	b.n	800159e <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8001598:	797b      	ldrb	r3, [r7, #5]
 800159a:	73fb      	strb	r3, [r7, #15]
    break;
 800159c:	bf00      	nop
  }

  return error_code;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	80fb      	strh	r3, [r7, #6]
 80015b4:	4613      	mov	r3, r2
 80015b6:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 80015b8:	797b      	ldrb	r3, [r7, #5]
 80015ba:	88f8      	ldrh	r0, [r7, #6]
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	2160      	movs	r1, #96	; 0x60
 80015c0:	f000 fbb2 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	80fb      	strh	r3, [r7, #6]
 80015d8:	4613      	mov	r3, r2
 80015da:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 80015dc:	797b      	ldrb	r3, [r7, #5]
 80015de:	88f8      	ldrh	r0, [r7, #6]
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	214c      	movs	r1, #76	; 0x4c
 80015e4:	f000 fba0 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f000 ff81 	bl	80024f0 <MFX_IO_Delay>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	6039      	str	r1, [r7, #0]
 8001600:	80fb      	strh	r3, [r7, #6]
 8001602:	4613      	mov	r3, r2
 8001604:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8001606:	797b      	ldrb	r3, [r7, #5]
 8001608:	88f8      	ldrh	r0, [r7, #6]
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	2150      	movs	r1, #80	; 0x50
 800160e:	f000 fb8b 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f000 ff6c 	bl	80024f0 <MFX_IO_Delay>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	80fb      	strh	r3, [r7, #6]
 800162c:	4613      	mov	r3, r2
 800162e:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8001630:	797b      	ldrb	r3, [r7, #5]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8001636:	88f8      	ldrh	r0, [r7, #6]
 8001638:	2301      	movs	r3, #1
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	216c      	movs	r1, #108	; 0x6c
 800163e:	f000 fb73 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8001642:	e005      	b.n	8001650 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8001644:	88f8      	ldrh	r0, [r7, #6]
 8001646:	2301      	movs	r3, #1
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	2170      	movs	r1, #112	; 0x70
 800164c:	f000 fb6c 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	2110      	movs	r1, #16
 800167c:	4618      	mov	r0, r3
 800167e:	f000 ff09 	bl	8002494 <MFX_IO_Read>
 8001682:	4603      	mov	r3, r0
 8001684:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	2111      	movs	r1, #17
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fefd 	bl	8002494 <MFX_IO_Read>
 800169a:	4603      	mov	r3, r0
 800169c:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	2112      	movs	r1, #18
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fef1 	bl	8002494 <MFX_IO_Read>
 80016b2:	4603      	mov	r3, r0
 80016b4:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	021a      	lsls	r2, r3, #8
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	441a      	add	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	4013      	ands	r3, r2
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80016de:	f000 fe5f 	bl	80023a0 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	2101      	movs	r1, #1
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fb92 	bl	8000e10 <mfxstm32l152_EnableITSource>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	2101      	movs	r1, #1
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fba3 	bl	8000e4e <mfxstm32l152_DisableITSource>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 800171c:	88f8      	ldrh	r0, [r7, #6]
 800171e:	2301      	movs	r3, #1
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	2148      	movs	r1, #72	; 0x48
 8001724:	f000 fb00 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 800173c:	88f8      	ldrh	r0, [r7, #6]
 800173e:	2300      	movs	r3, #0
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	2148      	movs	r1, #72	; 0x48
 8001744:	f000 faf0 	bl	8001d28 <mfxstm32l152_reg24_setPinValue>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	210c      	movs	r1, #12
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fe8d 	bl	8002494 <MFX_IO_Read>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001784:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	210d      	movs	r1, #13
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fe7f 	bl	8002494 <MFX_IO_Read>
 8001796:	4603      	mov	r3, r0
 8001798:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	041b      	lsls	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	210e      	movs	r1, #14
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fe73 	bl	8002494 <MFX_IO_Read>
 80017ae:	4603      	mov	r3, r0
 80017b0:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80017b2:	7bfa      	ldrb	r2, [r7, #15]
 80017b4:	89bb      	ldrh	r3, [r7, #12]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	4413      	add	r3, r2
 80017ba:	461a      	mov	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	4413      	add	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	4013      	ands	r3, r2
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	6039      	str	r1, [r7, #0]
 80017dc:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	0c1b      	lsrs	r3, r3, #16
 80017ec:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	2154      	movs	r1, #84	; 0x54
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fe36 	bl	800246c <MFX_IO_Write>
  }
  if (pin_8_15)
 8001800:	7bbb      	ldrb	r3, [r7, #14]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8001806:	7bba      	ldrb	r2, [r7, #14]
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	2155      	movs	r1, #85	; 0x55
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fe2d 	bl	800246c <MFX_IO_Write>
  }
  if (pin_16_23)
 8001812:	7b7b      	ldrb	r3, [r7, #13]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8001818:	7b7a      	ldrb	r2, [r7, #13]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	2156      	movs	r1, #86	; 0x56
 800181e:	4618      	mov	r0, r3
 8001820:	f000 fe24 	bl	800246c <MFX_IO_Write>
  }
}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	b29b      	uxth	r3, r3
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fe26 	bl	8002494 <MFX_IO_Read>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	b29b      	uxth	r3, r3
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	4618      	mov	r0, r3
 8001860:	f000 fe04 	bl	800246c <MFX_IO_Write>
}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 800186c:	b084      	sub	sp, #16
 800186e:	b590      	push	{r4, r7, lr}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	4604      	mov	r4, r0
 8001876:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800187a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800187e:	4623      	mov	r3, r4
 8001880:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	b29b      	uxth	r3, r3
 8001890:	2140      	movs	r1, #64	; 0x40
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fdfe 	bl	8002494 <MFX_IO_Read>
 8001898:	4603      	mov	r3, r0
 800189a:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 800189c:	7bbb      	ldrb	r3, [r7, #14]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10b      	bne.n	80018be <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 80018a6:	7bbb      	ldrb	r3, [r7, #14]
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	7bba      	ldrb	r2, [r7, #14]
 80018b6:	2140      	movs	r1, #64	; 0x40
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fdd7 	bl	800246c <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 80018be:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f003 030e 	and.w	r3, r3, #14
 80018ca:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 80018cc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018dc:	4313      	orrs	r3, r2
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 80018e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80018ec:	b25a      	sxtb	r2, r3
 80018ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fdb2 	bl	800246c <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001908:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800190c:	b25b      	sxtb	r3, r3
 800190e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001912:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8001914:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001918:	b25b      	sxtb	r3, r3
 800191a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800191e:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001920:	4313      	orrs	r3, r2
 8001922:	b25b      	sxtb	r3, r3
 8001924:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	b29b      	uxth	r3, r3
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	2181      	movs	r1, #129	; 0x81
 8001930:	4618      	mov	r0, r3
 8001932:	f000 fd9b 	bl	800246c <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8001936:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	b29b      	uxth	r3, r3
 800193c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	b29b      	uxth	r3, r3
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	2182      	movs	r1, #130	; 0x82
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fd8f 	bl	800246c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 800194e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001950:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	b29b      	uxth	r3, r3
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	2183      	movs	r1, #131	; 0x83
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fd85 	bl	800246c <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8001962:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	b29b      	uxth	r3, r3
 8001968:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	b29b      	uxth	r3, r3
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	2184      	movs	r1, #132	; 0x84
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fd79 	bl	800246c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 800197a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800197c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	b29b      	uxth	r3, r3
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	2185      	movs	r1, #133	; 0x85
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fd6f 	bl	800246c <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 800198e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	b29b      	uxth	r3, r3
 8001994:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	b29b      	uxth	r3, r3
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	2186      	movs	r1, #134	; 0x86
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fd63 	bl	800246c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 80019a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019a8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	2187      	movs	r1, #135	; 0x87
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 fd59 	bl	800246c <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 80019ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	b29b      	uxth	r3, r3
 80019c0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	2188      	movs	r1, #136	; 0x88
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fd4d 	bl	800246c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 80019d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019d4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	b29b      	uxth	r3, r3
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	2189      	movs	r1, #137	; 0x89
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fd43 	bl	800246c <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 80019e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	218a      	movs	r1, #138	; 0x8a
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fd37 	bl	800246c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 80019fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a00:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	218b      	movs	r1, #139	; 0x8b
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 fd2d 	bl	800246c <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8001a12:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001a14:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	2190      	movs	r1, #144	; 0x90
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 fd23 	bl	800246c <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8001a26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001a28:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	2191      	movs	r1, #145	; 0x91
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fd19 	bl	800246c <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8001a3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a3c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	2192      	movs	r1, #146	; 0x92
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fd0f 	bl	800246c <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8001a4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a50:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	2193      	movs	r1, #147	; 0x93
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fd05 	bl	800246c <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8001a62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001a64:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	2194      	movs	r1, #148	; 0x94
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fcfb 	bl	800246c <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8001a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	218c      	movs	r1, #140	; 0x8c
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 fcef 	bl	800246c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8001a8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a90:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	218d      	movs	r1, #141	; 0x8d
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fce5 	bl	800246c <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8001aa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	218e      	movs	r1, #142	; 0x8e
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fcd9 	bl	800246c <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8001aba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001abc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	218f      	movs	r1, #143	; 0x8f
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fccf 	bl	800246c <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8001ace:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001ad2:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	2196      	movs	r1, #150	; 0x96
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fcc4 	bl	800246c <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001ae4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001aee:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8001af0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001afa:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001afc:	4313      	orrs	r3, r2
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	2197      	movs	r1, #151	; 0x97
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fcad 	bl	800246c <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8001b12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b16:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	2198      	movs	r1, #152	; 0x98
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 fca2 	bl	800246c <MFX_IO_Write>
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001b32:	b004      	add	sp, #16
 8001b34:	4770      	bx	lr

08001b36 <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	6039      	str	r1, [r7, #0]
 8001b40:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	b298      	uxth	r0, r3
 8001b48:	f107 020c 	add.w	r2, r7, #12
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	2114      	movs	r1, #20
 8001b50:	f000 fcb4 	bl	80024bc <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8001b54:	7b3b      	ldrb	r3, [r7, #12]
 8001b56:	041a      	lsls	r2, r3, #16
 8001b58:	7b7b      	ldrb	r3, [r7, #13]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	7bba      	ldrb	r2, [r7, #14]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	461a      	mov	r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	601a      	str	r2, [r3, #0]

}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001b7a:	f000 fc11 	bl	80023a0 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	2102      	movs	r1, #2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f944 	bl	8000e10 <mfxstm32l152_EnableITSource>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f98f 	bl	8000ec2 <mfxstm32l152_ClearGlobalIT>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f96b 	bl	8000e96 <mfxstm32l152_GlobalITStatus>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff f938 	bl	8000e4e <mfxstm32l152_DisableITSource>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fc4b 	bl	8002494 <MFX_IO_Read>
 8001bfe:	4603      	mov	r3, r0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2104      	movs	r1, #4
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 fc3a 	bl	8002494 <MFX_IO_Read>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001c34:	f000 fbb4 	bl	80023a0 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff f8e7 	bl	8000e10 <mfxstm32l152_EnableITSource>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	2104      	movs	r1, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f932 	bl	8000ec2 <mfxstm32l152_ClearGlobalIT>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	2104      	movs	r1, #4
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f90e 	bl	8000e96 <mfxstm32l152_GlobalITStatus>
 8001c7a:	4603      	mov	r3, r0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	2104      	movs	r1, #4
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f8db 	bl	8000e4e <mfxstm32l152_DisableITSource>
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	e00b      	b.n	8001cc8 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <mfxstm32l152_GetInstance+0x3c>)
 8001cb4:	5cd3      	ldrb	r3, [r2, r3]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	88fa      	ldrh	r2, [r7, #6]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d101      	bne.n	8001cc2 <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	e006      	b.n	8001cd0 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d9f0      	bls.n	8001cb0 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8001cce:	23ff      	movs	r3, #255	; 0xff
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	200000ac 	.word	0x200000ac

08001ce0 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	e00f      	b.n	8001d10 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <mfxstm32l152_ReleaseInstance+0x44>)
 8001cf4:	5cd3      	ldrb	r3, [r2, r3]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d105      	bne.n	8001d0a <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <mfxstm32l152_ReleaseInstance+0x44>)
 8001d02:	2100      	movs	r1, #0
 8001d04:	54d1      	strb	r1, [r2, r3]
      return idx;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	e006      	b.n	8001d18 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d9ec      	bls.n	8001cf0 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8001d16:	23ff      	movs	r3, #255	; 0xff
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	200000ac 	.word	0x200000ac

08001d28 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	603a      	str	r2, [r7, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	80fb      	strh	r3, [r7, #6]
 8001d36:	460b      	mov	r3, r1
 8001d38:	717b      	strb	r3, [r7, #5]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	0c1b      	lsrs	r3, r3, #16
 8001d50:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01e      	beq.n	8001d96 <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8001d58:	797a      	ldrb	r2, [r7, #5]
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fb98 	bl	8002494 <MFX_IO_Read>
 8001d64:	4603      	mov	r3, r0
 8001d66:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001d68:	793b      	ldrb	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	7bbb      	ldrb	r3, [r7, #14]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e008      	b.n	8001d8a <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8001d78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	b25a      	sxtb	r2, r3
 8001d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d84:	4013      	ands	r3, r2
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	7979      	ldrb	r1, [r7, #5]
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 fb6b 	bl	800246c <MFX_IO_Write>
  }

  if (pin_8_15)
 8001d96:	7b7b      	ldrb	r3, [r7, #13]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d022      	beq.n	8001de2 <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8001d9c:	797b      	ldrb	r3, [r7, #5]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fb74 	bl	8002494 <MFX_IO_Read>
 8001dac:	4603      	mov	r3, r0
 8001dae:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001db0:	793b      	ldrb	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	7b7b      	ldrb	r3, [r7, #13]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	e008      	b.n	8001dd2 <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8001dc0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	b25a      	sxtb	r2, r3
 8001dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	b25b      	sxtb	r3, r3
 8001dd0:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 8001dd2:	797b      	ldrb	r3, [r7, #5]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	b2d9      	uxtb	r1, r3
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 fb45 	bl	800246c <MFX_IO_Write>
  }

  if (pin_16_23)
 8001de2:	7b3b      	ldrb	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d022      	beq.n	8001e2e <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8001de8:	797b      	ldrb	r3, [r7, #5]
 8001dea:	3302      	adds	r3, #2
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fb4e 	bl	8002494 <MFX_IO_Read>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001dfc:	793b      	ldrb	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	7b3b      	ldrb	r3, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	e008      	b.n	8001e1e <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001e0c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	b25a      	sxtb	r2, r3
 8001e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8001e1e:	797b      	ldrb	r3, [r7, #5]
 8001e20:	3302      	adds	r3, #2
 8001e22:	b2d9      	uxtb	r1, r3
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fb1f 	bl	800246c <MFX_IO_Write>
  }
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  while (1);
 8001e3a:	e7fe      	b.n	8001e3a <BSP_ErrorHandler+0x4>

08001e3c <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d124      	bne.n	8001e96 <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <BSP_LED_Init+0x90>)
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e50:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <BSP_LED_Init+0x90>)
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e58:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <BSP_LED_Init+0x90>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	4a1a      	ldr	r2, [pc, #104]	; (8001ed0 <BSP_LED_Init+0x94>)
 8001e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4814      	ldr	r0, [pc, #80]	; (8001ed4 <BSP_LED_Init+0x98>)
 8001e82:	f001 fafb 	bl	800347c <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4811      	ldr	r0, [pc, #68]	; (8001ed4 <BSP_LED_Init+0x98>)
 8001e90:	f001 fd78 	bl	8003984 <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 8001e94:	e016      	b.n	8001ec4 <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 8001e96:	f000 fb37 	bl	8002508 <BSP_IO_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 8001ea0:	f7ff ffc9 	bl	8001e36 <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <BSP_LED_Init+0x94>)
 8001ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eac:	2101      	movs	r1, #1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fb6e 	bl	8002590 <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <BSP_LED_Init+0x94>)
 8001eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fb82 	bl	80025c8 <BSP_IO_WritePin>
}
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	080096e0 	.word	0x080096e0
 8001ed4:	48000400 	.word	0x48000400

08001ed8 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d109      	bne.n	8001efc <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <BSP_LED_On+0x3c>)
 8001eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4808      	ldr	r0, [pc, #32]	; (8001f18 <BSP_LED_On+0x40>)
 8001ef6:	f001 fd45 	bl	8003984 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 8001efa:	e007      	b.n	8001f0c <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <BSP_LED_On+0x3c>)
 8001f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fb5e 	bl	80025c8 <BSP_IO_WritePin>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	080096e0 	.word	0x080096e0
 8001f18:	48000400 	.word	0x48000400

08001f1c <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d109      	bne.n	8001f40 <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <BSP_LED_Off+0x3c>)
 8001f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4619      	mov	r1, r3
 8001f38:	4808      	ldr	r0, [pc, #32]	; (8001f5c <BSP_LED_Off+0x40>)
 8001f3a:	f001 fd23 	bl	8003984 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 8001f3e:	e007      	b.n	8001f50 <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <BSP_LED_Off+0x3c>)
 8001f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fb3c 	bl	80025c8 <BSP_IO_WritePin>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	080096e0 	.word	0x080096e0
 8001f5c:	48000400 	.word	0x48000400

08001f60 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8001f64:	4812      	ldr	r0, [pc, #72]	; (8001fb0 <I2C2_Init+0x50>)
 8001f66:	f002 f918 	bl	800419a <HAL_I2C_GetState>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d11d      	bne.n	8001fac <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <I2C2_Init+0x50>)
 8001f72:	4a10      	ldr	r2, [pc, #64]	; (8001fb4 <I2C2_Init+0x54>)
 8001f74:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <I2C2_Init+0x50>)
 8001f78:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <I2C2_Init+0x58>)
 8001f7a:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <I2C2_Init+0x50>)
 8001f7e:	2270      	movs	r2, #112	; 0x70
 8001f80:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <I2C2_Init+0x50>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <I2C2_Init+0x50>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <I2C2_Init+0x50>)
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <I2C2_Init+0x50>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <I2C2_Init+0x50>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <I2C2_Init+0x50>)
 8001fa2:	f000 f80b 	bl	8001fbc <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8001fa6:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <I2C2_Init+0x50>)
 8001fa8:	f001 fd04 	bl	80039b4 <HAL_I2C_Init>
  }
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200000b0 	.word	0x200000b0
 8001fb4:	40005800 	.word	0x40005800
 8001fb8:	40403e5d 	.word	0x40403e5d

08001fbc <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0ae      	sub	sp, #184	; 0xb8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a37      	ldr	r2, [pc, #220]	; (80020a8 <I2C2_MspInit+0xec>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d168      	bne.n	80020a0 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8001fd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001fd8:	f107 0318 	add.w	r3, r7, #24
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fab9 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8001fe2:	4b32      	ldr	r3, [pc, #200]	; (80020ac <I2C2_MspInit+0xf0>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a31      	ldr	r2, [pc, #196]	; (80020ac <I2C2_MspInit+0xf0>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fee:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <I2C2_MspInit+0xf0>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8001ffa:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <I2C2_MspInit+0xf0>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a2b      	ldr	r2, [pc, #172]	; (80020ac <I2C2_MspInit+0xf0>)
 8002000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002006:	4b29      	ldr	r3, [pc, #164]	; (80020ac <I2C2_MspInit+0xf0>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8002012:	2310      	movs	r3, #16
 8002014:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8002018:	2312      	movs	r3, #18
 800201a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 800201e:	2301      	movs	r3, #1
 8002020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 800202a:	2304      	movs	r3, #4
 800202c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8002030:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002034:	4619      	mov	r1, r3
 8002036:	481e      	ldr	r0, [pc, #120]	; (80020b0 <I2C2_MspInit+0xf4>)
 8002038:	f001 fa20 	bl	800347c <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 800203c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002040:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8002044:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002048:	4619      	mov	r1, r3
 800204a:	481a      	ldr	r0, [pc, #104]	; (80020b4 <I2C2_MspInit+0xf8>)
 800204c:	f001 fa16 	bl	800347c <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 8002050:	4b16      	ldr	r3, [pc, #88]	; (80020ac <I2C2_MspInit+0xf0>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a15      	ldr	r2, [pc, #84]	; (80020ac <I2C2_MspInit+0xf0>)
 8002056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <I2C2_MspInit+0xf0>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <I2C2_MspInit+0xf0>)
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	4a0f      	ldr	r2, [pc, #60]	; (80020ac <I2C2_MspInit+0xf0>)
 800206e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002072:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <I2C2_MspInit+0xf0>)
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <I2C2_MspInit+0xf0>)
 800207a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800207e:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	2021      	movs	r0, #33	; 0x21
 8002086:	f000 feac 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 800208a:	2021      	movs	r0, #33	; 0x21
 800208c:	f000 fec5 	bl	8002e1a <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	2100      	movs	r1, #0
 8002094:	2022      	movs	r0, #34	; 0x22
 8002096:	f000 fea4 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800209a:	2022      	movs	r0, #34	; 0x22
 800209c:	f000 febd 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  }
}
 80020a0:	bf00      	nop
 80020a2:	37b8      	adds	r7, #184	; 0xb8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40005800 	.word	0x40005800
 80020ac:	40021000 	.word	0x40021000
 80020b0:	48001c00 	.word	0x48001c00
 80020b4:	48000400 	.word	0x48000400

080020b8 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 80020bc:	4806      	ldr	r0, [pc, #24]	; (80020d8 <I2C2_DeInit+0x20>)
 80020be:	f002 f86c 	bl	800419a <HAL_I2C_GetState>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 80020c8:	4803      	ldr	r0, [pc, #12]	; (80020d8 <I2C2_DeInit+0x20>)
 80020ca:	f001 fd02 	bl	8003ad2 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 80020ce:	4802      	ldr	r0, [pc, #8]	; (80020d8 <I2C2_DeInit+0x20>)
 80020d0:	f000 f804 	bl	80020dc <I2C2_MspDeInit>
  }
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200000b0 	.word	0x200000b0

080020dc <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <I2C2_MspDeInit+0x8c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d138      	bne.n	8002160 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <I2C2_MspDeInit+0x90>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	4a1e      	ldr	r2, [pc, #120]	; (800216c <I2C2_MspDeInit+0x90>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <I2C2_MspDeInit+0x90>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8002106:	4b19      	ldr	r3, [pc, #100]	; (800216c <I2C2_MspDeInit+0x90>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	4a18      	ldr	r2, [pc, #96]	; (800216c <I2C2_MspDeInit+0x90>)
 800210c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <I2C2_MspDeInit+0x90>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 800211e:	2110      	movs	r1, #16
 8002120:	4813      	ldr	r0, [pc, #76]	; (8002170 <I2C2_MspDeInit+0x94>)
 8002122:	f001 fb3d 	bl	80037a0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8002126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800212a:	4812      	ldr	r0, [pc, #72]	; (8002174 <I2C2_MspDeInit+0x98>)
 800212c:	f001 fb38 	bl	80037a0 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <I2C2_MspDeInit+0x90>)
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <I2C2_MspDeInit+0x90>)
 8002136:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800213a:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <I2C2_MspDeInit+0x90>)
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <I2C2_MspDeInit+0x90>)
 8002142:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002146:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <I2C2_MspDeInit+0x90>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <I2C2_MspDeInit+0x90>)
 800214e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002152:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8002154:	2021      	movs	r0, #33	; 0x21
 8002156:	f000 fe6e 	bl	8002e36 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800215a:	2022      	movs	r0, #34	; 0x22
 800215c:	f000 fe6b 	bl	8002e36 <HAL_NVIC_DisableIRQ>
  }
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40005800 	.word	0x40005800
 800216c:	40021000 	.word	0x40021000
 8002170:	48001c00 	.word	0x48001c00
 8002174:	48000400 	.word	0x48000400

08002178 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af04      	add	r7, sp, #16
 800217e:	4604      	mov	r4, r0
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4623      	mov	r3, r4
 8002188:	80fb      	strh	r3, [r7, #6]
 800218a:	4603      	mov	r3, r0
 800218c:	80bb      	strh	r3, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	807b      	strh	r3, [r7, #2]
 8002192:	4613      	mov	r3, r2
 8002194:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800219a:	b672      	cpsid	i
}
 800219c:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <I2C2_WriteData+0x5c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	8878      	ldrh	r0, [r7, #2]
 80021a4:	88ba      	ldrh	r2, [r7, #4]
 80021a6:	88f9      	ldrh	r1, [r7, #6]
 80021a8:	9302      	str	r3, [sp, #8]
 80021aa:	2301      	movs	r3, #1
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	1c7b      	adds	r3, r7, #1
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4603      	mov	r3, r0
 80021b4:	4808      	ldr	r0, [pc, #32]	; (80021d8 <I2C2_WriteData+0x60>)
 80021b6:	f001 fcbb 	bl	8003b30 <HAL_I2C_Mem_Write>
 80021ba:	4603      	mov	r3, r0
 80021bc:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80021be:	b662      	cpsie	i
}
 80021c0:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80021c8:	f000 f890 	bl	80022ec <I2C2_Error>
  }
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd90      	pop	{r4, r7, pc}
 80021d4:	2000007c 	.word	0x2000007c
 80021d8:	200000b0 	.word	0x200000b0

080021dc <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af04      	add	r7, sp, #16
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
 80021e6:	460b      	mov	r3, r1
 80021e8:	80bb      	strh	r3, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80021f6:	b672      	cpsid	i
}
 80021f8:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <I2C2_ReadData+0x60>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	8878      	ldrh	r0, [r7, #2]
 8002200:	88ba      	ldrh	r2, [r7, #4]
 8002202:	88f9      	ldrh	r1, [r7, #6]
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	2301      	movs	r3, #1
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	f107 030e 	add.w	r3, r7, #14
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	4603      	mov	r3, r0
 8002212:	480b      	ldr	r0, [pc, #44]	; (8002240 <I2C2_ReadData+0x64>)
 8002214:	f001 fda0 	bl	8003d58 <HAL_I2C_Mem_Read>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800221c:	b662      	cpsie	i
}
 800221e:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d004      	beq.n	8002230 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8002226:	f000 f861 	bl	80022ec <I2C2_Error>
    HAL_Delay(200);
 800222a:	20c8      	movs	r0, #200	; 0xc8
 800222c:	f000 fcb6 	bl	8002b9c <HAL_Delay>
  }

  return value;
 8002230:	7bbb      	ldrb	r3, [r7, #14]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	2000007c 	.word	0x2000007c
 8002240:	200000b0 	.word	0x200000b0

08002244 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8002254:	2300      	movs	r3, #0
 8002256:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
}
 800225a:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 800225c:	88f9      	ldrh	r1, [r7, #6]
 800225e:	2332      	movs	r3, #50	; 0x32
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	480a      	ldr	r0, [pc, #40]	; (800228c <I2C2_isDeviceReady+0x48>)
 8002264:	f001 fe92 	bl	8003f8c <HAL_I2C_IsDeviceReady>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800226c:	b662      	cpsie	i
}
 800226e:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8002276:	f000 f839 	bl	80022ec <I2C2_Error>
    HAL_Delay(200);
 800227a:	20c8      	movs	r0, #200	; 0xc8
 800227c:	f000 fc8e 	bl	8002b9c <HAL_Delay>
  }

  return value;
 8002280:	7bbb      	ldrb	r3, [r7, #14]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200000b0 	.word	0x200000b0

08002290 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af04      	add	r7, sp, #16
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	4603      	mov	r3, r0
 800229a:	81fb      	strh	r3, [r7, #14]
 800229c:	460b      	mov	r3, r1
 800229e:	81bb      	strh	r3, [r7, #12]
 80022a0:	4613      	mov	r3, r2
 80022a2:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 80022a8:	b672      	cpsid	i
}
 80022aa:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <I2C2_ReadBuffer+0x54>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	8978      	ldrh	r0, [r7, #10]
 80022b2:	89ba      	ldrh	r2, [r7, #12]
 80022b4:	89f9      	ldrh	r1, [r7, #14]
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	8c3b      	ldrh	r3, [r7, #32]
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	4603      	mov	r3, r0
 80022c2:	4809      	ldr	r0, [pc, #36]	; (80022e8 <I2C2_ReadBuffer+0x58>)
 80022c4:	f001 fd48 	bl	8003d58 <HAL_I2C_Mem_Read>
 80022c8:	4603      	mov	r3, r0
 80022ca:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 80022cc:	b662      	cpsie	i
}
 80022ce:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80022d6:	f000 f809 	bl	80022ec <I2C2_Error>
  }

  return status;
 80022da:	7dfb      	ldrb	r3, [r7, #23]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2000007c 	.word	0x2000007c
 80022e8:	200000b0 	.word	0x200000b0

080022ec <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 80022f0:	f7ff fda1 	bl	8001e36 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 80022f4:	4803      	ldr	r0, [pc, #12]	; (8002304 <I2C2_Error+0x18>)
 80022f6:	f001 fbec 	bl	8003ad2 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 80022fa:	f7ff fe31 	bl	8001f60 <I2C2_Init>
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200000b0 	.word	0x200000b0

08002308 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 800230c:	f7ff fe28 	bl	8001f60 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8002310:	2104      	movs	r1, #4
 8002312:	2084      	movs	r0, #132	; 0x84
 8002314:	f7ff ff96 	bl	8002244 <I2C2_isDeviceReady>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 800231e:	f7ff fd8a 	bl	8001e36 <BSP_ErrorHandler>
  }
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <MFX_IO_DeInit+0x6c>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	4a18      	ldr	r2, [pc, #96]	; (8002394 <MFX_IO_DeInit+0x6c>)
 8002334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <MFX_IO_DeInit+0x6c>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8002346:	2340      	movs	r3, #64	; 0x40
 8002348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8002352:	2302      	movs	r3, #2
 8002354:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8002356:	f107 030c 	add.w	r3, r7, #12
 800235a:	4619      	mov	r1, r3
 800235c:	480e      	ldr	r0, [pc, #56]	; (8002398 <MFX_IO_DeInit+0x70>)
 800235e:	f001 f88d 	bl	800347c <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8002362:	2017      	movs	r0, #23
 8002364:	f000 fd67 	bl	8002e36 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <MFX_IO_DeInit+0x6c>)
 800236a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236c:	4a09      	ldr	r2, [pc, #36]	; (8002394 <MFX_IO_DeInit+0x6c>)
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <MFX_IO_DeInit+0x6c>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8002380:	2120      	movs	r1, #32
 8002382:	4806      	ldr	r0, [pc, #24]	; (800239c <MFX_IO_DeInit+0x74>)
 8002384:	f001 fa0c 	bl	80037a0 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8002388:	f7ff fe96 	bl	80020b8 <I2C2_DeInit>
}
 800238c:	bf00      	nop
 800238e:	3720      	adds	r7, #32
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	48001c00 	.word	0x48001c00
 800239c:	48000800 	.word	0x48000800

080023a0 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <MFX_IO_ITConfig+0x54>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <MFX_IO_ITConfig+0x54>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <MFX_IO_ITConfig+0x54>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 80023be:	2320      	movs	r3, #32
 80023c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 80023ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023ce:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4808      	ldr	r0, [pc, #32]	; (80023f8 <MFX_IO_ITConfig+0x58>)
 80023d6:	f001 f851 	bl	800347c <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 80023da:	220f      	movs	r2, #15
 80023dc:	210f      	movs	r1, #15
 80023de:	2017      	movs	r0, #23
 80023e0:	f000 fcff 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80023e4:	2017      	movs	r0, #23
 80023e6:	f000 fd18 	bl	8002e1a <HAL_NVIC_EnableIRQ>
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	48000800 	.word	0x48000800

080023fc <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MFX_IO_EnableWakeupPin+0x40>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	4a0d      	ldr	r2, [pc, #52]	; (800243c <MFX_IO_EnableWakeupPin+0x40>)
 8002408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MFX_IO_EnableWakeupPin+0x40>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 800241a:	2340      	movs	r3, #64	; 0x40
 800241c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800241e:	2301      	movs	r3, #1
 8002420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002422:	2302      	movs	r3, #2
 8002424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	4619      	mov	r1, r3
 800242e:	4804      	ldr	r0, [pc, #16]	; (8002440 <MFX_IO_EnableWakeupPin+0x44>)
 8002430:	f001 f824 	bl	800347c <HAL_GPIO_Init>
}
 8002434:	bf00      	nop
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	48001c00 	.word	0x48001c00

08002444 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8002448:	2201      	movs	r2, #1
 800244a:	2140      	movs	r1, #64	; 0x40
 800244c:	4806      	ldr	r0, [pc, #24]	; (8002468 <MFX_IO_Wakeup+0x24>)
 800244e:	f001 fa99 	bl	8003984 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 8002452:	2001      	movs	r0, #1
 8002454:	f000 fba2 	bl	8002b9c <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	2140      	movs	r1, #64	; 0x40
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <MFX_IO_Wakeup+0x24>)
 800245e:	f001 fa91 	bl	8003984 <HAL_GPIO_WritePin>
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	48001c00 	.word	0x48001c00

0800246c <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
 8002476:	460b      	mov	r3, r1
 8002478:	717b      	strb	r3, [r7, #5]
 800247a:	4613      	mov	r3, r2
 800247c:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 800247e:	797b      	ldrb	r3, [r7, #5]
 8002480:	b299      	uxth	r1, r3
 8002482:	793b      	ldrb	r3, [r7, #4]
 8002484:	88f8      	ldrh	r0, [r7, #6]
 8002486:	2201      	movs	r2, #1
 8002488:	f7ff fe76 	bl	8002178 <I2C2_WriteData>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	460a      	mov	r2, r1
 800249e:	80fb      	strh	r3, [r7, #6]
 80024a0:	4613      	mov	r3, r2
 80024a2:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 80024a4:	797b      	ldrb	r3, [r7, #5]
 80024a6:	b299      	uxth	r1, r3
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	2201      	movs	r2, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fe95 	bl	80021dc <I2C2_ReadData>
 80024b2:	4603      	mov	r3, r0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60ba      	str	r2, [r7, #8]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4603      	mov	r3, r0
 80024c8:	81fb      	strh	r3, [r7, #14]
 80024ca:	460b      	mov	r3, r1
 80024cc:	737b      	strb	r3, [r7, #13]
 80024ce:	4613      	mov	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80024d2:	7b7b      	ldrb	r3, [r7, #13]
 80024d4:	b299      	uxth	r1, r3
 80024d6:	89f8      	ldrh	r0, [r7, #14]
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2201      	movs	r2, #1
 80024e0:	f7ff fed6 	bl	8002290 <I2C2_ReadBuffer>
 80024e4:	4603      	mov	r3, r0
 80024e6:	b29b      	uxth	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fb4f 	bl	8002b9c <HAL_Delay>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <BSP_IO_Init+0x78>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d128      	bne.n	8002570 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <BSP_IO_Init+0x7c>)
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	2084      	movs	r0, #132	; 0x84
 8002524:	4798      	blx	r3

    HAL_Delay(10);
 8002526:	200a      	movs	r0, #10
 8002528:	f000 fb38 	bl	8002b9c <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <BSP_IO_Init+0x80>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2084      	movs	r0, #132	; 0x84
 8002532:	4798      	blx	r3
 8002534:	4603      	mov	r3, r0
 8002536:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8002538:	79bb      	ldrb	r3, [r7, #6]
 800253a:	2b7b      	cmp	r3, #123	; 0x7b
 800253c:	d002      	beq.n	8002544 <BSP_IO_Init+0x3c>
 800253e:	79bb      	ldrb	r3, [r7, #6]
 8002540:	2b79      	cmp	r3, #121	; 0x79
 8002542:	d117      	bne.n	8002574 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <BSP_IO_Init+0x78>)
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <BSP_IO_Init+0x80>)
 8002548:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 800254a:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <BSP_IO_Init+0x78>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00f      	beq.n	8002574 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <BSP_IO_Init+0x78>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2084      	movs	r0, #132	; 0x84
 800255c:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <BSP_IO_Init+0x78>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4909      	ldr	r1, [pc, #36]	; (800258c <BSP_IO_Init+0x84>)
 8002566:	2084      	movs	r0, #132	; 0x84
 8002568:	4798      	blx	r3

        ret = IO_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	e001      	b.n	8002574 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8002570:	2303      	movs	r3, #3
 8002572:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8002574:	79fb      	ldrb	r3, [r7, #7]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200000fc 	.word	0x200000fc
 8002584:	20000030 	.word	0x20000030
 8002588:	20000004 	.word	0x20000004
 800258c:	000301ff 	.word	0x000301ff

08002590 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <BSP_IO_ConfigPin+0x30>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <BSP_IO_ConfigPin+0x34>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	68f9      	ldr	r1, [r7, #12]
 80025b2:	2084      	movs	r0, #132	; 0x84
 80025b4:	4798      	blx	r3

  return IO_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	000301ff 	.word	0x000301ff
 80025c4:	200000fc 	.word	0x200000fc

080025c8 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <BSP_IO_WritePin+0x30>)
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <BSP_IO_WritePin+0x34>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	68f9      	ldr	r1, [r7, #12]
 80025ea:	2084      	movs	r0, #132	; 0x84
 80025ec:	4798      	blx	r3

}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	000301ff 	.word	0x000301ff
 80025fc:	200000fc 	.word	0x200000fc

08002600 <BSP_IO_ReadPin>:
  * @param  IO_Pin: Selected pins to read.
  *          This parameter can be any combination of the IO pins.
  * @retval The current pins state
  */
uint32_t BSP_IO_ReadPin(uint32_t IO_Pin)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t pin_state = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
  uint32_t io1_pin = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <BSP_IO_ReadPin+0x38>)
 8002614:	4013      	ands	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]

  /* Gets the IO Expander 1 selected pins current state */
  pin_state |= (io1_driver->ReadPin(IO1_I2C_ADDRESS, io1_pin)) << IO1_PIN_OFFSET;
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <BSP_IO_ReadPin+0x3c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	2084      	movs	r0, #132	; 0x84
 8002622:	4798      	blx	r3
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]


  return pin_state;
 800262c:	68fb      	ldr	r3, [r7, #12]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	000301ff 	.word	0x000301ff
 800263c:	200000fc 	.word	0x200000fc

08002640 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  None
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	71fb      	strb	r3, [r7, #7]

  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <BSP_SD_Init+0x8c>)
 800264c:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <BSP_SD_Init+0x90>)
 800264e:	601a      	str	r2, [r3, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002650:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <BSP_SD_Init+0x8c>)
 8002652:	2200      	movs	r2, #0
 8002654:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <BSP_SD_Init+0x8c>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <BSP_SD_Init+0x8c>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002662:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <BSP_SD_Init+0x8c>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <BSP_SD_Init+0x8c>)
 800266a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800266e:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <BSP_SD_Init+0x8c>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]

  /* Msp SD Detect pin initialization */
  SD_Detect_MspInit();
 8002676:	f000 f986 	bl	8002986 <SD_Detect_MspInit>

  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800267a:	f000 f844 	bl	8002706 <BSP_SD_IsDetected>
 800267e:	4603      	mov	r3, r0
 8002680:	2b01      	cmp	r3, #1
 8002682:	d001      	beq.n	8002688 <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8002684:	2302      	movs	r3, #2
 8002686:	e01c      	b.n	80026c2 <BSP_SD_Init+0x82>
  }

  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 8002688:	2100      	movs	r1, #0
 800268a:	4810      	ldr	r0, [pc, #64]	; (80026cc <BSP_SD_Init+0x8c>)
 800268c:	f000 f8cc 	bl	8002828 <BSP_SD_MspInit>
    
  /* HAL SD initialization */
  if (HAL_SD_Init(&uSdHandle) != HAL_OK)
 8002690:	480e      	ldr	r0, [pc, #56]	; (80026cc <BSP_SD_Init+0x8c>)
 8002692:	f004 fbdd 	bl	8006e50 <HAL_SD_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <BSP_SD_Init+0x60>
  {
    sd_state = MSD_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	71fb      	strb	r3, [r7, #7]
  }

  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <BSP_SD_Init+0x80>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80026a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026aa:	4808      	ldr	r0, [pc, #32]	; (80026cc <BSP_SD_Init+0x8c>)
 80026ac:	f005 f98a 	bl	80079c4 <HAL_SD_ConfigWideBusOperation>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <BSP_SD_Init+0x7c>
    {
      sd_state = MSD_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	71fb      	strb	r3, [r7, #7]
 80026ba:	e001      	b.n	80026c0 <BSP_SD_Init+0x80>
    }
    else
    {
      sd_state = MSD_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return  sd_state;
 80026c0:	79fb      	ldrb	r3, [r7, #7]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000a48 	.word	0x20000a48
 80026d0:	40012800 	.word	0x40012800

080026d4 <BSP_SD_ITConfig>:
  * @brief  Configures Interrupt mode for SD detection pin.
  * @param  None
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_SD_ITConfig(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != SD_DETECT_PIN)
 80026d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026dc:	f7ff ff90 	bl	8002600 <BSP_IO_ReadPin>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	d006      	beq.n	80026f6 <BSP_SD_ITConfig+0x22>
  {
    return BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_IT_RISING_EDGE_PU);
 80026e8:	2110      	movs	r1, #16
 80026ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026ee:	f7ff ff4f 	bl	8002590 <BSP_IO_ConfigPin>
 80026f2:	4603      	mov	r3, r0
 80026f4:	e005      	b.n	8002702 <BSP_SD_ITConfig+0x2e>
  }
  else
  {
    return BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_IT_FALLING_EDGE_PU);
 80026f6:	2112      	movs	r1, #18
 80026f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026fc:	f7ff ff48 	bl	8002590 <BSP_IO_ConfigPin>
 8002700:	4603      	mov	r3, r0
  }
}
 8002702:	4618      	mov	r0, r3
 8002704:	bd80      	pop	{r7, pc}

08002706 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800270c:	2301      	movs	r3, #1
 800270e:	71fb      	strb	r3, [r7, #7]

  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002710:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002714:	f7ff ff74 	bl	8002600 <BSP_IO_ReadPin>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 800271e:	2300      	movs	r3, #0
 8002720:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	b2db      	uxtb	r3, r3
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	75fb      	strb	r3, [r7, #23]

  /* Invalidate the dma tx handle*/
  uSdHandle.hdmatx = NULL;
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <BSP_SD_ReadBlocks_DMA+0x4c>)
 8002742:	2200      	movs	r2, #0
 8002744:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Prepare the dma channel for a read operation */
  sd_state = SD_DMAConfigRx(&uSdHandle);
 8002746:	480d      	ldr	r0, [pc, #52]	; (800277c <BSP_SD_ReadBlocks_DMA+0x4c>)
 8002748:	f000 f92e 	bl	80029a8 <SD_DMAConfigRx>
 800274c:	4603      	mov	r3, r0
 800274e:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 8002750:	7dfb      	ldrb	r3, [r7, #23]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <BSP_SD_ReadBlocks_DMA+0x36>
  {
    /* Read block(s) in DMA transfer mode */
    sd_state = HAL_SD_ReadBlocks_DMA(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	68f9      	ldr	r1, [r7, #12]
 800275c:	4807      	ldr	r0, [pc, #28]	; (800277c <BSP_SD_ReadBlocks_DMA+0x4c>)
 800275e:	f004 fc4d 	bl	8006ffc <HAL_SD_ReadBlocks_DMA>
 8002762:	4603      	mov	r3, r0
 8002764:	75fb      	strb	r3, [r7, #23]
  }

  if (sd_state == HAL_OK)
 8002766:	7dfb      	ldrb	r3, [r7, #23]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <BSP_SD_ReadBlocks_DMA+0x40>
  {
    return MSD_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	e000      	b.n	8002772 <BSP_SD_ReadBlocks_DMA+0x42>
  }
  else
  {
    return MSD_ERROR;
 8002770:	2301      	movs	r3, #1
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000a48 	.word	0x20000a48

08002780 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	75fb      	strb	r3, [r7, #23]

  /* Invalidate the dma rx handle*/
  uSdHandle.hdmarx = NULL;
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <BSP_SD_WriteBlocks_DMA+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare the dma channel for a read operation */
  sd_state = SD_DMAConfigTx(&uSdHandle);
 8002796:	480d      	ldr	r0, [pc, #52]	; (80027cc <BSP_SD_WriteBlocks_DMA+0x4c>)
 8002798:	f000 f94a 	bl	8002a30 <SD_DMAConfigTx>
 800279c:	4603      	mov	r3, r0
 800279e:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <BSP_SD_WriteBlocks_DMA+0x36>
  {
    /* Write block(s) in DMA transfer mode */
    sd_state = HAL_SD_WriteBlocks_DMA(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	68f9      	ldr	r1, [r7, #12]
 80027ac:	4807      	ldr	r0, [pc, #28]	; (80027cc <BSP_SD_WriteBlocks_DMA+0x4c>)
 80027ae:	f004 fced 	bl	800718c <HAL_SD_WriteBlocks_DMA>
 80027b2:	4603      	mov	r3, r0
 80027b4:	75fb      	strb	r3, [r7, #23]
  }

  if (sd_state == HAL_OK)
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <BSP_SD_WriteBlocks_DMA+0x40>
  {
    return MSD_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	e000      	b.n	80027c2 <BSP_SD_WriteBlocks_DMA+0x42>
  }
  else
  {
    return MSD_ERROR;
 80027c0:	2301      	movs	r3, #1
  }
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000a48 	.word	0x20000a48

080027d0 <BSP_SD_GetCardState>:
  * @brief  Gets the current SD card data status.
  * @param  None
  * @retval Data transfer state.
  */
uint8_t BSP_SD_GetCardState(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypedef card_state;
  card_state = HAL_SD_GetCardState(&uSdHandle);
 80027d6:	480c      	ldr	r0, [pc, #48]	; (8002808 <BSP_SD_GetCardState+0x38>)
 80027d8:	f005 f9b0 	bl	8007b3c <HAL_SD_GetCardState>
 80027dc:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d101      	bne.n	80027e8 <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 80027e4:	2300      	movs	r3, #0
 80027e6:	e00b      	b.n	8002800 <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) ||
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d005      	beq.n	80027fa <BSP_SD_GetCardState+0x2a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b06      	cmp	r3, #6
 80027f2:	d002      	beq.n	80027fa <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) ||
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b07      	cmp	r3, #7
 80027f8:	d101      	bne.n	80027fe <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <BSP_SD_GetCardState+0x30>
  }
  else
  {
    return (SD_TRANSFER_ERROR);
 80027fe:	2302      	movs	r3, #2
  }
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000a48 	.word	0x20000a48

0800280c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4803      	ldr	r0, [pc, #12]	; (8002824 <BSP_SD_GetCardInfo+0x18>)
 8002818:	f005 f8a8 	bl	800796c <HAL_SD_GetCardInfo>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000a48 	.word	0x20000a48

08002828 <BSP_SD_MspInit>:
  * @param hsd: SD handle
  * @param Params: Additional parameters
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b0ae      	sub	sp, #184	; 0xb8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002832:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef  RCC_PeriphClkInit;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);

  HAL_RCCEx_GetPeriphCLKConfig(&RCC_PeriphClkInit);
 8002842:	f107 0318 	add.w	r3, r7, #24
 8002846:	4618      	mov	r0, r3
 8002848:	f003 f980 	bl	8005b4c <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the SDMMC1 clock source. The clock is derived from the PLLSAI1 */
  /* Hypothesis is that PLLSAI1 VCO input is 8Mhz */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800284c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002850:	61bb      	str	r3, [r7, #24]
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002852:	2318      	movs	r3, #24
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1Q = 4;
 8002856:	2304      	movs	r3, #4
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800285a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8002860:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002864:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK)
 8002868:	f107 0318 	add.w	r3, r7, #24
 800286c:	4618      	mov	r0, r3
 800286e:	f002 fe71 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d000      	beq.n	800287a <BSP_SD_MspInit+0x52>
  {
    while (1) {}
 8002878:	e7fe      	b.n	8002878 <BSP_SD_MspInit+0x50>
  }

  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <BSP_SD_MspInit+0x108>)
 800287c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287e:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <BSP_SD_MspInit+0x108>)
 8002880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002884:	6613      	str	r3, [r2, #96]	; 0x60
 8002886:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <BSP_SD_MspInit+0x108>)
 8002888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]

  /* Enable DMA2 clocks */
  SD_DMAx_CLK_ENABLE();
 8002892:	4b27      	ldr	r3, [pc, #156]	; (8002930 <BSP_SD_MspInit+0x108>)
 8002894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002896:	4a26      	ldr	r2, [pc, #152]	; (8002930 <BSP_SD_MspInit+0x108>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	6493      	str	r3, [r2, #72]	; 0x48
 800289e:	4b24      	ldr	r3, [pc, #144]	; (8002930 <BSP_SD_MspInit+0x108>)
 80028a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	4b21      	ldr	r3, [pc, #132]	; (8002930 <BSP_SD_MspInit+0x108>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	4a20      	ldr	r2, [pc, #128]	; (8002930 <BSP_SD_MspInit+0x108>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <BSP_SD_MspInit+0x108>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <BSP_SD_MspInit+0x108>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <BSP_SD_MspInit+0x108>)
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <BSP_SD_MspInit+0x108>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  gpioinitstruct.Pull      = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e6:	2303      	movs	r3, #3
 80028e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 80028ec:	230c      	movs	r3, #12
 80028ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80028f2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80028f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80028fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028fe:	4619      	mov	r1, r3
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <BSP_SD_MspInit+0x10c>)
 8002902:	f000 fdbb 	bl	800347c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 8002906:	2304      	movs	r3, #4
 8002908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 800290c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002910:	4619      	mov	r1, r3
 8002912:	4809      	ldr	r0, [pc, #36]	; (8002938 <BSP_SD_MspInit+0x110>)
 8002914:	f000 fdb2 	bl	800347c <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 8002918:	2200      	movs	r2, #0
 800291a:	2105      	movs	r1, #5
 800291c:	2031      	movs	r0, #49	; 0x31
 800291e:	f000 fa60 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 8002922:	2031      	movs	r0, #49	; 0x31
 8002924:	f000 fa79 	bl	8002e1a <HAL_NVIC_EnableIRQ>

  /* DMA initialization should be done here but , as there is only one channel for RX and TX it is configured and done directly when required*/
}
 8002928:	bf00      	nop
 800292a:	37b8      	adds	r7, #184	; 0xb8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	48000800 	.word	0x48000800
 8002938:	48000c00 	.word	0x48000c00

0800293c <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_SD_AbortCallback>:
  * @brief SD Abort callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8002952:	f7ff fff3 	bl	800293c <BSP_SD_AbortCallback>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8002966:	f006 fdeb 	bl	8009540 <BSP_SD_WriteCpltCallback>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800297a:	f006 fded 	bl	8009558 <BSP_SD_ReadCpltCallback>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
static void SD_Detect_MspInit(void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	af00      	add	r7, sp, #0
  if (BSP_IO_Init() == IO_ERROR)
 800298a:	f7ff fdbd 	bl	8002508 <BSP_IO_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <SD_Detect_MspInit+0x12>
  {
    BSP_ErrorHandler();
 8002994:	f7ff fa4f 	bl	8001e36 <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_INPUT_PU);
 8002998:	2108      	movs	r1, #8
 800299a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800299e:	f7ff fdf7 	bl	8002590 <BSP_IO_ConfigPin>
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80029b4:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <SD_DMAConfigRx+0x80>)
 80029b6:	2207      	movs	r2, #7
 80029b8:	605a      	str	r2, [r3, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <SD_DMAConfigRx+0x80>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <SD_DMAConfigRx+0x80>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80029c6:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <SD_DMAConfigRx+0x80>)
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	611a      	str	r2, [r3, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <SD_DMAConfigRx+0x80>)
 80029ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d2:	615a      	str	r2, [r3, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <SD_DMAConfigRx+0x80>)
 80029d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029da:	619a      	str	r2, [r3, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <SD_DMAConfigRx+0x80>)
 80029de:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80029e2:	621a      	str	r2, [r3, #32]

  hdma_rx.Instance = SD_DMAx_STREAM;
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <SD_DMAConfigRx+0x80>)
 80029e6:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <SD_DMAConfigRx+0x84>)
 80029e8:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <SD_DMAConfigRx+0x80>)
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40
 80029f0:	4a0d      	ldr	r2, [pc, #52]	; (8002a28 <SD_DMAConfigRx+0x80>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6293      	str	r3, [r2, #40]	; 0x28

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 80029f6:	480c      	ldr	r0, [pc, #48]	; (8002a28 <SD_DMAConfigRx+0x80>)
 80029f8:	f000 fbe2 	bl	80031c0 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 80029fc:	480a      	ldr	r0, [pc, #40]	; (8002a28 <SD_DMAConfigRx+0x80>)
 80029fe:	f000 faed 	bl	8002fdc <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 8002a02:	4809      	ldr	r0, [pc, #36]	; (8002a28 <SD_DMAConfigRx+0x80>)
 8002a04:	f000 fa32 	bl	8002e6c <HAL_DMA_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	73fb      	strb	r3, [r7, #15]

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_IRQn, 6, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2106      	movs	r1, #6
 8002a10:	203c      	movs	r0, #60	; 0x3c
 8002a12:	f000 f9e6 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_IRQn);
 8002a16:	203c      	movs	r0, #60	; 0x3c
 8002a18:	f000 f9ff 	bl	8002e1a <HAL_NVIC_EnableIRQ>

  return (status);
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000100 	.word	0x20000100
 8002a2c:	40020458 	.word	0x40020458

08002a30 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 8002a38:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	605a      	str	r2, [r3, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a40:	2210      	movs	r2, #16
 8002a42:	609a      	str	r2, [r3, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002a4a:	4b18      	ldr	r3, [pc, #96]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	611a      	str	r2, [r3, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a56:	615a      	str	r2, [r3, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a5e:	619a      	str	r2, [r3, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a62:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002a66:	621a      	str	r2, [r3, #32]

  hdma_tx.Instance = SD_DMAx_STREAM;
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a6a:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <SD_DMAConfigTx+0x80>)
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a0e      	ldr	r2, [pc, #56]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a72:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a74:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6293      	str	r3, [r2, #40]	; 0x28

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 8002a7a:	480c      	ldr	r0, [pc, #48]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a7c:	f000 fba0 	bl	80031c0 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 8002a80:	480a      	ldr	r0, [pc, #40]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a82:	f000 faab 	bl	8002fdc <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 8002a86:	4809      	ldr	r0, [pc, #36]	; (8002aac <SD_DMAConfigTx+0x7c>)
 8002a88:	f000 f9f0 	bl	8002e6c <HAL_DMA_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	73fb      	strb	r3, [r7, #15]

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_IRQn, 6, 0);
 8002a90:	2200      	movs	r2, #0
 8002a92:	2106      	movs	r1, #6
 8002a94:	203c      	movs	r0, #60	; 0x3c
 8002a96:	f000 f9a4 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_IRQn);
 8002a9a:	203c      	movs	r0, #60	; 0x3c
 8002a9c:	f000 f9bd 	bl	8002e1a <HAL_NVIC_EnableIRQ>

  return (status);
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000148 	.word	0x20000148
 8002ab0:	40020458 	.word	0x40020458

08002ab4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002abe:	2003      	movs	r0, #3
 8002ac0:	f000 f984 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ac4:	200f      	movs	r0, #15
 8002ac6:	f000 f80d 	bl	8002ae4 <HAL_InitTick>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	71fb      	strb	r3, [r7, #7]
 8002ad4:	e001      	b.n	8002ada <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ad6:	f7fd fde3 	bl	80006a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ada:	79fb      	ldrb	r3, [r7, #7]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002af0:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <HAL_InitTick+0x6c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d023      	beq.n	8002b40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_InitTick+0x70>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_InitTick+0x6c>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f99f 	bl	8002e52 <HAL_SYSTICK_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10f      	bne.n	8002b3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b0f      	cmp	r3, #15
 8002b1e:	d809      	bhi.n	8002b34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b20:	2200      	movs	r2, #0
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b28:	f000 f95b 	bl	8002de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <HAL_InitTick+0x74>)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e007      	b.n	8002b44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e004      	b.n	8002b44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	e001      	b.n	8002b44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000084 	.word	0x20000084
 8002b54:	20000000 	.word	0x20000000
 8002b58:	20000080 	.word	0x20000080

08002b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_IncTick+0x20>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_IncTick+0x24>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <HAL_IncTick+0x24>)
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000084 	.word	0x20000084
 8002b80:	20000acc 	.word	0x20000acc

08002b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return uwTick;
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_GetTick+0x14>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000acc 	.word	0x20000acc

08002b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba4:	f7ff ffee 	bl	8002b84 <HAL_GetTick>
 8002ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb4:	d005      	beq.n	8002bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_Delay+0x44>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bc2:	bf00      	nop
 8002bc4:	f7ff ffde 	bl	8002b84 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d8f7      	bhi.n	8002bc4 <HAL_Delay+0x28>
  {
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000084 	.word	0x20000084

08002be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c16:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <__NVIC_SetPriorityGrouping+0x44>)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	60d3      	str	r3, [r2, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <__NVIC_GetPriorityGrouping+0x18>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 0307 	and.w	r3, r3, #7
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db0b      	blt.n	8002c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	4907      	ldr	r1, [pc, #28]	; (8002c80 <__NVIC_EnableIRQ+0x38>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2001      	movs	r0, #1
 8002c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000e100 	.word	0xe000e100

08002c84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db12      	blt.n	8002cbc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	490a      	ldr	r1, [pc, #40]	; (8002cc8 <__NVIC_DisableIRQ+0x44>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8002caa:	3320      	adds	r3, #32
 8002cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002cb0:	f3bf 8f4f 	dsb	sy
}
 8002cb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cb6:	f3bf 8f6f 	isb	sy
}
 8002cba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	; (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	; (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff05 	bl	8002be4 <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002df4:	f7ff ff1a 	bl	8002c2c <__NVIC_GetPriorityGrouping>
 8002df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff8e 	bl	8002d20 <NVIC_EncodePriority>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff5d 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff0d 	bl	8002c48 <__NVIC_EnableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff1d 	bl	8002c84 <__NVIC_DisableIRQ>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ff94 	bl	8002d88 <SysTick_Config>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e098      	b.n	8002fb0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b4d      	ldr	r3, [pc, #308]	; (8002fbc <HAL_DMA_Init+0x150>)
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d80f      	bhi.n	8002eaa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b4b      	ldr	r3, [pc, #300]	; (8002fc0 <HAL_DMA_Init+0x154>)
 8002e92:	4413      	add	r3, r2
 8002e94:	4a4b      	ldr	r2, [pc, #300]	; (8002fc4 <HAL_DMA_Init+0x158>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	009a      	lsls	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a48      	ldr	r2, [pc, #288]	; (8002fc8 <HAL_DMA_Init+0x15c>)
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ea8:	e00e      	b.n	8002ec8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b46      	ldr	r3, [pc, #280]	; (8002fcc <HAL_DMA_Init+0x160>)
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a43      	ldr	r2, [pc, #268]	; (8002fc4 <HAL_DMA_Init+0x158>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	009a      	lsls	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a42      	ldr	r2, [pc, #264]	; (8002fd0 <HAL_DMA_Init+0x164>)
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f22:	d039      	beq.n	8002f98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	4a27      	ldr	r2, [pc, #156]	; (8002fc8 <HAL_DMA_Init+0x15c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d11a      	bne.n	8002f64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f2e:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <HAL_DMA_Init+0x168>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f003 031c 	and.w	r3, r3, #28
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	4924      	ldr	r1, [pc, #144]	; (8002fd4 <HAL_DMA_Init+0x168>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f48:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <HAL_DMA_Init+0x168>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	f003 031c 	and.w	r3, r3, #28
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	491d      	ldr	r1, [pc, #116]	; (8002fd4 <HAL_DMA_Init+0x168>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]
 8002f62:	e019      	b.n	8002f98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f64:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <HAL_DMA_Init+0x16c>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	f003 031c 	and.w	r3, r3, #28
 8002f70:	210f      	movs	r1, #15
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	4917      	ldr	r1, [pc, #92]	; (8002fd8 <HAL_DMA_Init+0x16c>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <HAL_DMA_Init+0x16c>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f003 031c 	and.w	r3, r3, #28
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	4911      	ldr	r1, [pc, #68]	; (8002fd8 <HAL_DMA_Init+0x16c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	40020407 	.word	0x40020407
 8002fc0:	bffdfff8 	.word	0xbffdfff8
 8002fc4:	cccccccd 	.word	0xcccccccd
 8002fc8:	40020000 	.word	0x40020000
 8002fcc:	bffdfbf8 	.word	0xbffdfbf8
 8002fd0:	40020400 	.word	0x40020400
 8002fd4:	400200a8 	.word	0x400200a8
 8002fd8:	400204a8 	.word	0x400204a8

08002fdc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e072      	b.n	80030d4 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_DMA_DeInit+0x104>)
 8003006:	429a      	cmp	r2, r3
 8003008:	d80f      	bhi.n	800302a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	4b34      	ldr	r3, [pc, #208]	; (80030e4 <HAL_DMA_DeInit+0x108>)
 8003012:	4413      	add	r3, r2
 8003014:	4a34      	ldr	r2, [pc, #208]	; (80030e8 <HAL_DMA_DeInit+0x10c>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	009a      	lsls	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a31      	ldr	r2, [pc, #196]	; (80030ec <HAL_DMA_DeInit+0x110>)
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
 8003028:	e00e      	b.n	8003048 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	4b2f      	ldr	r3, [pc, #188]	; (80030f0 <HAL_DMA_DeInit+0x114>)
 8003032:	4413      	add	r3, r2
 8003034:	4a2c      	ldr	r2, [pc, #176]	; (80030e8 <HAL_DMA_DeInit+0x10c>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	009a      	lsls	r2, r3, #2
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a2b      	ldr	r2, [pc, #172]	; (80030f4 <HAL_DMA_DeInit+0x118>)
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	f003 021c 	and.w	r2, r3, #28
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	2101      	movs	r1, #1
 800305e:	fa01 f202 	lsl.w	r2, r1, r2
 8003062:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	4a20      	ldr	r2, [pc, #128]	; (80030ec <HAL_DMA_DeInit+0x110>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10d      	bne.n	800308a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_DMA_DeInit+0x11c>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f003 031c 	and.w	r3, r3, #28
 800307a:	210f      	movs	r1, #15
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	491d      	ldr	r1, [pc, #116]	; (80030f8 <HAL_DMA_DeInit+0x11c>)
 8003084:	4013      	ands	r3, r2
 8003086:	600b      	str	r3, [r1, #0]
 8003088:	e00c      	b.n	80030a4 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800308a:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <HAL_DMA_DeInit+0x120>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f003 031c 	and.w	r3, r3, #28
 8003096:	210f      	movs	r1, #15
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	4917      	ldr	r1, [pc, #92]	; (80030fc <HAL_DMA_DeInit+0x120>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	40020407 	.word	0x40020407
 80030e4:	bffdfff8 	.word	0xbffdfff8
 80030e8:	cccccccd 	.word	0xcccccccd
 80030ec:	40020000 	.word	0x40020000
 80030f0:	bffdfbf8 	.word	0xbffdfbf8
 80030f4:	40020400 	.word	0x40020400
 80030f8:	400200a8 	.word	0x400200a8
 80030fc:	400204a8 	.word	0x400204a8

08003100 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_DMA_Start_IT+0x20>
 800311c:	2302      	movs	r3, #2
 800311e:	e04b      	b.n	80031b8 <HAL_DMA_Start_IT+0xb8>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	d13a      	bne.n	80031aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f95f 	bl	800341c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 020e 	orr.w	r2, r2, #14
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e00f      	b.n	8003198 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0204 	bic.w	r2, r2, #4
 8003186:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 020a 	orr.w	r2, r2, #10
 8003196:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	e005      	b.n	80031b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
 80031b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d008      	beq.n	80031ea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2204      	movs	r2, #4
 80031dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e022      	b.n	8003230 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 020e 	bic.w	r2, r2, #14
 80031f8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	f003 021c 	and.w	r2, r3, #28
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2101      	movs	r1, #1
 8003218:	fa01 f202 	lsl.w	r2, r1, r2
 800321c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800322e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d005      	beq.n	8003260 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2204      	movs	r2, #4
 8003258:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	e029      	b.n	80032b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 020e 	bic.w	r2, r2, #14
 800326e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f003 021c 	and.w	r2, r3, #28
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	2101      	movs	r1, #1
 800328e:	fa01 f202 	lsl.w	r2, r1, r2
 8003292:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
    }
  }
  return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f003 031c 	and.w	r3, r3, #28
 80032de:	2204      	movs	r2, #4
 80032e0:	409a      	lsls	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d026      	beq.n	8003338 <HAL_DMA_IRQHandler+0x7a>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d021      	beq.n	8003338 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d107      	bne.n	8003312 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0204 	bic.w	r2, r2, #4
 8003310:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	f003 021c 	and.w	r2, r3, #28
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2104      	movs	r1, #4
 8003320:	fa01 f202 	lsl.w	r2, r1, r2
 8003324:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	2b00      	cmp	r3, #0
 800332c:	d071      	beq.n	8003412 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003336:	e06c      	b.n	8003412 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f003 031c 	and.w	r3, r3, #28
 8003340:	2202      	movs	r2, #2
 8003342:	409a      	lsls	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02e      	beq.n	80033aa <HAL_DMA_IRQHandler+0xec>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d029      	beq.n	80033aa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 020a 	bic.w	r2, r2, #10
 8003372:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	f003 021c 	and.w	r2, r3, #28
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	2102      	movs	r1, #2
 800338a:	fa01 f202 	lsl.w	r2, r1, r2
 800338e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d038      	beq.n	8003412 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033a8:	e033      	b.n	8003412 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f003 031c 	and.w	r3, r3, #28
 80033b2:	2208      	movs	r2, #8
 80033b4:	409a      	lsls	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d02a      	beq.n	8003414 <HAL_DMA_IRQHandler+0x156>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d025      	beq.n	8003414 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 020e 	bic.w	r2, r2, #14
 80033d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	f003 021c 	and.w	r2, r3, #28
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2101      	movs	r1, #1
 80033e6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	2b00      	cmp	r3, #0
 8003408:	d004      	beq.n	8003414 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003412:	bf00      	nop
 8003414:	bf00      	nop
}
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f003 021c 	and.w	r2, r3, #28
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b10      	cmp	r3, #16
 800344c:	d108      	bne.n	8003460 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800345e:	e007      	b.n	8003470 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	60da      	str	r2, [r3, #12]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348a:	e166      	b.n	800375a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	4013      	ands	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8158 	beq.w	8003754 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d005      	beq.n	80034bc <HAL_GPIO_Init+0x40>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d130      	bne.n	800351e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034f2:	2201      	movs	r2, #1
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 0201 	and.w	r2, r3, #1
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b03      	cmp	r3, #3
 8003528:	d017      	beq.n	800355a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	2203      	movs	r2, #3
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d123      	bne.n	80035ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	08da      	lsrs	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3208      	adds	r2, #8
 800356e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	220f      	movs	r2, #15
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	08da      	lsrs	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3208      	adds	r2, #8
 80035a8:	6939      	ldr	r1, [r7, #16]
 80035aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	2203      	movs	r2, #3
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0203 	and.w	r2, r3, #3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80b2 	beq.w	8003754 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f0:	4b61      	ldr	r3, [pc, #388]	; (8003778 <HAL_GPIO_Init+0x2fc>)
 80035f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f4:	4a60      	ldr	r2, [pc, #384]	; (8003778 <HAL_GPIO_Init+0x2fc>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6613      	str	r3, [r2, #96]	; 0x60
 80035fc:	4b5e      	ldr	r3, [pc, #376]	; (8003778 <HAL_GPIO_Init+0x2fc>)
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003608:	4a5c      	ldr	r2, [pc, #368]	; (800377c <HAL_GPIO_Init+0x300>)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	089b      	lsrs	r3, r3, #2
 800360e:	3302      	adds	r3, #2
 8003610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	220f      	movs	r2, #15
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003632:	d02b      	beq.n	800368c <HAL_GPIO_Init+0x210>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a52      	ldr	r2, [pc, #328]	; (8003780 <HAL_GPIO_Init+0x304>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d025      	beq.n	8003688 <HAL_GPIO_Init+0x20c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a51      	ldr	r2, [pc, #324]	; (8003784 <HAL_GPIO_Init+0x308>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d01f      	beq.n	8003684 <HAL_GPIO_Init+0x208>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a50      	ldr	r2, [pc, #320]	; (8003788 <HAL_GPIO_Init+0x30c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d019      	beq.n	8003680 <HAL_GPIO_Init+0x204>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a4f      	ldr	r2, [pc, #316]	; (800378c <HAL_GPIO_Init+0x310>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_GPIO_Init+0x200>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a4e      	ldr	r2, [pc, #312]	; (8003790 <HAL_GPIO_Init+0x314>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00d      	beq.n	8003678 <HAL_GPIO_Init+0x1fc>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a4d      	ldr	r2, [pc, #308]	; (8003794 <HAL_GPIO_Init+0x318>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <HAL_GPIO_Init+0x1f8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a4c      	ldr	r2, [pc, #304]	; (8003798 <HAL_GPIO_Init+0x31c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d101      	bne.n	8003670 <HAL_GPIO_Init+0x1f4>
 800366c:	2307      	movs	r3, #7
 800366e:	e00e      	b.n	800368e <HAL_GPIO_Init+0x212>
 8003670:	2308      	movs	r3, #8
 8003672:	e00c      	b.n	800368e <HAL_GPIO_Init+0x212>
 8003674:	2306      	movs	r3, #6
 8003676:	e00a      	b.n	800368e <HAL_GPIO_Init+0x212>
 8003678:	2305      	movs	r3, #5
 800367a:	e008      	b.n	800368e <HAL_GPIO_Init+0x212>
 800367c:	2304      	movs	r3, #4
 800367e:	e006      	b.n	800368e <HAL_GPIO_Init+0x212>
 8003680:	2303      	movs	r3, #3
 8003682:	e004      	b.n	800368e <HAL_GPIO_Init+0x212>
 8003684:	2302      	movs	r3, #2
 8003686:	e002      	b.n	800368e <HAL_GPIO_Init+0x212>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_GPIO_Init+0x212>
 800368c:	2300      	movs	r3, #0
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	f002 0203 	and.w	r2, r2, #3
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	4093      	lsls	r3, r2
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800369e:	4937      	ldr	r1, [pc, #220]	; (800377c <HAL_GPIO_Init+0x300>)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	3302      	adds	r3, #2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036ac:	4b3b      	ldr	r3, [pc, #236]	; (800379c <HAL_GPIO_Init+0x320>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036d0:	4a32      	ldr	r2, [pc, #200]	; (800379c <HAL_GPIO_Init+0x320>)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036d6:	4b31      	ldr	r3, [pc, #196]	; (800379c <HAL_GPIO_Init+0x320>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036fa:	4a28      	ldr	r2, [pc, #160]	; (800379c <HAL_GPIO_Init+0x320>)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003700:	4b26      	ldr	r3, [pc, #152]	; (800379c <HAL_GPIO_Init+0x320>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <HAL_GPIO_Init+0x320>)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HAL_GPIO_Init+0x320>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800374e:	4a13      	ldr	r2, [pc, #76]	; (800379c <HAL_GPIO_Init+0x320>)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3301      	adds	r3, #1
 8003758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	f47f ae91 	bne.w	800348c <HAL_GPIO_Init+0x10>
  }
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40021000 	.word	0x40021000
 800377c:	40010000 	.word	0x40010000
 8003780:	48000400 	.word	0x48000400
 8003784:	48000800 	.word	0x48000800
 8003788:	48000c00 	.word	0x48000c00
 800378c:	48001000 	.word	0x48001000
 8003790:	48001400 	.word	0x48001400
 8003794:	48001800 	.word	0x48001800
 8003798:	48001c00 	.word	0x48001c00
 800379c:	40010400 	.word	0x40010400

080037a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80037ae:	e0c9      	b.n	8003944 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80037b0:	2201      	movs	r2, #1
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80bc 	beq.w	800393e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80037c6:	4a66      	ldr	r2, [pc, #408]	; (8003960 <HAL_GPIO_DeInit+0x1c0>)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	089b      	lsrs	r3, r3, #2
 80037cc:	3302      	adds	r3, #2
 80037ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	220f      	movs	r2, #15
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4013      	ands	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037ee:	d02b      	beq.n	8003848 <HAL_GPIO_DeInit+0xa8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a5c      	ldr	r2, [pc, #368]	; (8003964 <HAL_GPIO_DeInit+0x1c4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d025      	beq.n	8003844 <HAL_GPIO_DeInit+0xa4>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a5b      	ldr	r2, [pc, #364]	; (8003968 <HAL_GPIO_DeInit+0x1c8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d01f      	beq.n	8003840 <HAL_GPIO_DeInit+0xa0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a5a      	ldr	r2, [pc, #360]	; (800396c <HAL_GPIO_DeInit+0x1cc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d019      	beq.n	800383c <HAL_GPIO_DeInit+0x9c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a59      	ldr	r2, [pc, #356]	; (8003970 <HAL_GPIO_DeInit+0x1d0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <HAL_GPIO_DeInit+0x98>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a58      	ldr	r2, [pc, #352]	; (8003974 <HAL_GPIO_DeInit+0x1d4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00d      	beq.n	8003834 <HAL_GPIO_DeInit+0x94>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a57      	ldr	r2, [pc, #348]	; (8003978 <HAL_GPIO_DeInit+0x1d8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d007      	beq.n	8003830 <HAL_GPIO_DeInit+0x90>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a56      	ldr	r2, [pc, #344]	; (800397c <HAL_GPIO_DeInit+0x1dc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d101      	bne.n	800382c <HAL_GPIO_DeInit+0x8c>
 8003828:	2307      	movs	r3, #7
 800382a:	e00e      	b.n	800384a <HAL_GPIO_DeInit+0xaa>
 800382c:	2308      	movs	r3, #8
 800382e:	e00c      	b.n	800384a <HAL_GPIO_DeInit+0xaa>
 8003830:	2306      	movs	r3, #6
 8003832:	e00a      	b.n	800384a <HAL_GPIO_DeInit+0xaa>
 8003834:	2305      	movs	r3, #5
 8003836:	e008      	b.n	800384a <HAL_GPIO_DeInit+0xaa>
 8003838:	2304      	movs	r3, #4
 800383a:	e006      	b.n	800384a <HAL_GPIO_DeInit+0xaa>
 800383c:	2303      	movs	r3, #3
 800383e:	e004      	b.n	800384a <HAL_GPIO_DeInit+0xaa>
 8003840:	2302      	movs	r3, #2
 8003842:	e002      	b.n	800384a <HAL_GPIO_DeInit+0xaa>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <HAL_GPIO_DeInit+0xaa>
 8003848:	2300      	movs	r3, #0
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	f002 0203 	and.w	r2, r2, #3
 8003850:	0092      	lsls	r2, r2, #2
 8003852:	4093      	lsls	r3, r2
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	429a      	cmp	r2, r3
 8003858:	d132      	bne.n	80038c0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800385a:	4b49      	ldr	r3, [pc, #292]	; (8003980 <HAL_GPIO_DeInit+0x1e0>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	43db      	mvns	r3, r3
 8003862:	4947      	ldr	r1, [pc, #284]	; (8003980 <HAL_GPIO_DeInit+0x1e0>)
 8003864:	4013      	ands	r3, r2
 8003866:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003868:	4b45      	ldr	r3, [pc, #276]	; (8003980 <HAL_GPIO_DeInit+0x1e0>)
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	43db      	mvns	r3, r3
 8003870:	4943      	ldr	r1, [pc, #268]	; (8003980 <HAL_GPIO_DeInit+0x1e0>)
 8003872:	4013      	ands	r3, r2
 8003874:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003876:	4b42      	ldr	r3, [pc, #264]	; (8003980 <HAL_GPIO_DeInit+0x1e0>)
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	4940      	ldr	r1, [pc, #256]	; (8003980 <HAL_GPIO_DeInit+0x1e0>)
 8003880:	4013      	ands	r3, r2
 8003882:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003884:	4b3e      	ldr	r3, [pc, #248]	; (8003980 <HAL_GPIO_DeInit+0x1e0>)
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	43db      	mvns	r3, r3
 800388c:	493c      	ldr	r1, [pc, #240]	; (8003980 <HAL_GPIO_DeInit+0x1e0>)
 800388e:	4013      	ands	r3, r2
 8003890:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	220f      	movs	r2, #15
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80038a2:	4a2f      	ldr	r2, [pc, #188]	; (8003960 <HAL_GPIO_DeInit+0x1c0>)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	3302      	adds	r3, #2
 80038aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	43da      	mvns	r2, r3
 80038b2:	482b      	ldr	r0, [pc, #172]	; (8003960 <HAL_GPIO_DeInit+0x1c0>)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	400a      	ands	r2, r1
 80038ba:	3302      	adds	r3, #2
 80038bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	2103      	movs	r1, #3
 80038ca:	fa01 f303 	lsl.w	r3, r1, r3
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	08da      	lsrs	r2, r3, #3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3208      	adds	r2, #8
 80038dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	220f      	movs	r2, #15
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	08d2      	lsrs	r2, r2, #3
 80038f4:	4019      	ands	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3208      	adds	r2, #8
 80038fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2103      	movs	r1, #3
 8003908:	fa01 f303 	lsl.w	r3, r1, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	401a      	ands	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	2101      	movs	r1, #1
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	fa01 f303 	lsl.w	r3, r1, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	401a      	ands	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2103      	movs	r1, #3
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	401a      	ands	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3301      	adds	r3, #1
 8003942:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	f47f af2f 	bne.w	80037b0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003952:	bf00      	nop
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40010000 	.word	0x40010000
 8003964:	48000400 	.word	0x48000400
 8003968:	48000800 	.word	0x48000800
 800396c:	48000c00 	.word	0x48000c00
 8003970:	48001000 	.word	0x48001000
 8003974:	48001400 	.word	0x48001400
 8003978:	48001800 	.word	0x48001800
 800397c:	48001c00 	.word	0x48001c00
 8003980:	40010400 	.word	0x40010400

08003984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	807b      	strh	r3, [r7, #2]
 8003990:	4613      	mov	r3, r2
 8003992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003994:	787b      	ldrb	r3, [r7, #1]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800399a:	887a      	ldrh	r2, [r7, #2]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039a0:	e002      	b.n	80039a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e081      	b.n	8003aca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fc fe84 	bl	80006e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2224      	movs	r2, #36	; 0x24
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d107      	bne.n	8003a2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	e006      	b.n	8003a3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d104      	bne.n	8003a4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69d9      	ldr	r1, [r3, #28]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e021      	b.n	8003b28 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2224      	movs	r2, #36	; 0x24
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7fc fecf 	bl	80008a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	817b      	strh	r3, [r7, #10]
 8003b42:	460b      	mov	r3, r1
 8003b44:	813b      	strh	r3, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	f040 80f9 	bne.w	8003d4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_I2C_Mem_Write+0x34>
 8003b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0ed      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_I2C_Mem_Write+0x4e>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e0e6      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b86:	f7fe fffd 	bl	8002b84 <HAL_GetTick>
 8003b8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	2319      	movs	r3, #25
 8003b92:	2201      	movs	r2, #1
 8003b94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fbd9 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0d1      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2221      	movs	r2, #33	; 0x21
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2240      	movs	r2, #64	; 0x40
 8003bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a3a      	ldr	r2, [r7, #32]
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bd0:	88f8      	ldrh	r0, [r7, #6]
 8003bd2:	893a      	ldrh	r2, [r7, #8]
 8003bd4:	8979      	ldrh	r1, [r7, #10]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	4603      	mov	r3, r0
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fae9 	bl	80041b8 <I2C_RequestMemoryWrite>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0a9      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2bff      	cmp	r3, #255	; 0xff
 8003c00:	d90e      	bls.n	8003c20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	22ff      	movs	r2, #255	; 0xff
 8003c06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	8979      	ldrh	r1, [r7, #10]
 8003c10:	2300      	movs	r3, #0
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fd41 	bl	80046a0 <I2C_TransferConfig>
 8003c1e:	e00f      	b.n	8003c40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	8979      	ldrh	r1, [r7, #10]
 8003c32:	2300      	movs	r3, #0
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fd30 	bl	80046a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fbc3 	bl	80043d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e07b      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d034      	beq.n	8003cf8 <HAL_I2C_Mem_Write+0x1c8>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d130      	bne.n	8003cf8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fb55 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e04d      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2bff      	cmp	r3, #255	; 0xff
 8003cb8:	d90e      	bls.n	8003cd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	22ff      	movs	r2, #255	; 0xff
 8003cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	8979      	ldrh	r1, [r7, #10]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fce5 	bl	80046a0 <I2C_TransferConfig>
 8003cd6:	e00f      	b.n	8003cf8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	8979      	ldrh	r1, [r7, #10]
 8003cea:	2300      	movs	r3, #0
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fcd4 	bl	80046a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d19e      	bne.n	8003c40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fba2 	bl	8004450 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e01a      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <HAL_I2C_Mem_Write+0x224>)
 8003d2a:	400b      	ands	r3, r1
 8003d2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
  }
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	fe00e800 	.word	0xfe00e800

08003d58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	813b      	strh	r3, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	f040 80fd 	bne.w	8003f7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_I2C_Mem_Read+0x34>
 8003d86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0f1      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_I2C_Mem_Read+0x4e>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e0ea      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dae:	f7fe fee9 	bl	8002b84 <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	2319      	movs	r3, #25
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 fac5 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0d5      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2222      	movs	r2, #34	; 0x22
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2240      	movs	r2, #64	; 0x40
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a3a      	ldr	r2, [r7, #32]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003df8:	88f8      	ldrh	r0, [r7, #6]
 8003dfa:	893a      	ldrh	r2, [r7, #8]
 8003dfc:	8979      	ldrh	r1, [r7, #10]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	4603      	mov	r3, r0
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fa29 	bl	8004260 <I2C_RequestMemoryRead>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0ad      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2bff      	cmp	r3, #255	; 0xff
 8003e28:	d90e      	bls.n	8003e48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	22ff      	movs	r2, #255	; 0xff
 8003e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	8979      	ldrh	r1, [r7, #10]
 8003e38:	4b52      	ldr	r3, [pc, #328]	; (8003f84 <HAL_I2C_Mem_Read+0x22c>)
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fc2d 	bl	80046a0 <I2C_TransferConfig>
 8003e46:	e00f      	b.n	8003e68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	8979      	ldrh	r1, [r7, #10]
 8003e5a:	4b4a      	ldr	r3, [pc, #296]	; (8003f84 <HAL_I2C_Mem_Read+0x22c>)
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fc1c 	bl	80046a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2104      	movs	r1, #4
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fa6c 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e07c      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d034      	beq.n	8003f28 <HAL_I2C_Mem_Read+0x1d0>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d130      	bne.n	8003f28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2180      	movs	r1, #128	; 0x80
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fa3d 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e04d      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2bff      	cmp	r3, #255	; 0xff
 8003ee8:	d90e      	bls.n	8003f08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	22ff      	movs	r2, #255	; 0xff
 8003eee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	8979      	ldrh	r1, [r7, #10]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fbcd 	bl	80046a0 <I2C_TransferConfig>
 8003f06:	e00f      	b.n	8003f28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	8979      	ldrh	r1, [r7, #10]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fbbc 	bl	80046a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d19a      	bne.n	8003e68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 fa8a 	bl	8004450 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e01a      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_I2C_Mem_Read+0x230>)
 8003f5a:	400b      	ands	r3, r1
 8003f5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	80002400 	.word	0x80002400
 8003f88:	fe00e800 	.word	0xfe00e800

08003f8c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	f040 80f1 	bne.w	8004190 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e0e7      	b.n	8004192 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_I2C_IsDeviceReady+0x44>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e0e0      	b.n	8004192 <HAL_I2C_IsDeviceReady+0x206>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2224      	movs	r2, #36	; 0x24
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d107      	bne.n	8003ffe <HAL_I2C_IsDeviceReady+0x72>
 8003fee:	897b      	ldrh	r3, [r7, #10]
 8003ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ff4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ff8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ffc:	e004      	b.n	8004008 <HAL_I2C_IsDeviceReady+0x7c>
 8003ffe:	897b      	ldrh	r3, [r7, #10]
 8004000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004004:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800400e:	f7fe fdb9 	bl	8002b84 <HAL_GetTick>
 8004012:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b20      	cmp	r3, #32
 8004020:	bf0c      	ite	eq
 8004022:	2301      	moveq	r3, #1
 8004024:	2300      	movne	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b10      	cmp	r3, #16
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004040:	e034      	b.n	80040ac <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004048:	d01a      	beq.n	8004080 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fe fd9b 	bl	8002b84 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <HAL_I2C_IsDeviceReady+0xd4>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10f      	bne.n	8004080 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e088      	b.n	8004192 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b20      	cmp	r3, #32
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80040ac:	7ffb      	ldrb	r3, [r7, #31]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <HAL_I2C_IsDeviceReady+0x12c>
 80040b2:	7fbb      	ldrb	r3, [r7, #30]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0c4      	beq.n	8004042 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	2b10      	cmp	r3, #16
 80040c4:	d01a      	beq.n	80040fc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2200      	movs	r2, #0
 80040ce:	2120      	movs	r1, #32
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f93d 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e058      	b.n	8004192 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2220      	movs	r2, #32
 80040e6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e04a      	b.n	8004192 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2200      	movs	r2, #0
 8004104:	2120      	movs	r1, #32
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f922 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e03d      	b.n	8004192 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2210      	movs	r2, #16
 800411c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2220      	movs	r2, #32
 8004124:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	429a      	cmp	r2, r3
 800412c:	d118      	bne.n	8004160 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800413c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	2120      	movs	r1, #32
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f901 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e01c      	b.n	8004192 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2220      	movs	r2, #32
 800415e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	3301      	adds	r3, #1
 8004164:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	f63f af3b 	bhi.w	8003fe6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	f043 0220 	orr.w	r2, r3, #32
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a8:	b2db      	uxtb	r3, r3
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	4608      	mov	r0, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	461a      	mov	r2, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	817b      	strh	r3, [r7, #10]
 80041ca:	460b      	mov	r3, r1
 80041cc:	813b      	strh	r3, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	8979      	ldrh	r1, [r7, #10]
 80041d8:	4b20      	ldr	r3, [pc, #128]	; (800425c <I2C_RequestMemoryWrite+0xa4>)
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fa5d 	bl	80046a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	69b9      	ldr	r1, [r7, #24]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f8f0 	bl	80043d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e02c      	b.n	8004254 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d105      	bne.n	800420c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004200:	893b      	ldrh	r3, [r7, #8]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
 800420a:	e015      	b.n	8004238 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800420c:	893b      	ldrh	r3, [r7, #8]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	b29b      	uxth	r3, r3
 8004212:	b2da      	uxtb	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	69b9      	ldr	r1, [r7, #24]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f8d6 	bl	80043d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e012      	b.n	8004254 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800422e:	893b      	ldrh	r3, [r7, #8]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2200      	movs	r2, #0
 8004240:	2180      	movs	r1, #128	; 0x80
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f884 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	80002000 	.word	0x80002000

08004260 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	4608      	mov	r0, r1
 800426a:	4611      	mov	r1, r2
 800426c:	461a      	mov	r2, r3
 800426e:	4603      	mov	r3, r0
 8004270:	817b      	strh	r3, [r7, #10]
 8004272:	460b      	mov	r3, r1
 8004274:	813b      	strh	r3, [r7, #8]
 8004276:	4613      	mov	r3, r2
 8004278:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	8979      	ldrh	r1, [r7, #10]
 8004280:	4b20      	ldr	r3, [pc, #128]	; (8004304 <I2C_RequestMemoryRead+0xa4>)
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2300      	movs	r3, #0
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fa0a 	bl	80046a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	69b9      	ldr	r1, [r7, #24]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f89d 	bl	80043d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e02c      	b.n	80042fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d105      	bne.n	80042b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042a6:	893b      	ldrh	r3, [r7, #8]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28
 80042b0:	e015      	b.n	80042de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042b2:	893b      	ldrh	r3, [r7, #8]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	69b9      	ldr	r1, [r7, #24]
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f883 	bl	80043d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e012      	b.n	80042fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042d4:	893b      	ldrh	r3, [r7, #8]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2200      	movs	r2, #0
 80042e6:	2140      	movs	r1, #64	; 0x40
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f831 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	80002000 	.word	0x80002000

08004308 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	d103      	bne.n	8004326 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b01      	cmp	r3, #1
 8004332:	d007      	beq.n	8004344 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	619a      	str	r2, [r3, #24]
  }
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004360:	e022      	b.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004368:	d01e      	beq.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436a:	f7fe fc0b 	bl	8002b84 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d302      	bcc.n	8004380 <I2C_WaitOnFlagUntilTimeout+0x30>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d113      	bne.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e00f      	b.n	80043c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4013      	ands	r3, r2
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d0cd      	beq.n	8004362 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043dc:	e02c      	b.n	8004438 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f870 	bl	80044c8 <I2C_IsErrorOccurred>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e02a      	b.n	8004448 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f8:	d01e      	beq.n	8004438 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fa:	f7fe fbc3 	bl	8002b84 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	429a      	cmp	r2, r3
 8004408:	d302      	bcc.n	8004410 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d113      	bne.n	8004438 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	f043 0220 	orr.w	r2, r3, #32
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e007      	b.n	8004448 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b02      	cmp	r3, #2
 8004444:	d1cb      	bne.n	80043de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800445c:	e028      	b.n	80044b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f830 	bl	80044c8 <I2C_IsErrorOccurred>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e026      	b.n	80044c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004472:	f7fe fb87 	bl	8002b84 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	429a      	cmp	r2, r3
 8004480:	d302      	bcc.n	8004488 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d113      	bne.n	80044b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e007      	b.n	80044c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d1cf      	bne.n	800445e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d075      	beq.n	80045e0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2210      	movs	r2, #16
 80044fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044fc:	e056      	b.n	80045ac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004504:	d052      	beq.n	80045ac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004506:	f7fe fb3d 	bl	8002b84 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	429a      	cmp	r2, r3
 8004514:	d302      	bcc.n	800451c <I2C_IsErrorOccurred+0x54>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d147      	bne.n	80045ac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004526:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800452e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800453a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453e:	d12e      	bne.n	800459e <I2C_IsErrorOccurred+0xd6>
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004546:	d02a      	beq.n	800459e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004548:	7cfb      	ldrb	r3, [r7, #19]
 800454a:	2b20      	cmp	r3, #32
 800454c:	d027      	beq.n	800459e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800455c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800455e:	f7fe fb11 	bl	8002b84 <HAL_GetTick>
 8004562:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004564:	e01b      	b.n	800459e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004566:	f7fe fb0d 	bl	8002b84 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b19      	cmp	r3, #25
 8004572:	d914      	bls.n	800459e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d1dc      	bne.n	8004566 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d003      	beq.n	80045c2 <I2C_IsErrorOccurred+0xfa>
 80045ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d09d      	beq.n	80044fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2220      	movs	r2, #32
 80045d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f043 0304 	orr.w	r3, r3, #4
 80045d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004602:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00b      	beq.n	800462c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	f043 0308 	orr.w	r3, r3, #8
 800461a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004624:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	f043 0302 	orr.w	r3, r3, #2
 800463c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004646:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800464e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004652:	2b00      	cmp	r3, #0
 8004654:	d01c      	beq.n	8004690 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff fe56 	bl	8004308 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <I2C_IsErrorOccurred+0x1d4>)
 8004668:	400b      	ands	r3, r1
 800466a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	431a      	orrs	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004694:	4618      	mov	r0, r3
 8004696:	3728      	adds	r7, #40	; 0x28
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	fe00e800 	.word	0xfe00e800

080046a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	817b      	strh	r3, [r7, #10]
 80046ae:	4613      	mov	r3, r2
 80046b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046b2:	897b      	ldrh	r3, [r7, #10]
 80046b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046b8:	7a7b      	ldrb	r3, [r7, #9]
 80046ba:	041b      	lsls	r3, r3, #16
 80046bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046c0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046ce:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	0d5b      	lsrs	r3, r3, #21
 80046da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80046de:	4b08      	ldr	r3, [pc, #32]	; (8004700 <I2C_TransferConfig+0x60>)
 80046e0:	430b      	orrs	r3, r1
 80046e2:	43db      	mvns	r3, r3
 80046e4:	ea02 0103 	and.w	r1, r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	03ff63ff 	.word	0x03ff63ff

08004704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b20      	cmp	r3, #32
 8004718:	d138      	bne.n	800478c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004724:	2302      	movs	r3, #2
 8004726:	e032      	b.n	800478e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2224      	movs	r2, #36	; 0x24
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0201 	bic.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	e000      	b.n	800478e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800478c:	2302      	movs	r3, #2
  }
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d139      	bne.n	8004824 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e033      	b.n	8004826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2224      	movs	r2, #36	; 0x24
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	e000      	b.n	8004826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004824:	2302      	movs	r3, #2
  }
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <HAL_PWREx_GetVoltageRange+0x18>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40007000 	.word	0x40007000

08004850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485e:	d130      	bne.n	80048c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004860:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486c:	d038      	beq.n	80048e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800486e:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004876:	4a1e      	ldr	r2, [pc, #120]	; (80048f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800487c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800487e:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2232      	movs	r2, #50	; 0x32
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	4a1b      	ldr	r2, [pc, #108]	; (80048f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	0c9b      	lsrs	r3, r3, #18
 8004890:	3301      	adds	r3, #1
 8004892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004894:	e002      	b.n	800489c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3b01      	subs	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800489c:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a8:	d102      	bne.n	80048b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f2      	bne.n	8004896 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048bc:	d110      	bne.n	80048e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e00f      	b.n	80048e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ce:	d007      	beq.n	80048e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048d8:	4a05      	ldr	r2, [pc, #20]	; (80048f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40007000 	.word	0x40007000
 80048f4:	20000000 	.word	0x20000000
 80048f8:	431bde83 	.word	0x431bde83

080048fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f000 bc16 	b.w	800513c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004910:	4ba0      	ldr	r3, [pc, #640]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 030c 	and.w	r3, r3, #12
 8004918:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800491a:	4b9e      	ldr	r3, [pc, #632]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 80e4 	beq.w	8004afa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <HAL_RCC_OscConfig+0x4c>
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b0c      	cmp	r3, #12
 800493c:	f040 808b 	bne.w	8004a56 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2b01      	cmp	r3, #1
 8004944:	f040 8087 	bne.w	8004a56 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004948:	4b92      	ldr	r3, [pc, #584]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_RCC_OscConfig+0x64>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e3ed      	b.n	800513c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1a      	ldr	r2, [r3, #32]
 8004964:	4b8b      	ldr	r3, [pc, #556]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <HAL_RCC_OscConfig+0x7e>
 8004970:	4b88      	ldr	r3, [pc, #544]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004978:	e005      	b.n	8004986 <HAL_RCC_OscConfig+0x8a>
 800497a:	4b86      	ldr	r3, [pc, #536]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 800497c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004986:	4293      	cmp	r3, r2
 8004988:	d223      	bcs.n	80049d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fd80 	bl	8005494 <RCC_SetFlashLatencyFromMSIRange>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e3ce      	b.n	800513c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800499e:	4b7d      	ldr	r3, [pc, #500]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a7c      	ldr	r2, [pc, #496]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 80049a4:	f043 0308 	orr.w	r3, r3, #8
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	4b7a      	ldr	r3, [pc, #488]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	4977      	ldr	r1, [pc, #476]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049bc:	4b75      	ldr	r3, [pc, #468]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	4972      	ldr	r1, [pc, #456]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
 80049d0:	e025      	b.n	8004a1e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049d2:	4b70      	ldr	r3, [pc, #448]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a6f      	ldr	r2, [pc, #444]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 80049d8:	f043 0308 	orr.w	r3, r3, #8
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b6d      	ldr	r3, [pc, #436]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	496a      	ldr	r1, [pc, #424]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049f0:	4b68      	ldr	r3, [pc, #416]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	021b      	lsls	r3, r3, #8
 80049fe:	4965      	ldr	r1, [pc, #404]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fd40 	bl	8005494 <RCC_SetFlashLatencyFromMSIRange>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e38e      	b.n	800513c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a1e:	f000 fc75 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8004a22:	4602      	mov	r2, r0
 8004a24:	4b5b      	ldr	r3, [pc, #364]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	495a      	ldr	r1, [pc, #360]	; (8004b98 <HAL_RCC_OscConfig+0x29c>)
 8004a30:	5ccb      	ldrb	r3, [r1, r3]
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3a:	4a58      	ldr	r2, [pc, #352]	; (8004b9c <HAL_RCC_OscConfig+0x2a0>)
 8004a3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a3e:	4b58      	ldr	r3, [pc, #352]	; (8004ba0 <HAL_RCC_OscConfig+0x2a4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fe f84e 	bl	8002ae4 <HAL_InitTick>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d052      	beq.n	8004af8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	e372      	b.n	800513c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d032      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a5e:	4b4d      	ldr	r3, [pc, #308]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a4c      	ldr	r2, [pc, #304]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a6a:	f7fe f88b 	bl	8002b84 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a72:	f7fe f887 	bl	8002b84 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e35b      	b.n	800513c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a84:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a90:	4b40      	ldr	r3, [pc, #256]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a3f      	ldr	r2, [pc, #252]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004a96:	f043 0308 	orr.w	r3, r3, #8
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	493a      	ldr	r1, [pc, #232]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aae:	4b39      	ldr	r3, [pc, #228]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	4935      	ldr	r1, [pc, #212]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	604b      	str	r3, [r1, #4]
 8004ac2:	e01a      	b.n	8004afa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ac4:	4b33      	ldr	r3, [pc, #204]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a32      	ldr	r2, [pc, #200]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ad0:	f7fe f858 	bl	8002b84 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ad8:	f7fe f854 	bl	8002b84 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e328      	b.n	800513c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004aea:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x1dc>
 8004af6:	e000      	b.n	8004afa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004af8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d073      	beq.n	8004bee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_OscConfig+0x21c>
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d10e      	bne.n	8004b30 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d10b      	bne.n	8004b30 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d063      	beq.n	8004bec <HAL_RCC_OscConfig+0x2f0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d15f      	bne.n	8004bec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e305      	b.n	800513c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b38:	d106      	bne.n	8004b48 <HAL_RCC_OscConfig+0x24c>
 8004b3a:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e01d      	b.n	8004b84 <HAL_RCC_OscConfig+0x288>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x270>
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a0f      	ldr	r2, [pc, #60]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a0c      	ldr	r2, [pc, #48]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e00b      	b.n	8004b84 <HAL_RCC_OscConfig+0x288>
 8004b6c:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a08      	ldr	r2, [pc, #32]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <HAL_RCC_OscConfig+0x298>)
 8004b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01b      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fd fffa 	bl	8002b84 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b92:	e010      	b.n	8004bb6 <HAL_RCC_OscConfig+0x2ba>
 8004b94:	40021000 	.word	0x40021000
 8004b98:	08009698 	.word	0x08009698
 8004b9c:	20000000 	.word	0x20000000
 8004ba0:	20000080 	.word	0x20000080
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fd ffee 	bl	8002b84 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	; 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e2c2      	b.n	800513c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb6:	4baf      	ldr	r3, [pc, #700]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x2a8>
 8004bc2:	e014      	b.n	8004bee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc4:	f7fd ffde 	bl	8002b84 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fd ffda 	bl	8002b84 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e2ae      	b.n	800513c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bde:	4ba5      	ldr	r3, [pc, #660]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0x2d0>
 8004bea:	e000      	b.n	8004bee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d060      	beq.n	8004cbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_OscConfig+0x310>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b0c      	cmp	r3, #12
 8004c04:	d119      	bne.n	8004c3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d116      	bne.n	8004c3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c0c:	4b99      	ldr	r3, [pc, #612]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_RCC_OscConfig+0x328>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e28b      	b.n	800513c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c24:	4b93      	ldr	r3, [pc, #588]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	061b      	lsls	r3, r3, #24
 8004c32:	4990      	ldr	r1, [pc, #576]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c38:	e040      	b.n	8004cbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d023      	beq.n	8004c8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c42:	4b8c      	ldr	r3, [pc, #560]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a8b      	ldr	r2, [pc, #556]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4e:	f7fd ff99 	bl	8002b84 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c56:	f7fd ff95 	bl	8002b84 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e269      	b.n	800513c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c68:	4b82      	ldr	r3, [pc, #520]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c74:	4b7f      	ldr	r3, [pc, #508]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	061b      	lsls	r3, r3, #24
 8004c82:	497c      	ldr	r1, [pc, #496]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]
 8004c88:	e018      	b.n	8004cbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c8a:	4b7a      	ldr	r3, [pc, #488]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a79      	ldr	r2, [pc, #484]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c96:	f7fd ff75 	bl	8002b84 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c9e:	f7fd ff71 	bl	8002b84 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e245      	b.n	800513c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cb0:	4b70      	ldr	r3, [pc, #448]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f0      	bne.n	8004c9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d03c      	beq.n	8004d42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01c      	beq.n	8004d0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd0:	4b68      	ldr	r3, [pc, #416]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cd6:	4a67      	ldr	r2, [pc, #412]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce0:	f7fd ff50 	bl	8002b84 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce8:	f7fd ff4c 	bl	8002b84 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e220      	b.n	800513c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cfa:	4b5e      	ldr	r3, [pc, #376]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0ef      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x3ec>
 8004d08:	e01b      	b.n	8004d42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d0a:	4b5a      	ldr	r3, [pc, #360]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d10:	4a58      	ldr	r2, [pc, #352]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1a:	f7fd ff33 	bl	8002b84 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d22:	f7fd ff2f 	bl	8002b84 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e203      	b.n	800513c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d34:	4b4f      	ldr	r3, [pc, #316]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1ef      	bne.n	8004d22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80a6 	beq.w	8004e9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d50:	2300      	movs	r3, #0
 8004d52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d54:	4b47      	ldr	r3, [pc, #284]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10d      	bne.n	8004d7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d60:	4b44      	ldr	r3, [pc, #272]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d64:	4a43      	ldr	r2, [pc, #268]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d6c:	4b41      	ldr	r3, [pc, #260]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d74:	60bb      	str	r3, [r7, #8]
 8004d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d7c:	4b3e      	ldr	r3, [pc, #248]	; (8004e78 <HAL_RCC_OscConfig+0x57c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d118      	bne.n	8004dba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d88:	4b3b      	ldr	r3, [pc, #236]	; (8004e78 <HAL_RCC_OscConfig+0x57c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a3a      	ldr	r2, [pc, #232]	; (8004e78 <HAL_RCC_OscConfig+0x57c>)
 8004d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d94:	f7fd fef6 	bl	8002b84 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9c:	f7fd fef2 	bl	8002b84 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e1c6      	b.n	800513c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dae:	4b32      	ldr	r3, [pc, #200]	; (8004e78 <HAL_RCC_OscConfig+0x57c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d108      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x4d8>
 8004dc2:	4b2c      	ldr	r3, [pc, #176]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	4a2a      	ldr	r2, [pc, #168]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dd2:	e024      	b.n	8004e1e <HAL_RCC_OscConfig+0x522>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b05      	cmp	r3, #5
 8004dda:	d110      	bne.n	8004dfe <HAL_RCC_OscConfig+0x502>
 8004ddc:	4b25      	ldr	r3, [pc, #148]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de2:	4a24      	ldr	r2, [pc, #144]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004de4:	f043 0304 	orr.w	r3, r3, #4
 8004de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dec:	4b21      	ldr	r3, [pc, #132]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df2:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dfc:	e00f      	b.n	8004e1e <HAL_RCC_OscConfig+0x522>
 8004dfe:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	4a1b      	ldr	r2, [pc, #108]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e0e:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e14:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004e16:	f023 0304 	bic.w	r3, r3, #4
 8004e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d016      	beq.n	8004e54 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e26:	f7fd fead 	bl	8002b84 <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7fd fea9 	bl	8002b84 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e17b      	b.n	800513c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <HAL_RCC_OscConfig+0x578>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0ed      	beq.n	8004e2e <HAL_RCC_OscConfig+0x532>
 8004e52:	e01a      	b.n	8004e8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fd fe96 	bl	8002b84 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e5a:	e00f      	b.n	8004e7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5c:	f7fd fe92 	bl	8002b84 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d906      	bls.n	8004e7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e164      	b.n	800513c <HAL_RCC_OscConfig+0x840>
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e7c:	4ba8      	ldr	r3, [pc, #672]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e8      	bne.n	8004e5c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e8a:	7ffb      	ldrb	r3, [r7, #31]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d105      	bne.n	8004e9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e90:	4ba3      	ldr	r3, [pc, #652]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	4aa2      	ldr	r2, [pc, #648]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d03c      	beq.n	8004f22 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01c      	beq.n	8004eea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004eb0:	4b9b      	ldr	r3, [pc, #620]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eb6:	4a9a      	ldr	r2, [pc, #616]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fd fe60 	bl	8002b84 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ec8:	f7fd fe5c 	bl	8002b84 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e130      	b.n	800513c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eda:	4b91      	ldr	r3, [pc, #580]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0ef      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x5cc>
 8004ee8:	e01b      	b.n	8004f22 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004eea:	4b8d      	ldr	r3, [pc, #564]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ef0:	4a8b      	ldr	r2, [pc, #556]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efa:	f7fd fe43 	bl	8002b84 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f02:	f7fd fe3f 	bl	8002b84 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e113      	b.n	800513c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f14:	4b82      	ldr	r3, [pc, #520]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ef      	bne.n	8004f02 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 8107 	beq.w	800513a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	f040 80cb 	bne.w	80050cc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f36:	4b7a      	ldr	r3, [pc, #488]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f003 0203 	and.w	r2, r3, #3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d12c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	3b01      	subs	r3, #1
 8004f56:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d123      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d11b      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d113      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d109      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d06d      	beq.n	8005080 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	2b0c      	cmp	r3, #12
 8004fa8:	d068      	beq.n	800507c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004faa:	4b5d      	ldr	r3, [pc, #372]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fb6:	4b5a      	ldr	r3, [pc, #360]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e0ba      	b.n	800513c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b56      	ldr	r3, [pc, #344]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a55      	ldr	r2, [pc, #340]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004fcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fd2:	f7fd fdd7 	bl	8002b84 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fda:	f7fd fdd3 	bl	8002b84 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e0a7      	b.n	800513c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fec:	4b4c      	ldr	r3, [pc, #304]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f0      	bne.n	8004fda <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff8:	4b49      	ldr	r3, [pc, #292]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	4b49      	ldr	r3, [pc, #292]	; (8005124 <HAL_RCC_OscConfig+0x828>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005008:	3a01      	subs	r2, #1
 800500a:	0112      	lsls	r2, r2, #4
 800500c:	4311      	orrs	r1, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005012:	0212      	lsls	r2, r2, #8
 8005014:	4311      	orrs	r1, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800501a:	0852      	lsrs	r2, r2, #1
 800501c:	3a01      	subs	r2, #1
 800501e:	0552      	lsls	r2, r2, #21
 8005020:	4311      	orrs	r1, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005026:	0852      	lsrs	r2, r2, #1
 8005028:	3a01      	subs	r2, #1
 800502a:	0652      	lsls	r2, r2, #25
 800502c:	4311      	orrs	r1, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005032:	06d2      	lsls	r2, r2, #27
 8005034:	430a      	orrs	r2, r1
 8005036:	493a      	ldr	r1, [pc, #232]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8005038:	4313      	orrs	r3, r2
 800503a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800503c:	4b38      	ldr	r3, [pc, #224]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a37      	ldr	r2, [pc, #220]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8005042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005046:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005048:	4b35      	ldr	r3, [pc, #212]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	4a34      	ldr	r2, [pc, #208]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 800504e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005052:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005054:	f7fd fd96 	bl	8002b84 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505c:	f7fd fd92 	bl	8002b84 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e066      	b.n	800513c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506e:	4b2c      	ldr	r3, [pc, #176]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800507a:	e05e      	b.n	800513a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e05d      	b.n	800513c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005080:	4b27      	ldr	r3, [pc, #156]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d156      	bne.n	800513a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800508c:	4b24      	ldr	r3, [pc, #144]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a23      	ldr	r2, [pc, #140]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 8005092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005096:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005098:	4b21      	ldr	r3, [pc, #132]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a20      	ldr	r2, [pc, #128]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 800509e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050a4:	f7fd fd6e 	bl	8002b84 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fd fd6a 	bl	8002b84 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e03e      	b.n	800513c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050be:	4b18      	ldr	r3, [pc, #96]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x7b0>
 80050ca:	e036      	b.n	800513a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b0c      	cmp	r3, #12
 80050d0:	d031      	beq.n	8005136 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d2:	4b13      	ldr	r3, [pc, #76]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a12      	ldr	r2, [pc, #72]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 80050d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	4a0c      	ldr	r2, [pc, #48]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 80050f0:	f023 0303 	bic.w	r3, r3, #3
 80050f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	4a09      	ldr	r2, [pc, #36]	; (8005120 <HAL_RCC_OscConfig+0x824>)
 80050fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005104:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005106:	f7fd fd3d 	bl	8002b84 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800510c:	e00c      	b.n	8005128 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510e:	f7fd fd39 	bl	8002b84 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d905      	bls.n	8005128 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e00d      	b.n	800513c <HAL_RCC_OscConfig+0x840>
 8005120:	40021000 	.word	0x40021000
 8005124:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCC_OscConfig+0x848>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1ec      	bne.n	800510e <HAL_RCC_OscConfig+0x812>
 8005134:	e001      	b.n	800513a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40021000 	.word	0x40021000

08005148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0c8      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800515c:	4b66      	ldr	r3, [pc, #408]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d910      	bls.n	800518c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516a:	4b63      	ldr	r3, [pc, #396]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 0207 	bic.w	r2, r3, #7
 8005172:	4961      	ldr	r1, [pc, #388]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	4313      	orrs	r3, r2
 8005178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800517a:	4b5f      	ldr	r3, [pc, #380]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d001      	beq.n	800518c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0b0      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d04c      	beq.n	8005232 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d107      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a0:	4b56      	ldr	r3, [pc, #344]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d121      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e09e      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d107      	bne.n	80051c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b8:	4b50      	ldr	r3, [pc, #320]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d115      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e092      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d107      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051d0:	4b4a      	ldr	r3, [pc, #296]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e086      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e0:	4b46      	ldr	r3, [pc, #280]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e07e      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051f0:	4b42      	ldr	r3, [pc, #264]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f023 0203 	bic.w	r2, r3, #3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	493f      	ldr	r1, [pc, #252]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005202:	f7fd fcbf 	bl	8002b84 <HAL_GetTick>
 8005206:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005208:	e00a      	b.n	8005220 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800520a:	f7fd fcbb 	bl	8002b84 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	f241 3288 	movw	r2, #5000	; 0x1388
 8005218:	4293      	cmp	r3, r2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e066      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005220:	4b36      	ldr	r3, [pc, #216]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 020c 	and.w	r2, r3, #12
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	429a      	cmp	r2, r3
 8005230:	d1eb      	bne.n	800520a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d008      	beq.n	8005250 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523e:	4b2f      	ldr	r3, [pc, #188]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	492c      	ldr	r1, [pc, #176]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 800524c:	4313      	orrs	r3, r2
 800524e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005250:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d210      	bcs.n	8005280 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 0207 	bic.w	r2, r3, #7
 8005266:	4924      	ldr	r1, [pc, #144]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526e:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e036      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800528c:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4918      	ldr	r1, [pc, #96]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4910      	ldr	r1, [pc, #64]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052be:	f000 f825 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80052c2:	4602      	mov	r2, r0
 80052c4:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	091b      	lsrs	r3, r3, #4
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	490c      	ldr	r1, [pc, #48]	; (8005300 <HAL_RCC_ClockConfig+0x1b8>)
 80052d0:	5ccb      	ldrb	r3, [r1, r3]
 80052d2:	f003 031f 	and.w	r3, r3, #31
 80052d6:	fa22 f303 	lsr.w	r3, r2, r3
 80052da:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <HAL_RCC_ClockConfig+0x1c0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fd fbfe 	bl	8002ae4 <HAL_InitTick>
 80052e8:	4603      	mov	r3, r0
 80052ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80052ec:	7afb      	ldrb	r3, [r7, #11]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40022000 	.word	0x40022000
 80052fc:	40021000 	.word	0x40021000
 8005300:	08009698 	.word	0x08009698
 8005304:	20000000 	.word	0x20000000
 8005308:	20000080 	.word	0x20000080

0800530c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800530c:	b480      	push	{r7}
 800530e:	b089      	sub	sp, #36	; 0x24
 8005310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	2300      	movs	r3, #0
 8005318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800531a:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005324:	4b3b      	ldr	r3, [pc, #236]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0x34>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b0c      	cmp	r3, #12
 8005338:	d121      	bne.n	800537e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d11e      	bne.n	800537e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005340:	4b34      	ldr	r3, [pc, #208]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d107      	bne.n	800535c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800534c:	4b31      	ldr	r3, [pc, #196]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800534e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	e005      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800535c:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005368:	4a2b      	ldr	r2, [pc, #172]	; (8005418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10d      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800537c:	e00a      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d102      	bne.n	800538a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005384:	4b25      	ldr	r3, [pc, #148]	; (800541c <HAL_RCC_GetSysClockFreq+0x110>)
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	e004      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d101      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005390:	4b23      	ldr	r3, [pc, #140]	; (8005420 <HAL_RCC_GetSysClockFreq+0x114>)
 8005392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b0c      	cmp	r3, #12
 8005398:	d134      	bne.n	8005404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800539a:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d003      	beq.n	80053b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d003      	beq.n	80053b8 <HAL_RCC_GetSysClockFreq+0xac>
 80053b0:	e005      	b.n	80053be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053b2:	4b1a      	ldr	r3, [pc, #104]	; (800541c <HAL_RCC_GetSysClockFreq+0x110>)
 80053b4:	617b      	str	r3, [r7, #20]
      break;
 80053b6:	e005      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053b8:	4b19      	ldr	r3, [pc, #100]	; (8005420 <HAL_RCC_GetSysClockFreq+0x114>)
 80053ba:	617b      	str	r3, [r7, #20]
      break;
 80053bc:	e002      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	617b      	str	r3, [r7, #20]
      break;
 80053c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053c4:	4b13      	ldr	r3, [pc, #76]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	3301      	adds	r3, #1
 80053d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	fb02 f203 	mul.w	r2, r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	0e5b      	lsrs	r3, r3, #25
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	3301      	adds	r3, #1
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005404:	69bb      	ldr	r3, [r7, #24]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	; 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
 8005418:	080096b0 	.word	0x080096b0
 800541c:	00f42400 	.word	0x00f42400
 8005420:	007a1200 	.word	0x007a1200

08005424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <HAL_RCC_GetHCLKFreq+0x14>)
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000000 	.word	0x20000000

0800543c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005440:	f7ff fff0 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005444:	4602      	mov	r2, r0
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	4904      	ldr	r1, [pc, #16]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005452:	5ccb      	ldrb	r3, [r1, r3]
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	080096a8 	.word	0x080096a8

08005468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800546c:	f7ff ffda 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	0adb      	lsrs	r3, r3, #11
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4904      	ldr	r1, [pc, #16]	; (8005490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000
 8005490:	080096a8 	.word	0x080096a8

08005494 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800549c:	2300      	movs	r3, #0
 800549e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054a0:	4b2a      	ldr	r3, [pc, #168]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054ac:	f7ff f9c2 	bl	8004834 <HAL_PWREx_GetVoltageRange>
 80054b0:	6178      	str	r0, [r7, #20]
 80054b2:	e014      	b.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b8:	4a24      	ldr	r2, [pc, #144]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054be:	6593      	str	r3, [r2, #88]	; 0x58
 80054c0:	4b22      	ldr	r3, [pc, #136]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054cc:	f7ff f9b2 	bl	8004834 <HAL_PWREx_GetVoltageRange>
 80054d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054d2:	4b1e      	ldr	r3, [pc, #120]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d6:	4a1d      	ldr	r2, [pc, #116]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e4:	d10b      	bne.n	80054fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b80      	cmp	r3, #128	; 0x80
 80054ea:	d919      	bls.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2ba0      	cmp	r3, #160	; 0xa0
 80054f0:	d902      	bls.n	80054f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054f2:	2302      	movs	r3, #2
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	e013      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054f8:	2301      	movs	r3, #1
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	e010      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b80      	cmp	r3, #128	; 0x80
 8005502:	d902      	bls.n	800550a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005504:	2303      	movs	r3, #3
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	e00a      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b80      	cmp	r3, #128	; 0x80
 800550e:	d102      	bne.n	8005516 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005510:	2302      	movs	r3, #2
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	e004      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b70      	cmp	r3, #112	; 0x70
 800551a:	d101      	bne.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800551c:	2301      	movs	r3, #1
 800551e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f023 0207 	bic.w	r2, r3, #7
 8005528:	4909      	ldr	r1, [pc, #36]	; (8005550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005530:	4b07      	ldr	r3, [pc, #28]	; (8005550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	429a      	cmp	r2, r3
 800553c:	d001      	beq.n	8005542 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40021000 	.word	0x40021000
 8005550:	40022000 	.word	0x40022000

08005554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800555c:	2300      	movs	r3, #0
 800555e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005560:	2300      	movs	r3, #0
 8005562:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556c:	2b00      	cmp	r3, #0
 800556e:	d041      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005574:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005578:	d02a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800557a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800557e:	d824      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005580:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005584:	d008      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800558a:	d81e      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005594:	d010      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005596:	e018      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005598:	4b86      	ldr	r3, [pc, #536]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4a85      	ldr	r2, [pc, #532]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800559e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055a4:	e015      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	2100      	movs	r1, #0
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 f97f 	bl	80068b0 <RCCEx_PLLSAI1_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055b6:	e00c      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3320      	adds	r3, #32
 80055bc:	2100      	movs	r1, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 fa68 	bl	8006a94 <RCCEx_PLLSAI2_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055c8:	e003      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	74fb      	strb	r3, [r7, #19]
      break;
 80055ce:	e000      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80055d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d2:	7cfb      	ldrb	r3, [r7, #19]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10b      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055d8:	4b76      	ldr	r3, [pc, #472]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e6:	4973      	ldr	r1, [pc, #460]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055ee:	e001      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
 80055f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d041      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005604:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005608:	d02a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800560a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800560e:	d824      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005614:	d008      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800561a:	d81e      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005624:	d010      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005626:	e018      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005628:	4b62      	ldr	r3, [pc, #392]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a61      	ldr	r2, [pc, #388]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800562e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005632:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005634:	e015      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3304      	adds	r3, #4
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f001 f937 	bl	80068b0 <RCCEx_PLLSAI1_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005646:	e00c      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3320      	adds	r3, #32
 800564c:	2100      	movs	r1, #0
 800564e:	4618      	mov	r0, r3
 8005650:	f001 fa20 	bl	8006a94 <RCCEx_PLLSAI2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005658:	e003      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	74fb      	strb	r3, [r7, #19]
      break;
 800565e:	e000      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005668:	4b52      	ldr	r3, [pc, #328]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005676:	494f      	ldr	r1, [pc, #316]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800567e:	e001      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80a0 	beq.w	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005692:	2300      	movs	r3, #0
 8005694:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005696:	4b47      	ldr	r3, [pc, #284]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00d      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ac:	4b41      	ldr	r3, [pc, #260]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b0:	4a40      	ldr	r2, [pc, #256]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b6:	6593      	str	r3, [r2, #88]	; 0x58
 80056b8:	4b3e      	ldr	r3, [pc, #248]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c4:	2301      	movs	r3, #1
 80056c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056c8:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3a      	ldr	r2, [pc, #232]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056d4:	f7fd fa56 	bl	8002b84 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056da:	e009      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056dc:	f7fd fa52 	bl	8002b84 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d902      	bls.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	74fb      	strb	r3, [r7, #19]
        break;
 80056ee:	e005      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056f0:	4b31      	ldr	r3, [pc, #196]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0ef      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d15c      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005702:	4b2c      	ldr	r3, [pc, #176]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01f      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	429a      	cmp	r2, r3
 800571e:	d019      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005720:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800572c:	4b21      	ldr	r3, [pc, #132]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005732:	4a20      	ldr	r2, [pc, #128]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800573c:	4b1d      	ldr	r3, [pc, #116]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005742:	4a1c      	ldr	r2, [pc, #112]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800574c:	4a19      	ldr	r2, [pc, #100]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d016      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575e:	f7fd fa11 	bl	8002b84 <HAL_GetTick>
 8005762:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005764:	e00b      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005766:	f7fd fa0d 	bl	8002b84 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f241 3288 	movw	r2, #5000	; 0x1388
 8005774:	4293      	cmp	r3, r2
 8005776:	d902      	bls.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	74fb      	strb	r3, [r7, #19]
            break;
 800577c:	e006      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800577e:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0ec      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800578c:	7cfb      	ldrb	r3, [r7, #19]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10c      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005792:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a2:	4904      	ldr	r1, [pc, #16]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057aa:	e009      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057ac:	7cfb      	ldrb	r3, [r7, #19]
 80057ae:	74bb      	strb	r3, [r7, #18]
 80057b0:	e006      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80057b2:	bf00      	nop
 80057b4:	40021000 	.word	0x40021000
 80057b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057bc:	7cfb      	ldrb	r3, [r7, #19]
 80057be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057c0:	7c7b      	ldrb	r3, [r7, #17]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d105      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c6:	4ba6      	ldr	r3, [pc, #664]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ca:	4aa5      	ldr	r2, [pc, #660]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057de:	4ba0      	ldr	r3, [pc, #640]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e4:	f023 0203 	bic.w	r2, r3, #3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	499c      	ldr	r1, [pc, #624]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005800:	4b97      	ldr	r3, [pc, #604]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005806:	f023 020c 	bic.w	r2, r3, #12
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	4994      	ldr	r1, [pc, #592]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005822:	4b8f      	ldr	r3, [pc, #572]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	498b      	ldr	r1, [pc, #556]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005844:	4b86      	ldr	r3, [pc, #536]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	4983      	ldr	r1, [pc, #524]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005866:	4b7e      	ldr	r3, [pc, #504]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005874:	497a      	ldr	r1, [pc, #488]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005888:	4b75      	ldr	r3, [pc, #468]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005896:	4972      	ldr	r1, [pc, #456]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058aa:	4b6d      	ldr	r3, [pc, #436]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b8:	4969      	ldr	r1, [pc, #420]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058cc:	4b64      	ldr	r3, [pc, #400]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058da:	4961      	ldr	r1, [pc, #388]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058ee:	4b5c      	ldr	r3, [pc, #368]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fc:	4958      	ldr	r1, [pc, #352]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005910:	4b53      	ldr	r3, [pc, #332]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	4950      	ldr	r1, [pc, #320]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005932:	4b4b      	ldr	r3, [pc, #300]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005940:	4947      	ldr	r1, [pc, #284]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005954:	4b42      	ldr	r3, [pc, #264]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800595a:	f023 0203 	bic.w	r2, r3, #3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005962:	493f      	ldr	r1, [pc, #252]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d028      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005976:	4b3a      	ldr	r3, [pc, #232]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	4936      	ldr	r1, [pc, #216]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005994:	d106      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005996:	4b32      	ldr	r3, [pc, #200]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	4a31      	ldr	r2, [pc, #196]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800599c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059a0:	60d3      	str	r3, [r2, #12]
 80059a2:	e011      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059ac:	d10c      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	2101      	movs	r1, #1
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 ff7b 	bl	80068b0 <RCCEx_PLLSAI1_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059be:	7cfb      	ldrb	r3, [r7, #19]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80059c4:	7cfb      	ldrb	r3, [r7, #19]
 80059c6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d028      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059d4:	4b22      	ldr	r3, [pc, #136]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e2:	491f      	ldr	r1, [pc, #124]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059f2:	d106      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f4:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4a19      	ldr	r2, [pc, #100]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059fe:	60d3      	str	r3, [r2, #12]
 8005a00:	e011      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a0a:	d10c      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	2101      	movs	r1, #1
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 ff4c 	bl	80068b0 <RCCEx_PLLSAI1_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a1c:	7cfb      	ldrb	r3, [r7, #19]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005a22:	7cfb      	ldrb	r3, [r7, #19]
 8005a24:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d02a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a40:	4907      	ldr	r1, [pc, #28]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a50:	d108      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a52:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	4a02      	ldr	r2, [pc, #8]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a5c:	60d3      	str	r3, [r2, #12]
 8005a5e:	e013      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005a60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a6c:	d10c      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3304      	adds	r3, #4
 8005a72:	2101      	movs	r1, #1
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 ff1b 	bl	80068b0 <RCCEx_PLLSAI1_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a7e:	7cfb      	ldrb	r3, [r7, #19]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d02f      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a94:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa2:	4929      	ldr	r1, [pc, #164]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ab2:	d10d      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	2102      	movs	r1, #2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fef8 	bl	80068b0 <RCCEx_PLLSAI1_Config>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d014      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005aca:	7cfb      	ldrb	r3, [r7, #19]
 8005acc:	74bb      	strb	r3, [r7, #18]
 8005ace:	e011      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad8:	d10c      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3320      	adds	r3, #32
 8005ade:	2102      	movs	r1, #2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 ffd7 	bl	8006a94 <RCCEx_PLLSAI2_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aea:	7cfb      	ldrb	r3, [r7, #19]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005af0:	7cfb      	ldrb	r3, [r7, #19]
 8005af2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b00:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b10:	490d      	ldr	r1, [pc, #52]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b24:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b34:	4904      	ldr	r1, [pc, #16]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	40021000 	.word	0x40021000

08005b4c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L496xx) || defined(STM32L4A6xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a77      	ldr	r2, [pc, #476]	; (8005d34 <HAL_RCCEx_GetPeriphCLKConfig+0x1e8>)
 8005b58:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 8005b5a:	4b77      	ldr	r3, [pc, #476]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f003 0203 	and.w	r2, r3, #3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8005b66:	4b74      	ldr	r3, [pc, #464]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005b76:	4b70      	ldr	r3, [pc, #448]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8005b84:	4b6c      	ldr	r3, [pc, #432]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	0c5b      	lsrs	r3, r3, #17
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	1dda      	adds	r2, r3, #7
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 8005b96:	4b68      	ldr	r3, [pc, #416]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	0d5b      	lsrs	r3, r3, #21
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	005a      	lsls	r2, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8005ba8:	4b63      	ldr	r3, [pc, #396]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	0e5b      	lsrs	r3, r3, #25
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	005a      	lsls	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005bca:	4b5b      	ldr	r3, [pc, #364]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	0a1b      	lsrs	r3, r3, #8
 8005bd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8005bd8:	4b57      	ldr	r3, [pc, #348]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	0c5b      	lsrs	r3, r3, #17
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	1dda      	adds	r2, r3, #7
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 8005bea:	4b53      	ldr	r3, [pc, #332]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	0e5b      	lsrs	r3, r3, #25
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	005a      	lsls	r2, r3, #1
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8005bfc:	4b4e      	ldr	r3, [pc, #312]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c02:	f003 0203 	and.w	r2, r3, #3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8005c0a:	4b4b      	ldr	r3, [pc, #300]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c10:	f003 020c 	and.w	r2, r3, #12
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8005c18:	4b47      	ldr	r3, [pc, #284]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 8005c26:	4b44      	ldr	r3, [pc, #272]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 8005c34:	4b40      	ldr	r3, [pc, #256]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8005c42:	4b3d      	ldr	r3, [pc, #244]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c48:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8005c50:	4b39      	ldr	r3, [pc, #228]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c56:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 8005c5e:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c64:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 8005c6c:	4b32      	ldr	r3, [pc, #200]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(I2C4)
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
 8005c7a:	4b2f      	ldr	r3, [pc, #188]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c80:	f003 0203 	and.w	r2, r3, #3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005c88:	4b2b      	ldr	r3, [pc, #172]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005c96:	4b28      	ldr	r3, [pc, #160]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9c:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 8005ca4:	4b24      	ldr	r3, [pc, #144]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8005cb2:	4b21      	ldr	r3, [pc, #132]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb8:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8005cd0:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd6:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005cde:	4b16      	ldr	r3, [pc, #88]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce4:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8005cec:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf2:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	679a      	str	r2, [r3, #120]	; 0x78

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8005cfa:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d00:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	001fffff 	.word	0x001fffff
 8005d38:	40021000 	.word	0x40021000

08005d3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d4e:	d13e      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005d50:	4bb8      	ldr	r3, [pc, #736]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d62:	d028      	beq.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d6a:	f200 858e 	bhi.w	800688a <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d74:	d005      	beq.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7c:	d00e      	beq.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005d7e:	f000 bd84 	b.w	800688a <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d82:	4bac      	ldr	r3, [pc, #688]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	f040 857e 	bne.w	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
        frequency = LSE_VALUE;
 8005d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d96:	61fb      	str	r3, [r7, #28]
      break;
 8005d98:	f000 bd79 	b.w	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d9c:	4ba5      	ldr	r3, [pc, #660]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	f040 8573 	bne.w	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          frequency = LSI_VALUE;
 8005dac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005db0:	61fb      	str	r3, [r7, #28]
      break;
 8005db2:	f000 bd6e 	b.w	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005db6:	4b9f      	ldr	r3, [pc, #636]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dc2:	f040 8568 	bne.w	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
        frequency = HSE_VALUE / 32U;
 8005dc6:	4b9c      	ldr	r3, [pc, #624]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005dc8:	61fb      	str	r3, [r7, #28]
      break;
 8005dca:	f000 bd64 	b.w	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dce:	4b99      	ldr	r3, [pc, #612]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d036      	beq.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d840      	bhi.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d003      	beq.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d020      	beq.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005df0:	e039      	b.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005df2:	4b90      	ldr	r3, [pc, #576]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d116      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005dfe:	4b8d      	ldr	r3, [pc, #564]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005e0a:	4b8a      	ldr	r3, [pc, #552]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	091b      	lsrs	r3, r3, #4
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	e005      	b.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005e16:	4b87      	ldr	r3, [pc, #540]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	4a86      	ldr	r2, [pc, #536]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e2a:	e01f      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61bb      	str	r3, [r7, #24]
      break;
 8005e30:	e01c      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e32:	4b80      	ldr	r3, [pc, #512]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3e:	d102      	bne.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005e40:	4b7f      	ldr	r3, [pc, #508]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005e42:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e44:	e012      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]
      break;
 8005e4a:	e00f      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e4c:	4b79      	ldr	r3, [pc, #484]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e58:	d102      	bne.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005e5a:	4b7a      	ldr	r3, [pc, #488]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005e5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e5e:	e005      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61bb      	str	r3, [r7, #24]
      break;
 8005e64:	e002      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61bb      	str	r3, [r7, #24]
      break;
 8005e6a:	bf00      	nop
    }

    switch(PeriphClk)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e72:	f000 842b 	beq.w	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7c:	f200 850d 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e86:	f000 80df 	beq.w	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e90:	f200 8503 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e9a:	f000 80d5 	beq.w	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ea4:	f200 84f9 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eae:	f000 8374 	beq.w	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb8:	f200 84ef 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec2:	f000 84c0 	beq.w	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ecc:	f200 84e5 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ed6:	f000 82e7 	beq.w	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee0:	f200 84db 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eea:	f000 80ad 	beq.w	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef4:	f200 84d1 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efe:	f000 8091 	beq.w	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f08:	f200 84c7 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f12:	d07f      	beq.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f1a:	f200 84be 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f24:	f000 8445 	beq.w	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f2e:	f200 84b4 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f38:	f000 83f1 	beq.w	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f42:	f200 84aa 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4c:	f000 8392 	beq.w	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f56:	f200 84a0 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b80      	cmp	r3, #128	; 0x80
 8005f5e:	f000 835d 	beq.w	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	f200 8498 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b20      	cmp	r3, #32
 8005f6e:	d84b      	bhi.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8491 	beq.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	2b1f      	cmp	r3, #31
 8005f7e:	f200 848c 	bhi.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	0800619f 	.word	0x0800619f
 8005f8c:	0800620f 	.word	0x0800620f
 8005f90:	0800689b 	.word	0x0800689b
 8005f94:	080062a3 	.word	0x080062a3
 8005f98:	0800689b 	.word	0x0800689b
 8005f9c:	0800689b 	.word	0x0800689b
 8005fa0:	0800689b 	.word	0x0800689b
 8005fa4:	0800632d 	.word	0x0800632d
 8005fa8:	0800689b 	.word	0x0800689b
 8005fac:	0800689b 	.word	0x0800689b
 8005fb0:	0800689b 	.word	0x0800689b
 8005fb4:	0800689b 	.word	0x0800689b
 8005fb8:	0800689b 	.word	0x0800689b
 8005fbc:	0800689b 	.word	0x0800689b
 8005fc0:	0800689b 	.word	0x0800689b
 8005fc4:	080063a5 	.word	0x080063a5
 8005fc8:	0800689b 	.word	0x0800689b
 8005fcc:	0800689b 	.word	0x0800689b
 8005fd0:	0800689b 	.word	0x0800689b
 8005fd4:	0800689b 	.word	0x0800689b
 8005fd8:	0800689b 	.word	0x0800689b
 8005fdc:	0800689b 	.word	0x0800689b
 8005fe0:	0800689b 	.word	0x0800689b
 8005fe4:	0800689b 	.word	0x0800689b
 8005fe8:	0800689b 	.word	0x0800689b
 8005fec:	0800689b 	.word	0x0800689b
 8005ff0:	0800689b 	.word	0x0800689b
 8005ff4:	0800689b 	.word	0x0800689b
 8005ff8:	0800689b 	.word	0x0800689b
 8005ffc:	0800689b 	.word	0x0800689b
 8006000:	0800689b 	.word	0x0800689b
 8006004:	08006427 	.word	0x08006427
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	f000 82da 	beq.w	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006010:	f000 bc43 	b.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006014:	69b9      	ldr	r1, [r7, #24]
 8006016:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800601a:	f000 fe17 	bl	8006c4c <RCCEx_GetSAIxPeriphCLKFreq>
 800601e:	61f8      	str	r0, [r7, #28]
      break;
 8006020:	f000 bc3c 	b.w	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006024:	69b9      	ldr	r1, [r7, #24]
 8006026:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800602a:	f000 fe0f 	bl	8006c4c <RCCEx_GetSAIxPeriphCLKFreq>
 800602e:	61f8      	str	r0, [r7, #28]
      break;
 8006030:	f000 bc34 	b.w	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8006034:	40021000 	.word	0x40021000
 8006038:	0003d090 	.word	0x0003d090
 800603c:	080096b0 	.word	0x080096b0
 8006040:	00f42400 	.word	0x00f42400
 8006044:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006048:	4bb2      	ldr	r3, [pc, #712]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800605a:	d015      	beq.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006062:	f200 8092 	bhi.w	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800606c:	d029      	beq.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006074:	f200 8089 	bhi.w	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d07b      	beq.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006084:	d04a      	beq.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 8006086:	e080      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006088:	4ba2      	ldr	r3, [pc, #648]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b02      	cmp	r3, #2
 8006092:	d17c      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006094:	4b9f      	ldr	r3, [pc, #636]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80060a0:	4b9c      	ldr	r3, [pc, #624]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	e005      	b.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80060ac:	4b99      	ldr	r3, [pc, #612]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80060ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b2:	0a1b      	lsrs	r3, r3, #8
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	4a97      	ldr	r2, [pc, #604]	; (8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80060ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060be:	61fb      	str	r3, [r7, #28]
          break;
 80060c0:	e065      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80060c2:	4b94      	ldr	r3, [pc, #592]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060ce:	d160      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80060d0:	4b90      	ldr	r3, [pc, #576]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060dc:	d159      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80060de:	4b8d      	ldr	r3, [pc, #564]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	0a1b      	lsrs	r3, r3, #8
 80060e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	fb02 f203 	mul.w	r2, r2, r3
 80060f2:	4b88      	ldr	r3, [pc, #544]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	3301      	adds	r3, #1
 80060fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006102:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006104:	4b83      	ldr	r3, [pc, #524]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	0d5b      	lsrs	r3, r3, #21
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	3301      	adds	r3, #1
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	fbb2 f3f3 	udiv	r3, r2, r3
 8006118:	61fb      	str	r3, [r7, #28]
          break;
 800611a:	e03a      	b.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800611c:	4b7d      	ldr	r3, [pc, #500]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006128:	d135      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800612a:	4b7a      	ldr	r3, [pc, #488]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006136:	d12e      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006138:	4b76      	ldr	r3, [pc, #472]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006142:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	fb02 f203 	mul.w	r2, r2, r3
 800614c:	4b71      	ldr	r3, [pc, #452]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	091b      	lsrs	r3, r3, #4
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	3301      	adds	r3, #1
 8006158:	fbb2 f3f3 	udiv	r3, r2, r3
 800615c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800615e:	4b6d      	ldr	r3, [pc, #436]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	0d5b      	lsrs	r3, r3, #21
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	3301      	adds	r3, #1
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006172:	61fb      	str	r3, [r7, #28]
          break;
 8006174:	e00f      	b.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006176:	4b67      	ldr	r3, [pc, #412]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006178:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b02      	cmp	r3, #2
 8006182:	d10a      	bne.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8006184:	4b65      	ldr	r3, [pc, #404]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006186:	61fb      	str	r3, [r7, #28]
          break;
 8006188:	e007      	b.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 800618a:	bf00      	nop
 800618c:	e386      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800618e:	bf00      	nop
 8006190:	e384      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006192:	bf00      	nop
 8006194:	e382      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006196:	bf00      	nop
 8006198:	e380      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800619a:	bf00      	nop
        break;
 800619c:	e37e      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800619e:	4b5d      	ldr	r3, [pc, #372]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a4:	f003 0303 	and.w	r3, r3, #3
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d828      	bhi.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 80061b0:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80061b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b6:	bf00      	nop
 80061b8:	080061c9 	.word	0x080061c9
 80061bc:	080061d1 	.word	0x080061d1
 80061c0:	080061d9 	.word	0x080061d9
 80061c4:	080061ed 	.word	0x080061ed
          frequency = HAL_RCC_GetPCLK2Freq();
 80061c8:	f7ff f94e 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 80061cc:	61f8      	str	r0, [r7, #28]
          break;
 80061ce:	e01d      	b.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 80061d0:	f7ff f89c 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80061d4:	61f8      	str	r0, [r7, #28]
          break;
 80061d6:	e019      	b.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061d8:	4b4e      	ldr	r3, [pc, #312]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e4:	d10f      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 80061e6:	4b4e      	ldr	r3, [pc, #312]	; (8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 80061e8:	61fb      	str	r3, [r7, #28]
          break;
 80061ea:	e00c      	b.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061ec:	4b49      	ldr	r3, [pc, #292]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d107      	bne.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 80061fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061fe:	61fb      	str	r3, [r7, #28]
          break;
 8006200:	e003      	b.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8006202:	bf00      	nop
 8006204:	e34a      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006206:	bf00      	nop
 8006208:	e348      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800620a:	bf00      	nop
        break;
 800620c:	e346      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800620e:	4b41      	ldr	r3, [pc, #260]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006214:	f003 030c 	and.w	r3, r3, #12
 8006218:	613b      	str	r3, [r7, #16]
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b0c      	cmp	r3, #12
 800621e:	d83a      	bhi.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	0800625d 	.word	0x0800625d
 800622c:	08006297 	.word	0x08006297
 8006230:	08006297 	.word	0x08006297
 8006234:	08006297 	.word	0x08006297
 8006238:	08006265 	.word	0x08006265
 800623c:	08006297 	.word	0x08006297
 8006240:	08006297 	.word	0x08006297
 8006244:	08006297 	.word	0x08006297
 8006248:	0800626d 	.word	0x0800626d
 800624c:	08006297 	.word	0x08006297
 8006250:	08006297 	.word	0x08006297
 8006254:	08006297 	.word	0x08006297
 8006258:	08006281 	.word	0x08006281
          frequency = HAL_RCC_GetPCLK1Freq();
 800625c:	f7ff f8ee 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006260:	61f8      	str	r0, [r7, #28]
          break;
 8006262:	e01d      	b.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8006264:	f7ff f852 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8006268:	61f8      	str	r0, [r7, #28]
          break;
 800626a:	e019      	b.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800626c:	4b29      	ldr	r3, [pc, #164]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006278:	d10f      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 800627a:	4b29      	ldr	r3, [pc, #164]	; (8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800627c:	61fb      	str	r3, [r7, #28]
          break;
 800627e:	e00c      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006280:	4b24      	ldr	r3, [pc, #144]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b02      	cmp	r3, #2
 800628c:	d107      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 800628e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006292:	61fb      	str	r3, [r7, #28]
          break;
 8006294:	e003      	b.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8006296:	bf00      	nop
 8006298:	e300      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800629a:	bf00      	nop
 800629c:	e2fe      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800629e:	bf00      	nop
        break;
 80062a0:	e2fc      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80062a2:	4b1c      	ldr	r3, [pc, #112]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80062a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	2b30      	cmp	r3, #48	; 0x30
 80062b2:	d021      	beq.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b30      	cmp	r3, #48	; 0x30
 80062b8:	d829      	bhi.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d011      	beq.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	d823      	bhi.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	d004      	beq.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 80062d2:	e01c      	b.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062d4:	f7ff f8b2 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80062d8:	61f8      	str	r0, [r7, #28]
          break;
 80062da:	e026      	b.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          frequency = HAL_RCC_GetSysClockFreq();
 80062dc:	f7ff f816 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80062e0:	61f8      	str	r0, [r7, #28]
          break;
 80062e2:	e022      	b.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062e4:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f0:	d118      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
            frequency = HSI_VALUE;
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 80062f4:	61fb      	str	r3, [r7, #28]
          break;
 80062f6:	e015      	b.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062f8:	4b06      	ldr	r3, [pc, #24]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b02      	cmp	r3, #2
 8006304:	d110      	bne.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
            frequency = LSE_VALUE;
 8006306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630a:	61fb      	str	r3, [r7, #28]
          break;
 800630c:	e00c      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          break;
 800630e:	bf00      	nop
 8006310:	e2c4      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8006312:	bf00      	nop
 8006314:	40021000 	.word	0x40021000
 8006318:	080096b0 	.word	0x080096b0
 800631c:	02dc6c00 	.word	0x02dc6c00
 8006320:	00f42400 	.word	0x00f42400
          break;
 8006324:	bf00      	nop
 8006326:	e2b9      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006328:	bf00      	nop
        break;
 800632a:	e2b7      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800632c:	4ba3      	ldr	r3, [pc, #652]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800632e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006332:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2bc0      	cmp	r3, #192	; 0xc0
 800633c:	d021      	beq.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2bc0      	cmp	r3, #192	; 0xc0
 8006342:	d829      	bhi.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	2b80      	cmp	r3, #128	; 0x80
 8006348:	d011      	beq.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2b80      	cmp	r3, #128	; 0x80
 800634e:	d823      	bhi.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d004      	beq.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
          break;
 800635c:	e01c      	b.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800635e:	f7ff f86d 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006362:	61f8      	str	r0, [r7, #28]
          break;
 8006364:	e01d      	b.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = HAL_RCC_GetSysClockFreq();
 8006366:	f7fe ffd1 	bl	800530c <HAL_RCC_GetSysClockFreq>
 800636a:	61f8      	str	r0, [r7, #28]
          break;
 800636c:	e019      	b.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800636e:	4b93      	ldr	r3, [pc, #588]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637a:	d10f      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            frequency = HSI_VALUE;
 800637c:	4b90      	ldr	r3, [pc, #576]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 800637e:	61fb      	str	r3, [r7, #28]
          break;
 8006380:	e00c      	b.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006382:	4b8e      	ldr	r3, [pc, #568]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b02      	cmp	r3, #2
 800638e:	d107      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = LSE_VALUE;
 8006390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006394:	61fb      	str	r3, [r7, #28]
          break;
 8006396:	e003      	b.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8006398:	bf00      	nop
 800639a:	e27f      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800639c:	bf00      	nop
 800639e:	e27d      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80063a0:	bf00      	nop
        break;
 80063a2:	e27b      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80063a4:	4b85      	ldr	r3, [pc, #532]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80063a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b6:	d025      	beq.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063be:	d82c      	bhi.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c6:	d013      	beq.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ce:	d824      	bhi.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063dc:	d004      	beq.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          break;
 80063de:	e01c      	b.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063e0:	f7ff f82c 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80063e4:	61f8      	str	r0, [r7, #28]
          break;
 80063e6:	e01d      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80063e8:	f7fe ff90 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80063ec:	61f8      	str	r0, [r7, #28]
          break;
 80063ee:	e019      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063f0:	4b72      	ldr	r3, [pc, #456]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fc:	d10f      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = HSI_VALUE;
 80063fe:	4b70      	ldr	r3, [pc, #448]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8006400:	61fb      	str	r3, [r7, #28]
          break;
 8006402:	e00c      	b.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006404:	4b6d      	ldr	r3, [pc, #436]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b02      	cmp	r3, #2
 8006410:	d107      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
            frequency = LSE_VALUE;
 8006412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006416:	61fb      	str	r3, [r7, #28]
          break;
 8006418:	e003      	b.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800641a:	bf00      	nop
 800641c:	e23e      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800641e:	bf00      	nop
 8006420:	e23c      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006422:	bf00      	nop
        break;
 8006424:	e23a      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006426:	4b65      	ldr	r3, [pc, #404]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006438:	d025      	beq.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006440:	d82c      	bhi.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006448:	d013      	beq.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x736>
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006450:	d824      	bhi.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645e:	d004      	beq.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          break;
 8006460:	e01c      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006462:	f7fe ffeb 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006466:	61f8      	str	r0, [r7, #28]
          break;
 8006468:	e01d      	b.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          frequency = HAL_RCC_GetSysClockFreq();
 800646a:	f7fe ff4f 	bl	800530c <HAL_RCC_GetSysClockFreq>
 800646e:	61f8      	str	r0, [r7, #28]
          break;
 8006470:	e019      	b.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006472:	4b52      	ldr	r3, [pc, #328]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647e:	d10f      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
            frequency = HSI_VALUE;
 8006480:	4b4f      	ldr	r3, [pc, #316]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8006482:	61fb      	str	r3, [r7, #28]
          break;
 8006484:	e00c      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006486:	4b4d      	ldr	r3, [pc, #308]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b02      	cmp	r3, #2
 8006492:	d107      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
            frequency = LSE_VALUE;
 8006494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006498:	61fb      	str	r3, [r7, #28]
          break;
 800649a:	e003      	b.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 800649c:	bf00      	nop
 800649e:	e1fd      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80064a0:	bf00      	nop
 80064a2:	e1fb      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80064a4:	bf00      	nop
        break;
 80064a6:	e1f9      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80064a8:	4b44      	ldr	r3, [pc, #272]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80064aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064ba:	d00c      	beq.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064c2:	d864      	bhi.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x852>
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ca:	d008      	beq.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064d2:	d030      	beq.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
          break;
 80064d4:	e05b      	b.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x852>
          frequency = HAL_RCC_GetSysClockFreq();
 80064d6:	f7fe ff19 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80064da:	61f8      	str	r0, [r7, #28]
          break;
 80064dc:	e05c      	b.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80064de:	4b37      	ldr	r3, [pc, #220]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064ea:	d152      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80064ec:	4b33      	ldr	r3, [pc, #204]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d04c      	beq.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80064f8:	4b30      	ldr	r3, [pc, #192]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	0a1b      	lsrs	r3, r3, #8
 80064fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006502:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	fb02 f203 	mul.w	r2, r2, r3
 800650c:	4b2b      	ldr	r3, [pc, #172]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	091b      	lsrs	r3, r3, #4
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	3301      	adds	r3, #1
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800651e:	4b27      	ldr	r3, [pc, #156]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	0e5b      	lsrs	r3, r3, #25
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	3301      	adds	r3, #1
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006532:	61fb      	str	r3, [r7, #28]
          break;
 8006534:	e02d      	b.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8006536:	4b21      	ldr	r3, [pc, #132]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800653e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006542:	d128      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 8006544:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d022      	beq.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006550:	4b1a      	ldr	r3, [pc, #104]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	0a1b      	lsrs	r3, r3, #8
 8006556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800655a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	fb02 f203 	mul.w	r2, r2, r3
 8006564:	4b15      	ldr	r3, [pc, #84]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	091b      	lsrs	r3, r3, #4
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	3301      	adds	r3, #1
 8006570:	fbb2 f3f3 	udiv	r3, r2, r3
 8006574:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8006576:	4b11      	ldr	r3, [pc, #68]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	0e5b      	lsrs	r3, r3, #25
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	3301      	adds	r3, #1
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	fbb2 f3f3 	udiv	r3, r2, r3
 800658a:	61fb      	str	r3, [r7, #28]
          break;
 800658c:	e003      	b.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 800658e:	bf00      	nop
 8006590:	e184      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006592:	bf00      	nop
 8006594:	e182      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006596:	bf00      	nop
        break;
 8006598:	e180      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800659a:	4b08      	ldr	r3, [pc, #32]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065a4:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
          frequency = HAL_RCC_GetPCLK2Freq();
 80065ac:	f7fe ff5c 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 80065b0:	61f8      	str	r0, [r7, #28]
        break;
 80065b2:	e173      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetSysClockFreq();
 80065b4:	f7fe feaa 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80065b8:	61f8      	str	r0, [r7, #28]
        break;
 80065ba:	e16f      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80065bc:	40021000 	.word	0x40021000
 80065c0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80065c4:	4ba7      	ldr	r3, [pc, #668]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d6:	d013      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065de:	d819      	bhi.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ec:	d004      	beq.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
          break;
 80065ee:	e011      	b.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065f0:	f7fe ff24 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80065f4:	61f8      	str	r0, [r7, #28]
          break;
 80065f6:	e010      	b.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 80065f8:	f7fe fe88 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80065fc:	61f8      	str	r0, [r7, #28]
          break;
 80065fe:	e00c      	b.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006600:	4b98      	ldr	r3, [pc, #608]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660c:	d104      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
            frequency = HSI_VALUE;
 800660e:	4b96      	ldr	r3, [pc, #600]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8006610:	61fb      	str	r3, [r7, #28]
          break;
 8006612:	e001      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          break;
 8006614:	bf00      	nop
 8006616:	e141      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006618:	bf00      	nop
        break;
 800661a:	e13f      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800661c:	4b91      	ldr	r3, [pc, #580]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006626:	613b      	str	r3, [r7, #16]
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662e:	d013      	beq.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006636:	d819      	bhi.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006644:	d004      	beq.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 8006646:	e011      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006648:	f7fe fef8 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 800664c:	61f8      	str	r0, [r7, #28]
          break;
 800664e:	e010      	b.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 8006650:	f7fe fe5c 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8006654:	61f8      	str	r0, [r7, #28]
          break;
 8006656:	e00c      	b.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006658:	4b82      	ldr	r3, [pc, #520]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006664:	d104      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            frequency = HSI_VALUE;
 8006666:	4b80      	ldr	r3, [pc, #512]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8006668:	61fb      	str	r3, [r7, #28]
          break;
 800666a:	e001      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          break;
 800666c:	bf00      	nop
 800666e:	e115      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006670:	bf00      	nop
        break;
 8006672:	e113      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006674:	4b7b      	ldr	r3, [pc, #492]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006686:	d013      	beq.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800668e:	d819      	bhi.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669c:	d004      	beq.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          break;
 800669e:	e011      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066a0:	f7fe fecc 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80066a4:	61f8      	str	r0, [r7, #28]
          break;
 80066a6:	e010      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          frequency = HAL_RCC_GetSysClockFreq();
 80066a8:	f7fe fe30 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80066ac:	61f8      	str	r0, [r7, #28]
          break;
 80066ae:	e00c      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066b0:	4b6c      	ldr	r3, [pc, #432]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066bc:	d104      	bne.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency = HSI_VALUE;
 80066be:	4b6a      	ldr	r3, [pc, #424]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 80066c0:	61fb      	str	r3, [r7, #28]
          break;
 80066c2:	e001      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          break;
 80066c4:	bf00      	nop
 80066c6:	e0e9      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80066c8:	bf00      	nop
        break;
 80066ca:	e0e7      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80066cc:	4b65      	ldr	r3, [pc, #404]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80066ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d011      	beq.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d818      	bhi.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d004      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          break;
 80066f0:	e011      	b.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066f2:	f7fe fea3 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80066f6:	61f8      	str	r0, [r7, #28]
          break;
 80066f8:	e010      	b.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          frequency = HAL_RCC_GetSysClockFreq();
 80066fa:	f7fe fe07 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80066fe:	61f8      	str	r0, [r7, #28]
          break;
 8006700:	e00c      	b.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006702:	4b58      	ldr	r3, [pc, #352]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800670a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670e:	d104      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
            frequency = HSI_VALUE;
 8006710:	4b55      	ldr	r3, [pc, #340]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8006712:	61fb      	str	r3, [r7, #28]
          break;
 8006714:	e001      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          break;
 8006716:	bf00      	nop
 8006718:	e0c0      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800671a:	bf00      	nop
        break;
 800671c:	e0be      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800671e:	4b51      	ldr	r3, [pc, #324]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006724:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006728:	613b      	str	r3, [r7, #16]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006730:	d02c      	beq.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006738:	d833      	bhi.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006740:	d01a      	beq.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006748:	d82b      	bhi.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d004      	beq.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006756:	d004      	beq.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
          break;
 8006758:	e023      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          frequency = HAL_RCC_GetPCLK1Freq();
 800675a:	f7fe fe6f 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 800675e:	61f8      	str	r0, [r7, #28]
          break;
 8006760:	e026      	b.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006762:	4b40      	ldr	r3, [pc, #256]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b02      	cmp	r3, #2
 800676e:	d11a      	bne.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
              frequency = LSI_VALUE;
 8006770:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006774:	61fb      	str	r3, [r7, #28]
          break;
 8006776:	e016      	b.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006778:	4b3a      	ldr	r3, [pc, #232]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006784:	d111      	bne.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = HSI_VALUE;
 8006786:	4b38      	ldr	r3, [pc, #224]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8006788:	61fb      	str	r3, [r7, #28]
          break;
 800678a:	e00e      	b.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800678c:	4b35      	ldr	r3, [pc, #212]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b02      	cmp	r3, #2
 8006798:	d109      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
            frequency = LSE_VALUE;
 800679a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679e:	61fb      	str	r3, [r7, #28]
          break;
 80067a0:	e005      	b.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          break;
 80067a2:	bf00      	nop
 80067a4:	e07a      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80067a6:	bf00      	nop
 80067a8:	e078      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80067aa:	bf00      	nop
 80067ac:	e076      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80067ae:	bf00      	nop
        break;
 80067b0:	e074      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80067b2:	4b2c      	ldr	r3, [pc, #176]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80067b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067c4:	d02c      	beq.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067cc:	d833      	bhi.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067d4:	d01a      	beq.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067dc:	d82b      	bhi.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d004      	beq.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ea:	d004      	beq.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
          break;
 80067ec:	e023      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067ee:	f7fe fe25 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80067f2:	61f8      	str	r0, [r7, #28]
          break;
 80067f4:	e026      	b.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80067f6:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80067f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b02      	cmp	r3, #2
 8006802:	d11a      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
              frequency = LSI_VALUE;
 8006804:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006808:	61fb      	str	r3, [r7, #28]
          break;
 800680a:	e016      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800680c:	4b15      	ldr	r3, [pc, #84]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006818:	d111      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
            frequency = HSI_VALUE;
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800681c:	61fb      	str	r3, [r7, #28]
          break;
 800681e:	e00e      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006820:	4b10      	ldr	r3, [pc, #64]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b02      	cmp	r3, #2
 800682c:	d109      	bne.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
            frequency = LSE_VALUE;
 800682e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006832:	61fb      	str	r3, [r7, #28]
          break;
 8006834:	e005      	b.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
          break;
 8006836:	bf00      	nop
 8006838:	e030      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800683a:	bf00      	nop
 800683c:	e02e      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800683e:	bf00      	nop
 8006840:	e02c      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006842:	bf00      	nop
        break;
 8006844:	e02a      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006846:	4b07      	ldr	r3, [pc, #28]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d009      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685e:	d009      	beq.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
          break;
 8006860:	e012      	b.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006862:	bf00      	nop
 8006864:	40021000 	.word	0x40021000
 8006868:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 800686c:	f7fe fde6 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006870:	61f8      	str	r0, [r7, #28]
          break;
 8006872:	e009      	b.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006874:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006880:	d101      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
            frequency = HSI_VALUE;
 8006882:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0xb70>)
 8006884:	61fb      	str	r3, [r7, #28]
          break;
 8006886:	bf00      	nop
        break;
 8006888:	e008      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800688a:	bf00      	nop
 800688c:	e006      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800688e:	bf00      	nop
 8006890:	e004      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 8006892:	bf00      	nop
 8006894:	e002      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 8006896:	bf00      	nop
 8006898:	e000      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800689a:	bf00      	nop
    }
  }

  return(frequency);
 800689c:	69fb      	ldr	r3, [r7, #28]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40021000 	.word	0x40021000
 80068ac:	00f42400 	.word	0x00f42400

080068b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068be:	4b74      	ldr	r3, [pc, #464]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d018      	beq.n	80068fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80068ca:	4b71      	ldr	r3, [pc, #452]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f003 0203 	and.w	r2, r3, #3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d10d      	bne.n	80068f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
       ||
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80068e2:	4b6b      	ldr	r3, [pc, #428]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	091b      	lsrs	r3, r3, #4
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
       ||
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d047      	beq.n	8006986 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
 80068fa:	e044      	b.n	8006986 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b03      	cmp	r3, #3
 8006902:	d018      	beq.n	8006936 <RCCEx_PLLSAI1_Config+0x86>
 8006904:	2b03      	cmp	r3, #3
 8006906:	d825      	bhi.n	8006954 <RCCEx_PLLSAI1_Config+0xa4>
 8006908:	2b01      	cmp	r3, #1
 800690a:	d002      	beq.n	8006912 <RCCEx_PLLSAI1_Config+0x62>
 800690c:	2b02      	cmp	r3, #2
 800690e:	d009      	beq.n	8006924 <RCCEx_PLLSAI1_Config+0x74>
 8006910:	e020      	b.n	8006954 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006912:	4b5f      	ldr	r3, [pc, #380]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d11d      	bne.n	800695a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006922:	e01a      	b.n	800695a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006924:	4b5a      	ldr	r3, [pc, #360]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800692c:	2b00      	cmp	r3, #0
 800692e:	d116      	bne.n	800695e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006934:	e013      	b.n	800695e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006936:	4b56      	ldr	r3, [pc, #344]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10f      	bne.n	8006962 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006942:	4b53      	ldr	r3, [pc, #332]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d109      	bne.n	8006962 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006952:	e006      	b.n	8006962 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	73fb      	strb	r3, [r7, #15]
      break;
 8006958:	e004      	b.n	8006964 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800695a:	bf00      	nop
 800695c:	e002      	b.n	8006964 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800695e:	bf00      	nop
 8006960:	e000      	b.n	8006964 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006962:	bf00      	nop
    }

    if(status == HAL_OK)
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10d      	bne.n	8006986 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800696a:	4b49      	ldr	r3, [pc, #292]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6819      	ldr	r1, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	3b01      	subs	r3, #1
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	430b      	orrs	r3, r1
 8006980:	4943      	ldr	r1, [pc, #268]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006982:	4313      	orrs	r3, r2
 8006984:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d17c      	bne.n	8006a86 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800698c:	4b40      	ldr	r3, [pc, #256]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a3f      	ldr	r2, [pc, #252]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006992:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006998:	f7fc f8f4 	bl	8002b84 <HAL_GetTick>
 800699c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800699e:	e009      	b.n	80069b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069a0:	f7fc f8f0 	bl	8002b84 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d902      	bls.n	80069b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	73fb      	strb	r3, [r7, #15]
        break;
 80069b2:	e005      	b.n	80069c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069b4:	4b36      	ldr	r3, [pc, #216]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1ef      	bne.n	80069a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d15f      	bne.n	8006a86 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d110      	bne.n	80069ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069cc:	4b30      	ldr	r3, [pc, #192]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80069d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6892      	ldr	r2, [r2, #8]
 80069dc:	0211      	lsls	r1, r2, #8
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68d2      	ldr	r2, [r2, #12]
 80069e2:	06d2      	lsls	r2, r2, #27
 80069e4:	430a      	orrs	r2, r1
 80069e6:	492a      	ldr	r1, [pc, #168]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	610b      	str	r3, [r1, #16]
 80069ec:	e027      	b.n	8006a3e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d112      	bne.n	8006a1a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069f4:	4b26      	ldr	r3, [pc, #152]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80069fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6892      	ldr	r2, [r2, #8]
 8006a04:	0211      	lsls	r1, r2, #8
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6912      	ldr	r2, [r2, #16]
 8006a0a:	0852      	lsrs	r2, r2, #1
 8006a0c:	3a01      	subs	r2, #1
 8006a0e:	0552      	lsls	r2, r2, #21
 8006a10:	430a      	orrs	r2, r1
 8006a12:	491f      	ldr	r1, [pc, #124]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	610b      	str	r3, [r1, #16]
 8006a18:	e011      	b.n	8006a3e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a1a:	4b1d      	ldr	r3, [pc, #116]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6892      	ldr	r2, [r2, #8]
 8006a2a:	0211      	lsls	r1, r2, #8
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6952      	ldr	r2, [r2, #20]
 8006a30:	0852      	lsrs	r2, r2, #1
 8006a32:	3a01      	subs	r2, #1
 8006a34:	0652      	lsls	r2, r2, #25
 8006a36:	430a      	orrs	r2, r1
 8006a38:	4915      	ldr	r1, [pc, #84]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a3e:	4b14      	ldr	r3, [pc, #80]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a13      	ldr	r2, [pc, #76]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4a:	f7fc f89b 	bl	8002b84 <HAL_GetTick>
 8006a4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a50:	e009      	b.n	8006a66 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a52:	f7fc f897 	bl	8002b84 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d902      	bls.n	8006a66 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	73fb      	strb	r3, [r7, #15]
          break;
 8006a64:	e005      	b.n	8006a72 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0ef      	beq.n	8006a52 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d106      	bne.n	8006a86 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	4903      	ldr	r1, [pc, #12]	; (8006a90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	40021000 	.word	0x40021000

08006a94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006aa2:	4b69      	ldr	r3, [pc, #420]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d018      	beq.n	8006ae0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006aae:	4b66      	ldr	r3, [pc, #408]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f003 0203 	and.w	r2, r3, #3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d10d      	bne.n	8006ada <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d009      	beq.n	8006ada <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006ac6:	4b60      	ldr	r3, [pc, #384]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	091b      	lsrs	r3, r3, #4
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
       ||
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d047      	beq.n	8006b6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
 8006ade:	e044      	b.n	8006b6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d018      	beq.n	8006b1a <RCCEx_PLLSAI2_Config+0x86>
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d825      	bhi.n	8006b38 <RCCEx_PLLSAI2_Config+0xa4>
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d002      	beq.n	8006af6 <RCCEx_PLLSAI2_Config+0x62>
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d009      	beq.n	8006b08 <RCCEx_PLLSAI2_Config+0x74>
 8006af4:	e020      	b.n	8006b38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006af6:	4b54      	ldr	r3, [pc, #336]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d11d      	bne.n	8006b3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b06:	e01a      	b.n	8006b3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b08:	4b4f      	ldr	r3, [pc, #316]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d116      	bne.n	8006b42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b18:	e013      	b.n	8006b42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b1a:	4b4b      	ldr	r3, [pc, #300]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10f      	bne.n	8006b46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b26:	4b48      	ldr	r3, [pc, #288]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d109      	bne.n	8006b46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b36:	e006      	b.n	8006b46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b3c:	e004      	b.n	8006b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b3e:	bf00      	nop
 8006b40:	e002      	b.n	8006b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b42:	bf00      	nop
 8006b44:	e000      	b.n	8006b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b46:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10d      	bne.n	8006b6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006b4e:	4b3e      	ldr	r3, [pc, #248]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6819      	ldr	r1, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	430b      	orrs	r3, r1
 8006b64:	4938      	ldr	r1, [pc, #224]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d166      	bne.n	8006c3e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b70:	4b35      	ldr	r3, [pc, #212]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a34      	ldr	r2, [pc, #208]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b7c:	f7fc f802 	bl	8002b84 <HAL_GetTick>
 8006b80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b82:	e009      	b.n	8006b98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b84:	f7fb fffe 	bl	8002b84 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d902      	bls.n	8006b98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	73fb      	strb	r3, [r7, #15]
        break;
 8006b96:	e005      	b.n	8006ba4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b98:	4b2b      	ldr	r3, [pc, #172]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1ef      	bne.n	8006b84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d149      	bne.n	8006c3e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d110      	bne.n	8006bd2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bb0:	4b25      	ldr	r3, [pc, #148]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006bb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	6892      	ldr	r2, [r2, #8]
 8006bc0:	0211      	lsls	r1, r2, #8
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	68d2      	ldr	r2, [r2, #12]
 8006bc6:	06d2      	lsls	r2, r2, #27
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	491f      	ldr	r1, [pc, #124]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	614b      	str	r3, [r1, #20]
 8006bd0:	e011      	b.n	8006bf6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bd2:	4b1d      	ldr	r3, [pc, #116]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006bda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6892      	ldr	r2, [r2, #8]
 8006be2:	0211      	lsls	r1, r2, #8
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6912      	ldr	r2, [r2, #16]
 8006be8:	0852      	lsrs	r2, r2, #1
 8006bea:	3a01      	subs	r2, #1
 8006bec:	0652      	lsls	r2, r2, #25
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	4915      	ldr	r1, [pc, #84]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006bf6:	4b14      	ldr	r3, [pc, #80]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a13      	ldr	r2, [pc, #76]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c02:	f7fb ffbf 	bl	8002b84 <HAL_GetTick>
 8006c06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c08:	e009      	b.n	8006c1e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c0a:	f7fb ffbb 	bl	8002b84 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d902      	bls.n	8006c1e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	73fb      	strb	r3, [r7, #15]
          break;
 8006c1c:	e005      	b.n	8006c2a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c1e:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0ef      	beq.n	8006c0a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d106      	bne.n	8006c3e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006c30:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c32:	695a      	ldr	r2, [r3, #20]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	4903      	ldr	r1, [pc, #12]	; (8006c48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40021000 	.word	0x40021000

08006c4c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b089      	sub	sp, #36	; 0x24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c68:	d10c      	bne.n	8006c84 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006c6a:	4b77      	ldr	r3, [pc, #476]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c70:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006c74:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c7c:	d112      	bne.n	8006ca4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006c7e:	4b73      	ldr	r3, [pc, #460]	; (8006e4c <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	e00f      	b.n	8006ca4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8a:	d10b      	bne.n	8006ca4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006c8c:	4b6e      	ldr	r3, [pc, #440]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c92:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006c96:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c9e:	d101      	bne.n	8006ca4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006ca0:	4b6a      	ldr	r3, [pc, #424]	; (8006e4c <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8006ca2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f040 80c6 	bne.w	8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cb6:	d003      	beq.n	8006cc0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cbe:	d13b      	bne.n	8006d38 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006cc0:	4b61      	ldr	r3, [pc, #388]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ccc:	f040 80b3 	bne.w	8006e36 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8006cd0:	4b5d      	ldr	r3, [pc, #372]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 80ac 	beq.w	8006e36 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006cde:	4b5a      	ldr	r3, [pc, #360]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	091b      	lsrs	r3, r3, #4
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	3301      	adds	r3, #1
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006cf2:	4b55      	ldr	r3, [pc, #340]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cfc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006cfe:	4b52      	ldr	r3, [pc, #328]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	0edb      	lsrs	r3, r3, #27
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006d10:	4b4d      	ldr	r3, [pc, #308]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8006d1c:	2311      	movs	r3, #17
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	e001      	b.n	8006d26 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8006d22:	2307      	movs	r3, #7
 8006d24:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	fb02 f203 	mul.w	r2, r2, r3
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d34:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006d36:	e07e      	b.n	8006e36 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d139      	bne.n	8006db2 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006d3e:	4b42      	ldr	r3, [pc, #264]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d4a:	d175      	bne.n	8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8006d4c:	4b3e      	ldr	r3, [pc, #248]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d06f      	beq.n	8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006d58:	4b3b      	ldr	r3, [pc, #236]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	091b      	lsrs	r3, r3, #4
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	3301      	adds	r3, #1
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006d6c:	4b36      	ldr	r3, [pc, #216]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	0a1b      	lsrs	r3, r3, #8
 8006d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d76:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006d78:	4b33      	ldr	r3, [pc, #204]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	0edb      	lsrs	r3, r3, #27
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006d8a:	4b2f      	ldr	r3, [pc, #188]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8006d96:	2311      	movs	r3, #17
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	e001      	b.n	8006da0 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8006d9c:	2307      	movs	r3, #7
 8006d9e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	fb02 f203 	mul.w	r2, r2, r3
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dae:	61fb      	str	r3, [r7, #28]
 8006db0:	e042      	b.n	8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006db8:	d003      	beq.n	8006dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dc0:	d13a      	bne.n	8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006dc2:	4b21      	ldr	r3, [pc, #132]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dce:	d133      	bne.n	8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8006dd0:	4b1d      	ldr	r3, [pc, #116]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d02d      	beq.n	8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006ddc:	4b1a      	ldr	r3, [pc, #104]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	091b      	lsrs	r3, r3, #4
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	3301      	adds	r3, #1
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dee:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006df0:	4b15      	ldr	r3, [pc, #84]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	0a1b      	lsrs	r3, r3, #8
 8006df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dfa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006dfc:	4b12      	ldr	r3, [pc, #72]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	0edb      	lsrs	r3, r3, #27
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10a      	bne.n	8006e24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006e0e:	4b0e      	ldr	r3, [pc, #56]	; (8006e48 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8006e1a:	2311      	movs	r3, #17
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	e001      	b.n	8006e24 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8006e20:	2307      	movs	r3, #7
 8006e22:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	fb02 f203 	mul.w	r2, r2, r3
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	e000      	b.n	8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006e36:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006e38:	69fb      	ldr	r3, [r7, #28]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3724      	adds	r7, #36	; 0x24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	40021000 	.word	0x40021000
 8006e4c:	001fff68 	.word	0x001fff68

08006e50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e022      	b.n	8006ea8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d105      	bne.n	8006e7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7f9 fd41 	bl	80008fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2203      	movs	r2, #3
 8006e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f814 	bl	8006eb0 <HAL_SD_InitCard>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e00a      	b.n	8006ea8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006eb0:	b5b0      	push	{r4, r5, r7, lr}
 8006eb2:	b08e      	sub	sp, #56	; 0x38
 8006eb4:	af04      	add	r7, sp, #16
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006ecc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006ed0:	f7fe ff34 	bl	8005d3c <HAL_RCCEx_GetPeriphCLKFreq>
 8006ed4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d109      	bne.n	8006ef0 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e07b      	b.n	8006fe8 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	09db      	lsrs	r3, r3, #7
 8006ef4:	4a3e      	ldr	r2, [pc, #248]	; (8006ff0 <HAL_SD_InitCard+0x140>)
 8006ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8006efa:	091b      	lsrs	r3, r3, #4
 8006efc:	3b02      	subs	r3, #2
 8006efe:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681d      	ldr	r5, [r3, #0]
 8006f04:	466c      	mov	r4, sp
 8006f06:	f107 0314 	add.w	r3, r7, #20
 8006f0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f12:	f107 0308 	add.w	r3, r7, #8
 8006f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f001 fc1f 	bl	800875c <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f2c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 fc5d 	bl	80087f2 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f46:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	3302      	adds	r3, #2
 8006f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006f54:	4a27      	ldr	r2, [pc, #156]	; (8006ff4 <HAL_SD_InitCard+0x144>)
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fb fe1c 	bl	8002b9c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 ffdd 	bl	8007f24 <SD_PowerON>
 8006f6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e02e      	b.n	8006fe8 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fefe 	bl	8007d8c <SD_InitCard>
 8006f90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00b      	beq.n	8006fb0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e01b      	b.n	8006fe8 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 fcad 	bl	8008918 <SDMMC_CmdBlockLength>
 8006fbe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00f      	beq.n	8006fe6 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a0b      	ldr	r2, [pc, #44]	; (8006ff8 <HAL_SD_InitCard+0x148>)
 8006fcc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3728      	adds	r7, #40	; 0x28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bdb0      	pop	{r4, r5, r7, pc}
 8006ff0:	014f8b59 	.word	0x014f8b59
 8006ff4:	00012110 	.word	0x00012110
 8006ff8:	004005ff 	.word	0x004005ff

08006ffc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08c      	sub	sp, #48	; 0x30
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d107      	bne.n	8007024 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e0a9      	b.n	8007178 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b01      	cmp	r3, #1
 800702e:	f040 80a2 	bne.w	8007176 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	441a      	add	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007042:	429a      	cmp	r2, r3
 8007044:	d907      	bls.n	8007056 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e090      	b.n	8007178 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2203      	movs	r2, #3
 800705a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2200      	movs	r2, #0
 8007064:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	4a45      	ldr	r2, [pc, #276]	; (8007180 <HAL_SD_ReadBlocks_DMA+0x184>)
 800706c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	4a44      	ldr	r2, [pc, #272]	; (8007184 <HAL_SD_ReadBlocks_DMA+0x188>)
 8007074:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	2200      	movs	r2, #0
 800707c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3380      	adds	r3, #128	; 0x80
 8007088:	4619      	mov	r1, r3
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	025b      	lsls	r3, r3, #9
 8007090:	089b      	lsrs	r3, r3, #2
 8007092:	f7fc f835 	bl	8003100 <HAL_DMA_Start_IT>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00f      	beq.n	80070bc <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a39      	ldr	r2, [pc, #228]	; (8007188 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e05d      	b.n	8007178 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0208 	orr.w	r2, r2, #8
 80070ca:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d002      	beq.n	80070da <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	025b      	lsls	r3, r3, #9
 80070d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	025b      	lsls	r3, r3, #9
 80070e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80070e6:	2390      	movs	r3, #144	; 0x90
 80070e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80070ea:	2302      	movs	r3, #2
 80070ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80070f2:	2301      	movs	r3, #1
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f107 0210 	add.w	r2, r7, #16
 80070fe:	4611      	mov	r1, r2
 8007100:	4618      	mov	r0, r3
 8007102:	f001 fbdd 	bl	80088c0 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d90a      	bls.n	8007122 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2282      	movs	r2, #130	; 0x82
 8007110:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007118:	4618      	mov	r0, r3
 800711a:	f001 fc41 	bl	80089a0 <SDMMC_CmdReadMultiBlock>
 800711e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007120:	e009      	b.n	8007136 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2281      	movs	r2, #129	; 0x81
 8007126:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800712e:	4618      	mov	r0, r3
 8007130:	f001 fc14 	bl	800895c <SDMMC_CmdReadSingleBlock>
 8007134:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	2b00      	cmp	r3, #0
 800713a:	d012      	beq.n	8007162 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a11      	ldr	r2, [pc, #68]	; (8007188 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8007142:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714a:	431a      	orrs	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e00a      	b.n	8007178 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007170:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	e000      	b.n	8007178 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007176:	2302      	movs	r3, #2
  }
}
 8007178:	4618      	mov	r0, r3
 800717a:	3730      	adds	r7, #48	; 0x30
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	08007ba7 	.word	0x08007ba7
 8007184:	08007c19 	.word	0x08007c19
 8007188:	004005ff 	.word	0x004005ff

0800718c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08c      	sub	sp, #48	; 0x30
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d107      	bne.n	80071b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e0ac      	b.n	800730e <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b01      	cmp	r3, #1
 80071be:	f040 80a5 	bne.w	800730c <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80071c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	441a      	add	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d907      	bls.n	80071e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e093      	b.n	800730e <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2203      	movs	r2, #3
 80071ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fa:	4a47      	ldr	r2, [pc, #284]	; (8007318 <HAL_SD_WriteBlocks_DMA+0x18c>)
 80071fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007202:	4a46      	ldr	r2, [pc, #280]	; (800731c <HAL_SD_WriteBlocks_DMA+0x190>)
 8007204:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720a:	2200      	movs	r2, #0
 800720c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	2b01      	cmp	r3, #1
 8007214:	d002      	beq.n	800721c <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8007216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007218:	025b      	lsls	r3, r3, #9
 800721a:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d90a      	bls.n	8007238 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	22a0      	movs	r2, #160	; 0xa0
 8007226:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800722e:	4618      	mov	r0, r3
 8007230:	f001 fbfa 	bl	8008a28 <SDMMC_CmdWriteMultiBlock>
 8007234:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007236:	e009      	b.n	800724c <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2290      	movs	r2, #144	; 0x90
 800723c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007244:	4618      	mov	r0, r3
 8007246:	f001 fbcd 	bl	80089e4 <SDMMC_CmdWriteSingleBlock>
 800724a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d012      	beq.n	8007278 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a32      	ldr	r2, [pc, #200]	; (8007320 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007258:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	431a      	orrs	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e04a      	b.n	800730e <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0208 	orr.w	r2, r2, #8
 8007286:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3380      	adds	r3, #128	; 0x80
 8007294:	461a      	mov	r2, r3
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	025b      	lsls	r3, r3, #9
 800729a:	089b      	lsrs	r3, r3, #2
 800729c:	f7fb ff30 	bl	8003100 <HAL_DMA_Start_IT>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d012      	beq.n	80072cc <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1d      	ldr	r2, [pc, #116]	; (8007320 <HAL_SD_WriteBlocks_DMA+0x194>)
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e020      	b.n	800730e <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80072cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	025b      	lsls	r3, r3, #9
 80072d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80072d8:	2390      	movs	r3, #144	; 0x90
 80072da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80072dc:	2300      	movs	r3, #0
 80072de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80072e4:	2301      	movs	r3, #1
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f107 0210 	add.w	r2, r7, #16
 80072f0:	4611      	mov	r1, r2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f001 fae4 	bl	80088c0 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f042 021a 	orr.w	r2, r2, #26
 8007306:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	e000      	b.n	800730e <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800730c:	2302      	movs	r3, #2
  }
}
 800730e:	4618      	mov	r0, r3
 8007310:	3730      	adds	r7, #48	; 0x30
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	08007b7d 	.word	0x08007b7d
 800731c:	08007c19 	.word	0x08007c19
 8007320:	004005ff 	.word	0x004005ff

08007324 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_SD_IRQHandler+0x2e>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f003 0308 	and.w	r3, r3, #8
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 f800 	bl	8008350 <SD_Read_IT>
 8007350:	e155      	b.n	80075fe <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 808f 	beq.w	8007480 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800736a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800737a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800737e:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0201 	bic.w	r2, r2, #1
 800738e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d039      	beq.n	800740e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d104      	bne.n	80073ae <HAL_SD_IRQHandler+0x8a>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f003 0320 	and.w	r3, r3, #32
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d011      	beq.n	80073d2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 fb5a 	bl	8008a6c <SDMMC_CmdStopTransfer>
 80073b8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d008      	beq.n	80073d2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f91f 	bl	8007610 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f240 523a 	movw	r2, #1338	; 0x53a
 80073da:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <HAL_SD_IRQHandler+0xda>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fb fab7 	bl	8002972 <HAL_SD_RxCpltCallback>
 8007404:	e0fb      	b.n	80075fe <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fb faa9 	bl	800295e <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800740c:	e0f7      	b.n	80075fe <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 80f2 	beq.w	80075fe <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b00      	cmp	r3, #0
 8007422:	d011      	beq.n	8007448 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4618      	mov	r0, r3
 800742a:	f001 fb1f 	bl	8008a6c <SDMMC_CmdStopTransfer>
 800742e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f8e4 	bl	8007610 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	f040 80d5 	bne.w	80075fe <HAL_SD_IRQHandler+0x2da>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	f040 80cf 	bne.w	80075fe <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0208 	bic.w	r2, r2, #8
 800746e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7fb fa70 	bl	800295e <HAL_SD_TxCpltCallback>
}
 800747e:	e0be      	b.n	80075fe <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d008      	beq.n	80074a0 <HAL_SD_IRQHandler+0x17c>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 ffaa 	bl	80083f2 <SD_Write_IT>
 800749e:	e0ae      	b.n	80075fe <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 80a7 	beq.w	80075fe <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d005      	beq.n	80074ca <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	f043 0202 	orr.w	r2, r3, #2
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d0:	f003 0308 	and.w	r3, r3, #8
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074dc:	f043 0208 	orr.w	r2, r3, #8
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d005      	beq.n	80074fe <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007504:	f003 0310 	and.w	r3, r3, #16
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	f043 0210 	orr.w	r2, r3, #16
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007520:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007530:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4618      	mov	r0, r3
 8007538:	f001 fa98 	bl	8008a6c <SDMMC_CmdStopTransfer>
 800753c:	4602      	mov	r2, r0
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f003 0308 	and.w	r3, r3, #8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f855 	bl	8007610 <HAL_SD_ErrorCallback>
}
 8007566:	e04a      	b.n	80075fe <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756e:	2b00      	cmp	r3, #0
 8007570:	d045      	beq.n	80075fe <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	2b00      	cmp	r3, #0
 800757a:	d104      	bne.n	8007586 <HAL_SD_IRQHandler+0x262>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f003 0320 	and.w	r3, r3, #32
 8007582:	2b00      	cmp	r3, #0
 8007584:	d011      	beq.n	80075aa <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758a:	4a1f      	ldr	r2, [pc, #124]	; (8007608 <HAL_SD_IRQHandler+0x2e4>)
 800758c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007592:	4618      	mov	r0, r3
 8007594:	f7fb fe52 	bl	800323c <HAL_DMA_Abort_IT>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d02f      	beq.n	80075fe <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fb84 	bl	8007cb0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80075a8:	e029      	b.n	80075fe <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <HAL_SD_IRQHandler+0x29a>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d011      	beq.n	80075e2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	4a12      	ldr	r2, [pc, #72]	; (800760c <HAL_SD_IRQHandler+0x2e8>)
 80075c4:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fb fe36 	bl	800323c <HAL_DMA_Abort_IT>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d013      	beq.n	80075fe <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fb9f 	bl	8007d1e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80075e0:	e00d      	b.n	80075fe <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fb f9a7 	bl	800294a <HAL_SD_AbortCallback>
}
 80075fc:	e7ff      	b.n	80075fe <HAL_SD_IRQHandler+0x2da>
 80075fe:	bf00      	nop
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	08007cb1 	.word	0x08007cb1
 800760c:	08007d1f 	.word	0x08007d1f

08007610 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007632:	0f9b      	lsrs	r3, r3, #30
 8007634:	b2da      	uxtb	r2, r3
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800763e:	0e9b      	lsrs	r3, r3, #26
 8007640:	b2db      	uxtb	r3, r3
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	b2da      	uxtb	r2, r3
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007650:	0e1b      	lsrs	r3, r3, #24
 8007652:	b2db      	uxtb	r3, r3
 8007654:	f003 0303 	and.w	r3, r3, #3
 8007658:	b2da      	uxtb	r2, r3
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007662:	0c1b      	lsrs	r3, r3, #16
 8007664:	b2da      	uxtb	r2, r3
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	b2da      	uxtb	r2, r3
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800767a:	b2da      	uxtb	r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007684:	0d1b      	lsrs	r3, r3, #20
 8007686:	b29a      	uxth	r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007690:	0c1b      	lsrs	r3, r3, #16
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	b2da      	uxtb	r2, r3
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076a2:	0bdb      	lsrs	r3, r3, #15
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076b4:	0b9b      	lsrs	r3, r3, #14
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076c6:	0b5b      	lsrs	r3, r3, #13
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076d8:	0b1b      	lsrs	r3, r3, #12
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2200      	movs	r2, #0
 80076ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d163      	bne.n	80077bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f8:	009a      	lsls	r2, r3, #2
 80076fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80076fe:	4013      	ands	r3, r2
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007704:	0f92      	lsrs	r2, r2, #30
 8007706:	431a      	orrs	r2, r3
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007710:	0edb      	lsrs	r3, r3, #27
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	b2da      	uxtb	r2, r3
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007722:	0e1b      	lsrs	r3, r3, #24
 8007724:	b2db      	uxtb	r3, r3
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	b2da      	uxtb	r2, r3
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007734:	0d5b      	lsrs	r3, r3, #21
 8007736:	b2db      	uxtb	r3, r3
 8007738:	f003 0307 	and.w	r3, r3, #7
 800773c:	b2da      	uxtb	r2, r3
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007746:	0c9b      	lsrs	r3, r3, #18
 8007748:	b2db      	uxtb	r3, r3
 800774a:	f003 0307 	and.w	r3, r3, #7
 800774e:	b2da      	uxtb	r2, r3
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007758:	0bdb      	lsrs	r3, r3, #15
 800775a:	b2db      	uxtb	r3, r3
 800775c:	f003 0307 	and.w	r3, r3, #7
 8007760:	b2da      	uxtb	r2, r3
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	1c5a      	adds	r2, r3, #1
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	7e1b      	ldrb	r3, [r3, #24]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	3302      	adds	r3, #2
 800777c:	2201      	movs	r2, #1
 800777e:	fa02 f303 	lsl.w	r3, r2, r3
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007786:	fb02 f203 	mul.w	r2, r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	7a1b      	ldrb	r3, [r3, #8]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	2201      	movs	r2, #1
 800779a:	409a      	lsls	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80077a8:	0a52      	lsrs	r2, r2, #9
 80077aa:	fb02 f203 	mul.w	r2, r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077b8:	661a      	str	r2, [r3, #96]	; 0x60
 80077ba:	e031      	b.n	8007820 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d11d      	bne.n	8007800 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c8:	041b      	lsls	r3, r3, #16
 80077ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d2:	0c1b      	lsrs	r3, r3, #16
 80077d4:	431a      	orrs	r2, r3
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	3301      	adds	r3, #1
 80077e0:	029a      	lsls	r2, r3, #10
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	661a      	str	r2, [r3, #96]	; 0x60
 80077fe:	e00f      	b.n	8007820 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a58      	ldr	r2, [pc, #352]	; (8007968 <HAL_SD_GetCardCSD+0x344>)
 8007806:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e09d      	b.n	800795c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007824:	0b9b      	lsrs	r3, r3, #14
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	b2da      	uxtb	r2, r3
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007836:	09db      	lsrs	r3, r3, #7
 8007838:	b2db      	uxtb	r3, r3
 800783a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800783e:	b2da      	uxtb	r2, r3
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007848:	b2db      	uxtb	r3, r3
 800784a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800784e:	b2da      	uxtb	r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007858:	0fdb      	lsrs	r3, r3, #31
 800785a:	b2da      	uxtb	r2, r3
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007864:	0f5b      	lsrs	r3, r3, #29
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0303 	and.w	r3, r3, #3
 800786c:	b2da      	uxtb	r2, r3
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007876:	0e9b      	lsrs	r3, r3, #26
 8007878:	b2db      	uxtb	r3, r3
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	b2da      	uxtb	r2, r3
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007888:	0d9b      	lsrs	r3, r3, #22
 800788a:	b2db      	uxtb	r3, r3
 800788c:	f003 030f 	and.w	r3, r3, #15
 8007890:	b2da      	uxtb	r2, r3
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789a:	0d5b      	lsrs	r3, r3, #21
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b6:	0c1b      	lsrs	r3, r3, #16
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ca:	0bdb      	lsrs	r3, r3, #15
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078de:	0b9b      	lsrs	r3, r3, #14
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f2:	0b5b      	lsrs	r3, r3, #13
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007906:	0b1b      	lsrs	r3, r3, #12
 8007908:	b2db      	uxtb	r3, r3
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	b2da      	uxtb	r2, r3
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791a:	0a9b      	lsrs	r3, r3, #10
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	b2da      	uxtb	r2, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792e:	0a1b      	lsrs	r3, r3, #8
 8007930:	b2db      	uxtb	r3, r3
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	b2da      	uxtb	r2, r3
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007942:	085b      	lsrs	r3, r3, #1
 8007944:	b2db      	uxtb	r3, r3
 8007946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800794a:	b2da      	uxtb	r2, r3
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	004005ff 	.word	0x004005ff

0800796c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80079c4:	b5b0      	push	{r4, r5, r7, lr}
 80079c6:	b090      	sub	sp, #64	; 0x40
 80079c8:	af04      	add	r7, sp, #16
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2203      	movs	r2, #3
 80079d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d02e      	beq.n	8007a42 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ea:	d106      	bne.n	80079fa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	639a      	str	r2, [r3, #56]	; 0x38
 80079f8:	e029      	b.n	8007a4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a00:	d10a      	bne.n	8007a18 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fb44 	bl	8008090 <SD_WideBus_Enable>
 8007a08:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	639a      	str	r2, [r3, #56]	; 0x38
 8007a16:	e01a      	b.n	8007a4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fb81 	bl	8008126 <SD_WideBus_Disable>
 8007a24:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	639a      	str	r2, [r3, #56]	; 0x38
 8007a32:	e00c      	b.n	8007a4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38
 8007a40:	e005      	b.n	8007a4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d007      	beq.n	8007a66 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a35      	ldr	r2, [pc, #212]	; (8007b30 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007a64:	e042      	b.n	8007aec <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007a66:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007a6a:	f7fe f967 	bl	8005d3c <HAL_RCCEx_GetPeriphCLKFreq>
 8007a6e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d031      	beq.n	8007ada <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	3302      	adds	r3, #2
 8007a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9e:	4a25      	ldr	r2, [pc, #148]	; (8007b34 <HAL_SD_ConfigWideBusOperation+0x170>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d907      	bls.n	8007ab4 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	4a24      	ldr	r2, [pc, #144]	; (8007b38 <HAL_SD_ConfigWideBusOperation+0x174>)
 8007aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aac:	0ddb      	lsrs	r3, r3, #23
 8007aae:	3b02      	subs	r3, #2
 8007ab0:	623b      	str	r3, [r7, #32]
 8007ab2:	e002      	b.n	8007aba <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681d      	ldr	r5, [r3, #0]
 8007abe:	466c      	mov	r4, sp
 8007ac0:	f107 0318 	add.w	r3, r7, #24
 8007ac4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ac8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007acc:	f107 030c 	add.w	r3, r7, #12
 8007ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 fe42 	bl	800875c <SDMMC_Init>
 8007ad8:	e008      	b.n	8007aec <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 ff0f 	bl	8008918 <SDMMC_CmdBlockLength>
 8007afa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00c      	beq.n	8007b1c <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a0a      	ldr	r2, [pc, #40]	; (8007b30 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8007b08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007b24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3730      	adds	r7, #48	; 0x30
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b30:	004005ff 	.word	0x004005ff
 8007b34:	017d7840 	.word	0x017d7840
 8007b38:	55e63b89 	.word	0x55e63b89

08007b3c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007b48:	f107 030c 	add.w	r3, r7, #12
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa76 	bl	8008040 <SD_SendStatus>
 8007b54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d005      	beq.n	8007b68 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	431a      	orrs	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	0a5b      	lsrs	r3, r3, #9
 8007b6c:	f003 030f 	and.w	r3, r3, #15
 8007b70:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007b72:	693b      	ldr	r3, [r7, #16]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b98:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb8:	2b82      	cmp	r3, #130	; 0x82
 8007bba:	d111      	bne.n	8007be0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 ff53 	bl	8008a6c <SDMMC_CmdStopTransfer>
 8007bc6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d008      	beq.n	8007be0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff fd18 	bl	8007610 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0208 	bic.w	r2, r2, #8
 8007bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f240 523a 	movw	r2, #1338	; 0x53a
 8007bf8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f7fa feb2 	bl	8002972 <HAL_SD_RxCpltCallback>
#endif
}
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c24:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2c:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c34:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d002      	beq.n	8007c42 <SD_DMAError+0x2a>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d12d      	bne.n	8007c9e <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a19      	ldr	r2, [pc, #100]	; (8007cac <SD_DMAError+0x94>)
 8007c48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007c58:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8007c66:	6978      	ldr	r0, [r7, #20]
 8007c68:	f7ff ff68 	bl	8007b3c <HAL_SD_GetCardState>
 8007c6c:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b06      	cmp	r3, #6
 8007c72:	d002      	beq.n	8007c7a <SD_DMAError+0x62>
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b05      	cmp	r3, #5
 8007c78:	d10a      	bne.n	8007c90 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 fef4 	bl	8008a6c <SDMMC_CmdStopTransfer>
 8007c84:	4602      	mov	r2, r0
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8007c9e:	6978      	ldr	r0, [r7, #20]
 8007ca0:	f7ff fcb6 	bl	8007610 <HAL_SD_ErrorCallback>
#endif
}
 8007ca4:	bf00      	nop
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	004005ff 	.word	0x004005ff

08007cb0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f240 523a 	movw	r2, #1338	; 0x53a
 8007cc6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7ff ff37 	bl	8007b3c <HAL_SD_GetCardState>
 8007cce:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b06      	cmp	r3, #6
 8007ce2:	d002      	beq.n	8007cea <SD_DMATxAbort+0x3a>
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b05      	cmp	r3, #5
 8007ce8:	d10a      	bne.n	8007d00 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 febc 	bl	8008a6c <SDMMC_CmdStopTransfer>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d103      	bne.n	8007d10 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7fa fe1e 	bl	800294a <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007d0e:	e002      	b.n	8007d16 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff fc7d 	bl	8007610 <HAL_SD_ErrorCallback>
}
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d34:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff ff00 	bl	8007b3c <HAL_SD_GetCardState>
 8007d3c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b06      	cmp	r3, #6
 8007d50:	d002      	beq.n	8007d58 <SD_DMARxAbort+0x3a>
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	d10a      	bne.n	8007d6e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fe85 	bl	8008a6c <SDMMC_CmdStopTransfer>
 8007d62:	4602      	mov	r2, r0
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d103      	bne.n	8007d7e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f7fa fde7 	bl	800294a <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007d7c:	e002      	b.n	8007d84 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f7ff fc46 	bl	8007610 <HAL_SD_ErrorCallback>
}
 8007d84:	bf00      	nop
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d8c:	b5b0      	push	{r4, r5, r7, lr}
 8007d8e:	b094      	sub	sp, #80	; 0x50
 8007d90:	af04      	add	r7, sp, #16
 8007d92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007d94:	2301      	movs	r3, #1
 8007d96:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fd37 	bl	8008810 <SDMMC_GetPowerState>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007da8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007dac:	e0b6      	b.n	8007f1c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d02f      	beq.n	8007e16 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 ff60 	bl	8008c80 <SDMMC_CmdSendCID>
 8007dc0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <SD_InitCard+0x40>
    {
      return errorstate;
 8007dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dca:	e0a7      	b.n	8007f1c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fd61 	bl	800889a <SDMMC_GetResponse>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2104      	movs	r1, #4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 fd58 	bl	800889a <SDMMC_GetResponse>
 8007dea:	4602      	mov	r2, r0
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2108      	movs	r1, #8
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fd4f 	bl	800889a <SDMMC_GetResponse>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	210c      	movs	r1, #12
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fd46 	bl	800889a <SDMMC_GetResponse>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d00d      	beq.n	8007e3a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f107 020e 	add.w	r2, r7, #14
 8007e26:	4611      	mov	r1, r2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 ff66 	bl	8008cfa <SDMMC_CmdSetRelAdd>
 8007e2e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <SD_InitCard+0xae>
    {
      return errorstate;
 8007e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e38:	e070      	b.n	8007f1c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d036      	beq.n	8007eb0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007e42:	89fb      	ldrh	r3, [r7, #14]
 8007e44:	461a      	mov	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e52:	041b      	lsls	r3, r3, #16
 8007e54:	4619      	mov	r1, r3
 8007e56:	4610      	mov	r0, r2
 8007e58:	f000 ff30 	bl	8008cbc <SDMMC_CmdSendCSD>
 8007e5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e66:	e059      	b.n	8007f1c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fd13 	bl	800889a <SDMMC_GetResponse>
 8007e74:	4602      	mov	r2, r0
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2104      	movs	r1, #4
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fd0a 	bl	800889a <SDMMC_GetResponse>
 8007e86:	4602      	mov	r2, r0
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2108      	movs	r1, #8
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fd01 	bl	800889a <SDMMC_GetResponse>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	210c      	movs	r1, #12
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fcf8 	bl	800889a <SDMMC_GetResponse>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2104      	movs	r1, #4
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fcef 	bl	800889a <SDMMC_GetResponse>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	0d1a      	lsrs	r2, r3, #20
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007ec4:	f107 0310 	add.w	r3, r7, #16
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff fbaa 	bl	8007624 <HAL_SD_GetCardCSD>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ed6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007eda:	e01f      	b.n	8007f1c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6819      	ldr	r1, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee4:	041b      	lsls	r3, r3, #16
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	4608      	mov	r0, r1
 8007eee:	f000 fddf 	bl	8008ab0 <SDMMC_CmdSelDesel>
 8007ef2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <SD_InitCard+0x172>
  {
    return errorstate;
 8007efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efc:	e00e      	b.n	8007f1c <SD_InitCard+0x190>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681d      	ldr	r5, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	466c      	mov	r4, sp
 8007f06:	f103 0210 	add.w	r2, r3, #16
 8007f0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f10:	3304      	adds	r3, #4
 8007f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f14:	4628      	mov	r0, r5
 8007f16:	f000 fc21 	bl	800875c <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3740      	adds	r7, #64	; 0x40
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bdb0      	pop	{r4, r5, r7, pc}

08007f24 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	2300      	movs	r3, #0
 8007f36:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 fdda 	bl	8008af6 <SDMMC_CmdGoIdleState>
 8007f42:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <SD_PowerON+0x2a>
  {
    return errorstate;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	e072      	b.n	8008034 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fded 	bl	8008b32 <SDMMC_CmdOperCond>
 8007f58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00d      	beq.n	8007f7c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fdc3 	bl	8008af6 <SDMMC_CmdGoIdleState>
 8007f70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d004      	beq.n	8007f82 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	e05b      	b.n	8008034 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d137      	bne.n	8007ffa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2100      	movs	r1, #0
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fded 	bl	8008b70 <SDMMC_CmdAppCommand>
 8007f96:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d02d      	beq.n	8007ffa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007fa2:	e047      	b.n	8008034 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fde0 	bl	8008b70 <SDMMC_CmdAppCommand>
 8007fb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <SD_PowerON+0x98>
    {
      return errorstate;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	e03b      	b.n	8008034 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	491e      	ldr	r1, [pc, #120]	; (800803c <SD_PowerON+0x118>)
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 fdf6 	bl	8008bb4 <SDMMC_CmdAppOperCommand>
 8007fc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007fd4:	e02e      	b.n	8008034 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2100      	movs	r1, #0
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fc5c 	bl	800889a <SDMMC_GetResponse>
 8007fe2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	0fdb      	lsrs	r3, r3, #31
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <SD_PowerON+0xcc>
 8007fec:	2301      	movs	r3, #1
 8007fee:	e000      	b.n	8007ff2 <SD_PowerON+0xce>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]

    count++;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008000:	4293      	cmp	r3, r2
 8008002:	d802      	bhi.n	800800a <SD_PowerON+0xe6>
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d0cc      	beq.n	8007fa4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008010:	4293      	cmp	r3, r2
 8008012:	d902      	bls.n	800801a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008014:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008018:	e00c      	b.n	8008034 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	645a      	str	r2, [r3, #68]	; 0x44
 800802a:	e002      	b.n	8008032 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	c1100000 	.word	0xc1100000

08008040 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008050:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008054:	e018      	b.n	8008088 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800805e:	041b      	lsls	r3, r3, #16
 8008060:	4619      	mov	r1, r3
 8008062:	4610      	mov	r0, r2
 8008064:	f000 fe6a 	bl	8008d3c <SDMMC_CmdSendStatus>
 8008068:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	e009      	b.n	8008088 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2100      	movs	r1, #0
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fc0d 	bl	800889a <SDMMC_GetResponse>
 8008080:	4602      	mov	r2, r0
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008098:	2300      	movs	r3, #0
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	2300      	movs	r3, #0
 800809e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2100      	movs	r1, #0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fbf7 	bl	800889a <SDMMC_GetResponse>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080b6:	d102      	bne.n	80080be <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080bc:	e02f      	b.n	800811e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80080be:	f107 030c 	add.w	r3, r7, #12
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f879 	bl	80081bc <SD_FindSCR>
 80080ca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	e023      	b.n	800811e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01c      	beq.n	800811a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e8:	041b      	lsls	r3, r3, #16
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f000 fd3f 	bl	8008b70 <SDMMC_CmdAppCommand>
 80080f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	e00f      	b.n	800811e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2102      	movs	r1, #2
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fd78 	bl	8008bfa <SDMMC_CmdBusWidth>
 800810a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	e003      	b.n	800811e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008116:	2300      	movs	r3, #0
 8008118:	e001      	b.n	800811e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800811a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b086      	sub	sp, #24
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	2300      	movs	r3, #0
 8008134:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2100      	movs	r1, #0
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fbac 	bl	800889a <SDMMC_GetResponse>
 8008142:	4603      	mov	r3, r0
 8008144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800814c:	d102      	bne.n	8008154 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800814e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008152:	e02f      	b.n	80081b4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008154:	f107 030c 	add.w	r3, r7, #12
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f82e 	bl	80081bc <SD_FindSCR>
 8008160:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	e023      	b.n	80081b4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d01c      	beq.n	80081b0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817e:	041b      	lsls	r3, r3, #16
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f000 fcf4 	bl	8008b70 <SDMMC_CmdAppCommand>
 8008188:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	e00f      	b.n	80081b4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fd2d 	bl	8008bfa <SDMMC_CmdBusWidth>
 80081a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	e003      	b.n	80081b4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80081ac:	2300      	movs	r3, #0
 80081ae:	e001      	b.n	80081b4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80081bc:	b590      	push	{r4, r7, lr}
 80081be:	b08f      	sub	sp, #60	; 0x3c
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081c6:	f7fa fcdd 	bl	8002b84 <HAL_GetTick>
 80081ca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80081cc:	2300      	movs	r3, #0
 80081ce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80081d0:	2300      	movs	r3, #0
 80081d2:	60bb      	str	r3, [r7, #8]
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2108      	movs	r1, #8
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fb98 	bl	8008918 <SDMMC_CmdBlockLength>
 80081e8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	e0a9      	b.n	8008348 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fc:	041b      	lsls	r3, r3, #16
 80081fe:	4619      	mov	r1, r3
 8008200:	4610      	mov	r0, r2
 8008202:	f000 fcb5 	bl	8008b70 <SDMMC_CmdAppCommand>
 8008206:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <SD_FindSCR+0x56>
  {
    return errorstate;
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008210:	e09a      	b.n	8008348 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008216:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008218:	2308      	movs	r3, #8
 800821a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800821c:	2330      	movs	r3, #48	; 0x30
 800821e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008220:	2302      	movs	r3, #2
 8008222:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008224:	2300      	movs	r3, #0
 8008226:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008228:	2301      	movs	r3, #1
 800822a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f107 0210 	add.w	r2, r7, #16
 8008234:	4611      	mov	r1, r2
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fb42 	bl	80088c0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fcfc 	bl	8008c3e <SDMMC_CmdSendSCR>
 8008246:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	2b00      	cmp	r3, #0
 800824c:	d022      	beq.n	8008294 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008250:	e07a      	b.n	8008348 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00e      	beq.n	800827e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6819      	ldr	r1, [r3, #0]
 8008264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	f107 0208 	add.w	r2, r7, #8
 800826c:	18d4      	adds	r4, r2, r3
 800826e:	4608      	mov	r0, r1
 8008270:	f000 faa1 	bl	80087b6 <SDMMC_ReadFIFO>
 8008274:	4603      	mov	r3, r0
 8008276:	6023      	str	r3, [r4, #0]
      index++;
 8008278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827a:	3301      	adds	r3, #1
 800827c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800827e:	f7fa fc81 	bl	8002b84 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800828c:	d102      	bne.n	8008294 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800828e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008292:	e059      	b.n	8008348 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800829a:	f240 432a 	movw	r3, #1066	; 0x42a
 800829e:	4013      	ands	r3, r2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d0d6      	beq.n	8008252 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082aa:	f003 0308 	and.w	r3, r3, #8
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d005      	beq.n	80082be <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2208      	movs	r2, #8
 80082b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80082ba:	2308      	movs	r3, #8
 80082bc:	e044      	b.n	8008348 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d005      	beq.n	80082d8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2202      	movs	r2, #2
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80082d4:	2302      	movs	r3, #2
 80082d6:	e037      	b.n	8008348 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d005      	beq.n	80082f2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2220      	movs	r2, #32
 80082ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80082ee:	2320      	movs	r3, #32
 80082f0:	e02a      	b.n	8008348 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f240 523a 	movw	r2, #1338	; 0x53a
 80082fa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	061a      	lsls	r2, r3, #24
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	021b      	lsls	r3, r3, #8
 8008304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008308:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	0a1b      	lsrs	r3, r3, #8
 800830e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008312:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	0e1b      	lsrs	r3, r3, #24
 8008318:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800831a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831c:	601a      	str	r2, [r3, #0]
    scr++;
 800831e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008320:	3304      	adds	r3, #4
 8008322:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	061a      	lsls	r2, r3, #24
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	021b      	lsls	r3, r3, #8
 800832c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008330:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	0a1b      	lsrs	r3, r3, #8
 8008336:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800833a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	0e1b      	lsrs	r3, r3, #24
 8008340:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	373c      	adds	r7, #60	; 0x3c
 800834c:	46bd      	mov	sp, r7
 800834e:	bd90      	pop	{r4, r7, pc}

08008350 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d03f      	beq.n	80083ea <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800836a:	2300      	movs	r3, #0
 800836c:	617b      	str	r3, [r7, #20]
 800836e:	e033      	b.n	80083d8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f000 fa1e 	bl	80087b6 <SDMMC_ReadFIFO>
 800837a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	b2da      	uxtb	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3301      	adds	r3, #1
 8008388:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	3b01      	subs	r3, #1
 800838e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	0a1b      	lsrs	r3, r3, #8
 8008394:	b2da      	uxtb	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	701a      	strb	r2, [r3, #0]
      tmp++;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3301      	adds	r3, #1
 800839e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	0c1b      	lsrs	r3, r3, #16
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3301      	adds	r3, #1
 80083b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	0e1b      	lsrs	r3, r3, #24
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3301      	adds	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	3b01      	subs	r3, #1
 80083d0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	3301      	adds	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2b07      	cmp	r3, #7
 80083dc:	d9c8      	bls.n	8008370 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80083ea:	bf00      	nop
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b086      	sub	sp, #24
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d043      	beq.n	8008494 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800840c:	2300      	movs	r3, #0
 800840e:	617b      	str	r3, [r7, #20]
 8008410:	e037      	b.n	8008482 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3301      	adds	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	3b01      	subs	r3, #1
 8008422:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	021a      	lsls	r2, r3, #8
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	4313      	orrs	r3, r2
 800842e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3301      	adds	r3, #1
 8008434:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	3b01      	subs	r3, #1
 800843a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	041a      	lsls	r2, r3, #16
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	4313      	orrs	r3, r2
 8008446:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	3b01      	subs	r3, #1
 8008452:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	061a      	lsls	r2, r3, #24
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	4313      	orrs	r3, r2
 800845e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	3301      	adds	r3, #1
 8008464:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	3b01      	subs	r3, #1
 800846a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f107 0208 	add.w	r2, r7, #8
 8008474:	4611      	mov	r1, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f9aa 	bl	80087d0 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	3301      	adds	r3, #1
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b07      	cmp	r3, #7
 8008486:	d9c4      	bls.n	8008412 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008494:	bf00      	nop
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e038      	b.n	8008524 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d106      	bne.n	80084cc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f7f8 fb6e 	bl	8000ba8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3308      	adds	r3, #8
 80084d4:	4619      	mov	r1, r3
 80084d6:	4610      	mov	r0, r2
 80084d8:	f000 f828 	bl	800852c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6818      	ldr	r0, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	461a      	mov	r2, r3
 80084e6:	68b9      	ldr	r1, [r7, #8]
 80084e8:	f000 f8b0 	bl	800864c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6858      	ldr	r0, [r3, #4]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	f000 f8f7 	bl	80086ec <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	6892      	ldr	r2, [r2, #8]
 8008506:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	6892      	ldr	r2, [r2, #8]
 8008512:	f041 0101 	orr.w	r1, r1, #1
 8008516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	6812      	ldr	r2, [r2, #0]
 8008544:	f023 0101 	bic.w	r1, r3, #1
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	2b08      	cmp	r3, #8
 8008554:	d102      	bne.n	800855c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008556:	2340      	movs	r3, #64	; 0x40
 8008558:	617b      	str	r3, [r7, #20]
 800855a:	e001      	b.n	8008560 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800855c:	2300      	movs	r3, #0
 800855e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800856c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008572:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008578:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800857e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008584:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800858a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008590:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8008596:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800859c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80085a2:	4313      	orrs	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80085c4:	4b20      	ldr	r3, [pc, #128]	; (8008648 <FMC_NORSRAM_Init+0x11c>)
 80085c6:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085ce:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085d6:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80085de:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	43db      	mvns	r3, r3
 80085ee:	ea02 0103 	and.w	r1, r2, r3
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	4319      	orrs	r1, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008608:	d10c      	bne.n	8008624 <FMC_NORSRAM_Init+0xf8>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	431a      	orrs	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d006      	beq.n	800863a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008634:	431a      	orrs	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	371c      	adds	r7, #28
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	0008fb7f 	.word	0x0008fb7f

0800864c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008662:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	431a      	orrs	r2, r3
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	431a      	orrs	r2, r3
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	041b      	lsls	r3, r3, #16
 8008680:	431a      	orrs	r2, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	3b01      	subs	r3, #1
 8008688:	051b      	lsls	r3, r3, #20
 800868a:	431a      	orrs	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	3b02      	subs	r3, #2
 8008692:	061b      	lsls	r3, r3, #24
 8008694:	431a      	orrs	r2, r3
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	4313      	orrs	r3, r2
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	3201      	adds	r2, #1
 80086a0:	4319      	orrs	r1, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086b4:	d113      	bne.n	80086de <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086be:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	051b      	lsls	r3, r3, #20
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	431a      	orrs	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008700:	d11d      	bne.n	800873e <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800870a:	4b13      	ldr	r3, [pc, #76]	; (8008758 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800870c:	4013      	ands	r3, r2
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	6811      	ldr	r1, [r2, #0]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	6852      	ldr	r2, [r2, #4]
 8008716:	0112      	lsls	r2, r2, #4
 8008718:	4311      	orrs	r1, r2
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	6892      	ldr	r2, [r2, #8]
 800871e:	0212      	lsls	r2, r2, #8
 8008720:	4311      	orrs	r1, r2
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	69d2      	ldr	r2, [r2, #28]
 8008726:	4311      	orrs	r1, r2
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	6912      	ldr	r2, [r2, #16]
 800872c:	0412      	lsls	r2, r2, #16
 800872e:	430a      	orrs	r2, r1
 8008730:	ea43 0102 	orr.w	r1, r3, r2
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800873c:	e005      	b.n	800874a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	cff00000 	.word	0xcff00000

0800875c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800875c:	b084      	sub	sp, #16
 800875e:	b480      	push	{r7}
 8008760:	b085      	sub	sp, #20
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	f107 001c 	add.w	r0, r7, #28
 800876a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800877a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800877e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008782:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008786:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800878a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800879a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	431a      	orrs	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	b004      	add	sp, #16
 80087b4:	4770      	bx	lr

080087b6 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2203      	movs	r2, #3
 80087fe:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008800:	2002      	movs	r0, #2
 8008802:	f7fa f9cb 	bl	8002b9c <HAL_Delay>

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0303 	and.w	r3, r3, #3
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800884a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008850:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008856:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	4313      	orrs	r3, r2
 800885c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008866:	f023 030f 	bic.w	r3, r3, #15
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	b2db      	uxtb	r3, r3
}
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800889a:	b480      	push	{r7}
 800889c:	b085      	sub	sp, #20
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3314      	adds	r3, #20
 80088a8:	461a      	mov	r2, r3
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	4413      	add	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	685a      	ldr	r2, [r3, #4]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80088e6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80088ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80088f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	431a      	orrs	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800890a:	2300      	movs	r3, #0

}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008926:	2310      	movs	r3, #16
 8008928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800892a:	2340      	movs	r3, #64	; 0x40
 800892c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800892e:	2300      	movs	r3, #0
 8008930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008938:	f107 0308 	add.w	r3, r7, #8
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7ff ff74 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008944:	f241 3288 	movw	r2, #5000	; 0x1388
 8008948:	2110      	movs	r1, #16
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa18 	bl	8008d80 <SDMMC_GetCmdResp1>
 8008950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008952:	69fb      	ldr	r3, [r7, #28]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3720      	adds	r7, #32
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800896a:	2311      	movs	r3, #17
 800896c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800896e:	2340      	movs	r3, #64	; 0x40
 8008970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800897a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800897c:	f107 0308 	add.w	r3, r7, #8
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff ff52 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008988:	f241 3288 	movw	r2, #5000	; 0x1388
 800898c:	2111      	movs	r1, #17
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f9f6 	bl	8008d80 <SDMMC_GetCmdResp1>
 8008994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008996:	69fb      	ldr	r3, [r7, #28]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3720      	adds	r7, #32
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80089ae:	2312      	movs	r3, #18
 80089b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089b2:	2340      	movs	r3, #64	; 0x40
 80089b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089c0:	f107 0308 	add.w	r3, r7, #8
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff ff30 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80089cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d0:	2112      	movs	r1, #18
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f9d4 	bl	8008d80 <SDMMC_GetCmdResp1>
 80089d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089da:	69fb      	ldr	r3, [r7, #28]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3720      	adds	r7, #32
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b088      	sub	sp, #32
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80089f2:	2318      	movs	r3, #24
 80089f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089f6:	2340      	movs	r3, #64	; 0x40
 80089f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a04:	f107 0308 	add.w	r3, r7, #8
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff ff0e 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a14:	2118      	movs	r1, #24
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f9b2 	bl	8008d80 <SDMMC_GetCmdResp1>
 8008a1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a1e:	69fb      	ldr	r3, [r7, #28]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3720      	adds	r7, #32
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008a36:	2319      	movs	r3, #25
 8008a38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a3a:	2340      	movs	r3, #64	; 0x40
 8008a3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a48:	f107 0308 	add.w	r3, r7, #8
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff feec 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a58:	2119      	movs	r1, #25
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f990 	bl	8008d80 <SDMMC_GetCmdResp1>
 8008a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a62:	69fb      	ldr	r3, [r7, #28]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3720      	adds	r7, #32
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008a78:	230c      	movs	r3, #12
 8008a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a7c:	2340      	movs	r3, #64	; 0x40
 8008a7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a80:	2300      	movs	r3, #0
 8008a82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a88:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a8a:	f107 0308 	add.w	r3, r7, #8
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff fecb 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008a96:	4a05      	ldr	r2, [pc, #20]	; (8008aac <SDMMC_CmdStopTransfer+0x40>)
 8008a98:	210c      	movs	r1, #12
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f970 	bl	8008d80 <SDMMC_GetCmdResp1>
 8008aa0:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008aa2:	69fb      	ldr	r3, [r7, #28]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3720      	adds	r7, #32
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	05f5e100 	.word	0x05f5e100

08008ab0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08a      	sub	sp, #40	; 0x28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008ac0:	2307      	movs	r3, #7
 8008ac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ac4:	2340      	movs	r3, #64	; 0x40
 8008ac6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ad0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ad2:	f107 0310 	add.w	r3, r7, #16
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f7ff fea7 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ae2:	2107      	movs	r1, #7
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f94b 	bl	8008d80 <SDMMC_GetCmdResp1>
 8008aea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3728      	adds	r7, #40	; 0x28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b088      	sub	sp, #32
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008b06:	2300      	movs	r3, #0
 8008b08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b14:	f107 0308 	add.w	r3, r7, #8
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff fe86 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fb65 	bl	80091f0 <SDMMC_GetCmdError>
 8008b26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b28:	69fb      	ldr	r3, [r7, #28]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3720      	adds	r7, #32
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b088      	sub	sp, #32
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008b3a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008b3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008b40:	2308      	movs	r3, #8
 8008b42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b44:	2340      	movs	r3, #64	; 0x40
 8008b46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b52:	f107 0308 	add.w	r3, r7, #8
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff fe67 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 faf8 	bl	8009154 <SDMMC_GetCmdResp7>
 8008b64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b66:	69fb      	ldr	r3, [r7, #28]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3720      	adds	r7, #32
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008b7e:	2337      	movs	r3, #55	; 0x37
 8008b80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b82:	2340      	movs	r3, #64	; 0x40
 8008b84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b86:	2300      	movs	r3, #0
 8008b88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b90:	f107 0308 	add.w	r3, r7, #8
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff fe48 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba0:	2137      	movs	r1, #55	; 0x37
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f8ec 	bl	8008d80 <SDMMC_GetCmdResp1>
 8008ba8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008baa:	69fb      	ldr	r3, [r7, #28]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3720      	adds	r7, #32
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bc8:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008bca:	2329      	movs	r3, #41	; 0x29
 8008bcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bce:	2340      	movs	r3, #64	; 0x40
 8008bd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bdc:	f107 0308 	add.w	r3, r7, #8
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff fe22 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f9ff 	bl	8008fec <SDMMC_GetCmdResp3>
 8008bee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bf0:	69fb      	ldr	r3, [r7, #28]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3720      	adds	r7, #32
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b088      	sub	sp, #32
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008c08:	2306      	movs	r3, #6
 8008c0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c0c:	2340      	movs	r3, #64	; 0x40
 8008c0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c1a:	f107 0308 	add.w	r3, r7, #8
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff fe03 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c2a:	2106      	movs	r1, #6
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f8a7 	bl	8008d80 <SDMMC_GetCmdResp1>
 8008c32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c34:	69fb      	ldr	r3, [r7, #28]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3720      	adds	r7, #32
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b088      	sub	sp, #32
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008c4a:	2333      	movs	r3, #51	; 0x33
 8008c4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c4e:	2340      	movs	r3, #64	; 0x40
 8008c50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c52:	2300      	movs	r3, #0
 8008c54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c5c:	f107 0308 	add.w	r3, r7, #8
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff fde2 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c6c:	2133      	movs	r1, #51	; 0x33
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f886 	bl	8008d80 <SDMMC_GetCmdResp1>
 8008c74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c76:	69fb      	ldr	r3, [r7, #28]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3720      	adds	r7, #32
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b088      	sub	sp, #32
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008c90:	23c0      	movs	r3, #192	; 0xc0
 8008c92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c9e:	f107 0308 	add.w	r3, r7, #8
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff fdc1 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f956 	bl	8008f5c <SDMMC_GetCmdResp2>
 8008cb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cb2:	69fb      	ldr	r3, [r7, #28]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3720      	adds	r7, #32
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008cca:	2309      	movs	r3, #9
 8008ccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008cce:	23c0      	movs	r3, #192	; 0xc0
 8008cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cdc:	f107 0308 	add.w	r3, r7, #8
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff fda2 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f937 	bl	8008f5c <SDMMC_GetCmdResp2>
 8008cee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cf0:	69fb      	ldr	r3, [r7, #28]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3720      	adds	r7, #32
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b088      	sub	sp, #32
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008d04:	2300      	movs	r3, #0
 8008d06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d0c:	2340      	movs	r3, #64	; 0x40
 8008d0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d10:	2300      	movs	r3, #0
 8008d12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d1a:	f107 0308 	add.w	r3, r7, #8
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff fd83 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	2103      	movs	r1, #3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f99c 	bl	8009068 <SDMMC_GetCmdResp6>
 8008d30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d32:	69fb      	ldr	r3, [r7, #28]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3720      	adds	r7, #32
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b088      	sub	sp, #32
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008d4a:	230d      	movs	r3, #13
 8008d4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d4e:	2340      	movs	r3, #64	; 0x40
 8008d50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d52:	2300      	movs	r3, #0
 8008d54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d5c:	f107 0308 	add.w	r3, r7, #8
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff fd62 	bl	800882c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d6c:	210d      	movs	r1, #13
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f806 	bl	8008d80 <SDMMC_GetCmdResp1>
 8008d74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d76:	69fb      	ldr	r3, [r7, #28]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3720      	adds	r7, #32
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b088      	sub	sp, #32
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008d8e:	4b70      	ldr	r3, [pc, #448]	; (8008f50 <SDMMC_GetCmdResp1+0x1d0>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a70      	ldr	r2, [pc, #448]	; (8008f54 <SDMMC_GetCmdResp1+0x1d4>)
 8008d94:	fba2 2303 	umull	r2, r3, r2, r3
 8008d98:	0a5a      	lsrs	r2, r3, #9
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	fb02 f303 	mul.w	r3, r2, r3
 8008da0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	1e5a      	subs	r2, r3, #1
 8008da6:	61fa      	str	r2, [r7, #28]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d102      	bne.n	8008db2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008dac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008db0:	e0c9      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0ef      	beq.n	8008da2 <SDMMC_GetCmdResp1+0x22>
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1ea      	bne.n	8008da2 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d004      	beq.n	8008de2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2204      	movs	r2, #4
 8008ddc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008dde:	2304      	movs	r3, #4
 8008de0:	e0b1      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d004      	beq.n	8008df8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e0a6      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	22c5      	movs	r2, #197	; 0xc5
 8008dfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f7ff fd3e 	bl	8008880 <SDMMC_GetCommandResponse>
 8008e04:	4603      	mov	r3, r0
 8008e06:	461a      	mov	r2, r3
 8008e08:	7afb      	ldrb	r3, [r7, #11]
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d001      	beq.n	8008e12 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e099      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008e12:	2100      	movs	r1, #0
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f7ff fd40 	bl	800889a <SDMMC_GetResponse>
 8008e1a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	4b4e      	ldr	r3, [pc, #312]	; (8008f58 <SDMMC_GetCmdResp1+0x1d8>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008e26:	2300      	movs	r3, #0
 8008e28:	e08d      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	da02      	bge.n	8008e36 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e34:	e087      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008e40:	2340      	movs	r3, #64	; 0x40
 8008e42:	e080      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008e4e:	2380      	movs	r3, #128	; 0x80
 8008e50:	e079      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e60:	e071      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e70:	e069      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d002      	beq.n	8008e82 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e80:	e061      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008e8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e90:	e059      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ea0:	e051      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008eb0:	e049      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008ebc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ec0:	e041      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ed0:	e039      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ee0:	e031      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008eec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ef0:	e029      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008efc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f00:	e021      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d002      	beq.n	8008f12 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008f0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f10:	e019      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008f1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008f20:	e011      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008f2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008f30:	e009      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f003 0308 	and.w	r3, r3, #8
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008f3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008f40:	e001      	b.n	8008f46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008f42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20000000 	.word	0x20000000
 8008f54:	10624dd3 	.word	0x10624dd3
 8008f58:	fdffe008 	.word	0xfdffe008

08008f5c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f64:	4b1f      	ldr	r3, [pc, #124]	; (8008fe4 <SDMMC_GetCmdResp2+0x88>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a1f      	ldr	r2, [pc, #124]	; (8008fe8 <SDMMC_GetCmdResp2+0x8c>)
 8008f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6e:	0a5b      	lsrs	r3, r3, #9
 8008f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f74:	fb02 f303 	mul.w	r3, r2, r3
 8008f78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	1e5a      	subs	r2, r3, #1
 8008f7e:	60fa      	str	r2, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d102      	bne.n	8008f8a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f88:	e026      	b.n	8008fd8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0ef      	beq.n	8008f7a <SDMMC_GetCmdResp2+0x1e>
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1ea      	bne.n	8008f7a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa8:	f003 0304 	and.w	r3, r3, #4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d004      	beq.n	8008fba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2204      	movs	r2, #4
 8008fb4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fb6:	2304      	movs	r3, #4
 8008fb8:	e00e      	b.n	8008fd8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e003      	b.n	8008fd8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	22c5      	movs	r2, #197	; 0xc5
 8008fd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	20000000 	.word	0x20000000
 8008fe8:	10624dd3 	.word	0x10624dd3

08008fec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ff4:	4b1a      	ldr	r3, [pc, #104]	; (8009060 <SDMMC_GetCmdResp3+0x74>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a1a      	ldr	r2, [pc, #104]	; (8009064 <SDMMC_GetCmdResp3+0x78>)
 8008ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffe:	0a5b      	lsrs	r3, r3, #9
 8009000:	f241 3288 	movw	r2, #5000	; 0x1388
 8009004:	fb02 f303 	mul.w	r3, r2, r3
 8009008:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	1e5a      	subs	r2, r3, #1
 800900e:	60fa      	str	r2, [r7, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009014:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009018:	e01b      	b.n	8009052 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0ef      	beq.n	800900a <SDMMC_GetCmdResp3+0x1e>
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1ea      	bne.n	800900a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b00      	cmp	r3, #0
 800903e:	d004      	beq.n	800904a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2204      	movs	r2, #4
 8009044:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009046:	2304      	movs	r3, #4
 8009048:	e003      	b.n	8009052 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	22c5      	movs	r2, #197	; 0xc5
 800904e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3714      	adds	r7, #20
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	20000000 	.word	0x20000000
 8009064:	10624dd3 	.word	0x10624dd3

08009068 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b088      	sub	sp, #32
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	460b      	mov	r3, r1
 8009072:	607a      	str	r2, [r7, #4]
 8009074:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009076:	4b35      	ldr	r3, [pc, #212]	; (800914c <SDMMC_GetCmdResp6+0xe4>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a35      	ldr	r2, [pc, #212]	; (8009150 <SDMMC_GetCmdResp6+0xe8>)
 800907c:	fba2 2303 	umull	r2, r3, r2, r3
 8009080:	0a5b      	lsrs	r3, r3, #9
 8009082:	f241 3288 	movw	r2, #5000	; 0x1388
 8009086:	fb02 f303 	mul.w	r3, r2, r3
 800908a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	1e5a      	subs	r2, r3, #1
 8009090:	61fa      	str	r2, [r7, #28]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d102      	bne.n	800909c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009096:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800909a:	e052      	b.n	8009142 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0ef      	beq.n	800908c <SDMMC_GetCmdResp6+0x24>
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1ea      	bne.n	800908c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ba:	f003 0304 	and.w	r3, r3, #4
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d004      	beq.n	80090cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2204      	movs	r2, #4
 80090c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090c8:	2304      	movs	r3, #4
 80090ca:	e03a      	b.n	8009142 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d004      	beq.n	80090e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80090de:	2301      	movs	r3, #1
 80090e0:	e02f      	b.n	8009142 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f7ff fbcc 	bl	8008880 <SDMMC_GetCommandResponse>
 80090e8:	4603      	mov	r3, r0
 80090ea:	461a      	mov	r2, r3
 80090ec:	7afb      	ldrb	r3, [r7, #11]
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d001      	beq.n	80090f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e025      	b.n	8009142 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	22c5      	movs	r2, #197	; 0xc5
 80090fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80090fc:	2100      	movs	r1, #0
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f7ff fbcb 	bl	800889a <SDMMC_GetResponse>
 8009104:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d106      	bne.n	800911e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	0c1b      	lsrs	r3, r3, #16
 8009114:	b29a      	uxth	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800911a:	2300      	movs	r3, #0
 800911c:	e011      	b.n	8009142 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d002      	beq.n	800912e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800912c:	e009      	b.n	8009142 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800913c:	e001      	b.n	8009142 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800913e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009142:	4618      	mov	r0, r3
 8009144:	3720      	adds	r7, #32
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20000000 	.word	0x20000000
 8009150:	10624dd3 	.word	0x10624dd3

08009154 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800915c:	4b22      	ldr	r3, [pc, #136]	; (80091e8 <SDMMC_GetCmdResp7+0x94>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a22      	ldr	r2, [pc, #136]	; (80091ec <SDMMC_GetCmdResp7+0x98>)
 8009162:	fba2 2303 	umull	r2, r3, r2, r3
 8009166:	0a5b      	lsrs	r3, r3, #9
 8009168:	f241 3288 	movw	r2, #5000	; 0x1388
 800916c:	fb02 f303 	mul.w	r3, r2, r3
 8009170:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	1e5a      	subs	r2, r3, #1
 8009176:	60fa      	str	r2, [r7, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800917c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009180:	e02c      	b.n	80091dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009186:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0ef      	beq.n	8009172 <SDMMC_GetCmdResp7+0x1e>
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1ea      	bne.n	8009172 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a0:	f003 0304 	and.w	r3, r3, #4
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2204      	movs	r2, #4
 80091ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091ae:	2304      	movs	r3, #4
 80091b0:	e014      	b.n	80091dc <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d004      	beq.n	80091c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e009      	b.n	80091dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2240      	movs	r2, #64	; 0x40
 80091d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80091da:	2300      	movs	r3, #0

}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	20000000 	.word	0x20000000
 80091ec:	10624dd3 	.word	0x10624dd3

080091f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091f8:	4b11      	ldr	r3, [pc, #68]	; (8009240 <SDMMC_GetCmdError+0x50>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a11      	ldr	r2, [pc, #68]	; (8009244 <SDMMC_GetCmdError+0x54>)
 80091fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009202:	0a5b      	lsrs	r3, r3, #9
 8009204:	f241 3288 	movw	r2, #5000	; 0x1388
 8009208:	fb02 f303 	mul.w	r3, r2, r3
 800920c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	1e5a      	subs	r2, r3, #1
 8009212:	60fa      	str	r2, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d102      	bne.n	800921e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009218:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800921c:	e009      	b.n	8009232 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0f1      	beq.n	800920e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	22c5      	movs	r2, #197	; 0xc5
 800922e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	20000000 	.word	0x20000000
 8009244:	10624dd3 	.word	0x10624dd3

08009248 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800924c:	4904      	ldr	r1, [pc, #16]	; (8009260 <MX_FATFS_Init+0x18>)
 800924e:	4805      	ldr	r0, [pc, #20]	; (8009264 <MX_FATFS_Init+0x1c>)
 8009250:	f000 f9da 	bl	8009608 <FATFS_LinkDriver>
 8009254:	4603      	mov	r3, r0
 8009256:	461a      	mov	r2, r3
 8009258:	4b03      	ldr	r3, [pc, #12]	; (8009268 <MX_FATFS_Init+0x20>)
 800925a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800925c:	bf00      	nop
 800925e:	bd80      	pop	{r7, pc}
 8009260:	20000554 	.word	0x20000554
 8009264:	080096e4 	.word	0x080096e4
 8009268:	20000ad0 	.word	0x20000ad0

0800926c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009274:	f7f9 fc86 	bl	8002b84 <HAL_GetTick>
 8009278:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800927a:	e006      	b.n	800928a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800927c:	f7f9 faa8 	bl	80027d0 <BSP_SD_GetCardState>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009286:	2300      	movs	r3, #0
 8009288:	e009      	b.n	800929e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800928a:	f7f9 fc7b 	bl	8002b84 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	429a      	cmp	r2, r3
 8009298:	d8f0      	bhi.n	800927c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800929a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
	...

080092a8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80092b2:	4b0b      	ldr	r3, [pc, #44]	; (80092e0 <SD_CheckStatus+0x38>)
 80092b4:	2201      	movs	r2, #1
 80092b6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80092b8:	f7f9 fa8a 	bl	80027d0 <BSP_SD_GetCardState>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d107      	bne.n	80092d2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80092c2:	4b07      	ldr	r3, [pc, #28]	; (80092e0 <SD_CheckStatus+0x38>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	f023 0301 	bic.w	r3, r3, #1
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <SD_CheckStatus+0x38>)
 80092d0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80092d2:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <SD_CheckStatus+0x38>)
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	b2db      	uxtb	r3, r3
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	20000085 	.word	0x20000085

080092e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80092ee:	f7f9 f9a7 	bl	8002640 <BSP_SD_Init>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d107      	bne.n	8009308 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff ffd4 	bl	80092a8 <SD_CheckStatus>
 8009300:	4603      	mov	r3, r0
 8009302:	461a      	mov	r2, r3
 8009304:	4b04      	ldr	r3, [pc, #16]	; (8009318 <SD_initialize+0x34>)
 8009306:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009308:	4b03      	ldr	r3, [pc, #12]	; (8009318 <SD_initialize+0x34>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	b2db      	uxtb	r3, r3
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20000085 	.word	0x20000085

0800931c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009326:	79fb      	ldrb	r3, [r7, #7]
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff ffbd 	bl	80092a8 <SD_CheckStatus>
 800932e:	4603      	mov	r3, r0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	60b9      	str	r1, [r7, #8]
 8009340:	607a      	str	r2, [r7, #4]
 8009342:	603b      	str	r3, [r7, #0]
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800934c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009350:	f7ff ff8c 	bl	800926c <SD_CheckStatusWithTimeout>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	da01      	bge.n	800935e <SD_read+0x26>
  {
    return res;
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	e03b      	b.n	80093d6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	6879      	ldr	r1, [r7, #4]
 8009362:	68b8      	ldr	r0, [r7, #8]
 8009364:	f7f9 f9e4 	bl	8002730 <BSP_SD_ReadBlocks_DMA>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d132      	bne.n	80093d4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800936e:	4b1c      	ldr	r3, [pc, #112]	; (80093e0 <SD_read+0xa8>)
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009374:	f7f9 fc06 	bl	8002b84 <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800937a:	bf00      	nop
 800937c:	4b18      	ldr	r3, [pc, #96]	; (80093e0 <SD_read+0xa8>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d108      	bne.n	8009396 <SD_read+0x5e>
 8009384:	f7f9 fbfe 	bl	8002b84 <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009392:	4293      	cmp	r3, r2
 8009394:	d9f2      	bls.n	800937c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009396:	4b12      	ldr	r3, [pc, #72]	; (80093e0 <SD_read+0xa8>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d102      	bne.n	80093a4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	75fb      	strb	r3, [r7, #23]
 80093a2:	e017      	b.n	80093d4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80093a4:	4b0e      	ldr	r3, [pc, #56]	; (80093e0 <SD_read+0xa8>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80093aa:	f7f9 fbeb 	bl	8002b84 <HAL_GetTick>
 80093ae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80093b0:	e007      	b.n	80093c2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80093b2:	f7f9 fa0d 	bl	80027d0 <BSP_SD_GetCardState>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d102      	bne.n	80093c2 <SD_read+0x8a>
          {
            res = RES_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80093c0:	e008      	b.n	80093d4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80093c2:	f7f9 fbdf 	bl	8002b84 <HAL_GetTick>
 80093c6:	4602      	mov	r2, r0
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	f247 522f 	movw	r2, #29999	; 0x752f
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d9ee      	bls.n	80093b2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000194 	.word	0x20000194

080093e4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	607a      	str	r2, [r7, #4]
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	4603      	mov	r3, r0
 80093f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80093f8:	4b24      	ldr	r3, [pc, #144]	; (800948c <SD_write+0xa8>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80093fe:	f247 5030 	movw	r0, #30000	; 0x7530
 8009402:	f7ff ff33 	bl	800926c <SD_CheckStatusWithTimeout>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	da01      	bge.n	8009410 <SD_write+0x2c>
  {
    return res;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	e038      	b.n	8009482 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	68b8      	ldr	r0, [r7, #8]
 8009416:	f7f9 f9b3 	bl	8002780 <BSP_SD_WriteBlocks_DMA>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d12f      	bne.n	8009480 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009420:	f7f9 fbb0 	bl	8002b84 <HAL_GetTick>
 8009424:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009426:	bf00      	nop
 8009428:	4b18      	ldr	r3, [pc, #96]	; (800948c <SD_write+0xa8>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d108      	bne.n	8009442 <SD_write+0x5e>
 8009430:	f7f9 fba8 	bl	8002b84 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	f247 522f 	movw	r2, #29999	; 0x752f
 800943e:	4293      	cmp	r3, r2
 8009440:	d9f2      	bls.n	8009428 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009442:	4b12      	ldr	r3, [pc, #72]	; (800948c <SD_write+0xa8>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d102      	bne.n	8009450 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	75fb      	strb	r3, [r7, #23]
 800944e:	e017      	b.n	8009480 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009450:	4b0e      	ldr	r3, [pc, #56]	; (800948c <SD_write+0xa8>)
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009456:	f7f9 fb95 	bl	8002b84 <HAL_GetTick>
 800945a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800945c:	e007      	b.n	800946e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800945e:	f7f9 f9b7 	bl	80027d0 <BSP_SD_GetCardState>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d102      	bne.n	800946e <SD_write+0x8a>
          {
            res = RES_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	75fb      	strb	r3, [r7, #23]
            break;
 800946c:	e008      	b.n	8009480 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800946e:	f7f9 fb89 	bl	8002b84 <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	f247 522f 	movw	r2, #29999	; 0x752f
 800947c:	4293      	cmp	r3, r2
 800947e:	d9ee      	bls.n	800945e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	20000190 	.word	0x20000190

08009490 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08c      	sub	sp, #48	; 0x30
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	603a      	str	r2, [r7, #0]
 800949a:	71fb      	strb	r3, [r7, #7]
 800949c:	460b      	mov	r3, r1
 800949e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80094a6:	4b25      	ldr	r3, [pc, #148]	; (800953c <SD_ioctl+0xac>)
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f003 0301 	and.w	r3, r3, #1
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <SD_ioctl+0x28>
 80094b4:	2303      	movs	r3, #3
 80094b6:	e03c      	b.n	8009532 <SD_ioctl+0xa2>

  switch (cmd)
 80094b8:	79bb      	ldrb	r3, [r7, #6]
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d834      	bhi.n	8009528 <SD_ioctl+0x98>
 80094be:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <SD_ioctl+0x34>)
 80094c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	080094dd 	.word	0x080094dd
 80094cc:	080094f5 	.word	0x080094f5
 80094d0:	0800950f 	.word	0x0800950f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80094da:	e028      	b.n	800952e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80094dc:	f107 030c 	add.w	r3, r7, #12
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7f9 f993 	bl	800280c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80094e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80094f2:	e01c      	b.n	800952e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80094f4:	f107 030c 	add.w	r3, r7, #12
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7f9 f987 	bl	800280c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	b29a      	uxth	r2, r3
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800950c:	e00f      	b.n	800952e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800950e:	f107 030c 	add.w	r3, r7, #12
 8009512:	4618      	mov	r0, r3
 8009514:	f7f9 f97a 	bl	800280c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951a:	0a5a      	lsrs	r2, r3, #9
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009526:	e002      	b.n	800952e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009528:	2304      	movs	r3, #4
 800952a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800952e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009532:	4618      	mov	r0, r3
 8009534:	3730      	adds	r7, #48	; 0x30
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	20000085 	.word	0x20000085

08009540 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009544:	4b03      	ldr	r3, [pc, #12]	; (8009554 <BSP_SD_WriteCpltCallback+0x14>)
 8009546:	2201      	movs	r2, #1
 8009548:	601a      	str	r2, [r3, #0]
}
 800954a:	bf00      	nop
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	20000190 	.word	0x20000190

08009558 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009558:	b480      	push	{r7}
 800955a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800955c:	4b03      	ldr	r3, [pc, #12]	; (800956c <BSP_SD_ReadCpltCallback+0x14>)
 800955e:	2201      	movs	r2, #1
 8009560:	601a      	str	r2, [r3, #0]
}
 8009562:	bf00      	nop
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	20000194 	.word	0x20000194

08009570 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009570:	b480      	push	{r7}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	4613      	mov	r3, r2
 800957c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800957e:	2301      	movs	r3, #1
 8009580:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009582:	2300      	movs	r3, #0
 8009584:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009586:	4b1f      	ldr	r3, [pc, #124]	; (8009604 <FATFS_LinkDriverEx+0x94>)
 8009588:	7a5b      	ldrb	r3, [r3, #9]
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d131      	bne.n	80095f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009590:	4b1c      	ldr	r3, [pc, #112]	; (8009604 <FATFS_LinkDriverEx+0x94>)
 8009592:	7a5b      	ldrb	r3, [r3, #9]
 8009594:	b2db      	uxtb	r3, r3
 8009596:	461a      	mov	r2, r3
 8009598:	4b1a      	ldr	r3, [pc, #104]	; (8009604 <FATFS_LinkDriverEx+0x94>)
 800959a:	2100      	movs	r1, #0
 800959c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800959e:	4b19      	ldr	r3, [pc, #100]	; (8009604 <FATFS_LinkDriverEx+0x94>)
 80095a0:	7a5b      	ldrb	r3, [r3, #9]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	4a17      	ldr	r2, [pc, #92]	; (8009604 <FATFS_LinkDriverEx+0x94>)
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80095ae:	4b15      	ldr	r3, [pc, #84]	; (8009604 <FATFS_LinkDriverEx+0x94>)
 80095b0:	7a5b      	ldrb	r3, [r3, #9]
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	461a      	mov	r2, r3
 80095b6:	4b13      	ldr	r3, [pc, #76]	; (8009604 <FATFS_LinkDriverEx+0x94>)
 80095b8:	4413      	add	r3, r2
 80095ba:	79fa      	ldrb	r2, [r7, #7]
 80095bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80095be:	4b11      	ldr	r3, [pc, #68]	; (8009604 <FATFS_LinkDriverEx+0x94>)
 80095c0:	7a5b      	ldrb	r3, [r3, #9]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	1c5a      	adds	r2, r3, #1
 80095c6:	b2d1      	uxtb	r1, r2
 80095c8:	4a0e      	ldr	r2, [pc, #56]	; (8009604 <FATFS_LinkDriverEx+0x94>)
 80095ca:	7251      	strb	r1, [r2, #9]
 80095cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80095ce:	7dbb      	ldrb	r3, [r7, #22]
 80095d0:	3330      	adds	r3, #48	; 0x30
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	3301      	adds	r3, #1
 80095dc:	223a      	movs	r2, #58	; 0x3a
 80095de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	3302      	adds	r3, #2
 80095e4:	222f      	movs	r2, #47	; 0x2f
 80095e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	3303      	adds	r3, #3
 80095ec:	2200      	movs	r2, #0
 80095ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20000198 	.word	0x20000198

08009608 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009612:	2200      	movs	r2, #0
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7ff ffaa 	bl	8009570 <FATFS_LinkDriverEx>
 800961c:	4603      	mov	r3, r0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
	...

08009628 <__libc_init_array>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	4d0d      	ldr	r5, [pc, #52]	; (8009660 <__libc_init_array+0x38>)
 800962c:	4c0d      	ldr	r4, [pc, #52]	; (8009664 <__libc_init_array+0x3c>)
 800962e:	1b64      	subs	r4, r4, r5
 8009630:	10a4      	asrs	r4, r4, #2
 8009632:	2600      	movs	r6, #0
 8009634:	42a6      	cmp	r6, r4
 8009636:	d109      	bne.n	800964c <__libc_init_array+0x24>
 8009638:	4d0b      	ldr	r5, [pc, #44]	; (8009668 <__libc_init_array+0x40>)
 800963a:	4c0c      	ldr	r4, [pc, #48]	; (800966c <__libc_init_array+0x44>)
 800963c:	f000 f820 	bl	8009680 <_init>
 8009640:	1b64      	subs	r4, r4, r5
 8009642:	10a4      	asrs	r4, r4, #2
 8009644:	2600      	movs	r6, #0
 8009646:	42a6      	cmp	r6, r4
 8009648:	d105      	bne.n	8009656 <__libc_init_array+0x2e>
 800964a:	bd70      	pop	{r4, r5, r6, pc}
 800964c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009650:	4798      	blx	r3
 8009652:	3601      	adds	r6, #1
 8009654:	e7ee      	b.n	8009634 <__libc_init_array+0xc>
 8009656:	f855 3b04 	ldr.w	r3, [r5], #4
 800965a:	4798      	blx	r3
 800965c:	3601      	adds	r6, #1
 800965e:	e7f2      	b.n	8009646 <__libc_init_array+0x1e>
 8009660:	080096f8 	.word	0x080096f8
 8009664:	080096f8 	.word	0x080096f8
 8009668:	080096f8 	.word	0x080096f8
 800966c:	080096fc 	.word	0x080096fc

08009670 <memset>:
 8009670:	4402      	add	r2, r0
 8009672:	4603      	mov	r3, r0
 8009674:	4293      	cmp	r3, r2
 8009676:	d100      	bne.n	800967a <memset+0xa>
 8009678:	4770      	bx	lr
 800967a:	f803 1b01 	strb.w	r1, [r3], #1
 800967e:	e7f9      	b.n	8009674 <memset+0x4>

08009680 <_init>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr

0800968c <_fini>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	bf00      	nop
 8009690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009692:	bc08      	pop	{r3}
 8009694:	469e      	mov	lr, r3
 8009696:	4770      	bx	lr
