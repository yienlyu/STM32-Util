
SDcard-example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3b4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800c560  0800c560  0001c560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c700  0800c700  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800c700  0800c700  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c700  0800c700  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c700  0800c700  0001c700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c704  0800c704  0001c704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800c708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed4  20000088  0800c790  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f5c  0800c790  00020f5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022db8  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b48  00000000  00000000  00042e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  000469b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001530  00000000  00000000  00048090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8e9  00000000  00000000  000495c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aebf  00000000  00000000  00075ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104bbe  00000000  00000000  00090d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00195926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e00  00000000  00000000  0019597c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000088 	.word	0x20000088
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800c548 	.word	0x0800c548

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000008c 	.word	0x2000008c
 80001e8:	0800c548 	.word	0x0800c548

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f2:	f002 fce3 	bl	8002bbc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f6:	f000 f861 	bl	80002bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // init MFX
  uint8_t ret_mfx = IO_ERROR;
 80001fa:	2301      	movs	r3, #1
 80001fc:	71fb      	strb	r3, [r7, #7]

  ret_mfx = BSP_IO_Init();
 80001fe:	f002 fa07 	bl	8002610 <BSP_IO_Init>
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]


  BSP_LED_Init(LED2);
 8000206:	2001      	movs	r0, #1
 8000208:	f001 fe9c 	bl	8001f44 <BSP_LED_Init>
  BSP_LED_Init(LED1);
 800020c:	2000      	movs	r0, #0
 800020e:	f001 fe99 	bl	8001f44 <BSP_LED_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f9a7 	bl	8000564 <MX_GPIO_Init>
  MX_DMA_Init();
 8000216:	f000 f903 	bl	8000420 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800021a:	f000 f8e1 	bl	80003e0 <MX_SDMMC1_SD_Init>
  MX_I2C2_Init();
 800021e:	f000 f89f 	bl	8000360 <MX_I2C2_Init>
  MX_FATFS_Init();
 8000222:	f009 f895 	bl	8009350 <MX_FATFS_Init>
  MX_FMC_Init();
 8000226:	f000 f93d 	bl	80004a4 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  if (ret_mfx == IO_OK) {
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d102      	bne.n	8000236 <main+0x4a>
	  BSP_LED_On(LED1);
 8000230:	2000      	movs	r0, #0
 8000232:	f001 fed5 	bl	8001fe0 <BSP_LED_On>
  }

  /* 1- Link the micro SD disk I/O driver */
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8000236:	491d      	ldr	r1, [pc, #116]	; (80002ac <main+0xc0>)
 8000238:	481d      	ldr	r0, [pc, #116]	; (80002b0 <main+0xc4>)
 800023a:	f00c f93b 	bl	800c4b4 <FATFS_LinkDriver>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d10a      	bne.n	800025a <main+0x6e>
  {
    /*##-2- Init the SD Card #################################################*/

    SD_Initialize();
 8000244:	f000 fa88 	bl	8000758 <SD_Initialize>

    if(BSP_SD_IsDetected())
 8000248:	f002 fae1 	bl	800280e <BSP_SD_IsDetected>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d006      	beq.n	8000260 <main+0x74>
    {
      Appli_state = APPLICATION_RUNNING;
 8000252:	4b18      	ldr	r3, [pc, #96]	; (80002b4 <main+0xc8>)
 8000254:	2201      	movs	r2, #1
 8000256:	701a      	strb	r2, [r3, #0]
 8000258:	e002      	b.n	8000260 <main+0x74>
    }
  }
  else
  {
    Error_Handler();
 800025a:	f000 fa9f 	bl	800079c <Error_Handler>
    while(1) {};
 800025e:	e7fe      	b.n	800025e <main+0x72>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(Appli_state)
 8000260:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <main+0xc8>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b02      	cmp	r3, #2
 8000266:	d010      	beq.n	800028a <main+0x9e>
 8000268:	2b02      	cmp	r3, #2
 800026a:	dc1b      	bgt.n	80002a4 <main+0xb8>
 800026c:	2b00      	cmp	r3, #0
 800026e:	d01b      	beq.n	80002a8 <main+0xbc>
 8000270:	2b01      	cmp	r3, #1
 8000272:	d117      	bne.n	80002a4 <main+0xb8>
	{
	case APPLICATION_RUNNING:
	  BSP_LED_Off(LED1);
 8000274:	2000      	movs	r0, #0
 8000276:	f001 fed5 	bl	8002024 <BSP_LED_Off>
	  SD_Initialize();
 800027a:	f000 fa6d 	bl	8000758 <SD_Initialize>
	  FS_FileOperations();
 800027e:	f000 f9e5 	bl	800064c <FS_FileOperations>
	  Appli_state = APPLICATION_IDLE;
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <main+0xc8>)
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
	  break;
 8000288:	e00f      	b.n	80002aa <main+0xbe>

	case APPLICATION_IDLE:
	  break;

	case APPLICATION_SD_UNPLUGGED:
	  if (isInitialized == 1)
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <main+0xcc>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d104      	bne.n	800029c <main+0xb0>
	  {
		Error_Handler();
 8000292:	f000 fa83 	bl	800079c <Error_Handler>
		isInitialized = 0;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <main+0xcc>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
	  }

	  Appli_state = APPLICATION_IDLE;
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <main+0xc8>)
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
	  break;
 80002a2:	e002      	b.n	80002aa <main+0xbe>

	default:
	  break;
 80002a4:	bf00      	nop
 80002a6:	e7db      	b.n	8000260 <main+0x74>
	  break;
 80002a8:	bf00      	nop
	switch(Appli_state)
 80002aa:	e7d9      	b.n	8000260 <main+0x74>
 80002ac:	2000057c 	.word	0x2000057c
 80002b0:	0800c64c 	.word	0x0800c64c
 80002b4:	200000a4 	.word	0x200000a4
 80002b8:	200000a5 	.word	0x200000a5

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b096      	sub	sp, #88	; 0x58
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	2244      	movs	r2, #68	; 0x44
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f00c f934 	bl	800c538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	463b      	mov	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e2:	f004 fb39 	bl	8004958 <HAL_PWREx_ControlVoltageScaling>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002ec:	f000 fa56 	bl	800079c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f0:	2310      	movs	r3, #16
 80002f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f4:	2301      	movs	r3, #1
 80002f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002fc:	2360      	movs	r3, #96	; 0x60
 80002fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000300:	2302      	movs	r3, #2
 8000302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000304:	2301      	movs	r3, #1
 8000306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000308:	2301      	movs	r3, #1
 800030a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800030c:	2328      	movs	r3, #40	; 0x28
 800030e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000310:	2302      	movs	r3, #2
 8000312:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000314:	2308      	movs	r3, #8
 8000316:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000318:	2302      	movs	r3, #2
 800031a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031c:	f107 0314 	add.w	r3, r7, #20
 8000320:	4618      	mov	r0, r3
 8000322:	f004 fb6f 	bl	8004a04 <HAL_RCC_OscConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800032c:	f000 fa36 	bl	800079c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
 8000332:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2303      	movs	r3, #3
 8000336:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	2104      	movs	r1, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f004 ff81 	bl	8005250 <HAL_RCC_ClockConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000354:	f000 fa22 	bl	800079c <Error_Handler>
  }
}
 8000358:	bf00      	nop
 800035a:	3758      	adds	r7, #88	; 0x58
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000364:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <MX_I2C2_Init+0x74>)
 8000366:	4a1c      	ldr	r2, [pc, #112]	; (80003d8 <MX_I2C2_Init+0x78>)
 8000368:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800036a:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <MX_I2C2_Init+0x74>)
 800036c:	4a1b      	ldr	r2, [pc, #108]	; (80003dc <MX_I2C2_Init+0x7c>)
 800036e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000370:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <MX_I2C2_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000376:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <MX_I2C2_Init+0x74>)
 8000378:	2201      	movs	r2, #1
 800037a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_I2C2_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_I2C2_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_I2C2_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_I2C2_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_I2C2_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800039a:	480e      	ldr	r0, [pc, #56]	; (80003d4 <MX_I2C2_Init+0x74>)
 800039c:	f003 fb8e 	bl	8003abc <HAL_I2C_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003a6:	f000 f9f9 	bl	800079c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003aa:	2100      	movs	r1, #0
 80003ac:	4809      	ldr	r0, [pc, #36]	; (80003d4 <MX_I2C2_Init+0x74>)
 80003ae:	f004 fa2d 	bl	800480c <HAL_I2CEx_ConfigAnalogFilter>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003b8:	f000 f9f0 	bl	800079c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003bc:	2100      	movs	r1, #0
 80003be:	4805      	ldr	r0, [pc, #20]	; (80003d4 <MX_I2C2_Init+0x74>)
 80003c0:	f004 fa6f 	bl	80048a2 <HAL_I2CEx_ConfigDigitalFilter>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003ca:	f000 f9e7 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	200001cc 	.word	0x200001cc
 80003d8:	40005800 	.word	0x40005800
 80003dc:	10909cec 	.word	0x10909cec

080003e0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 80003e6:	4a0d      	ldr	r2, [pc, #52]	; (800041c <MX_SDMMC1_SD_Init+0x3c>)
 80003e8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 8000404:	2200      	movs	r2, #0
 8000406:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	20000218 	.word	0x20000218
 800041c:	40012800 	.word	0x40012800

08000420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000426:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <MX_DMA_Init+0x80>)
 8000428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800042a:	4a1d      	ldr	r2, [pc, #116]	; (80004a0 <MX_DMA_Init+0x80>)
 800042c:	f043 0302 	orr.w	r3, r3, #2
 8000430:	6493      	str	r3, [r2, #72]	; 0x48
 8000432:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <MX_DMA_Init+0x80>)
 8000434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000436:	f003 0302 	and.w	r3, r3, #2
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <MX_DMA_Init+0x80>)
 8000440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000442:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <MX_DMA_Init+0x80>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6493      	str	r3, [r2, #72]	; 0x48
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <MX_DMA_Init+0x80>)
 800044c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	2100      	movs	r1, #0
 800045a:	200e      	movs	r0, #14
 800045c:	f002 fd45 	bl	8002eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000460:	200e      	movs	r0, #14
 8000462:	f002 fd5e 	bl	8002f22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	200f      	movs	r0, #15
 800046c:	f002 fd3d 	bl	8002eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000470:	200f      	movs	r0, #15
 8000472:	f002 fd56 	bl	8002f22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 7, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	2107      	movs	r1, #7
 800047a:	203b      	movs	r0, #59	; 0x3b
 800047c:	f002 fd35 	bl	8002eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000480:	203b      	movs	r0, #59	; 0x3b
 8000482:	f002 fd4e 	bl	8002f22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 7, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2107      	movs	r1, #7
 800048a:	203c      	movs	r0, #60	; 0x3c
 800048c:	f002 fd2d 	bl	8002eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000490:	203c      	movs	r0, #60	; 0x3c
 8000492:	f002 fd46 	bl	8002f22 <HAL_NVIC_EnableIRQ>

}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80004aa:	463b      	mov	r3, r7
 80004ac:	2220      	movs	r2, #32
 80004ae:	2100      	movs	r1, #0
 80004b0:	4618      	mov	r0, r3
 80004b2:	f00c f841 	bl	800c538 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80004b6:	4b29      	ldr	r3, [pc, #164]	; (800055c <MX_FMC_Init+0xb8>)
 80004b8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80004bc:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80004be:	4b27      	ldr	r3, [pc, #156]	; (800055c <MX_FMC_Init+0xb8>)
 80004c0:	4a27      	ldr	r2, [pc, #156]	; (8000560 <MX_FMC_Init+0xbc>)
 80004c2:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80004c4:	4b25      	ldr	r3, [pc, #148]	; (800055c <MX_FMC_Init+0xb8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80004ca:	4b24      	ldr	r3, [pc, #144]	; (800055c <MX_FMC_Init+0xb8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80004d0:	4b22      	ldr	r3, [pc, #136]	; (800055c <MX_FMC_Init+0xb8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80004d6:	4b21      	ldr	r3, [pc, #132]	; (800055c <MX_FMC_Init+0xb8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <MX_FMC_Init+0xb8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <MX_FMC_Init+0xb8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	; (800055c <MX_FMC_Init+0xb8>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_FMC_Init+0xb8>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80004f4:	4b19      	ldr	r3, [pc, #100]	; (800055c <MX_FMC_Init+0xb8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80004fa:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_FMC_Init+0xb8>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_FMC_Init+0xb8>)
 8000502:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000506:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_FMC_Init+0xb8>)
 800050a:	2200      	movs	r2, #0
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <MX_FMC_Init+0xb8>)
 8000510:	2200      	movs	r2, #0
 8000512:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_FMC_Init+0xb8>)
 8000516:	2200      	movs	r2, #0
 8000518:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <MX_FMC_Init+0xb8>)
 800051c:	2200      	movs	r2, #0
 800051e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000520:	230f      	movs	r3, #15
 8000522:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000524:	230f      	movs	r3, #15
 8000526:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000528:	23ff      	movs	r3, #255	; 0xff
 800052a:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800052c:	230f      	movs	r3, #15
 800052e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000530:	2310      	movs	r3, #16
 8000532:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000534:	2311      	movs	r3, #17
 8000536:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	; (800055c <MX_FMC_Init+0xb8>)
 8000544:	f008 f82e 	bl	80085a4 <HAL_SRAM_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_FMC_Init+0xae>
  {
    Error_Handler( );
 800054e:	f000 f925 	bl	800079c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000552:	bf00      	nop
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000029c 	.word	0x2000029c
 8000560:	a0000104 	.word	0xa0000104

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08c      	sub	sp, #48	; 0x30
 8000568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 031c 	add.w	r3, r7, #28
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b32      	ldr	r3, [pc, #200]	; (8000644 <MX_GPIO_Init+0xe0>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a31      	ldr	r2, [pc, #196]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
 8000590:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000592:	4b2c      	ldr	r3, [pc, #176]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	4a2b      	ldr	r2, [pc, #172]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059e:	4b29      	ldr	r3, [pc, #164]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b26      	ldr	r3, [pc, #152]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a25      	ldr	r2, [pc, #148]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b23      	ldr	r3, [pc, #140]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a1f      	ldr	r2, [pc, #124]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0320 	and.w	r3, r3, #32
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a19      	ldr	r2, [pc, #100]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005e0:	f043 0310 	orr.w	r3, r3, #16
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0310 	and.w	r3, r3, #16
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_GPIO_Init+0xe0>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4619      	mov	r1, r3
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_GPIO_Init+0xe4>)
 8000638:	f002 ffa4 	bl	8003584 <HAL_GPIO_Init>

}
 800063c:	bf00      	nop
 800063e:	3730      	adds	r7, #48	; 0x30
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000
 8000648:	48000400 	.word	0x48000400

0800064c <FS_FileOperations>:

/* USER CODE BEGIN 4 */
static void FS_FileOperations(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b0b2      	sub	sp, #200	; 0xc8
 8000650:	af02      	add	r7, sp, #8
  FRESULT res; /* FatFs function common result code */
  uint32_t byteswritten, bytesread; /* File write/read counts */
  uint8_t wtext[] = "stm32l496g_discovery : This is STM32 working with FatFs and uSD diskio driver"; /* File write buffer */
 8000652:	4a3a      	ldr	r2, [pc, #232]	; (800073c <FS_FileOperations+0xf0>)
 8000654:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000658:	4611      	mov	r1, r2
 800065a:	224e      	movs	r2, #78	; 0x4e
 800065c:	4618      	mov	r0, r3
 800065e:	f00b ff5d 	bl	800c51c <memcpy>
  uint8_t rtext[100]; /* File read buffer */

  /* Register the file system object to the FatFs module */
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8000662:	2200      	movs	r2, #0
 8000664:	4936      	ldr	r1, [pc, #216]	; (8000740 <FS_FileOperations+0xf4>)
 8000666:	4837      	ldr	r0, [pc, #220]	; (8000744 <FS_FileOperations+0xf8>)
 8000668:	f00a fd4c 	bl	800b104 <f_mount>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d15e      	bne.n	8000730 <FS_FileOperations+0xe4>
  {
#if FATFS_MKFS_ALLOWED
    if (isCreated == 0)
 8000672:	4b35      	ldr	r3, [pc, #212]	; (8000748 <FS_FileOperations+0xfc>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d112      	bne.n	80006a0 <FS_FileOperations+0x54>
    {
      res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 800067a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	4b32      	ldr	r3, [pc, #200]	; (800074c <FS_FileOperations+0x100>)
 8000682:	2200      	movs	r2, #0
 8000684:	2107      	movs	r1, #7
 8000686:	482e      	ldr	r0, [pc, #184]	; (8000740 <FS_FileOperations+0xf4>)
 8000688:	f00b fa9c 	bl	800bbc4 <f_mkfs>
 800068c:	4603      	mov	r3, r0
 800068e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

      if (res != FR_OK)
 8000692:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <FS_FileOperations+0x54>
      {
        Error_Handler();
 800069a:	f000 f87f 	bl	800079c <Error_Handler>
        while(1);
 800069e:	e7fe      	b.n	800069e <FS_FileOperations+0x52>
      }
    }
    isCreated = 1;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <FS_FileOperations+0xfc>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
#endif
    /* Create and Open a new text file object with write access */
    if(f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 80006a6:	220a      	movs	r2, #10
 80006a8:	4929      	ldr	r1, [pc, #164]	; (8000750 <FS_FileOperations+0x104>)
 80006aa:	482a      	ldr	r0, [pc, #168]	; (8000754 <FS_FileOperations+0x108>)
 80006ac:	f00a fd70 	bl	800b190 <f_open>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d13c      	bne.n	8000730 <FS_FileOperations+0xe4>
    {
      /* Write data to the text file */
      res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 80006b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80006ba:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80006be:	224e      	movs	r2, #78	; 0x4e
 80006c0:	4824      	ldr	r0, [pc, #144]	; (8000754 <FS_FileOperations+0x108>)
 80006c2:	f00b f862 	bl	800b78a <f_write>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

      if((byteswritten > 0) && (res == FR_OK))
 80006cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d02d      	beq.n	8000730 <FS_FileOperations+0xe4>
 80006d4:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d129      	bne.n	8000730 <FS_FileOperations+0xe4>
      {
        /* Close the open text file */
        f_close(&MyFile);
 80006dc:	481d      	ldr	r0, [pc, #116]	; (8000754 <FS_FileOperations+0x108>)
 80006de:	f00b fa47 	bl	800bb70 <f_close>

        /* Open the text file object with read access */
        if(f_open(&MyFile, "STM32.TXT", FA_READ) == FR_OK)
 80006e2:	2201      	movs	r2, #1
 80006e4:	491a      	ldr	r1, [pc, #104]	; (8000750 <FS_FileOperations+0x104>)
 80006e6:	481b      	ldr	r0, [pc, #108]	; (8000754 <FS_FileOperations+0x108>)
 80006e8:	f00a fd52 	bl	800b190 <f_open>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d11e      	bne.n	8000730 <FS_FileOperations+0xe4>
        {
          /* Read data from the text file */
          res = f_read(&MyFile, rtext, sizeof(rtext), (void *)&bytesread);
 80006f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80006f6:	4639      	mov	r1, r7
 80006f8:	2264      	movs	r2, #100	; 0x64
 80006fa:	4816      	ldr	r0, [pc, #88]	; (8000754 <FS_FileOperations+0x108>)
 80006fc:	f00a ff06 	bl	800b50c <f_read>
 8000700:	4603      	mov	r3, r0
 8000702:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

          if((bytesread > 0) && (res == FR_OK))
 8000706:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800070a:	2b00      	cmp	r3, #0
 800070c:	d010      	beq.n	8000730 <FS_FileOperations+0xe4>
 800070e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000712:	2b00      	cmp	r3, #0
 8000714:	d10c      	bne.n	8000730 <FS_FileOperations+0xe4>
          {
            /* Close the open text file */
            f_close(&MyFile);
 8000716:	480f      	ldr	r0, [pc, #60]	; (8000754 <FS_FileOperations+0x108>)
 8000718:	f00b fa2a 	bl	800bb70 <f_close>

            /* Compare read data with the expected data */
            if((bytesread == byteswritten))
 800071c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000720:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000724:	429a      	cmp	r2, r3
 8000726:	d103      	bne.n	8000730 <FS_FileOperations+0xe4>
            {
              /* Success of the demo: no error occurrence */
              BSP_LED_On(LED2);
 8000728:	2001      	movs	r0, #1
 800072a:	f001 fc59 	bl	8001fe0 <BSP_LED_On>
 800072e:	e001      	b.n	8000734 <FS_FileOperations+0xe8>
        }
      }
    }
  }
  /* Error */
  Error_Handler();
 8000730:	f000 f834 	bl	800079c <Error_Handler>
}
 8000734:	37c0      	adds	r7, #192	; 0xc0
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	0800c56c 	.word	0x0800c56c
 8000740:	2000057c 	.word	0x2000057c
 8000744:	20000580 	.word	0x20000580
 8000748:	200000a6 	.word	0x200000a6
 800074c:	2000037c 	.word	0x2000037c
 8000750:	0800c560 	.word	0x0800c560
 8000754:	200007b0 	.word	0x200007b0

08000758 <SD_Initialize>:

static void SD_Initialize(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  if (isInitialized == 0)
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <SD_Initialize+0x40>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d116      	bne.n	8000792 <SD_Initialize+0x3a>
  {
    if (BSP_SD_Init() == MSD_OK)
 8000764:	f001 fff0 	bl	8002748 <BSP_SD_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d105      	bne.n	800077a <SD_Initialize+0x22>
    {
      BSP_SD_ITConfig();
 800076e:	f002 f835 	bl	80027dc <BSP_SD_ITConfig>
      isInitialized = 1;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <SD_Initialize+0x40>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
      while (BSP_SD_IsDetected() != SD_PRESENT)
      {}
      BSP_LED_Off(LED1);
    }
  }
}
 8000778:	e00b      	b.n	8000792 <SD_Initialize+0x3a>
      BSP_LED_On(LED1);
 800077a:	2000      	movs	r0, #0
 800077c:	f001 fc30 	bl	8001fe0 <BSP_LED_On>
      while (BSP_SD_IsDetected() != SD_PRESENT)
 8000780:	bf00      	nop
 8000782:	f002 f844 	bl	800280e <BSP_SD_IsDetected>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d1fa      	bne.n	8000782 <SD_Initialize+0x2a>
      BSP_LED_Off(LED1);
 800078c:	2000      	movs	r0, #0
 800078e:	f001 fc49 	bl	8002024 <BSP_LED_Off>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000a5 	.word	0x200000a5

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_MspInit+0x44>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b2:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <HAL_MspInit+0x44>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x44>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x44>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	6593      	str	r3, [r2, #88]	; 0x58
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0ae      	sub	sp, #184	; 0xb8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	f107 0318 	add.w	r3, r7, #24
 800080c:	228c      	movs	r2, #140	; 0x8c
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f00b fe91 	bl	800c538 <memset>
  if(hi2c->Instance==I2C2)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a5b      	ldr	r2, [pc, #364]	; (8000988 <HAL_I2C_MspInit+0x198>)
 800081c:	4293      	cmp	r3, r2
 800081e:	f040 80af 	bne.w	8000980 <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000826:	2300      	movs	r3, #0
 8000828:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082a:	f107 0318 	add.w	r3, r7, #24
 800082e:	4618      	mov	r0, r3
 8000830:	f004 ff14 	bl	800565c <HAL_RCCEx_PeriphCLKConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800083a:	f7ff ffaf 	bl	800079c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b53      	ldr	r3, [pc, #332]	; (800098c <HAL_I2C_MspInit+0x19c>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a52      	ldr	r2, [pc, #328]	; (800098c <HAL_I2C_MspInit+0x19c>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b50      	ldr	r3, [pc, #320]	; (800098c <HAL_I2C_MspInit+0x19c>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b4d      	ldr	r3, [pc, #308]	; (800098c <HAL_I2C_MspInit+0x19c>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a4c      	ldr	r2, [pc, #304]	; (800098c <HAL_I2C_MspInit+0x19c>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b4a      	ldr	r3, [pc, #296]	; (800098c <HAL_I2C_MspInit+0x19c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800086e:	2310      	movs	r3, #16
 8000870:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000874:	2312      	movs	r3, #18
 8000876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000886:	2304      	movs	r3, #4
 8000888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800088c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000890:	4619      	mov	r1, r3
 8000892:	483f      	ldr	r0, [pc, #252]	; (8000990 <HAL_I2C_MspInit+0x1a0>)
 8000894:	f002 fe76 	bl	8003584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800089c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a0:	2312      	movs	r3, #18
 80008a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008b2:	2304      	movs	r3, #4
 80008b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008bc:	4619      	mov	r1, r3
 80008be:	4835      	ldr	r0, [pc, #212]	; (8000994 <HAL_I2C_MspInit+0x1a4>)
 80008c0:	f002 fe60 	bl	8003584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <HAL_I2C_MspInit+0x19c>)
 80008c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c8:	4a30      	ldr	r2, [pc, #192]	; (800098c <HAL_I2C_MspInit+0x19c>)
 80008ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ce:	6593      	str	r3, [r2, #88]	; 0x58
 80008d0:	4b2e      	ldr	r3, [pc, #184]	; (800098c <HAL_I2C_MspInit+0x19c>)
 80008d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80008dc:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <HAL_I2C_MspInit+0x1a8>)
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <HAL_I2C_MspInit+0x1ac>)
 80008e0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <HAL_I2C_MspInit+0x1a8>)
 80008e4:	2203      	movs	r2, #3
 80008e6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e8:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <HAL_I2C_MspInit+0x1a8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <HAL_I2C_MspInit+0x1a8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <HAL_I2C_MspInit+0x1a8>)
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <HAL_I2C_MspInit+0x1a8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000900:	4b25      	ldr	r3, [pc, #148]	; (8000998 <HAL_I2C_MspInit+0x1a8>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <HAL_I2C_MspInit+0x1a8>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <HAL_I2C_MspInit+0x1a8>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000912:	4821      	ldr	r0, [pc, #132]	; (8000998 <HAL_I2C_MspInit+0x1a8>)
 8000914:	f002 fb2e 	bl	8002f74 <HAL_DMA_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_I2C_MspInit+0x132>
    {
      Error_Handler();
 800091e:	f7ff ff3d 	bl	800079c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <HAL_I2C_MspInit+0x1a8>)
 8000926:	63da      	str	r2, [r3, #60]	; 0x3c
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <HAL_I2C_MspInit+0x1a8>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <HAL_I2C_MspInit+0x1b0>)
 8000930:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <HAL_I2C_MspInit+0x1b4>)
 8000932:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <HAL_I2C_MspInit+0x1b0>)
 8000936:	2203      	movs	r2, #3
 8000938:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_I2C_MspInit+0x1b0>)
 800093c:	2210      	movs	r2, #16
 800093e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_I2C_MspInit+0x1b0>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_I2C_MspInit+0x1b0>)
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_I2C_MspInit+0x1b0>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_I2C_MspInit+0x1b0>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_I2C_MspInit+0x1b0>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_I2C_MspInit+0x1b0>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000964:	480e      	ldr	r0, [pc, #56]	; (80009a0 <HAL_I2C_MspInit+0x1b0>)
 8000966:	f002 fb05 	bl	8002f74 <HAL_DMA_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <HAL_I2C_MspInit+0x184>
    {
      Error_Handler();
 8000970:	f7ff ff14 	bl	800079c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_I2C_MspInit+0x1b0>)
 8000978:	639a      	str	r2, [r3, #56]	; 0x38
 800097a:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <HAL_I2C_MspInit+0x1b0>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000980:	bf00      	nop
 8000982:	37b8      	adds	r7, #184	; 0xb8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40005800 	.word	0x40005800
 800098c:	40021000 	.word	0x40021000
 8000990:	48001c00 	.word	0x48001c00
 8000994:	48000400 	.word	0x48000400
 8000998:	200002ec 	.word	0x200002ec
 800099c:	40020058 	.word	0x40020058
 80009a0:	20000334 	.word	0x20000334
 80009a4:	40020044 	.word	0x40020044

080009a8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <HAL_I2C_MspDeInit+0x4c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d118      	bne.n	80009ec <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_I2C_MspDeInit+0x50>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_I2C_MspDeInit+0x50>)
 80009c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80009c4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 80009c6:	2110      	movs	r1, #16
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <HAL_I2C_MspDeInit+0x54>)
 80009ca:	f002 ff6d 	bl	80038a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14);
 80009ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d2:	480b      	ldr	r0, [pc, #44]	; (8000a00 <HAL_I2C_MspDeInit+0x58>)
 80009d4:	f002 ff68 	bl	80038a8 <HAL_GPIO_DeInit>

    /* I2C2 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fb81 	bl	80030e4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 fb7c 	bl	80030e4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40005800 	.word	0x40005800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48001c00 	.word	0x48001c00
 8000a00:	48000400 	.word	0x48000400

08000a04 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0ae      	sub	sp, #184	; 0xb8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a1c:	f107 0318 	add.w	r3, r7, #24
 8000a20:	228c      	movs	r2, #140	; 0x8c
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f00b fd87 	bl	800c538 <memset>
  if(hsd->Instance==SDMMC1)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a6a      	ldr	r2, [pc, #424]	; (8000bd8 <HAL_SD_MspInit+0x1d4>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	f040 80cd 	bne.w	8000bd0 <HAL_SD_MspInit+0x1cc>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000a36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000a3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000a5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a60:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 fdf8 	bl	800565c <HAL_RCCEx_PeriphCLKConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_SD_MspInit+0x72>
    {
      Error_Handler();
 8000a72:	f7ff fe93 	bl	800079c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000a76:	4b59      	ldr	r3, [pc, #356]	; (8000bdc <HAL_SD_MspInit+0x1d8>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7a:	4a58      	ldr	r2, [pc, #352]	; (8000bdc <HAL_SD_MspInit+0x1d8>)
 8000a7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a80:	6613      	str	r3, [r2, #96]	; 0x60
 8000a82:	4b56      	ldr	r3, [pc, #344]	; (8000bdc <HAL_SD_MspInit+0x1d8>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	4b53      	ldr	r3, [pc, #332]	; (8000bdc <HAL_SD_MspInit+0x1d8>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a52      	ldr	r2, [pc, #328]	; (8000bdc <HAL_SD_MspInit+0x1d8>)
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b50      	ldr	r3, [pc, #320]	; (8000bdc <HAL_SD_MspInit+0x1d8>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b4d      	ldr	r3, [pc, #308]	; (8000bdc <HAL_SD_MspInit+0x1d8>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a4c      	ldr	r2, [pc, #304]	; (8000bdc <HAL_SD_MspInit+0x1d8>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <HAL_SD_MspInit+0x1d8>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000adc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	483f      	ldr	r0, [pc, #252]	; (8000be0 <HAL_SD_MspInit+0x1dc>)
 8000ae4:	f002 fd4e 	bl	8003584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_9
 8000ae8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000aec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b02:	230c      	movs	r3, #12
 8000b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4835      	ldr	r0, [pc, #212]	; (8000be4 <HAL_SD_MspInit+0x1e0>)
 8000b10:	f002 fd38 	bl	8003584 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 8000b14:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <HAL_SD_MspInit+0x1e4>)
 8000b16:	4a35      	ldr	r2, [pc, #212]	; (8000bec <HAL_SD_MspInit+0x1e8>)
 8000b18:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 8000b1a:	4b33      	ldr	r3, [pc, #204]	; (8000be8 <HAL_SD_MspInit+0x1e4>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b20:	4b31      	ldr	r3, [pc, #196]	; (8000be8 <HAL_SD_MspInit+0x1e4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b26:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <HAL_SD_MspInit+0x1e4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <HAL_SD_MspInit+0x1e4>)
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b32:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <HAL_SD_MspInit+0x1e4>)
 8000b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b38:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <HAL_SD_MspInit+0x1e4>)
 8000b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b40:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 8000b42:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <HAL_SD_MspInit+0x1e4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b48:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <HAL_SD_MspInit+0x1e4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000b4e:	4826      	ldr	r0, [pc, #152]	; (8000be8 <HAL_SD_MspInit+0x1e4>)
 8000b50:	f002 fa10 	bl	8002f74 <HAL_DMA_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_SD_MspInit+0x15a>
    {
      Error_Handler();
 8000b5a:	f7ff fe1f 	bl	800079c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <HAL_SD_MspInit+0x1e4>)
 8000b62:	641a      	str	r2, [r3, #64]	; 0x40
 8000b64:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <HAL_SD_MspInit+0x1e4>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <HAL_SD_MspInit+0x1ec>)
 8000b6c:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <HAL_SD_MspInit+0x1f0>)
 8000b6e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <HAL_SD_MspInit+0x1ec>)
 8000b72:	2207      	movs	r2, #7
 8000b74:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_SD_MspInit+0x1ec>)
 8000b78:	2210      	movs	r2, #16
 8000b7a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_SD_MspInit+0x1ec>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_SD_MspInit+0x1ec>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_SD_MspInit+0x1ec>)
 8000b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_SD_MspInit+0x1ec>)
 8000b92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b96:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_SD_MspInit+0x1ec>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_SD_MspInit+0x1ec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000ba4:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <HAL_SD_MspInit+0x1ec>)
 8000ba6:	f002 f9e5 	bl	8002f74 <HAL_DMA_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8000bb0:	f7ff fdf4 	bl	800079c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_SD_MspInit+0x1ec>)
 8000bb8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bba:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <HAL_SD_MspInit+0x1ec>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 4, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	2031      	movs	r0, #49	; 0x31
 8000bc6:	f002 f990 	bl	8002eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000bca:	2031      	movs	r0, #49	; 0x31
 8000bcc:	f002 f9a9 	bl	8002f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	37b8      	adds	r7, #184	; 0xb8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40012800 	.word	0x40012800
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48000c00 	.word	0x48000c00
 8000be4:	48000800 	.word	0x48000800
 8000be8:	200009e0 	.word	0x200009e0
 8000bec:	40020444 	.word	0x40020444
 8000bf0:	20000a28 	.word	0x20000a28
 8000bf4:	40020458 	.word	0x40020458

08000bf8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <HAL_FMC_MspInit+0xa4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d13e      	bne.n	8000c92 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_FMC_MspInit+0xa4>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <HAL_FMC_MspInit+0xa8>)
 8000c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c1e:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <HAL_FMC_MspInit+0xa8>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6513      	str	r3, [r2, #80]	; 0x50
 8000c26:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <HAL_FMC_MspInit+0xa8>)
 8000c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  PE9   ------> FMC_D6
  PE8   ------> FMC_D5
  PD14   ------> FMC_D0
  PE7   ------> FMC_D4
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_5
 8000c32:	f24c 03f3 	movw	r3, #49395	; 0xc0f3
 8000c36:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c44:	230c      	movs	r3, #12
 8000c46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <HAL_FMC_MspInit+0xac>)
 8000c4e:	f002 fc99 	bl	8003584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3;
 8000c52:	230f      	movs	r3, #15
 8000c54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c62:	230c      	movs	r3, #12
 8000c64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <HAL_FMC_MspInit+0xb0>)
 8000c6c:	f002 fc8a 	bl	8003584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 8000c70:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000c74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c82:	230c      	movs	r3, #12
 8000c84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4808      	ldr	r0, [pc, #32]	; (8000cac <HAL_FMC_MspInit+0xb4>)
 8000c8c:	f002 fc7a 	bl	8003584 <HAL_GPIO_Init>
 8000c90:	e000      	b.n	8000c94 <HAL_FMC_MspInit+0x9c>
    return;
 8000c92:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000a8 	.word	0x200000a8
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000c00 	.word	0x48000c00
 8000ca8:	48001400 	.word	0x48001400
 8000cac:	48001000 	.word	0x48001000

08000cb0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000cb8:	f7ff ff9e 	bl	8000bf8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d10:	f001 ffa8 	bl	8002c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <DMA1_Channel4_IRQHandler+0x10>)
 8000d1e:	f002 fb52 	bl	80033c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000334 	.word	0x20000334

08000d2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <DMA1_Channel5_IRQHandler+0x10>)
 8000d32:	f002 fb48 	bl	80033c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200002ec 	.word	0x200002ec

08000d40 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <SDMMC1_IRQHandler+0x10>)
 8000d46:	f006 fb71 	bl	800742c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000218 	.word	0x20000218

08000d54 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <DMA2_Channel4_IRQHandler+0x10>)
 8000d5a:	f002 fb34 	bl	80033c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200009e0 	.word	0x200009e0

08000d68 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <DMA2_Channel5_IRQHandler+0x10>)
 8000d6e:	f002 fb2a 	bl	80033c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000a28 	.word	0x20000a28

08000d7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da4:	f7ff ffea 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f00b fb81 	bl	800c4d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd2:	f7ff fa0b 	bl	80001ec <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000de4:	0800c708 	.word	0x0800c708
  ldr r2, =_sbss
 8000de8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000dec:	20000f5c 	.word	0x20000f5c

08000df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_2_IRQHandler>
	...

08000df4 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 ffd1 	bl	8001da8 <mfxstm32l152_GetInstance>
 8000e06:	4603      	mov	r3, r0
 8000e08:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	2bff      	cmp	r3, #255	; 0xff
 8000e0e:	d10e      	bne.n	8000e2e <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 ffc9 	bl	8001da8 <mfxstm32l152_GetInstance>
 8000e16:	4603      	mov	r3, r0
 8000e18:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d806      	bhi.n	8000e2e <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8000e20:	7bbb      	ldrb	r3, [r7, #14]
 8000e22:	88fa      	ldrh	r2, [r7, #6]
 8000e24:	b2d1      	uxtb	r1, r2
 8000e26:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <mfxstm32l152_Init+0x58>)
 8000e28:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8000e2a:	f001 faf1 	bl	8002410 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	2102      	movs	r1, #2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f8db 	bl	8000fee <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f8fc 	bl	800103a <mfxstm32l152_SetIrqOutPinType>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000ac 	.word	0x200000ac

08000e50 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 ffc3 	bl	8001de8 <mfxstm32l152_ReleaseInstance>
 8000e62:	4603      	mov	r3, r0
 8000e64:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2bff      	cmp	r3, #255	; 0xff
 8000e6a:	d001      	beq.n	8000e70 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8000e6c:	f001 fae0 	bl	8002430 <MFX_IO_DeInit>
  }
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fb73 	bl	8002574 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8000e8e:	200a      	movs	r0, #10
 8000e90:	f001 fbb2 	bl	80025f8 <MFX_IO_Delay>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	2240      	movs	r2, #64	; 0x40
 8000eaa:	2140      	movs	r1, #64	; 0x40
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 fb61 	bl	8002574 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8000eb2:	f001 fb27 	bl	8002504 <MFX_IO_EnableWakeupPin>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 ff6c 	bl	8001da8 <mfxstm32l152_GetInstance>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	2bff      	cmp	r3, #255	; 0xff
 8000ed8:	d101      	bne.n	8000ede <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 8000eda:	f001 fb13 	bl	8002504 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 8000ede:	f001 fb35 	bl	800254c <MFX_IO_Wakeup>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 fb7f 	bl	80025f8 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8000efa:	f001 fa89 	bl	8002410 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 fb4a 	bl	800259c <MFX_IO_Read>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	b29b      	uxth	r3, r3
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	80fb      	strh	r3, [r7, #6]
 8000f24:	4613      	mov	r3, r2
 8000f26:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	2142      	movs	r1, #66	; 0x42
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fb33 	bl	800259c <MFX_IO_Read>
 8000f36:	4603      	mov	r3, r0
 8000f38:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	797b      	ldrb	r3, [r7, #5]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	2142      	movs	r1, #66	; 0x42
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 fb13 	bl	8002574 <MFX_IO_Write>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	460a      	mov	r2, r1
 8000f60:	80fb      	strh	r3, [r7, #6]
 8000f62:	4613      	mov	r3, r2
 8000f64:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	2142      	movs	r1, #66	; 0x42
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fb14 	bl	800259c <MFX_IO_Read>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8000f78:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	b25a      	sxtb	r2, r3
 8000f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f84:	4013      	ands	r3, r2
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	2142      	movs	r1, #66	; 0x42
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 faef 	bl	8002574 <MFX_IO_Write>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	460a      	mov	r2, r1
 8000fa8:	80fb      	strh	r3, [r7, #6]
 8000faa:	4613      	mov	r3, r2
 8000fac:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 faf2 	bl	800259c <MFX_IO_Read>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	797b      	ldrb	r3, [r7, #5]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	b2db      	uxtb	r3, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	80fb      	strh	r3, [r7, #6]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8000fda:	797a      	ldrb	r2, [r7, #5]
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	2144      	movs	r1, #68	; 0x44
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fac7 	bl	8002574 <MFX_IO_Write>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	80fb      	strh	r3, [r7, #6]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	2141      	movs	r1, #65	; 0x41
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fac8 	bl	800259c <MFX_IO_Read>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	f023 0302 	bic.w	r3, r3, #2
 8001016:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	797b      	ldrb	r3, [r7, #5]
 800101c:	4313      	orrs	r3, r2
 800101e:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	2141      	movs	r1, #65	; 0x41
 8001026:	4618      	mov	r0, r3
 8001028:	f001 faa4 	bl	8002574 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 800102c:	2001      	movs	r0, #1
 800102e:	f001 fae3 	bl	80025f8 <MFX_IO_Delay>

}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	460a      	mov	r2, r1
 8001044:	80fb      	strh	r3, [r7, #6]
 8001046:	4613      	mov	r3, r2
 8001048:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	2141      	movs	r1, #65	; 0x41
 8001052:	4618      	mov	r0, r3
 8001054:	f001 faa2 	bl	800259c <MFX_IO_Read>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	797b      	ldrb	r3, [r7, #5]
 8001068:	4313      	orrs	r3, r2
 800106a:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	2141      	movs	r1, #65	; 0x41
 8001072:	4618      	mov	r0, r3
 8001074:	f001 fa7e 	bl	8002574 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8001078:	2001      	movs	r0, #1
 800107a:	f001 fabd 	bl	80025f8 <MFX_IO_Delay>

}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	6039      	str	r1, [r7, #0]
 8001090:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fa80 	bl	800259c <MFX_IO_Read>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ae:	d304      	bcc.n	80010ba <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e003      	b.n	80010c2 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f023 0308 	bic.w	r3, r3, #8
 80010c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fa53 	bl	8002574 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f001 fa92 	bl	80025f8 <MFX_IO_Delay>
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	80fb      	strh	r3, [r7, #6]
 80010e8:	4613      	mov	r3, r2
 80010ea:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 80010f0:	797b      	ldrb	r3, [r7, #5]
 80010f2:	2b17      	cmp	r3, #23
 80010f4:	f200 82d4 	bhi.w	80016a0 <mfxstm32l152_IO_Config+0x5c4>
 80010f8:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <mfxstm32l152_IO_Config+0x24>)
 80010fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fe:	bf00      	nop
 8001100:	08001191 	.word	0x08001191
 8001104:	08001221 	.word	0x08001221
 8001108:	080012e1 	.word	0x080012e1
 800110c:	080013d1 	.word	0x080013d1
 8001110:	080014c1 	.word	0x080014c1
 8001114:	080015b1 	.word	0x080015b1
 8001118:	08001161 	.word	0x08001161
 800111c:	08001161 	.word	0x08001161
 8001120:	080011c1 	.word	0x080011c1
 8001124:	080011f1 	.word	0x080011f1
 8001128:	080016a1 	.word	0x080016a1
 800112c:	080012b1 	.word	0x080012b1
 8001130:	08001281 	.word	0x08001281
 8001134:	080016a1 	.word	0x080016a1
 8001138:	08001251 	.word	0x08001251
 800113c:	08001221 	.word	0x08001221
 8001140:	08001331 	.word	0x08001331
 8001144:	08001381 	.word	0x08001381
 8001148:	08001421 	.word	0x08001421
 800114c:	08001471 	.word	0x08001471
 8001150:	08001511 	.word	0x08001511
 8001154:	08001561 	.word	0x08001561
 8001158:	08001601 	.word	0x08001601
 800115c:	08001651 	.word	0x08001651
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	6839      	ldr	r1, [r7, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fb67 	bl	8001838 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	2200      	movs	r2, #0
 800116e:	6839      	ldr	r1, [r7, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fa9d 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001176:	88f8      	ldrh	r0, [r7, #6]
 8001178:	2300      	movs	r3, #0
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	2164      	movs	r1, #100	; 0x64
 800117e:	f000 fe57 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001182:	88f8      	ldrh	r0, [r7, #6]
 8001184:	2300      	movs	r3, #0
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	2168      	movs	r1, #104	; 0x68
 800118a:	f000 fe51 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    break;
 800118e:	e28a      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	6839      	ldr	r1, [r7, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fb4f 	bl	8001838 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	2200      	movs	r2, #0
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fa85 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80011a6:	88f8      	ldrh	r0, [r7, #6]
 80011a8:	2300      	movs	r3, #0
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	2164      	movs	r1, #100	; 0x64
 80011ae:	f000 fe3f 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80011b2:	88f8      	ldrh	r0, [r7, #6]
 80011b4:	2301      	movs	r3, #1
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	2168      	movs	r1, #104	; 0x68
 80011ba:	f000 fe39 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    break;
 80011be:	e272      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	6839      	ldr	r1, [r7, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fb37 	bl	8001838 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	2200      	movs	r2, #0
 80011ce:	6839      	ldr	r1, [r7, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fa6d 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80011d6:	88f8      	ldrh	r0, [r7, #6]
 80011d8:	2301      	movs	r3, #1
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	2164      	movs	r1, #100	; 0x64
 80011de:	f000 fe27 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80011e2:	88f8      	ldrh	r0, [r7, #6]
 80011e4:	2301      	movs	r3, #1
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	2168      	movs	r1, #104	; 0x68
 80011ea:	f000 fe21 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    break;
 80011ee:	e25a      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fb1f 	bl	8001838 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	2200      	movs	r2, #0
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fa55 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001206:	88f8      	ldrh	r0, [r7, #6]
 8001208:	2301      	movs	r3, #1
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	2164      	movs	r1, #100	; 0x64
 800120e:	f000 fe0f 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001212:	88f8      	ldrh	r0, [r7, #6]
 8001214:	2300      	movs	r3, #0
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	2168      	movs	r1, #104	; 0x68
 800121a:	f000 fe09 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    break;
 800121e:	e242      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	6839      	ldr	r1, [r7, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fb07 	bl	8001838 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	2201      	movs	r2, #1
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fa3d 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8001236:	88f8      	ldrh	r0, [r7, #6]
 8001238:	2300      	movs	r3, #0
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	2164      	movs	r1, #100	; 0x64
 800123e:	f000 fdf7 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001242:	88f8      	ldrh	r0, [r7, #6]
 8001244:	2300      	movs	r3, #0
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	2168      	movs	r1, #104	; 0x68
 800124a:	f000 fdf1 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    break;
 800124e:	e22a      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f000 faef 	bl	8001838 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	2201      	movs	r2, #1
 800125e:	6839      	ldr	r1, [r7, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fa25 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8001266:	88f8      	ldrh	r0, [r7, #6]
 8001268:	2300      	movs	r3, #0
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	2164      	movs	r1, #100	; 0x64
 800126e:	f000 fddf 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001272:	88f8      	ldrh	r0, [r7, #6]
 8001274:	2301      	movs	r3, #1
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	2168      	movs	r1, #104	; 0x68
 800127a:	f000 fdd9 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    break;
 800127e:	e212      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	6839      	ldr	r1, [r7, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fad7 	bl	8001838 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	2201      	movs	r2, #1
 800128e:	6839      	ldr	r1, [r7, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fa0d 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8001296:	88f8      	ldrh	r0, [r7, #6]
 8001298:	2301      	movs	r3, #1
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	2164      	movs	r1, #100	; 0x64
 800129e:	f000 fdc7 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80012a2:	88f8      	ldrh	r0, [r7, #6]
 80012a4:	2300      	movs	r3, #0
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	2168      	movs	r1, #104	; 0x68
 80012aa:	f000 fdc1 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    break;
 80012ae:	e1fa      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fabf 	bl	8001838 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	2201      	movs	r2, #1
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f9f5 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80012c6:	88f8      	ldrh	r0, [r7, #6]
 80012c8:	2301      	movs	r3, #1
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	2164      	movs	r1, #100	; 0x64
 80012ce:	f000 fdaf 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80012d2:	88f8      	ldrh	r0, [r7, #6]
 80012d4:	2301      	movs	r3, #1
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	2168      	movs	r1, #104	; 0x68
 80012da:	f000 fda9 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    break;
 80012de:	e1e2      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fa7a 	bl	80017dc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	2200      	movs	r2, #0
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f9de 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80012f4:	88f8      	ldrh	r0, [r7, #6]
 80012f6:	2300      	movs	r3, #0
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	2164      	movs	r1, #100	; 0x64
 80012fc:	f000 fd98 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001300:	88f8      	ldrh	r0, [r7, #6]
 8001302:	2301      	movs	r3, #1
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	2168      	movs	r1, #104	; 0x68
 8001308:	f000 fd92 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	2201      	movs	r2, #1
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f9de 	bl	80016d4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	2201      	movs	r2, #1
 800131c:	6839      	ldr	r1, [r7, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f9ed 	bl	80016fe <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	6839      	ldr	r1, [r7, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fa75 	bl	8001818 <mfxstm32l152_IO_EnablePinIT>
    break;
 800132e:	e1ba      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fa52 	bl	80017dc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	2200      	movs	r2, #0
 800133c:	6839      	ldr	r1, [r7, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f9b6 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001344:	88f8      	ldrh	r0, [r7, #6]
 8001346:	2301      	movs	r3, #1
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	2164      	movs	r1, #100	; 0x64
 800134c:	f000 fd70 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001350:	88f8      	ldrh	r0, [r7, #6]
 8001352:	2301      	movs	r3, #1
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	2168      	movs	r1, #104	; 0x68
 8001358:	f000 fd6a 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	2201      	movs	r2, #1
 8001360:	6839      	ldr	r1, [r7, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f9b6 	bl	80016d4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	2201      	movs	r2, #1
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f9c5 	bl	80016fe <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fa4d 	bl	8001818 <mfxstm32l152_IO_EnablePinIT>
    break;
 800137e:	e192      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fa2a 	bl	80017dc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	2200      	movs	r2, #0
 800138c:	6839      	ldr	r1, [r7, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f98e 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001394:	88f8      	ldrh	r0, [r7, #6]
 8001396:	2301      	movs	r3, #1
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	2164      	movs	r1, #100	; 0x64
 800139c:	f000 fd48 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80013a0:	88f8      	ldrh	r0, [r7, #6]
 80013a2:	2300      	movs	r3, #0
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	2168      	movs	r1, #104	; 0x68
 80013a8:	f000 fd42 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	2201      	movs	r2, #1
 80013b0:	6839      	ldr	r1, [r7, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f98e 	bl	80016d4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	2201      	movs	r2, #1
 80013bc:	6839      	ldr	r1, [r7, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f99d 	bl	80016fe <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fa25 	bl	8001818 <mfxstm32l152_IO_EnablePinIT>
    break;
 80013ce:	e16a      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fa02 	bl	80017dc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	2200      	movs	r2, #0
 80013dc:	6839      	ldr	r1, [r7, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f966 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80013e4:	88f8      	ldrh	r0, [r7, #6]
 80013e6:	2300      	movs	r3, #0
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	2164      	movs	r1, #100	; 0x64
 80013ec:	f000 fd20 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80013f0:	88f8      	ldrh	r0, [r7, #6]
 80013f2:	2301      	movs	r3, #1
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	2168      	movs	r1, #104	; 0x68
 80013f8:	f000 fd1a 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	2201      	movs	r2, #1
 8001400:	6839      	ldr	r1, [r7, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f966 	bl	80016d4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	2200      	movs	r2, #0
 800140c:	6839      	ldr	r1, [r7, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f975 	bl	80016fe <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	6839      	ldr	r1, [r7, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f9fd 	bl	8001818 <mfxstm32l152_IO_EnablePinIT>
    break;
 800141e:	e142      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f9da 	bl	80017dc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	2200      	movs	r2, #0
 800142c:	6839      	ldr	r1, [r7, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f93e 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001434:	88f8      	ldrh	r0, [r7, #6]
 8001436:	2301      	movs	r3, #1
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	2164      	movs	r1, #100	; 0x64
 800143c:	f000 fcf8 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001440:	88f8      	ldrh	r0, [r7, #6]
 8001442:	2301      	movs	r3, #1
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	2168      	movs	r1, #104	; 0x68
 8001448:	f000 fcf2 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	2201      	movs	r2, #1
 8001450:	6839      	ldr	r1, [r7, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f93e 	bl	80016d4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	2200      	movs	r2, #0
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f94d 	bl	80016fe <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	6839      	ldr	r1, [r7, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f000 f9d5 	bl	8001818 <mfxstm32l152_IO_EnablePinIT>
    break;
 800146e:	e11a      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f9b2 	bl	80017dc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	2200      	movs	r2, #0
 800147c:	6839      	ldr	r1, [r7, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f916 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001484:	88f8      	ldrh	r0, [r7, #6]
 8001486:	2301      	movs	r3, #1
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	2164      	movs	r1, #100	; 0x64
 800148c:	f000 fcd0 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001490:	88f8      	ldrh	r0, [r7, #6]
 8001492:	2300      	movs	r3, #0
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	2168      	movs	r1, #104	; 0x68
 8001498:	f000 fcca 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	2201      	movs	r2, #1
 80014a0:	6839      	ldr	r1, [r7, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f916 	bl	80016d4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	2200      	movs	r2, #0
 80014ac:	6839      	ldr	r1, [r7, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f925 	bl	80016fe <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	6839      	ldr	r1, [r7, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f9ad 	bl	8001818 <mfxstm32l152_IO_EnablePinIT>
    break;
 80014be:	e0f2      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f98a 	bl	80017dc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	2200      	movs	r2, #0
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f8ee 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80014d4:	88f8      	ldrh	r0, [r7, #6]
 80014d6:	2300      	movs	r3, #0
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	2164      	movs	r1, #100	; 0x64
 80014dc:	f000 fca8 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80014e0:	88f8      	ldrh	r0, [r7, #6]
 80014e2:	2301      	movs	r3, #1
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	2168      	movs	r1, #104	; 0x68
 80014e8:	f000 fca2 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	2200      	movs	r2, #0
 80014f0:	6839      	ldr	r1, [r7, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f8ee 	bl	80016d4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	2200      	movs	r2, #0
 80014fc:	6839      	ldr	r1, [r7, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f8fd 	bl	80016fe <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	6839      	ldr	r1, [r7, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f985 	bl	8001818 <mfxstm32l152_IO_EnablePinIT>
    break;
 800150e:	e0ca      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f962 	bl	80017dc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	2200      	movs	r2, #0
 800151c:	6839      	ldr	r1, [r7, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f8c6 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001524:	88f8      	ldrh	r0, [r7, #6]
 8001526:	2301      	movs	r3, #1
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	2164      	movs	r1, #100	; 0x64
 800152c:	f000 fc80 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001530:	88f8      	ldrh	r0, [r7, #6]
 8001532:	2301      	movs	r3, #1
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	2168      	movs	r1, #104	; 0x68
 8001538:	f000 fc7a 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	2200      	movs	r2, #0
 8001540:	6839      	ldr	r1, [r7, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f8c6 	bl	80016d4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	2200      	movs	r2, #0
 800154c:	6839      	ldr	r1, [r7, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f8d5 	bl	80016fe <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	6839      	ldr	r1, [r7, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f95d 	bl	8001818 <mfxstm32l152_IO_EnablePinIT>
    break;
 800155e:	e0a2      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f93a 	bl	80017dc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	2200      	movs	r2, #0
 800156c:	6839      	ldr	r1, [r7, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f89e 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001574:	88f8      	ldrh	r0, [r7, #6]
 8001576:	2301      	movs	r3, #1
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	2164      	movs	r1, #100	; 0x64
 800157c:	f000 fc58 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001580:	88f8      	ldrh	r0, [r7, #6]
 8001582:	2300      	movs	r3, #0
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	2168      	movs	r1, #104	; 0x68
 8001588:	f000 fc52 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	2200      	movs	r2, #0
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f89e 	bl	80016d4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	2200      	movs	r2, #0
 800159c:	6839      	ldr	r1, [r7, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f8ad 	bl	80016fe <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f935 	bl	8001818 <mfxstm32l152_IO_EnablePinIT>
    break;
 80015ae:	e07a      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f912 	bl	80017dc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	2200      	movs	r2, #0
 80015bc:	6839      	ldr	r1, [r7, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f876 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80015c4:	88f8      	ldrh	r0, [r7, #6]
 80015c6:	2300      	movs	r3, #0
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	2164      	movs	r1, #100	; 0x64
 80015cc:	f000 fc30 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80015d0:	88f8      	ldrh	r0, [r7, #6]
 80015d2:	2301      	movs	r3, #1
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	2168      	movs	r1, #104	; 0x68
 80015d8:	f000 fc2a 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	2200      	movs	r2, #0
 80015e0:	6839      	ldr	r1, [r7, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f876 	bl	80016d4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	2201      	movs	r2, #1
 80015ec:	6839      	ldr	r1, [r7, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f885 	bl	80016fe <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	6839      	ldr	r1, [r7, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f90d 	bl	8001818 <mfxstm32l152_IO_EnablePinIT>
    break;
 80015fe:	e052      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f8ea 	bl	80017dc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	2200      	movs	r2, #0
 800160c:	6839      	ldr	r1, [r7, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f84e 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001614:	88f8      	ldrh	r0, [r7, #6]
 8001616:	2301      	movs	r3, #1
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	2164      	movs	r1, #100	; 0x64
 800161c:	f000 fc08 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001620:	88f8      	ldrh	r0, [r7, #6]
 8001622:	2301      	movs	r3, #1
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	2168      	movs	r1, #104	; 0x68
 8001628:	f000 fc02 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	2200      	movs	r2, #0
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f84e 	bl	80016d4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	2201      	movs	r2, #1
 800163c:	6839      	ldr	r1, [r7, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f85d 	bl	80016fe <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	6839      	ldr	r1, [r7, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f8e5 	bl	8001818 <mfxstm32l152_IO_EnablePinIT>
    break;
 800164e:	e02a      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f8c2 	bl	80017dc <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	2200      	movs	r2, #0
 800165c:	6839      	ldr	r1, [r7, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f826 	bl	80016b0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001664:	88f8      	ldrh	r0, [r7, #6]
 8001666:	2301      	movs	r3, #1
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	2164      	movs	r1, #100	; 0x64
 800166c:	f000 fbe0 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001670:	88f8      	ldrh	r0, [r7, #6]
 8001672:	2300      	movs	r3, #0
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	2168      	movs	r1, #104	; 0x68
 8001678:	f000 fbda 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	2200      	movs	r2, #0
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f826 	bl	80016d4 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	2201      	movs	r2, #1
 800168c:	6839      	ldr	r1, [r7, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f835 	bl	80016fe <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	6839      	ldr	r1, [r7, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f000 f8bd 	bl	8001818 <mfxstm32l152_IO_EnablePinIT>
    break;
 800169e:	e002      	b.n	80016a6 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 80016a0:	797b      	ldrb	r3, [r7, #5]
 80016a2:	73fb      	strb	r3, [r7, #15]
    break;
 80016a4:	bf00      	nop
  }

  return error_code;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	80fb      	strh	r3, [r7, #6]
 80016bc:	4613      	mov	r3, r2
 80016be:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 80016c0:	797b      	ldrb	r3, [r7, #5]
 80016c2:	88f8      	ldrh	r0, [r7, #6]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	2160      	movs	r1, #96	; 0x60
 80016c8:	f000 fbb2 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	80fb      	strh	r3, [r7, #6]
 80016e0:	4613      	mov	r3, r2
 80016e2:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 80016e4:	797b      	ldrb	r3, [r7, #5]
 80016e6:	88f8      	ldrh	r0, [r7, #6]
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	214c      	movs	r1, #76	; 0x4c
 80016ec:	f000 fba0 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f000 ff81 	bl	80025f8 <MFX_IO_Delay>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	6039      	str	r1, [r7, #0]
 8001708:	80fb      	strh	r3, [r7, #6]
 800170a:	4613      	mov	r3, r2
 800170c:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 800170e:	797b      	ldrb	r3, [r7, #5]
 8001710:	88f8      	ldrh	r0, [r7, #6]
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	2150      	movs	r1, #80	; 0x50
 8001716:	f000 fb8b 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 800171a:	2001      	movs	r0, #1
 800171c:	f000 ff6c 	bl	80025f8 <MFX_IO_Delay>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	80fb      	strh	r3, [r7, #6]
 8001734:	4613      	mov	r3, r2
 8001736:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8001738:	797b      	ldrb	r3, [r7, #5]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d006      	beq.n	800174c <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 800173e:	88f8      	ldrh	r0, [r7, #6]
 8001740:	2301      	movs	r3, #1
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	216c      	movs	r1, #108	; 0x6c
 8001746:	f000 fb73 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 800174a:	e005      	b.n	8001758 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 800174c:	88f8      	ldrh	r0, [r7, #6]
 800174e:	2301      	movs	r3, #1
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	2170      	movs	r1, #112	; 0x70
 8001754:	f000 fb6c 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	2110      	movs	r1, #16
 8001784:	4618      	mov	r0, r3
 8001786:	f000 ff09 	bl	800259c <MFX_IO_Read>
 800178a:	4603      	mov	r3, r0
 800178c:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	2111      	movs	r1, #17
 800179c:	4618      	mov	r0, r3
 800179e:	f000 fefd 	bl	800259c <MFX_IO_Read>
 80017a2:	4603      	mov	r3, r0
 80017a4:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	2112      	movs	r1, #18
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 fef1 	bl	800259c <MFX_IO_Read>
 80017ba:	4603      	mov	r3, r0
 80017bc:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	021a      	lsls	r2, r3, #8
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	441a      	add	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4013      	ands	r3, r2
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80017e6:	f000 fe5f 	bl	80024a8 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	2101      	movs	r1, #1
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fb92 	bl	8000f18 <mfxstm32l152_EnableITSource>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	2101      	movs	r1, #1
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fba3 	bl	8000f56 <mfxstm32l152_DisableITSource>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8001824:	88f8      	ldrh	r0, [r7, #6]
 8001826:	2301      	movs	r3, #1
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	2148      	movs	r1, #72	; 0x48
 800182c:	f000 fb00 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8001844:	88f8      	ldrh	r0, [r7, #6]
 8001846:	2300      	movs	r3, #0
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	2148      	movs	r1, #72	; 0x48
 800184c:	f000 faf0 	bl	8001e30 <mfxstm32l152_reg24_setPinValue>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	210c      	movs	r1, #12
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fe8d 	bl	800259c <MFX_IO_Read>
 8001882:	4603      	mov	r3, r0
 8001884:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800188c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	210d      	movs	r1, #13
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fe7f 	bl	800259c <MFX_IO_Read>
 800189e:	4603      	mov	r3, r0
 80018a0:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	210e      	movs	r1, #14
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fe73 	bl	800259c <MFX_IO_Read>
 80018b6:	4603      	mov	r3, r0
 80018b8:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	89bb      	ldrh	r3, [r7, #12]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	4413      	add	r3, r2
 80018c2:	461a      	mov	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	041b      	lsls	r3, r3, #16
 80018c8:	4413      	add	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	4013      	ands	r3, r2
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	6039      	str	r1, [r7, #0]
 80018e4:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	0c1b      	lsrs	r3, r3, #16
 80018f4:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	2154      	movs	r1, #84	; 0x54
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fe36 	bl	8002574 <MFX_IO_Write>
  }
  if (pin_8_15)
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 800190e:	7bba      	ldrb	r2, [r7, #14]
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	2155      	movs	r1, #85	; 0x55
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fe2d 	bl	8002574 <MFX_IO_Write>
  }
  if (pin_16_23)
 800191a:	7b7b      	ldrb	r3, [r7, #13]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8001920:	7b7a      	ldrb	r2, [r7, #13]
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	2156      	movs	r1, #86	; 0x56
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fe24 	bl	8002574 <MFX_IO_Write>
  }
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	b29b      	uxth	r3, r3
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fe26 	bl	800259c <MFX_IO_Read>
 8001950:	4603      	mov	r3, r0
 8001952:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	b29b      	uxth	r3, r3
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fe04 	bl	8002574 <MFX_IO_Write>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8001974:	b084      	sub	sp, #16
 8001976:	b590      	push	{r4, r7, lr}
 8001978:	b085      	sub	sp, #20
 800197a:	af00      	add	r7, sp, #0
 800197c:	4604      	mov	r4, r0
 800197e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001986:	4623      	mov	r3, r4
 8001988:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	b29b      	uxth	r3, r3
 8001998:	2140      	movs	r1, #64	; 0x40
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fdfe 	bl	800259c <MFX_IO_Read>
 80019a0:	4603      	mov	r3, r0
 80019a2:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 80019a4:	7bbb      	ldrb	r3, [r7, #14]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10b      	bne.n	80019c6 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	7bba      	ldrb	r2, [r7, #14]
 80019be:	2140      	movs	r1, #64	; 0x40
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fdd7 	bl	8002574 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 80019c6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f003 030e 	and.w	r3, r3, #14
 80019d2:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 80019d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 80019ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019f4:	b25a      	sxtb	r2, r3
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fdb2 	bl	8002574 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001a10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a1a:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8001a1c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001a20:	b25b      	sxtb	r3, r3
 8001a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a26:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	2181      	movs	r1, #129	; 0x81
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fd9b 	bl	8002574 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8001a3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	2182      	movs	r1, #130	; 0x82
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fd8f 	bl	8002574 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8001a56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a58:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	2183      	movs	r1, #131	; 0x83
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fd85 	bl	8002574 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8001a6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	2184      	movs	r1, #132	; 0x84
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 fd79 	bl	8002574 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8001a82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a84:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	2185      	movs	r1, #133	; 0x85
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fd6f 	bl	8002574 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8001a96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	2186      	movs	r1, #134	; 0x86
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fd63 	bl	8002574 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8001aae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ab0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	2187      	movs	r1, #135	; 0x87
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fd59 	bl	8002574 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8001ac2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	2188      	movs	r1, #136	; 0x88
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fd4d 	bl	8002574 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8001ada:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001adc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	2189      	movs	r1, #137	; 0x89
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 fd43 	bl	8002574 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8001aee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	218a      	movs	r1, #138	; 0x8a
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fd37 	bl	8002574 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8001b06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b08:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	218b      	movs	r1, #139	; 0x8b
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 fd2d 	bl	8002574 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8001b1a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001b1c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	2190      	movs	r1, #144	; 0x90
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fd23 	bl	8002574 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8001b2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b30:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	2191      	movs	r1, #145	; 0x91
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 fd19 	bl	8002574 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8001b42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b44:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	2192      	movs	r1, #146	; 0x92
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fd0f 	bl	8002574 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8001b56:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001b58:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	2193      	movs	r1, #147	; 0x93
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fd05 	bl	8002574 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8001b6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001b6c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	2194      	movs	r1, #148	; 0x94
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fcfb 	bl	8002574 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8001b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	218c      	movs	r1, #140	; 0x8c
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fcef 	bl	8002574 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8001b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b98:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	218d      	movs	r1, #141	; 0x8d
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fce5 	bl	8002574 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8001baa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	218e      	movs	r1, #142	; 0x8e
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 fcd9 	bl	8002574 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8001bc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bc4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	218f      	movs	r1, #143	; 0x8f
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fccf 	bl	8002574 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8001bd6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001bda:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	2196      	movs	r1, #150	; 0x96
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fcc4 	bl	8002574 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001bec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bf6:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8001bf8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001bfc:	b25b      	sxtb	r3, r3
 8001bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c02:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b25b      	sxtb	r3, r3
 8001c08:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	2197      	movs	r1, #151	; 0x97
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fcad 	bl	8002574 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8001c1a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001c1e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	2198      	movs	r1, #152	; 0x98
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fca2 	bl	8002574 <MFX_IO_Write>
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001c3a:	b004      	add	sp, #16
 8001c3c:	4770      	bx	lr

08001c3e <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	6039      	str	r1, [r7, #0]
 8001c48:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	b298      	uxth	r0, r3
 8001c50:	f107 020c 	add.w	r2, r7, #12
 8001c54:	2303      	movs	r3, #3
 8001c56:	2114      	movs	r1, #20
 8001c58:	f000 fcb4 	bl	80025c4 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8001c5c:	7b3b      	ldrb	r3, [r7, #12]
 8001c5e:	041a      	lsls	r2, r3, #16
 8001c60:	7b7b      	ldrb	r3, [r7, #13]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	4313      	orrs	r3, r2
 8001c66:	7bba      	ldrb	r2, [r7, #14]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	601a      	str	r2, [r3, #0]

}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001c82:	f000 fc11 	bl	80024a8 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f944 	bl	8000f18 <mfxstm32l152_EnableITSource>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f98f 	bl	8000fca <mfxstm32l152_ClearGlobalIT>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f96b 	bl	8000f9e <mfxstm32l152_GlobalITStatus>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f938 	bl	8000f56 <mfxstm32l152_DisableITSource>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2103      	movs	r1, #3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fc4b 	bl	800259c <MFX_IO_Read>
 8001d06:	4603      	mov	r3, r0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2104      	movs	r1, #4
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fc3a 	bl	800259c <MFX_IO_Read>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001d3c:	f000 fbb4 	bl	80024a8 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	2104      	movs	r1, #4
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f8e7 	bl	8000f18 <mfxstm32l152_EnableITSource>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	2104      	movs	r1, #4
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff f932 	bl	8000fca <mfxstm32l152_ClearGlobalIT>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f90e 	bl	8000f9e <mfxstm32l152_GlobalITStatus>
 8001d82:	4603      	mov	r3, r0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	2104      	movs	r1, #4
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f8db 	bl	8000f56 <mfxstm32l152_DisableITSource>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
 8001db6:	e00b      	b.n	8001dd0 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <mfxstm32l152_GetInstance+0x3c>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	88fa      	ldrh	r2, [r7, #6]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d101      	bne.n	8001dca <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	e006      	b.n	8001dd8 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d9f0      	bls.n	8001db8 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8001dd6:	23ff      	movs	r3, #255	; 0xff
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	200000ac 	.word	0x200000ac

08001de8 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	e00f      	b.n	8001e18 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <mfxstm32l152_ReleaseInstance+0x44>)
 8001dfc:	5cd3      	ldrb	r3, [r2, r3]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	88fa      	ldrh	r2, [r7, #6]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d105      	bne.n	8001e12 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <mfxstm32l152_ReleaseInstance+0x44>)
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	54d1      	strb	r1, [r2, r3]
      return idx;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	e006      	b.n	8001e20 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	3301      	adds	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d9ec      	bls.n	8001df8 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8001e1e:	23ff      	movs	r3, #255	; 0xff
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	200000ac 	.word	0x200000ac

08001e30 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	603a      	str	r2, [r7, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80fb      	strh	r3, [r7, #6]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	717b      	strb	r3, [r7, #5]
 8001e42:	4613      	mov	r3, r2
 8001e44:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	0c1b      	lsrs	r3, r3, #16
 8001e58:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01e      	beq.n	8001e9e <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8001e60:	797a      	ldrb	r2, [r7, #5]
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	4611      	mov	r1, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fb98 	bl	800259c <MFX_IO_Read>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001e70:	793b      	ldrb	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d004      	beq.n	8001e80 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	73fb      	strb	r3, [r7, #15]
 8001e7e:	e008      	b.n	8001e92 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8001e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	b25a      	sxtb	r2, r3
 8001e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	b25b      	sxtb	r3, r3
 8001e90:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	7979      	ldrb	r1, [r7, #5]
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fb6b 	bl	8002574 <MFX_IO_Write>
  }

  if (pin_8_15)
 8001e9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d022      	beq.n	8001eea <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8001ea4:	797b      	ldrb	r3, [r7, #5]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fb74 	bl	800259c <MFX_IO_Read>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001eb8:	793b      	ldrb	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d004      	beq.n	8001ec8 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	73fb      	strb	r3, [r7, #15]
 8001ec6:	e008      	b.n	8001eda <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8001ec8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	b25a      	sxtb	r2, r3
 8001ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 8001eda:	797b      	ldrb	r3, [r7, #5]
 8001edc:	3301      	adds	r3, #1
 8001ede:	b2d9      	uxtb	r1, r3
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fb45 	bl	8002574 <MFX_IO_Write>
  }

  if (pin_16_23)
 8001eea:	7b3b      	ldrb	r3, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d022      	beq.n	8001f36 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8001ef0:	797b      	ldrb	r3, [r7, #5]
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fb4e 	bl	800259c <MFX_IO_Read>
 8001f00:	4603      	mov	r3, r0
 8001f02:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001f04:	793b      	ldrb	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	7b3b      	ldrb	r3, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e008      	b.n	8001f26 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001f14:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	b25a      	sxtb	r2, r3
 8001f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f20:	4013      	ands	r3, r2
 8001f22:	b25b      	sxtb	r3, r3
 8001f24:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8001f26:	797b      	ldrb	r3, [r7, #5]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	b2d9      	uxtb	r1, r3
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fb1f 	bl	8002574 <MFX_IO_Write>
  }
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  while (1);
 8001f42:	e7fe      	b.n	8001f42 <BSP_ErrorHandler+0x4>

08001f44 <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d124      	bne.n	8001f9e <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <BSP_LED_Init+0x90>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f58:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <BSP_LED_Init+0x90>)
 8001f5a:	f043 0302 	orr.w	r3, r3, #2
 8001f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f60:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <BSP_LED_Init+0x90>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <BSP_LED_Init+0x94>)
 8001f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001f76:	2301      	movs	r3, #1
 8001f78:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4619      	mov	r1, r3
 8001f88:	4814      	ldr	r0, [pc, #80]	; (8001fdc <BSP_LED_Init+0x98>)
 8001f8a:	f001 fafb 	bl	8003584 <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2201      	movs	r2, #1
 8001f94:	4619      	mov	r1, r3
 8001f96:	4811      	ldr	r0, [pc, #68]	; (8001fdc <BSP_LED_Init+0x98>)
 8001f98:	f001 fd78 	bl	8003a8c <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 8001f9c:	e016      	b.n	8001fcc <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 8001f9e:	f000 fb37 	bl	8002610 <BSP_IO_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 8001fa8:	f7ff ffc9 	bl	8001f3e <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <BSP_LED_Init+0x94>)
 8001fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fb6e 	bl	8002698 <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <BSP_LED_Init+0x94>)
 8001fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fb82 	bl	80026d0 <BSP_IO_WritePin>
}
 8001fcc:	bf00      	nop
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	0800c648 	.word	0x0800c648
 8001fdc:	48000400 	.word	0x48000400

08001fe0 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d109      	bne.n	8002004 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <BSP_LED_On+0x3c>)
 8001ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4808      	ldr	r0, [pc, #32]	; (8002020 <BSP_LED_On+0x40>)
 8001ffe:	f001 fd45 	bl	8003a8c <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 8002002:	e007      	b.n	8002014 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <BSP_LED_On+0x3c>)
 8002008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fb5e 	bl	80026d0 <BSP_IO_WritePin>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	0800c648 	.word	0x0800c648
 8002020:	48000400 	.word	0x48000400

08002024 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d109      	bne.n	8002048 <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <BSP_LED_Off+0x3c>)
 8002038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800203c:	2201      	movs	r2, #1
 800203e:	4619      	mov	r1, r3
 8002040:	4808      	ldr	r0, [pc, #32]	; (8002064 <BSP_LED_Off+0x40>)
 8002042:	f001 fd23 	bl	8003a8c <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 8002046:	e007      	b.n	8002058 <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <BSP_LED_Off+0x3c>)
 800204c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002050:	2101      	movs	r1, #1
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fb3c 	bl	80026d0 <BSP_IO_WritePin>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	0800c648 	.word	0x0800c648
 8002064:	48000400 	.word	0x48000400

08002068 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 800206c:	4812      	ldr	r0, [pc, #72]	; (80020b8 <I2C2_Init+0x50>)
 800206e:	f002 f918 	bl	80042a2 <HAL_I2C_GetState>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11d      	bne.n	80020b4 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <I2C2_Init+0x50>)
 800207a:	4a10      	ldr	r2, [pc, #64]	; (80020bc <I2C2_Init+0x54>)
 800207c:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <I2C2_Init+0x50>)
 8002080:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <I2C2_Init+0x58>)
 8002082:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <I2C2_Init+0x50>)
 8002086:	2270      	movs	r2, #112	; 0x70
 8002088:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <I2C2_Init+0x50>)
 800208c:	2201      	movs	r2, #1
 800208e:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <I2C2_Init+0x50>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <I2C2_Init+0x50>)
 8002098:	22ff      	movs	r2, #255	; 0xff
 800209a:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <I2C2_Init+0x50>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <I2C2_Init+0x50>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 80020a8:	4803      	ldr	r0, [pc, #12]	; (80020b8 <I2C2_Init+0x50>)
 80020aa:	f000 f80b 	bl	80020c4 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 80020ae:	4802      	ldr	r0, [pc, #8]	; (80020b8 <I2C2_Init+0x50>)
 80020b0:	f001 fd04 	bl	8003abc <HAL_I2C_Init>
  }
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200000b0 	.word	0x200000b0
 80020bc:	40005800 	.word	0x40005800
 80020c0:	40403e5d 	.word	0x40403e5d

080020c4 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0ae      	sub	sp, #184	; 0xb8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a37      	ldr	r2, [pc, #220]	; (80021b0 <I2C2_MspInit+0xec>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d168      	bne.n	80021a8 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80020da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020de:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 80020e0:	f107 0318 	add.w	r3, r7, #24
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 fab9 	bl	800565c <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80020ea:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <I2C2_MspInit+0xf0>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	4a31      	ldr	r2, [pc, #196]	; (80021b4 <I2C2_MspInit+0xf0>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f6:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <I2C2_MspInit+0xf0>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8002102:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <I2C2_MspInit+0xf0>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	4a2b      	ldr	r2, [pc, #172]	; (80021b4 <I2C2_MspInit+0xf0>)
 8002108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800210e:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <I2C2_MspInit+0xf0>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 800211a:	2310      	movs	r3, #16
 800211c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8002120:	2312      	movs	r3, #18
 8002122:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8002126:	2301      	movs	r3, #1
 8002128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8002132:	2304      	movs	r3, #4
 8002134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8002138:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800213c:	4619      	mov	r1, r3
 800213e:	481e      	ldr	r0, [pc, #120]	; (80021b8 <I2C2_MspInit+0xf4>)
 8002140:	f001 fa20 	bl	8003584 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8002144:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 800214c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002150:	4619      	mov	r1, r3
 8002152:	481a      	ldr	r0, [pc, #104]	; (80021bc <I2C2_MspInit+0xf8>)
 8002154:	f001 fa16 	bl	8003584 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <I2C2_MspInit+0xf0>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	4a15      	ldr	r2, [pc, #84]	; (80021b4 <I2C2_MspInit+0xf0>)
 800215e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002162:	6593      	str	r3, [r2, #88]	; 0x58
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <I2C2_MspInit+0xf0>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <I2C2_MspInit+0xf0>)
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	4a0f      	ldr	r2, [pc, #60]	; (80021b4 <I2C2_MspInit+0xf0>)
 8002176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800217a:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <I2C2_MspInit+0xf0>)
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <I2C2_MspInit+0xf0>)
 8002182:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002186:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	2021      	movs	r0, #33	; 0x21
 800218e:	f000 feac 	bl	8002eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8002192:	2021      	movs	r0, #33	; 0x21
 8002194:	f000 fec5 	bl	8002f22 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	2100      	movs	r1, #0
 800219c:	2022      	movs	r0, #34	; 0x22
 800219e:	f000 fea4 	bl	8002eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 80021a2:	2022      	movs	r0, #34	; 0x22
 80021a4:	f000 febd 	bl	8002f22 <HAL_NVIC_EnableIRQ>
  }
}
 80021a8:	bf00      	nop
 80021aa:	37b8      	adds	r7, #184	; 0xb8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40005800 	.word	0x40005800
 80021b4:	40021000 	.word	0x40021000
 80021b8:	48001c00 	.word	0x48001c00
 80021bc:	48000400 	.word	0x48000400

080021c0 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 80021c4:	4806      	ldr	r0, [pc, #24]	; (80021e0 <I2C2_DeInit+0x20>)
 80021c6:	f002 f86c 	bl	80042a2 <HAL_I2C_GetState>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 80021d0:	4803      	ldr	r0, [pc, #12]	; (80021e0 <I2C2_DeInit+0x20>)
 80021d2:	f001 fd02 	bl	8003bda <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 80021d6:	4802      	ldr	r0, [pc, #8]	; (80021e0 <I2C2_DeInit+0x20>)
 80021d8:	f000 f804 	bl	80021e4 <I2C2_MspDeInit>
  }
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	200000b0 	.word	0x200000b0

080021e4 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <I2C2_MspDeInit+0x8c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d138      	bne.n	8002268 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80021f6:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <I2C2_MspDeInit+0x90>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	4a1e      	ldr	r2, [pc, #120]	; (8002274 <I2C2_MspDeInit+0x90>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <I2C2_MspDeInit+0x90>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <I2C2_MspDeInit+0x90>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	4a18      	ldr	r2, [pc, #96]	; (8002274 <I2C2_MspDeInit+0x90>)
 8002214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <I2C2_MspDeInit+0x90>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8002226:	2110      	movs	r1, #16
 8002228:	4813      	ldr	r0, [pc, #76]	; (8002278 <I2C2_MspDeInit+0x94>)
 800222a:	f001 fb3d 	bl	80038a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 800222e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002232:	4812      	ldr	r0, [pc, #72]	; (800227c <I2C2_MspDeInit+0x98>)
 8002234:	f001 fb38 	bl	80038a8 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <I2C2_MspDeInit+0x90>)
 800223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223c:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <I2C2_MspDeInit+0x90>)
 800223e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002242:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <I2C2_MspDeInit+0x90>)
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <I2C2_MspDeInit+0x90>)
 800224a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800224e:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <I2C2_MspDeInit+0x90>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <I2C2_MspDeInit+0x90>)
 8002256:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800225a:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 800225c:	2021      	movs	r0, #33	; 0x21
 800225e:	f000 fe6e 	bl	8002f3e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8002262:	2022      	movs	r0, #34	; 0x22
 8002264:	f000 fe6b 	bl	8002f3e <HAL_NVIC_DisableIRQ>
  }
}
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40005800 	.word	0x40005800
 8002274:	40021000 	.word	0x40021000
 8002278:	48001c00 	.word	0x48001c00
 800227c:	48000400 	.word	0x48000400

08002280 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af04      	add	r7, sp, #16
 8002286:	4604      	mov	r4, r0
 8002288:	4608      	mov	r0, r1
 800228a:	4611      	mov	r1, r2
 800228c:	461a      	mov	r2, r3
 800228e:	4623      	mov	r3, r4
 8002290:	80fb      	strh	r3, [r7, #6]
 8002292:	4603      	mov	r3, r0
 8002294:	80bb      	strh	r3, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	807b      	strh	r3, [r7, #2]
 800229a:	4613      	mov	r3, r2
 800229c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80022a2:	b672      	cpsid	i
}
 80022a4:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <I2C2_WriteData+0x5c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	8878      	ldrh	r0, [r7, #2]
 80022ac:	88ba      	ldrh	r2, [r7, #4]
 80022ae:	88f9      	ldrh	r1, [r7, #6]
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	2301      	movs	r3, #1
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	1c7b      	adds	r3, r7, #1
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	4603      	mov	r3, r0
 80022bc:	4808      	ldr	r0, [pc, #32]	; (80022e0 <I2C2_WriteData+0x60>)
 80022be:	f001 fcbb 	bl	8003c38 <HAL_I2C_Mem_Write>
 80022c2:	4603      	mov	r3, r0
 80022c4:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80022c6:	b662      	cpsie	i
}
 80022c8:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80022d0:	f000 f890 	bl	80023f4 <I2C2_Error>
  }
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}
 80022dc:	2000007c 	.word	0x2000007c
 80022e0:	200000b0 	.word	0x200000b0

080022e4 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af04      	add	r7, sp, #16
 80022ea:	4603      	mov	r3, r0
 80022ec:	80fb      	strh	r3, [r7, #6]
 80022ee:	460b      	mov	r3, r1
 80022f0:	80bb      	strh	r3, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80022fe:	b672      	cpsid	i
}
 8002300:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <I2C2_ReadData+0x60>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	8878      	ldrh	r0, [r7, #2]
 8002308:	88ba      	ldrh	r2, [r7, #4]
 800230a:	88f9      	ldrh	r1, [r7, #6]
 800230c:	9302      	str	r3, [sp, #8]
 800230e:	2301      	movs	r3, #1
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	f107 030e 	add.w	r3, r7, #14
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	4603      	mov	r3, r0
 800231a:	480b      	ldr	r0, [pc, #44]	; (8002348 <I2C2_ReadData+0x64>)
 800231c:	f001 fda0 	bl	8003e60 <HAL_I2C_Mem_Read>
 8002320:	4603      	mov	r3, r0
 8002322:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002324:	b662      	cpsie	i
}
 8002326:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800232e:	f000 f861 	bl	80023f4 <I2C2_Error>
    HAL_Delay(200);
 8002332:	20c8      	movs	r0, #200	; 0xc8
 8002334:	f000 fcb6 	bl	8002ca4 <HAL_Delay>
  }

  return value;
 8002338:	7bbb      	ldrb	r3, [r7, #14]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000007c 	.word	0x2000007c
 8002348:	200000b0 	.word	0x200000b0

0800234c <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800235c:	2300      	movs	r3, #0
 800235e:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8002364:	88f9      	ldrh	r1, [r7, #6]
 8002366:	2332      	movs	r3, #50	; 0x32
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	480a      	ldr	r0, [pc, #40]	; (8002394 <I2C2_isDeviceReady+0x48>)
 800236c:	f001 fe92 	bl	8004094 <HAL_I2C_IsDeviceReady>
 8002370:	4603      	mov	r3, r0
 8002372:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002374:	b662      	cpsie	i
}
 8002376:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800237e:	f000 f839 	bl	80023f4 <I2C2_Error>
    HAL_Delay(200);
 8002382:	20c8      	movs	r0, #200	; 0xc8
 8002384:	f000 fc8e 	bl	8002ca4 <HAL_Delay>
  }

  return value;
 8002388:	7bbb      	ldrb	r3, [r7, #14]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200000b0 	.word	0x200000b0

08002398 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af04      	add	r7, sp, #16
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	4603      	mov	r3, r0
 80023a2:	81fb      	strh	r3, [r7, #14]
 80023a4:	460b      	mov	r3, r1
 80023a6:	81bb      	strh	r3, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <I2C2_ReadBuffer+0x54>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	8978      	ldrh	r0, [r7, #10]
 80023ba:	89ba      	ldrh	r2, [r7, #12]
 80023bc:	89f9      	ldrh	r1, [r7, #14]
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	8c3b      	ldrh	r3, [r7, #32]
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4603      	mov	r3, r0
 80023ca:	4809      	ldr	r0, [pc, #36]	; (80023f0 <I2C2_ReadBuffer+0x58>)
 80023cc:	f001 fd48 	bl	8003e60 <HAL_I2C_Mem_Read>
 80023d0:	4603      	mov	r3, r0
 80023d2:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 80023d4:	b662      	cpsie	i
}
 80023d6:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80023de:	f000 f809 	bl	80023f4 <I2C2_Error>
  }

  return status;
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	2000007c 	.word	0x2000007c
 80023f0:	200000b0 	.word	0x200000b0

080023f4 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 80023f8:	f7ff fda1 	bl	8001f3e <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 80023fc:	4803      	ldr	r0, [pc, #12]	; (800240c <I2C2_Error+0x18>)
 80023fe:	f001 fbec 	bl	8003bda <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 8002402:	f7ff fe31 	bl	8002068 <I2C2_Init>
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200000b0 	.word	0x200000b0

08002410 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8002414:	f7ff fe28 	bl	8002068 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8002418:	2104      	movs	r1, #4
 800241a:	2084      	movs	r0, #132	; 0x84
 800241c:	f7ff ff96 	bl	800234c <I2C2_isDeviceReady>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 8002426:	f7ff fd8a 	bl	8001f3e <BSP_ErrorHandler>
  }
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <MFX_IO_DeInit+0x6c>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	4a18      	ldr	r2, [pc, #96]	; (800249c <MFX_IO_DeInit+0x6c>)
 800243c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <MFX_IO_DeInit+0x6c>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 800244e:	2340      	movs	r3, #64	; 0x40
 8002450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8002452:	2301      	movs	r3, #1
 8002454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 800245a:	2302      	movs	r3, #2
 800245c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	4619      	mov	r1, r3
 8002464:	480e      	ldr	r0, [pc, #56]	; (80024a0 <MFX_IO_DeInit+0x70>)
 8002466:	f001 f88d 	bl	8003584 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800246a:	2017      	movs	r0, #23
 800246c:	f000 fd67 	bl	8002f3e <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <MFX_IO_DeInit+0x6c>)
 8002472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002474:	4a09      	ldr	r2, [pc, #36]	; (800249c <MFX_IO_DeInit+0x6c>)
 8002476:	f043 0304 	orr.w	r3, r3, #4
 800247a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <MFX_IO_DeInit+0x6c>)
 800247e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8002488:	2120      	movs	r1, #32
 800248a:	4806      	ldr	r0, [pc, #24]	; (80024a4 <MFX_IO_DeInit+0x74>)
 800248c:	f001 fa0c 	bl	80038a8 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8002490:	f7ff fe96 	bl	80021c0 <I2C2_DeInit>
}
 8002494:	bf00      	nop
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	48001c00 	.word	0x48001c00
 80024a4:	48000800 	.word	0x48000800

080024a8 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <MFX_IO_ITConfig+0x54>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	4a12      	ldr	r2, [pc, #72]	; (80024fc <MFX_IO_ITConfig+0x54>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <MFX_IO_ITConfig+0x54>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 80024c6:	2320      	movs	r3, #32
 80024c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 80024d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024d6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	4808      	ldr	r0, [pc, #32]	; (8002500 <MFX_IO_ITConfig+0x58>)
 80024de:	f001 f851 	bl	8003584 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 80024e2:	220f      	movs	r2, #15
 80024e4:	210f      	movs	r1, #15
 80024e6:	2017      	movs	r0, #23
 80024e8:	f000 fcff 	bl	8002eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80024ec:	2017      	movs	r0, #23
 80024ee:	f000 fd18 	bl	8002f22 <HAL_NVIC_EnableIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	48000800 	.word	0x48000800

08002504 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MFX_IO_EnableWakeupPin+0x40>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <MFX_IO_EnableWakeupPin+0x40>)
 8002510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <MFX_IO_EnableWakeupPin+0x40>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8002522:	2340      	movs	r3, #64	; 0x40
 8002524:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8002526:	2301      	movs	r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800252a:	2302      	movs	r3, #2
 800252c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	4619      	mov	r1, r3
 8002536:	4804      	ldr	r0, [pc, #16]	; (8002548 <MFX_IO_EnableWakeupPin+0x44>)
 8002538:	f001 f824 	bl	8003584 <HAL_GPIO_Init>
}
 800253c:	bf00      	nop
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	48001c00 	.word	0x48001c00

0800254c <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8002550:	2201      	movs	r2, #1
 8002552:	2140      	movs	r1, #64	; 0x40
 8002554:	4806      	ldr	r0, [pc, #24]	; (8002570 <MFX_IO_Wakeup+0x24>)
 8002556:	f001 fa99 	bl	8003a8c <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 800255a:	2001      	movs	r0, #1
 800255c:	f000 fba2 	bl	8002ca4 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8002560:	2200      	movs	r2, #0
 8002562:	2140      	movs	r1, #64	; 0x40
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <MFX_IO_Wakeup+0x24>)
 8002566:	f001 fa91 	bl	8003a8c <HAL_GPIO_WritePin>
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	48001c00 	.word	0x48001c00

08002574 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
 800257e:	460b      	mov	r3, r1
 8002580:	717b      	strb	r3, [r7, #5]
 8002582:	4613      	mov	r3, r2
 8002584:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 8002586:	797b      	ldrb	r3, [r7, #5]
 8002588:	b299      	uxth	r1, r3
 800258a:	793b      	ldrb	r3, [r7, #4]
 800258c:	88f8      	ldrh	r0, [r7, #6]
 800258e:	2201      	movs	r2, #1
 8002590:	f7ff fe76 	bl	8002280 <I2C2_WriteData>
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	460a      	mov	r2, r1
 80025a6:	80fb      	strh	r3, [r7, #6]
 80025a8:	4613      	mov	r3, r2
 80025aa:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 80025ac:	797b      	ldrb	r3, [r7, #5]
 80025ae:	b299      	uxth	r1, r3
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	2201      	movs	r2, #1
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fe95 	bl	80022e4 <I2C2_ReadData>
 80025ba:	4603      	mov	r3, r0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60ba      	str	r2, [r7, #8]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	81fb      	strh	r3, [r7, #14]
 80025d2:	460b      	mov	r3, r1
 80025d4:	737b      	strb	r3, [r7, #13]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80025da:	7b7b      	ldrb	r3, [r7, #13]
 80025dc:	b299      	uxth	r1, r3
 80025de:	89f8      	ldrh	r0, [r7, #14]
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f7ff fed6 	bl	8002398 <I2C2_ReadBuffer>
 80025ec:	4603      	mov	r3, r0
 80025ee:	b29b      	uxth	r3, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fb4f 	bl	8002ca4 <HAL_Delay>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 800261e:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <BSP_IO_Init+0x78>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d128      	bne.n	8002678 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8002626:	4b19      	ldr	r3, [pc, #100]	; (800268c <BSP_IO_Init+0x7c>)
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2084      	movs	r0, #132	; 0x84
 800262c:	4798      	blx	r3

    HAL_Delay(10);
 800262e:	200a      	movs	r0, #10
 8002630:	f000 fb38 	bl	8002ca4 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8002634:	4b16      	ldr	r3, [pc, #88]	; (8002690 <BSP_IO_Init+0x80>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2084      	movs	r0, #132	; 0x84
 800263a:	4798      	blx	r3
 800263c:	4603      	mov	r3, r0
 800263e:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8002640:	79bb      	ldrb	r3, [r7, #6]
 8002642:	2b7b      	cmp	r3, #123	; 0x7b
 8002644:	d002      	beq.n	800264c <BSP_IO_Init+0x3c>
 8002646:	79bb      	ldrb	r3, [r7, #6]
 8002648:	2b79      	cmp	r3, #121	; 0x79
 800264a:	d117      	bne.n	800267c <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <BSP_IO_Init+0x78>)
 800264e:	4a10      	ldr	r2, [pc, #64]	; (8002690 <BSP_IO_Init+0x80>)
 8002650:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <BSP_IO_Init+0x78>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00f      	beq.n	800267c <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <BSP_IO_Init+0x78>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2084      	movs	r0, #132	; 0x84
 8002664:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <BSP_IO_Init+0x78>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4909      	ldr	r1, [pc, #36]	; (8002694 <BSP_IO_Init+0x84>)
 800266e:	2084      	movs	r0, #132	; 0x84
 8002670:	4798      	blx	r3

        ret = IO_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	71fb      	strb	r3, [r7, #7]
 8002676:	e001      	b.n	800267c <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8002678:	2303      	movs	r3, #3
 800267a:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 800267c:	79fb      	ldrb	r3, [r7, #7]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200000fc 	.word	0x200000fc
 800268c:	20000030 	.word	0x20000030
 8002690:	20000004 	.word	0x20000004
 8002694:	000301ff 	.word	0x000301ff

08002698 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <BSP_IO_ConfigPin+0x30>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <BSP_IO_ConfigPin+0x34>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	68f9      	ldr	r1, [r7, #12]
 80026ba:	2084      	movs	r0, #132	; 0x84
 80026bc:	4798      	blx	r3

  return IO_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	000301ff 	.word	0x000301ff
 80026cc:	200000fc 	.word	0x200000fc

080026d0 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <BSP_IO_WritePin+0x30>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <BSP_IO_WritePin+0x34>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	2084      	movs	r0, #132	; 0x84
 80026f4:	4798      	blx	r3

}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	000301ff 	.word	0x000301ff
 8002704:	200000fc 	.word	0x200000fc

08002708 <BSP_IO_ReadPin>:
  * @param  IO_Pin: Selected pins to read.
  *          This parameter can be any combination of the IO pins.
  * @retval The current pins state
  */
uint32_t BSP_IO_ReadPin(uint32_t IO_Pin)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t pin_state = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  uint32_t io1_pin = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	60bb      	str	r3, [r7, #8]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <BSP_IO_ReadPin+0x38>)
 800271c:	4013      	ands	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]

  /* Gets the IO Expander 1 selected pins current state */
  pin_state |= (io1_driver->ReadPin(IO1_I2C_ADDRESS, io1_pin)) << IO1_PIN_OFFSET;
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <BSP_IO_ReadPin+0x3c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	2084      	movs	r0, #132	; 0x84
 800272a:	4798      	blx	r3
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]


  return pin_state;
 8002734:	68fb      	ldr	r3, [r7, #12]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	000301ff 	.word	0x000301ff
 8002744:	200000fc 	.word	0x200000fc

08002748 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  None
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	71fb      	strb	r3, [r7, #7]

  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <BSP_SD_Init+0x8c>)
 8002754:	4a20      	ldr	r2, [pc, #128]	; (80027d8 <BSP_SD_Init+0x90>)
 8002756:	601a      	str	r2, [r3, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002758:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <BSP_SD_Init+0x8c>)
 800275a:	2200      	movs	r2, #0
 800275c:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <BSP_SD_Init+0x8c>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <BSP_SD_Init+0x8c>)
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800276a:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <BSP_SD_Init+0x8c>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002770:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <BSP_SD_Init+0x8c>)
 8002772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002776:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <BSP_SD_Init+0x8c>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]

  /* Msp SD Detect pin initialization */
  SD_Detect_MspInit();
 800277e:	f000 f986 	bl	8002a8e <SD_Detect_MspInit>

  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8002782:	f000 f844 	bl	800280e <BSP_SD_IsDetected>
 8002786:	4603      	mov	r3, r0
 8002788:	2b01      	cmp	r3, #1
 800278a:	d001      	beq.n	8002790 <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800278c:	2302      	movs	r3, #2
 800278e:	e01c      	b.n	80027ca <BSP_SD_Init+0x82>
  }

  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 8002790:	2100      	movs	r1, #0
 8002792:	4810      	ldr	r0, [pc, #64]	; (80027d4 <BSP_SD_Init+0x8c>)
 8002794:	f000 f8cc 	bl	8002930 <BSP_SD_MspInit>
    
  /* HAL SD initialization */
  if (HAL_SD_Init(&uSdHandle) != HAL_OK)
 8002798:	480e      	ldr	r0, [pc, #56]	; (80027d4 <BSP_SD_Init+0x8c>)
 800279a:	f004 fbdd 	bl	8006f58 <HAL_SD_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <BSP_SD_Init+0x60>
  {
    sd_state = MSD_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	71fb      	strb	r3, [r7, #7]
  }

  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10c      	bne.n	80027c8 <BSP_SD_Init+0x80>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80027ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027b2:	4808      	ldr	r0, [pc, #32]	; (80027d4 <BSP_SD_Init+0x8c>)
 80027b4:	f005 f98a 	bl	8007acc <HAL_SD_ConfigWideBusOperation>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <BSP_SD_Init+0x7c>
    {
      sd_state = MSD_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	71fb      	strb	r3, [r7, #7]
 80027c2:	e001      	b.n	80027c8 <BSP_SD_Init+0x80>
    }
    else
    {
      sd_state = MSD_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return  sd_state;
 80027c8:	79fb      	ldrb	r3, [r7, #7]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000a70 	.word	0x20000a70
 80027d8:	40012800 	.word	0x40012800

080027dc <BSP_SD_ITConfig>:
  * @brief  Configures Interrupt mode for SD detection pin.
  * @param  None
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_SD_ITConfig(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != SD_DETECT_PIN)
 80027e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027e4:	f7ff ff90 	bl	8002708 <BSP_IO_ReadPin>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ee:	d006      	beq.n	80027fe <BSP_SD_ITConfig+0x22>
  {
    return BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_IT_RISING_EDGE_PU);
 80027f0:	2110      	movs	r1, #16
 80027f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027f6:	f7ff ff4f 	bl	8002698 <BSP_IO_ConfigPin>
 80027fa:	4603      	mov	r3, r0
 80027fc:	e005      	b.n	800280a <BSP_SD_ITConfig+0x2e>
  }
  else
  {
    return BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_IT_FALLING_EDGE_PU);
 80027fe:	2112      	movs	r1, #18
 8002800:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002804:	f7ff ff48 	bl	8002698 <BSP_IO_ConfigPin>
 8002808:	4603      	mov	r3, r0
  }
}
 800280a:	4618      	mov	r0, r3
 800280c:	bd80      	pop	{r7, pc}

0800280e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8002814:	2301      	movs	r3, #1
 8002816:	71fb      	strb	r3, [r7, #7]

  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002818:	f44f 7080 	mov.w	r0, #256	; 0x100
 800281c:	f7ff ff74 	bl	8002708 <BSP_IO_ReadPin>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 8002826:	2300      	movs	r3, #0
 8002828:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	b2db      	uxtb	r3, r3
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	75fb      	strb	r3, [r7, #23]

  /* Invalidate the dma tx handle*/
  uSdHandle.hdmatx = NULL;
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <BSP_SD_ReadBlocks_DMA+0x4c>)
 800284a:	2200      	movs	r2, #0
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Prepare the dma channel for a read operation */
  sd_state = SD_DMAConfigRx(&uSdHandle);
 800284e:	480d      	ldr	r0, [pc, #52]	; (8002884 <BSP_SD_ReadBlocks_DMA+0x4c>)
 8002850:	f000 f92e 	bl	8002ab0 <SD_DMAConfigRx>
 8002854:	4603      	mov	r3, r0
 8002856:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d107      	bne.n	800286e <BSP_SD_ReadBlocks_DMA+0x36>
  {
    /* Read block(s) in DMA transfer mode */
    sd_state = HAL_SD_ReadBlocks_DMA(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	68f9      	ldr	r1, [r7, #12]
 8002864:	4807      	ldr	r0, [pc, #28]	; (8002884 <BSP_SD_ReadBlocks_DMA+0x4c>)
 8002866:	f004 fc4d 	bl	8007104 <HAL_SD_ReadBlocks_DMA>
 800286a:	4603      	mov	r3, r0
 800286c:	75fb      	strb	r3, [r7, #23]
  }

  if (sd_state == HAL_OK)
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <BSP_SD_ReadBlocks_DMA+0x40>
  {
    return MSD_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <BSP_SD_ReadBlocks_DMA+0x42>
  }
  else
  {
    return MSD_ERROR;
 8002878:	2301      	movs	r3, #1
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000a70 	.word	0x20000a70

08002888 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	75fb      	strb	r3, [r7, #23]

  /* Invalidate the dma rx handle*/
  uSdHandle.hdmarx = NULL;
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <BSP_SD_WriteBlocks_DMA+0x4c>)
 800289a:	2200      	movs	r2, #0
 800289c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare the dma channel for a read operation */
  sd_state = SD_DMAConfigTx(&uSdHandle);
 800289e:	480d      	ldr	r0, [pc, #52]	; (80028d4 <BSP_SD_WriteBlocks_DMA+0x4c>)
 80028a0:	f000 f94a 	bl	8002b38 <SD_DMAConfigTx>
 80028a4:	4603      	mov	r3, r0
 80028a6:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d107      	bne.n	80028be <BSP_SD_WriteBlocks_DMA+0x36>
  {
    /* Write block(s) in DMA transfer mode */
    sd_state = HAL_SD_WriteBlocks_DMA(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	68f9      	ldr	r1, [r7, #12]
 80028b4:	4807      	ldr	r0, [pc, #28]	; (80028d4 <BSP_SD_WriteBlocks_DMA+0x4c>)
 80028b6:	f004 fced 	bl	8007294 <HAL_SD_WriteBlocks_DMA>
 80028ba:	4603      	mov	r3, r0
 80028bc:	75fb      	strb	r3, [r7, #23]
  }

  if (sd_state == HAL_OK)
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <BSP_SD_WriteBlocks_DMA+0x40>
  {
    return MSD_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e000      	b.n	80028ca <BSP_SD_WriteBlocks_DMA+0x42>
  }
  else
  {
    return MSD_ERROR;
 80028c8:	2301      	movs	r3, #1
  }
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000a70 	.word	0x20000a70

080028d8 <BSP_SD_GetCardState>:
  * @brief  Gets the current SD card data status.
  * @param  None
  * @retval Data transfer state.
  */
uint8_t BSP_SD_GetCardState(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypedef card_state;
  card_state = HAL_SD_GetCardState(&uSdHandle);
 80028de:	480c      	ldr	r0, [pc, #48]	; (8002910 <BSP_SD_GetCardState+0x38>)
 80028e0:	f005 f9b0 	bl	8007c44 <HAL_SD_GetCardState>
 80028e4:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d101      	bne.n	80028f0 <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 80028ec:	2300      	movs	r3, #0
 80028ee:	e00b      	b.n	8002908 <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) ||
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d005      	beq.n	8002902 <BSP_SD_GetCardState+0x2a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b06      	cmp	r3, #6
 80028fa:	d002      	beq.n	8002902 <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) ||
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b07      	cmp	r3, #7
 8002900:	d101      	bne.n	8002906 <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <BSP_SD_GetCardState+0x30>
  }
  else
  {
    return (SD_TRANSFER_ERROR);
 8002906:	2302      	movs	r3, #2
  }
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000a70 	.word	0x20000a70

08002914 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4803      	ldr	r0, [pc, #12]	; (800292c <BSP_SD_GetCardInfo+0x18>)
 8002920:	f005 f8a8 	bl	8007a74 <HAL_SD_GetCardInfo>
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000a70 	.word	0x20000a70

08002930 <BSP_SD_MspInit>:
  * @param hsd: SD handle
  * @param Params: Additional parameters
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b0ae      	sub	sp, #184	; 0xb8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800293a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef  RCC_PeriphClkInit;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);

  HAL_RCCEx_GetPeriphCLKConfig(&RCC_PeriphClkInit);
 800294a:	f107 0318 	add.w	r3, r7, #24
 800294e:	4618      	mov	r0, r3
 8002950:	f003 f980 	bl	8005c54 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the SDMMC1 clock source. The clock is derived from the PLLSAI1 */
  /* Hypothesis is that PLLSAI1 VCO input is 8Mhz */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8002954:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002958:	61bb      	str	r3, [r7, #24]
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800295a:	2318      	movs	r3, #24
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1Q = 4;
 800295e:	2304      	movs	r3, #4
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002962:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002966:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8002968:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800296c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK)
 8002970:	f107 0318 	add.w	r3, r7, #24
 8002974:	4618      	mov	r0, r3
 8002976:	f002 fe71 	bl	800565c <HAL_RCCEx_PeriphCLKConfig>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d000      	beq.n	8002982 <BSP_SD_MspInit+0x52>
  {
    while (1) {}
 8002980:	e7fe      	b.n	8002980 <BSP_SD_MspInit+0x50>
  }

  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002982:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <BSP_SD_MspInit+0x108>)
 8002984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002986:	4a2c      	ldr	r2, [pc, #176]	; (8002a38 <BSP_SD_MspInit+0x108>)
 8002988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298c:	6613      	str	r3, [r2, #96]	; 0x60
 800298e:	4b2a      	ldr	r3, [pc, #168]	; (8002a38 <BSP_SD_MspInit+0x108>)
 8002990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697b      	ldr	r3, [r7, #20]

  /* Enable DMA2 clocks */
  SD_DMAx_CLK_ENABLE();
 800299a:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <BSP_SD_MspInit+0x108>)
 800299c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299e:	4a26      	ldr	r2, [pc, #152]	; (8002a38 <BSP_SD_MspInit+0x108>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	6493      	str	r3, [r2, #72]	; 0x48
 80029a6:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <BSP_SD_MspInit+0x108>)
 80029a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b2:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <BSP_SD_MspInit+0x108>)
 80029b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b6:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <BSP_SD_MspInit+0x108>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029be:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <BSP_SD_MspInit+0x108>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <BSP_SD_MspInit+0x108>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <BSP_SD_MspInit+0x108>)
 80029d0:	f043 0308 	orr.w	r3, r3, #8
 80029d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <BSP_SD_MspInit+0x108>)
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  gpioinitstruct.Pull      = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 80029f4:	230c      	movs	r3, #12
 80029f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80029fa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80029fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8002a02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a06:	4619      	mov	r1, r3
 8002a08:	480c      	ldr	r0, [pc, #48]	; (8002a3c <BSP_SD_MspInit+0x10c>)
 8002a0a:	f000 fdbb 	bl	8003584 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 8002a0e:	2304      	movs	r3, #4
 8002a10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8002a14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4809      	ldr	r0, [pc, #36]	; (8002a40 <BSP_SD_MspInit+0x110>)
 8002a1c:	f000 fdb2 	bl	8003584 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2105      	movs	r1, #5
 8002a24:	2031      	movs	r0, #49	; 0x31
 8002a26:	f000 fa60 	bl	8002eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 8002a2a:	2031      	movs	r0, #49	; 0x31
 8002a2c:	f000 fa79 	bl	8002f22 <HAL_NVIC_EnableIRQ>

  /* DMA initialization should be done here but , as there is only one channel for RX and TX it is configured and done directly when required*/
}
 8002a30:	bf00      	nop
 8002a32:	37b8      	adds	r7, #184	; 0xb8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	48000800 	.word	0x48000800
 8002a40:	48000c00 	.word	0x48000c00

08002a44 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_SD_AbortCallback>:
  * @brief SD Abort callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8002a5a:	f7ff fff3 	bl	8002a44 <BSP_SD_AbortCallback>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8002a6e:	f006 fdf3 	bl	8009658 <BSP_SD_WriteCpltCallback>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8002a82:	f006 fdf5 	bl	8009670 <BSP_SD_ReadCpltCallback>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
static void SD_Detect_MspInit(void)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	af00      	add	r7, sp, #0
  if (BSP_IO_Init() == IO_ERROR)
 8002a92:	f7ff fdbd 	bl	8002610 <BSP_IO_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <SD_Detect_MspInit+0x12>
  {
    BSP_ErrorHandler();
 8002a9c:	f7ff fa4f 	bl	8001f3e <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_INPUT_PU);
 8002aa0:	2108      	movs	r1, #8
 8002aa2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002aa6:	f7ff fdf7 	bl	8002698 <BSP_IO_ConfigPin>
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 8002abc:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002abe:	2207      	movs	r2, #7
 8002ac0:	605a      	str	r2, [r3, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	611a      	str	r2, [r3, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ada:	615a      	str	r2, [r3, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ae2:	619a      	str	r2, [r3, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002ae6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002aea:	621a      	str	r2, [r3, #32]

  hdma_rx.Instance = SD_DMAx_STREAM;
 8002aec:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002aee:	4a11      	ldr	r2, [pc, #68]	; (8002b34 <SD_DMAConfigRx+0x84>)
 8002af0:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6293      	str	r3, [r2, #40]	; 0x28

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 8002afe:	480c      	ldr	r0, [pc, #48]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002b00:	f000 fbe2 	bl	80032c8 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 8002b04:	480a      	ldr	r0, [pc, #40]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002b06:	f000 faed 	bl	80030e4 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 8002b0a:	4809      	ldr	r0, [pc, #36]	; (8002b30 <SD_DMAConfigRx+0x80>)
 8002b0c:	f000 fa32 	bl	8002f74 <HAL_DMA_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	73fb      	strb	r3, [r7, #15]

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_IRQn, 6, 0);
 8002b14:	2200      	movs	r2, #0
 8002b16:	2106      	movs	r1, #6
 8002b18:	203c      	movs	r0, #60	; 0x3c
 8002b1a:	f000 f9e6 	bl	8002eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_IRQn);
 8002b1e:	203c      	movs	r0, #60	; 0x3c
 8002b20:	f000 f9ff 	bl	8002f22 <HAL_NVIC_EnableIRQ>

  return (status);
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000100 	.word	0x20000100
 8002b34:	40020458 	.word	0x40020458

08002b38 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 8002b40:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b42:	2207      	movs	r2, #7
 8002b44:	605a      	str	r2, [r3, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b48:	2210      	movs	r2, #16
 8002b4a:	609a      	str	r2, [r3, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	611a      	str	r2, [r3, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b58:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5e:	615a      	str	r2, [r3, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002b60:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b66:	619a      	str	r2, [r3, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b6a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002b6e:	621a      	str	r2, [r3, #32]

  hdma_tx.Instance = SD_DMAx_STREAM;
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b72:	4a11      	ldr	r2, [pc, #68]	; (8002bb8 <SD_DMAConfigTx+0x80>)
 8002b74:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6293      	str	r3, [r2, #40]	; 0x28

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 8002b82:	480c      	ldr	r0, [pc, #48]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b84:	f000 fba0 	bl	80032c8 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 8002b88:	480a      	ldr	r0, [pc, #40]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b8a:	f000 faab 	bl	80030e4 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 8002b8e:	4809      	ldr	r0, [pc, #36]	; (8002bb4 <SD_DMAConfigTx+0x7c>)
 8002b90:	f000 f9f0 	bl	8002f74 <HAL_DMA_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	73fb      	strb	r3, [r7, #15]

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_IRQn, 6, 0);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2106      	movs	r1, #6
 8002b9c:	203c      	movs	r0, #60	; 0x3c
 8002b9e:	f000 f9a4 	bl	8002eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_IRQn);
 8002ba2:	203c      	movs	r0, #60	; 0x3c
 8002ba4:	f000 f9bd 	bl	8002f22 <HAL_NVIC_EnableIRQ>

  return (status);
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000148 	.word	0x20000148
 8002bb8:	40020458 	.word	0x40020458

08002bbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc6:	2003      	movs	r0, #3
 8002bc8:	f000 f984 	bl	8002ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bcc:	200f      	movs	r0, #15
 8002bce:	f000 f80d 	bl	8002bec <HAL_InitTick>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	71fb      	strb	r3, [r7, #7]
 8002bdc:	e001      	b.n	8002be2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bde:	f7fd fde3 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002be2:	79fb      	ldrb	r3, [r7, #7]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_InitTick+0x6c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d023      	beq.n	8002c48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_InitTick+0x70>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_InitTick+0x6c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f99f 	bl	8002f5a <HAL_SYSTICK_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10f      	bne.n	8002c42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b0f      	cmp	r3, #15
 8002c26:	d809      	bhi.n	8002c3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c30:	f000 f95b 	bl	8002eea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c34:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <HAL_InitTick+0x74>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e007      	b.n	8002c4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e004      	b.n	8002c4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
 8002c46:	e001      	b.n	8002c4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000084 	.word	0x20000084
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	20000080 	.word	0x20000080

08002c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_IncTick+0x20>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_IncTick+0x24>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <HAL_IncTick+0x24>)
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000084 	.word	0x20000084
 8002c88:	20000af4 	.word	0x20000af4

08002c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_GetTick+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000af4 	.word	0x20000af4

08002ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff ffee 	bl	8002c8c <HAL_GetTick>
 8002cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cbc:	d005      	beq.n	8002cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_Delay+0x44>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cca:	bf00      	nop
 8002ccc:	f7ff ffde 	bl	8002c8c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d8f7      	bhi.n	8002ccc <HAL_Delay+0x28>
  {
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000084 	.word	0x20000084

08002cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1e:	4a04      	ldr	r2, [pc, #16]	; (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	60d3      	str	r3, [r2, #12]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <__NVIC_GetPriorityGrouping+0x18>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	f003 0307 	and.w	r3, r3, #7
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	db0b      	blt.n	8002d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	f003 021f 	and.w	r2, r3, #31
 8002d68:	4907      	ldr	r1, [pc, #28]	; (8002d88 <__NVIC_EnableIRQ+0x38>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2001      	movs	r0, #1
 8002d72:	fa00 f202 	lsl.w	r2, r0, r2
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000e100 	.word	0xe000e100

08002d8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	db12      	blt.n	8002dc4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	490a      	ldr	r1, [pc, #40]	; (8002dd0 <__NVIC_DisableIRQ+0x44>)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	2001      	movs	r0, #1
 8002dae:	fa00 f202 	lsl.w	r2, r0, r2
 8002db2:	3320      	adds	r3, #32
 8002db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002db8:	f3bf 8f4f 	dsb	sy
}
 8002dbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002dbe:	f3bf 8f6f 	isb	sy
}
 8002dc2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100

08002dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	6039      	str	r1, [r7, #0]
 8002dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	db0a      	blt.n	8002dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	490c      	ldr	r1, [pc, #48]	; (8002e20 <__NVIC_SetPriority+0x4c>)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	0112      	lsls	r2, r2, #4
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	440b      	add	r3, r1
 8002df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dfc:	e00a      	b.n	8002e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4908      	ldr	r1, [pc, #32]	; (8002e24 <__NVIC_SetPriority+0x50>)
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	3b04      	subs	r3, #4
 8002e0c:	0112      	lsls	r2, r2, #4
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	440b      	add	r3, r1
 8002e12:	761a      	strb	r2, [r3, #24]
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000e100 	.word	0xe000e100
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f1c3 0307 	rsb	r3, r3, #7
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	bf28      	it	cs
 8002e46:	2304      	movcs	r3, #4
 8002e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	2b06      	cmp	r3, #6
 8002e50:	d902      	bls.n	8002e58 <NVIC_EncodePriority+0x30>
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3b03      	subs	r3, #3
 8002e56:	e000      	b.n	8002e5a <NVIC_EncodePriority+0x32>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	43d9      	mvns	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e80:	4313      	orrs	r3, r2
         );
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3724      	adds	r7, #36	; 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea0:	d301      	bcc.n	8002ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e00f      	b.n	8002ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <SysTick_Config+0x40>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eae:	210f      	movs	r1, #15
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eb4:	f7ff ff8e 	bl	8002dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <SysTick_Config+0x40>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ebe:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <SysTick_Config+0x40>)
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	e000e010 	.word	0xe000e010

08002ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ff05 	bl	8002cec <__NVIC_SetPriorityGrouping>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002efc:	f7ff ff1a 	bl	8002d34 <__NVIC_GetPriorityGrouping>
 8002f00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	6978      	ldr	r0, [r7, #20]
 8002f08:	f7ff ff8e 	bl	8002e28 <NVIC_EncodePriority>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff5d 	bl	8002dd4 <__NVIC_SetPriority>
}
 8002f1a:	bf00      	nop
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff0d 	bl	8002d50 <__NVIC_EnableIRQ>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff1d 	bl	8002d8c <__NVIC_DisableIRQ>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ff94 	bl	8002e90 <SysTick_Config>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e098      	b.n	80030b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4b4d      	ldr	r3, [pc, #308]	; (80030c4 <HAL_DMA_Init+0x150>)
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d80f      	bhi.n	8002fb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b4b      	ldr	r3, [pc, #300]	; (80030c8 <HAL_DMA_Init+0x154>)
 8002f9a:	4413      	add	r3, r2
 8002f9c:	4a4b      	ldr	r2, [pc, #300]	; (80030cc <HAL_DMA_Init+0x158>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	009a      	lsls	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a48      	ldr	r2, [pc, #288]	; (80030d0 <HAL_DMA_Init+0x15c>)
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
 8002fb0:	e00e      	b.n	8002fd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b46      	ldr	r3, [pc, #280]	; (80030d4 <HAL_DMA_Init+0x160>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a43      	ldr	r2, [pc, #268]	; (80030cc <HAL_DMA_Init+0x158>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	009a      	lsls	r2, r3, #2
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a42      	ldr	r2, [pc, #264]	; (80030d8 <HAL_DMA_Init+0x164>)
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800302a:	d039      	beq.n	80030a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <HAL_DMA_Init+0x15c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d11a      	bne.n	800306c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003036:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_DMA_Init+0x168>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f003 031c 	and.w	r3, r3, #28
 8003042:	210f      	movs	r1, #15
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	4924      	ldr	r1, [pc, #144]	; (80030dc <HAL_DMA_Init+0x168>)
 800304c:	4013      	ands	r3, r2
 800304e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_DMA_Init+0x168>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	f003 031c 	and.w	r3, r3, #28
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	491d      	ldr	r1, [pc, #116]	; (80030dc <HAL_DMA_Init+0x168>)
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
 800306a:	e019      	b.n	80030a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800306c:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <HAL_DMA_Init+0x16c>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f003 031c 	and.w	r3, r3, #28
 8003078:	210f      	movs	r1, #15
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	4917      	ldr	r1, [pc, #92]	; (80030e0 <HAL_DMA_Init+0x16c>)
 8003082:	4013      	ands	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003086:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <HAL_DMA_Init+0x16c>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f003 031c 	and.w	r3, r3, #28
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	4911      	ldr	r1, [pc, #68]	; (80030e0 <HAL_DMA_Init+0x16c>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40020407 	.word	0x40020407
 80030c8:	bffdfff8 	.word	0xbffdfff8
 80030cc:	cccccccd 	.word	0xcccccccd
 80030d0:	40020000 	.word	0x40020000
 80030d4:	bffdfbf8 	.word	0xbffdfbf8
 80030d8:	40020400 	.word	0x40020400
 80030dc:	400200a8 	.word	0x400200a8
 80030e0:	400204a8 	.word	0x400204a8

080030e4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e072      	b.n	80031dc <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	4b36      	ldr	r3, [pc, #216]	; (80031e8 <HAL_DMA_DeInit+0x104>)
 800310e:	429a      	cmp	r2, r3
 8003110:	d80f      	bhi.n	8003132 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	4b34      	ldr	r3, [pc, #208]	; (80031ec <HAL_DMA_DeInit+0x108>)
 800311a:	4413      	add	r3, r2
 800311c:	4a34      	ldr	r2, [pc, #208]	; (80031f0 <HAL_DMA_DeInit+0x10c>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	009a      	lsls	r2, r3, #2
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a31      	ldr	r2, [pc, #196]	; (80031f4 <HAL_DMA_DeInit+0x110>)
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
 8003130:	e00e      	b.n	8003150 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <HAL_DMA_DeInit+0x114>)
 800313a:	4413      	add	r3, r2
 800313c:	4a2c      	ldr	r2, [pc, #176]	; (80031f0 <HAL_DMA_DeInit+0x10c>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	009a      	lsls	r2, r3, #2
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a2b      	ldr	r2, [pc, #172]	; (80031fc <HAL_DMA_DeInit+0x118>)
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315c:	f003 021c 	and.w	r2, r3, #28
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	2101      	movs	r1, #1
 8003166:	fa01 f202 	lsl.w	r2, r1, r2
 800316a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <HAL_DMA_DeInit+0x110>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d10d      	bne.n	8003192 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003176:	4b22      	ldr	r3, [pc, #136]	; (8003200 <HAL_DMA_DeInit+0x11c>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f003 031c 	and.w	r3, r3, #28
 8003182:	210f      	movs	r1, #15
 8003184:	fa01 f303 	lsl.w	r3, r1, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	491d      	ldr	r1, [pc, #116]	; (8003200 <HAL_DMA_DeInit+0x11c>)
 800318c:	4013      	ands	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
 8003190:	e00c      	b.n	80031ac <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <HAL_DMA_DeInit+0x120>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f003 031c 	and.w	r3, r3, #28
 800319e:	210f      	movs	r1, #15
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	4917      	ldr	r1, [pc, #92]	; (8003204 <HAL_DMA_DeInit+0x120>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40020407 	.word	0x40020407
 80031ec:	bffdfff8 	.word	0xbffdfff8
 80031f0:	cccccccd 	.word	0xcccccccd
 80031f4:	40020000 	.word	0x40020000
 80031f8:	bffdfbf8 	.word	0xbffdfbf8
 80031fc:	40020400 	.word	0x40020400
 8003200:	400200a8 	.word	0x400200a8
 8003204:	400204a8 	.word	0x400204a8

08003208 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Start_IT+0x20>
 8003224:	2302      	movs	r3, #2
 8003226:	e04b      	b.n	80032c0 <HAL_DMA_Start_IT+0xb8>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d13a      	bne.n	80032b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f95f 	bl	8003524 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 020e 	orr.w	r2, r2, #14
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e00f      	b.n	80032a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0204 	bic.w	r2, r2, #4
 800328e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 020a 	orr.w	r2, r2, #10
 800329e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e005      	b.n	80032be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
 80032bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032be:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d008      	beq.n	80032f2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2204      	movs	r2, #4
 80032e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e022      	b.n	8003338 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 020e 	bic.w	r2, r2, #14
 8003300:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	f003 021c 	and.w	r2, r3, #28
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2101      	movs	r1, #1
 8003320:	fa01 f202 	lsl.w	r2, r1, r2
 8003324:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003336:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d005      	beq.n	8003368 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2204      	movs	r2, #4
 8003360:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
 8003366:	e029      	b.n	80033bc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 020e 	bic.w	r2, r2, #14
 8003376:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	f003 021c 	and.w	r2, r3, #28
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	2101      	movs	r1, #1
 8003396:	fa01 f202 	lsl.w	r2, r1, r2
 800339a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
    }
  }
  return status;
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f003 031c 	and.w	r3, r3, #28
 80033e6:	2204      	movs	r2, #4
 80033e8:	409a      	lsls	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d026      	beq.n	8003440 <HAL_DMA_IRQHandler+0x7a>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d021      	beq.n	8003440 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0204 	bic.w	r2, r2, #4
 8003418:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f003 021c 	and.w	r2, r3, #28
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2104      	movs	r1, #4
 8003428:	fa01 f202 	lsl.w	r2, r1, r2
 800342c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	2b00      	cmp	r3, #0
 8003434:	d071      	beq.n	800351a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800343e:	e06c      	b.n	800351a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	f003 031c 	and.w	r3, r3, #28
 8003448:	2202      	movs	r2, #2
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d02e      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xec>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d029      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10b      	bne.n	8003484 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 020a 	bic.w	r2, r2, #10
 800347a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f003 021c 	and.w	r2, r3, #28
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	2102      	movs	r1, #2
 8003492:	fa01 f202 	lsl.w	r2, r1, r2
 8003496:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d038      	beq.n	800351a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034b0:	e033      	b.n	800351a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f003 031c 	and.w	r3, r3, #28
 80034ba:	2208      	movs	r2, #8
 80034bc:	409a      	lsls	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d02a      	beq.n	800351c <HAL_DMA_IRQHandler+0x156>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d025      	beq.n	800351c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 020e 	bic.w	r2, r2, #14
 80034de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f003 021c 	and.w	r2, r3, #28
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2101      	movs	r1, #1
 80034ee:	fa01 f202 	lsl.w	r2, r1, r2
 80034f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350e:	2b00      	cmp	r3, #0
 8003510:	d004      	beq.n	800351c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800351a:	bf00      	nop
 800351c:	bf00      	nop
}
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	f003 021c 	and.w	r2, r3, #28
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	2101      	movs	r1, #1
 8003540:	fa01 f202 	lsl.w	r2, r1, r2
 8003544:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b10      	cmp	r3, #16
 8003554:	d108      	bne.n	8003568 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003566:	e007      	b.n	8003578 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	60da      	str	r2, [r3, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003592:	e166      	b.n	8003862 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	4013      	ands	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8158 	beq.w	800385c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d005      	beq.n	80035c4 <HAL_GPIO_Init+0x40>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d130      	bne.n	8003626 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2203      	movs	r2, #3
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035fa:	2201      	movs	r2, #1
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4013      	ands	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f003 0201 	and.w	r2, r3, #1
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b03      	cmp	r3, #3
 8003630:	d017      	beq.n	8003662 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d123      	bne.n	80036b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	08da      	lsrs	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3208      	adds	r2, #8
 8003676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	220f      	movs	r2, #15
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4013      	ands	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	08da      	lsrs	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3208      	adds	r2, #8
 80036b0:	6939      	ldr	r1, [r7, #16]
 80036b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	2203      	movs	r2, #3
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0203 	and.w	r2, r3, #3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80b2 	beq.w	800385c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f8:	4b61      	ldr	r3, [pc, #388]	; (8003880 <HAL_GPIO_Init+0x2fc>)
 80036fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fc:	4a60      	ldr	r2, [pc, #384]	; (8003880 <HAL_GPIO_Init+0x2fc>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6613      	str	r3, [r2, #96]	; 0x60
 8003704:	4b5e      	ldr	r3, [pc, #376]	; (8003880 <HAL_GPIO_Init+0x2fc>)
 8003706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003710:	4a5c      	ldr	r2, [pc, #368]	; (8003884 <HAL_GPIO_Init+0x300>)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	3302      	adds	r3, #2
 8003718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	220f      	movs	r2, #15
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800373a:	d02b      	beq.n	8003794 <HAL_GPIO_Init+0x210>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a52      	ldr	r2, [pc, #328]	; (8003888 <HAL_GPIO_Init+0x304>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d025      	beq.n	8003790 <HAL_GPIO_Init+0x20c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a51      	ldr	r2, [pc, #324]	; (800388c <HAL_GPIO_Init+0x308>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01f      	beq.n	800378c <HAL_GPIO_Init+0x208>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a50      	ldr	r2, [pc, #320]	; (8003890 <HAL_GPIO_Init+0x30c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d019      	beq.n	8003788 <HAL_GPIO_Init+0x204>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a4f      	ldr	r2, [pc, #316]	; (8003894 <HAL_GPIO_Init+0x310>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d013      	beq.n	8003784 <HAL_GPIO_Init+0x200>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a4e      	ldr	r2, [pc, #312]	; (8003898 <HAL_GPIO_Init+0x314>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00d      	beq.n	8003780 <HAL_GPIO_Init+0x1fc>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a4d      	ldr	r2, [pc, #308]	; (800389c <HAL_GPIO_Init+0x318>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <HAL_GPIO_Init+0x1f8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a4c      	ldr	r2, [pc, #304]	; (80038a0 <HAL_GPIO_Init+0x31c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d101      	bne.n	8003778 <HAL_GPIO_Init+0x1f4>
 8003774:	2307      	movs	r3, #7
 8003776:	e00e      	b.n	8003796 <HAL_GPIO_Init+0x212>
 8003778:	2308      	movs	r3, #8
 800377a:	e00c      	b.n	8003796 <HAL_GPIO_Init+0x212>
 800377c:	2306      	movs	r3, #6
 800377e:	e00a      	b.n	8003796 <HAL_GPIO_Init+0x212>
 8003780:	2305      	movs	r3, #5
 8003782:	e008      	b.n	8003796 <HAL_GPIO_Init+0x212>
 8003784:	2304      	movs	r3, #4
 8003786:	e006      	b.n	8003796 <HAL_GPIO_Init+0x212>
 8003788:	2303      	movs	r3, #3
 800378a:	e004      	b.n	8003796 <HAL_GPIO_Init+0x212>
 800378c:	2302      	movs	r3, #2
 800378e:	e002      	b.n	8003796 <HAL_GPIO_Init+0x212>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_GPIO_Init+0x212>
 8003794:	2300      	movs	r3, #0
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	f002 0203 	and.w	r2, r2, #3
 800379c:	0092      	lsls	r2, r2, #2
 800379e:	4093      	lsls	r3, r2
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037a6:	4937      	ldr	r1, [pc, #220]	; (8003884 <HAL_GPIO_Init+0x300>)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	089b      	lsrs	r3, r3, #2
 80037ac:	3302      	adds	r3, #2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b4:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <HAL_GPIO_Init+0x320>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	43db      	mvns	r3, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037d8:	4a32      	ldr	r2, [pc, #200]	; (80038a4 <HAL_GPIO_Init+0x320>)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037de:	4b31      	ldr	r3, [pc, #196]	; (80038a4 <HAL_GPIO_Init+0x320>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003802:	4a28      	ldr	r2, [pc, #160]	; (80038a4 <HAL_GPIO_Init+0x320>)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003808:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <HAL_GPIO_Init+0x320>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800382c:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <HAL_GPIO_Init+0x320>)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <HAL_GPIO_Init+0x320>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	43db      	mvns	r3, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4013      	ands	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003856:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <HAL_GPIO_Init+0x320>)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3301      	adds	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	f47f ae91 	bne.w	8003594 <HAL_GPIO_Init+0x10>
  }
}
 8003872:	bf00      	nop
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40021000 	.word	0x40021000
 8003884:	40010000 	.word	0x40010000
 8003888:	48000400 	.word	0x48000400
 800388c:	48000800 	.word	0x48000800
 8003890:	48000c00 	.word	0x48000c00
 8003894:	48001000 	.word	0x48001000
 8003898:	48001400 	.word	0x48001400
 800389c:	48001800 	.word	0x48001800
 80038a0:	48001c00 	.word	0x48001c00
 80038a4:	40010400 	.word	0x40010400

080038a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80038b6:	e0c9      	b.n	8003a4c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80038b8:	2201      	movs	r2, #1
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80bc 	beq.w	8003a46 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80038ce:	4a66      	ldr	r2, [pc, #408]	; (8003a68 <HAL_GPIO_DeInit+0x1c0>)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	3302      	adds	r3, #2
 80038d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038da:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	220f      	movs	r2, #15
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4013      	ands	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038f6:	d02b      	beq.n	8003950 <HAL_GPIO_DeInit+0xa8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a5c      	ldr	r2, [pc, #368]	; (8003a6c <HAL_GPIO_DeInit+0x1c4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d025      	beq.n	800394c <HAL_GPIO_DeInit+0xa4>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a5b      	ldr	r2, [pc, #364]	; (8003a70 <HAL_GPIO_DeInit+0x1c8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d01f      	beq.n	8003948 <HAL_GPIO_DeInit+0xa0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a5a      	ldr	r2, [pc, #360]	; (8003a74 <HAL_GPIO_DeInit+0x1cc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d019      	beq.n	8003944 <HAL_GPIO_DeInit+0x9c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a59      	ldr	r2, [pc, #356]	; (8003a78 <HAL_GPIO_DeInit+0x1d0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d013      	beq.n	8003940 <HAL_GPIO_DeInit+0x98>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a58      	ldr	r2, [pc, #352]	; (8003a7c <HAL_GPIO_DeInit+0x1d4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00d      	beq.n	800393c <HAL_GPIO_DeInit+0x94>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a57      	ldr	r2, [pc, #348]	; (8003a80 <HAL_GPIO_DeInit+0x1d8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d007      	beq.n	8003938 <HAL_GPIO_DeInit+0x90>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a56      	ldr	r2, [pc, #344]	; (8003a84 <HAL_GPIO_DeInit+0x1dc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <HAL_GPIO_DeInit+0x8c>
 8003930:	2307      	movs	r3, #7
 8003932:	e00e      	b.n	8003952 <HAL_GPIO_DeInit+0xaa>
 8003934:	2308      	movs	r3, #8
 8003936:	e00c      	b.n	8003952 <HAL_GPIO_DeInit+0xaa>
 8003938:	2306      	movs	r3, #6
 800393a:	e00a      	b.n	8003952 <HAL_GPIO_DeInit+0xaa>
 800393c:	2305      	movs	r3, #5
 800393e:	e008      	b.n	8003952 <HAL_GPIO_DeInit+0xaa>
 8003940:	2304      	movs	r3, #4
 8003942:	e006      	b.n	8003952 <HAL_GPIO_DeInit+0xaa>
 8003944:	2303      	movs	r3, #3
 8003946:	e004      	b.n	8003952 <HAL_GPIO_DeInit+0xaa>
 8003948:	2302      	movs	r3, #2
 800394a:	e002      	b.n	8003952 <HAL_GPIO_DeInit+0xaa>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_GPIO_DeInit+0xaa>
 8003950:	2300      	movs	r3, #0
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	f002 0203 	and.w	r2, r2, #3
 8003958:	0092      	lsls	r2, r2, #2
 800395a:	4093      	lsls	r3, r2
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	429a      	cmp	r2, r3
 8003960:	d132      	bne.n	80039c8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003962:	4b49      	ldr	r3, [pc, #292]	; (8003a88 <HAL_GPIO_DeInit+0x1e0>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	43db      	mvns	r3, r3
 800396a:	4947      	ldr	r1, [pc, #284]	; (8003a88 <HAL_GPIO_DeInit+0x1e0>)
 800396c:	4013      	ands	r3, r2
 800396e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003970:	4b45      	ldr	r3, [pc, #276]	; (8003a88 <HAL_GPIO_DeInit+0x1e0>)
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	43db      	mvns	r3, r3
 8003978:	4943      	ldr	r1, [pc, #268]	; (8003a88 <HAL_GPIO_DeInit+0x1e0>)
 800397a:	4013      	ands	r3, r2
 800397c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800397e:	4b42      	ldr	r3, [pc, #264]	; (8003a88 <HAL_GPIO_DeInit+0x1e0>)
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	43db      	mvns	r3, r3
 8003986:	4940      	ldr	r1, [pc, #256]	; (8003a88 <HAL_GPIO_DeInit+0x1e0>)
 8003988:	4013      	ands	r3, r2
 800398a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800398c:	4b3e      	ldr	r3, [pc, #248]	; (8003a88 <HAL_GPIO_DeInit+0x1e0>)
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	43db      	mvns	r3, r3
 8003994:	493c      	ldr	r1, [pc, #240]	; (8003a88 <HAL_GPIO_DeInit+0x1e0>)
 8003996:	4013      	ands	r3, r2
 8003998:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	220f      	movs	r2, #15
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80039aa:	4a2f      	ldr	r2, [pc, #188]	; (8003a68 <HAL_GPIO_DeInit+0x1c0>)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	3302      	adds	r3, #2
 80039b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	43da      	mvns	r2, r3
 80039ba:	482b      	ldr	r0, [pc, #172]	; (8003a68 <HAL_GPIO_DeInit+0x1c0>)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	400a      	ands	r2, r1
 80039c2:	3302      	adds	r3, #2
 80039c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	2103      	movs	r1, #3
 80039d2:	fa01 f303 	lsl.w	r3, r1, r3
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	08da      	lsrs	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3208      	adds	r2, #8
 80039e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	220f      	movs	r2, #15
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	08d2      	lsrs	r2, r2, #3
 80039fc:	4019      	ands	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3208      	adds	r2, #8
 8003a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	2103      	movs	r1, #3
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	401a      	ands	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	2101      	movs	r1, #1
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	2103      	movs	r1, #3
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	401a      	ands	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f47f af2f 	bne.w	80038b8 <HAL_GPIO_DeInit+0x10>
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	48000400 	.word	0x48000400
 8003a70:	48000800 	.word	0x48000800
 8003a74:	48000c00 	.word	0x48000c00
 8003a78:	48001000 	.word	0x48001000
 8003a7c:	48001400 	.word	0x48001400
 8003a80:	48001800 	.word	0x48001800
 8003a84:	48001c00 	.word	0x48001c00
 8003a88:	40010400 	.word	0x40010400

08003a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a9c:	787b      	ldrb	r3, [r7, #1]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003aa8:	e002      	b.n	8003ab0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aaa:	887a      	ldrh	r2, [r7, #2]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e081      	b.n	8003bd2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fc fe84 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2224      	movs	r2, #36	; 0x24
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d107      	bne.n	8003b36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	e006      	b.n	8003b44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d104      	bne.n	8003b56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69d9      	ldr	r1, [r3, #28]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e021      	b.n	8003c30 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2224      	movs	r2, #36	; 0x24
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7fc fecf 	bl	80009a8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	817b      	strh	r3, [r7, #10]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	813b      	strh	r3, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	f040 80f9 	bne.w	8003e52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_I2C_Mem_Write+0x34>
 8003c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0ed      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_I2C_Mem_Write+0x4e>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0e6      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c8e:	f7fe fffd 	bl	8002c8c <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	2319      	movs	r3, #25
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fbd9 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0d1      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2221      	movs	r2, #33	; 0x21
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2240      	movs	r2, #64	; 0x40
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a3a      	ldr	r2, [r7, #32]
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cd8:	88f8      	ldrh	r0, [r7, #6]
 8003cda:	893a      	ldrh	r2, [r7, #8]
 8003cdc:	8979      	ldrh	r1, [r7, #10]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fae9 	bl	80042c0 <I2C_RequestMemoryWrite>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0a9      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2bff      	cmp	r3, #255	; 0xff
 8003d08:	d90e      	bls.n	8003d28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	22ff      	movs	r2, #255	; 0xff
 8003d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	8979      	ldrh	r1, [r7, #10]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fd41 	bl	80047a8 <I2C_TransferConfig>
 8003d26:	e00f      	b.n	8003d48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	8979      	ldrh	r1, [r7, #10]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fd30 	bl	80047a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fbc3 	bl	80044d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e07b      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d034      	beq.n	8003e00 <HAL_I2C_Mem_Write+0x1c8>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d130      	bne.n	8003e00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	2200      	movs	r2, #0
 8003da6:	2180      	movs	r1, #128	; 0x80
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fb55 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e04d      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2bff      	cmp	r3, #255	; 0xff
 8003dc0:	d90e      	bls.n	8003de0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	22ff      	movs	r2, #255	; 0xff
 8003dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	8979      	ldrh	r1, [r7, #10]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fce5 	bl	80047a8 <I2C_TransferConfig>
 8003dde:	e00f      	b.n	8003e00 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	8979      	ldrh	r1, [r7, #10]
 8003df2:	2300      	movs	r3, #0
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fcd4 	bl	80047a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d19e      	bne.n	8003d48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fba2 	bl	8004558 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e01a      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2220      	movs	r2, #32
 8003e24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <HAL_I2C_Mem_Write+0x224>)
 8003e32:	400b      	ands	r3, r1
 8003e34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	fe00e800 	.word	0xfe00e800

08003e60 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	4608      	mov	r0, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	817b      	strh	r3, [r7, #10]
 8003e72:	460b      	mov	r3, r1
 8003e74:	813b      	strh	r3, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	f040 80fd 	bne.w	8004082 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_I2C_Mem_Read+0x34>
 8003e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d105      	bne.n	8003ea0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0f1      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_I2C_Mem_Read+0x4e>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e0ea      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eb6:	f7fe fee9 	bl	8002c8c <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	2319      	movs	r3, #25
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fac5 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0d5      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2222      	movs	r2, #34	; 0x22
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2240      	movs	r2, #64	; 0x40
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a3a      	ldr	r2, [r7, #32]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f00:	88f8      	ldrh	r0, [r7, #6]
 8003f02:	893a      	ldrh	r2, [r7, #8]
 8003f04:	8979      	ldrh	r1, [r7, #10]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	4603      	mov	r3, r0
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fa29 	bl	8004368 <I2C_RequestMemoryRead>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0ad      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2bff      	cmp	r3, #255	; 0xff
 8003f30:	d90e      	bls.n	8003f50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	22ff      	movs	r2, #255	; 0xff
 8003f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	8979      	ldrh	r1, [r7, #10]
 8003f40:	4b52      	ldr	r3, [pc, #328]	; (800408c <HAL_I2C_Mem_Read+0x22c>)
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fc2d 	bl	80047a8 <I2C_TransferConfig>
 8003f4e:	e00f      	b.n	8003f70 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	8979      	ldrh	r1, [r7, #10]
 8003f62:	4b4a      	ldr	r3, [pc, #296]	; (800408c <HAL_I2C_Mem_Read+0x22c>)
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fc1c 	bl	80047a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	2200      	movs	r2, #0
 8003f78:	2104      	movs	r1, #4
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fa6c 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07c      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d034      	beq.n	8004030 <HAL_I2C_Mem_Read+0x1d0>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d130      	bne.n	8004030 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2180      	movs	r1, #128	; 0x80
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fa3d 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e04d      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2bff      	cmp	r3, #255	; 0xff
 8003ff0:	d90e      	bls.n	8004010 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	22ff      	movs	r2, #255	; 0xff
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	8979      	ldrh	r1, [r7, #10]
 8004000:	2300      	movs	r3, #0
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fbcd 	bl	80047a8 <I2C_TransferConfig>
 800400e:	e00f      	b.n	8004030 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	b2da      	uxtb	r2, r3
 8004020:	8979      	ldrh	r1, [r7, #10]
 8004022:	2300      	movs	r3, #0
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fbbc 	bl	80047a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d19a      	bne.n	8003f70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa8a 	bl	8004558 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e01a      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2220      	movs	r2, #32
 8004054:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_I2C_Mem_Read+0x230>)
 8004062:	400b      	ands	r3, r1
 8004064:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e000      	b.n	8004084 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004082:	2302      	movs	r3, #2
  }
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	80002400 	.word	0x80002400
 8004090:	fe00e800 	.word	0xfe00e800

08004094 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	460b      	mov	r3, r1
 80040a2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	f040 80f1 	bne.w	8004298 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c4:	d101      	bne.n	80040ca <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
 80040c8:	e0e7      	b.n	800429a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_I2C_IsDeviceReady+0x44>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e0e0      	b.n	800429a <HAL_I2C_IsDeviceReady+0x206>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2224      	movs	r2, #36	; 0x24
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d107      	bne.n	8004106 <HAL_I2C_IsDeviceReady+0x72>
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004100:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004104:	e004      	b.n	8004110 <HAL_I2C_IsDeviceReady+0x7c>
 8004106:	897b      	ldrh	r3, [r7, #10]
 8004108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800410c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004116:	f7fe fdb9 	bl	8002c8c <HAL_GetTick>
 800411a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b20      	cmp	r3, #32
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b10      	cmp	r3, #16
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004148:	e034      	b.n	80041b4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004150:	d01a      	beq.n	8004188 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004152:	f7fe fd9b 	bl	8002c8c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d302      	bcc.n	8004168 <HAL_I2C_IsDeviceReady+0xd4>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10f      	bne.n	8004188 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004174:	f043 0220 	orr.w	r2, r3, #32
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e088      	b.n	800429a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b20      	cmp	r3, #32
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80041b4:	7ffb      	ldrb	r3, [r7, #31]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_I2C_IsDeviceReady+0x12c>
 80041ba:	7fbb      	ldrb	r3, [r7, #30]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0c4      	beq.n	800414a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d01a      	beq.n	8004204 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2120      	movs	r1, #32
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f93d 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e058      	b.n	800429a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2220      	movs	r2, #32
 80041ee:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e04a      	b.n	800429a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2200      	movs	r2, #0
 800420c:	2120      	movs	r1, #32
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f922 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e03d      	b.n	800429a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2210      	movs	r2, #16
 8004224:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2220      	movs	r2, #32
 800422c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d118      	bne.n	8004268 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004244:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	2120      	movs	r1, #32
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f901 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e01c      	b.n	800429a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2220      	movs	r2, #32
 8004266:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	3301      	adds	r3, #1
 800426c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	429a      	cmp	r2, r3
 8004274:	f63f af3b 	bhi.w	80040ee <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004284:	f043 0220 	orr.w	r2, r3, #32
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b0:	b2db      	uxtb	r3, r3
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	4608      	mov	r0, r1
 80042ca:	4611      	mov	r1, r2
 80042cc:	461a      	mov	r2, r3
 80042ce:	4603      	mov	r3, r0
 80042d0:	817b      	strh	r3, [r7, #10]
 80042d2:	460b      	mov	r3, r1
 80042d4:	813b      	strh	r3, [r7, #8]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	8979      	ldrh	r1, [r7, #10]
 80042e0:	4b20      	ldr	r3, [pc, #128]	; (8004364 <I2C_RequestMemoryWrite+0xa4>)
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fa5d 	bl	80047a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	69b9      	ldr	r1, [r7, #24]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f8f0 	bl	80044d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e02c      	b.n	800435c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d105      	bne.n	8004314 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004308:	893b      	ldrh	r3, [r7, #8]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	629a      	str	r2, [r3, #40]	; 0x28
 8004312:	e015      	b.n	8004340 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004314:	893b      	ldrh	r3, [r7, #8]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	b29b      	uxth	r3, r3
 800431a:	b2da      	uxtb	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	69b9      	ldr	r1, [r7, #24]
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 f8d6 	bl	80044d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e012      	b.n	800435c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004336:	893b      	ldrh	r3, [r7, #8]
 8004338:	b2da      	uxtb	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2200      	movs	r2, #0
 8004348:	2180      	movs	r1, #128	; 0x80
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f884 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	80002000 	.word	0x80002000

08004368 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	4608      	mov	r0, r1
 8004372:	4611      	mov	r1, r2
 8004374:	461a      	mov	r2, r3
 8004376:	4603      	mov	r3, r0
 8004378:	817b      	strh	r3, [r7, #10]
 800437a:	460b      	mov	r3, r1
 800437c:	813b      	strh	r3, [r7, #8]
 800437e:	4613      	mov	r3, r2
 8004380:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	8979      	ldrh	r1, [r7, #10]
 8004388:	4b20      	ldr	r3, [pc, #128]	; (800440c <I2C_RequestMemoryRead+0xa4>)
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fa0a 	bl	80047a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	69b9      	ldr	r1, [r7, #24]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f89d 	bl	80044d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e02c      	b.n	8004402 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043a8:	88fb      	ldrh	r3, [r7, #6]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d105      	bne.n	80043ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043ae:	893b      	ldrh	r3, [r7, #8]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28
 80043b8:	e015      	b.n	80043e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043ba:	893b      	ldrh	r3, [r7, #8]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	b29b      	uxth	r3, r3
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	69b9      	ldr	r1, [r7, #24]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f883 	bl	80044d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e012      	b.n	8004402 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043dc:	893b      	ldrh	r3, [r7, #8]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2200      	movs	r2, #0
 80043ee:	2140      	movs	r1, #64	; 0x40
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f831 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	80002000 	.word	0x80002000

08004410 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d103      	bne.n	800442e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d007      	beq.n	800444c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	619a      	str	r2, [r3, #24]
  }
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004468:	e022      	b.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004470:	d01e      	beq.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004472:	f7fe fc0b 	bl	8002c8c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d302      	bcc.n	8004488 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d113      	bne.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e00f      	b.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	429a      	cmp	r2, r3
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d0cd      	beq.n	800446a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044e4:	e02c      	b.n	8004540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f870 	bl	80045d0 <I2C_IsErrorOccurred>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e02a      	b.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004500:	d01e      	beq.n	8004540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004502:	f7fe fbc3 	bl	8002c8c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d113      	bne.n	8004540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e007      	b.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	d1cb      	bne.n	80044e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004564:	e028      	b.n	80045b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f830 	bl	80045d0 <I2C_IsErrorOccurred>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e026      	b.n	80045c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457a:	f7fe fb87 	bl	8002c8c <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	429a      	cmp	r2, r3
 8004588:	d302      	bcc.n	8004590 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e007      	b.n	80045c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d1cf      	bne.n	8004566 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	; 0x28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d075      	beq.n	80046e8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2210      	movs	r2, #16
 8004602:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004604:	e056      	b.n	80046b4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800460c:	d052      	beq.n	80046b4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800460e:	f7fe fb3d 	bl	8002c8c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	429a      	cmp	r2, r3
 800461c:	d302      	bcc.n	8004624 <I2C_IsErrorOccurred+0x54>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d147      	bne.n	80046b4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800462e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004636:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004646:	d12e      	bne.n	80046a6 <I2C_IsErrorOccurred+0xd6>
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800464e:	d02a      	beq.n	80046a6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004650:	7cfb      	ldrb	r3, [r7, #19]
 8004652:	2b20      	cmp	r3, #32
 8004654:	d027      	beq.n	80046a6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004664:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004666:	f7fe fb11 	bl	8002c8c <HAL_GetTick>
 800466a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800466c:	e01b      	b.n	80046a6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800466e:	f7fe fb0d 	bl	8002c8c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b19      	cmp	r3, #25
 800467a:	d914      	bls.n	80046a6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d1dc      	bne.n	800466e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d003      	beq.n	80046ca <I2C_IsErrorOccurred+0xfa>
 80046c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d09d      	beq.n	8004606 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d103      	bne.n	80046da <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2220      	movs	r2, #32
 80046d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f043 0304 	orr.w	r3, r3, #4
 80046e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800470a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	f043 0308 	orr.w	r3, r3, #8
 8004722:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800472c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800474e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800475a:	2b00      	cmp	r3, #0
 800475c:	d01c      	beq.n	8004798 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff fe56 	bl	8004410 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <I2C_IsErrorOccurred+0x1d4>)
 8004770:	400b      	ands	r3, r1
 8004772:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	431a      	orrs	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800479c:	4618      	mov	r0, r3
 800479e:	3728      	adds	r7, #40	; 0x28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	fe00e800 	.word	0xfe00e800

080047a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	817b      	strh	r3, [r7, #10]
 80047b6:	4613      	mov	r3, r2
 80047b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ba:	897b      	ldrh	r3, [r7, #10]
 80047bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047c0:	7a7b      	ldrb	r3, [r7, #9]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047c8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047d6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	0d5b      	lsrs	r3, r3, #21
 80047e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80047e6:	4b08      	ldr	r3, [pc, #32]	; (8004808 <I2C_TransferConfig+0x60>)
 80047e8:	430b      	orrs	r3, r1
 80047ea:	43db      	mvns	r3, r3
 80047ec:	ea02 0103 	and.w	r1, r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	03ff63ff 	.word	0x03ff63ff

0800480c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b20      	cmp	r3, #32
 8004820:	d138      	bne.n	8004894 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800482c:	2302      	movs	r3, #2
 800482e:	e032      	b.n	8004896 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	; 0x24
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800485e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6819      	ldr	r1, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d139      	bne.n	800492c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e033      	b.n	800492e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2224      	movs	r2, #36	; 0x24
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	021b      	lsls	r3, r3, #8
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	e000      	b.n	800492e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800492c:	2302      	movs	r3, #2
  }
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <HAL_PWREx_GetVoltageRange+0x18>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004948:	4618      	mov	r0, r3
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40007000 	.word	0x40007000

08004958 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004966:	d130      	bne.n	80049ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004968:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004974:	d038      	beq.n	80049e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004976:	4b20      	ldr	r3, [pc, #128]	; (80049f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800497e:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004984:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004986:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2232      	movs	r2, #50	; 0x32
 800498c:	fb02 f303 	mul.w	r3, r2, r3
 8004990:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	0c9b      	lsrs	r3, r3, #18
 8004998:	3301      	adds	r3, #1
 800499a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800499c:	e002      	b.n	80049a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049a4:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b0:	d102      	bne.n	80049b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f2      	bne.n	800499e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c4:	d110      	bne.n	80049e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e00f      	b.n	80049ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d6:	d007      	beq.n	80049e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049d8:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049e0:	4a05      	ldr	r2, [pc, #20]	; (80049f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40007000 	.word	0x40007000
 80049fc:	20000000 	.word	0x20000000
 8004a00:	431bde83 	.word	0x431bde83

08004a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d102      	bne.n	8004a18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f000 bc16 	b.w	8005244 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a18:	4ba0      	ldr	r3, [pc, #640]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a22:	4b9e      	ldr	r3, [pc, #632]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80e4 	beq.w	8004c02 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <HAL_RCC_OscConfig+0x4c>
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	f040 808b 	bne.w	8004b5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	f040 8087 	bne.w	8004b5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a50:	4b92      	ldr	r3, [pc, #584]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_OscConfig+0x64>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e3ed      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	4b8b      	ldr	r3, [pc, #556]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <HAL_RCC_OscConfig+0x7e>
 8004a78:	4b88      	ldr	r3, [pc, #544]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a80:	e005      	b.n	8004a8e <HAL_RCC_OscConfig+0x8a>
 8004a82:	4b86      	ldr	r3, [pc, #536]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a88:	091b      	lsrs	r3, r3, #4
 8004a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d223      	bcs.n	8004ada <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fd80 	bl	800559c <RCC_SetFlashLatencyFromMSIRange>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e3ce      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aa6:	4b7d      	ldr	r3, [pc, #500]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a7c      	ldr	r2, [pc, #496]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004aac:	f043 0308 	orr.w	r3, r3, #8
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	4b7a      	ldr	r3, [pc, #488]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	4977      	ldr	r1, [pc, #476]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ac4:	4b75      	ldr	r3, [pc, #468]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	4972      	ldr	r1, [pc, #456]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	604b      	str	r3, [r1, #4]
 8004ad8:	e025      	b.n	8004b26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ada:	4b70      	ldr	r3, [pc, #448]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a6f      	ldr	r2, [pc, #444]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004ae0:	f043 0308 	orr.w	r3, r3, #8
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4b6d      	ldr	r3, [pc, #436]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	496a      	ldr	r1, [pc, #424]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004af8:	4b68      	ldr	r3, [pc, #416]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	4965      	ldr	r1, [pc, #404]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fd40 	bl	800559c <RCC_SetFlashLatencyFromMSIRange>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e38e      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b26:	f000 fc75 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	4b5b      	ldr	r3, [pc, #364]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	495a      	ldr	r1, [pc, #360]	; (8004ca0 <HAL_RCC_OscConfig+0x29c>)
 8004b38:	5ccb      	ldrb	r3, [r1, r3]
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b42:	4a58      	ldr	r2, [pc, #352]	; (8004ca4 <HAL_RCC_OscConfig+0x2a0>)
 8004b44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b46:	4b58      	ldr	r3, [pc, #352]	; (8004ca8 <HAL_RCC_OscConfig+0x2a4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe f84e 	bl	8002bec <HAL_InitTick>
 8004b50:	4603      	mov	r3, r0
 8004b52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d052      	beq.n	8004c00 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	e372      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d032      	beq.n	8004bcc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b66:	4b4d      	ldr	r3, [pc, #308]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a4c      	ldr	r2, [pc, #304]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b72:	f7fe f88b 	bl	8002c8c <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b7a:	f7fe f887 	bl	8002c8c <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e35b      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b8c:	4b43      	ldr	r3, [pc, #268]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b98:	4b40      	ldr	r3, [pc, #256]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3f      	ldr	r2, [pc, #252]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004b9e:	f043 0308 	orr.w	r3, r3, #8
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	4b3d      	ldr	r3, [pc, #244]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	493a      	ldr	r1, [pc, #232]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bb6:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	4935      	ldr	r1, [pc, #212]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	604b      	str	r3, [r1, #4]
 8004bca:	e01a      	b.n	8004c02 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bcc:	4b33      	ldr	r3, [pc, #204]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a32      	ldr	r2, [pc, #200]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bd8:	f7fe f858 	bl	8002c8c <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004be0:	f7fe f854 	bl	8002c8c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e328      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bf2:	4b2a      	ldr	r3, [pc, #168]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x1dc>
 8004bfe:	e000      	b.n	8004c02 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d073      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_OscConfig+0x21c>
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d10e      	bne.n	8004c38 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d10b      	bne.n	8004c38 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c20:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d063      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x2f0>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d15f      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e305      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c40:	d106      	bne.n	8004c50 <HAL_RCC_OscConfig+0x24c>
 8004c42:	4b16      	ldr	r3, [pc, #88]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	e01d      	b.n	8004c8c <HAL_RCC_OscConfig+0x288>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c58:	d10c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x270>
 8004c5a:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a0f      	ldr	r2, [pc, #60]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	e00b      	b.n	8004c8c <HAL_RCC_OscConfig+0x288>
 8004c74:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a08      	ldr	r2, [pc, #32]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a05      	ldr	r2, [pc, #20]	; (8004c9c <HAL_RCC_OscConfig+0x298>)
 8004c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01b      	beq.n	8004ccc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fd fffa 	bl	8002c8c <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c9a:	e010      	b.n	8004cbe <HAL_RCC_OscConfig+0x2ba>
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	0800c600 	.word	0x0800c600
 8004ca4:	20000000 	.word	0x20000000
 8004ca8:	20000080 	.word	0x20000080
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cac:	f7fd ffee 	bl	8002c8c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	; 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e2c2      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cbe:	4baf      	ldr	r3, [pc, #700]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0x2a8>
 8004cca:	e014      	b.n	8004cf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fd ffde 	bl	8002c8c <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd4:	f7fd ffda 	bl	8002c8c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	; 0x64
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e2ae      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ce6:	4ba5      	ldr	r3, [pc, #660]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x2d0>
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d060      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d005      	beq.n	8004d14 <HAL_RCC_OscConfig+0x310>
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b0c      	cmp	r3, #12
 8004d0c:	d119      	bne.n	8004d42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d116      	bne.n	8004d42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d14:	4b99      	ldr	r3, [pc, #612]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_OscConfig+0x328>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e28b      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2c:	4b93      	ldr	r3, [pc, #588]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	061b      	lsls	r3, r3, #24
 8004d3a:	4990      	ldr	r1, [pc, #576]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d40:	e040      	b.n	8004dc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d023      	beq.n	8004d92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d4a:	4b8c      	ldr	r3, [pc, #560]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a8b      	ldr	r2, [pc, #556]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fd ff99 	bl	8002c8c <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d5e:	f7fd ff95 	bl	8002c8c <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e269      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d70:	4b82      	ldr	r3, [pc, #520]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7c:	4b7f      	ldr	r3, [pc, #508]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	061b      	lsls	r3, r3, #24
 8004d8a:	497c      	ldr	r1, [pc, #496]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	604b      	str	r3, [r1, #4]
 8004d90:	e018      	b.n	8004dc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d92:	4b7a      	ldr	r3, [pc, #488]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a79      	ldr	r2, [pc, #484]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9e:	f7fd ff75 	bl	8002c8c <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da6:	f7fd ff71 	bl	8002c8c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e245      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004db8:	4b70      	ldr	r3, [pc, #448]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f0      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d03c      	beq.n	8004e4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01c      	beq.n	8004e12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dd8:	4b68      	ldr	r3, [pc, #416]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dde:	4a67      	ldr	r2, [pc, #412]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fd ff50 	bl	8002c8c <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df0:	f7fd ff4c 	bl	8002c8c <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e220      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e02:	4b5e      	ldr	r3, [pc, #376]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0ef      	beq.n	8004df0 <HAL_RCC_OscConfig+0x3ec>
 8004e10:	e01b      	b.n	8004e4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e12:	4b5a      	ldr	r3, [pc, #360]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e18:	4a58      	ldr	r2, [pc, #352]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004e1a:	f023 0301 	bic.w	r3, r3, #1
 8004e1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e22:	f7fd ff33 	bl	8002c8c <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e2a:	f7fd ff2f 	bl	8002c8c <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e203      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e3c:	4b4f      	ldr	r3, [pc, #316]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1ef      	bne.n	8004e2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80a6 	beq.w	8004fa4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e5c:	4b47      	ldr	r3, [pc, #284]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10d      	bne.n	8004e84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e68:	4b44      	ldr	r3, [pc, #272]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	4a43      	ldr	r2, [pc, #268]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e72:	6593      	str	r3, [r2, #88]	; 0x58
 8004e74:	4b41      	ldr	r3, [pc, #260]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e80:	2301      	movs	r3, #1
 8004e82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e84:	4b3e      	ldr	r3, [pc, #248]	; (8004f80 <HAL_RCC_OscConfig+0x57c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d118      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e90:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <HAL_RCC_OscConfig+0x57c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <HAL_RCC_OscConfig+0x57c>)
 8004e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e9c:	f7fd fef6 	bl	8002c8c <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea4:	f7fd fef2 	bl	8002c8c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e1c6      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eb6:	4b32      	ldr	r3, [pc, #200]	; (8004f80 <HAL_RCC_OscConfig+0x57c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d108      	bne.n	8004edc <HAL_RCC_OscConfig+0x4d8>
 8004eca:	4b2c      	ldr	r3, [pc, #176]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eda:	e024      	b.n	8004f26 <HAL_RCC_OscConfig+0x522>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2b05      	cmp	r3, #5
 8004ee2:	d110      	bne.n	8004f06 <HAL_RCC_OscConfig+0x502>
 8004ee4:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eea:	4a24      	ldr	r2, [pc, #144]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004eec:	f043 0304 	orr.w	r3, r3, #4
 8004ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ef4:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	4a20      	ldr	r2, [pc, #128]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f04:	e00f      	b.n	8004f26 <HAL_RCC_OscConfig+0x522>
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0c:	4a1b      	ldr	r2, [pc, #108]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f16:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1c:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004f1e:	f023 0304 	bic.w	r3, r3, #4
 8004f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d016      	beq.n	8004f5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2e:	f7fd fead 	bl	8002c8c <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f34:	e00a      	b.n	8004f4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f36:	f7fd fea9 	bl	8002c8c <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e17b      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <HAL_RCC_OscConfig+0x578>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ed      	beq.n	8004f36 <HAL_RCC_OscConfig+0x532>
 8004f5a:	e01a      	b.n	8004f92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5c:	f7fd fe96 	bl	8002c8c <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f62:	e00f      	b.n	8004f84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f64:	f7fd fe92 	bl	8002c8c <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d906      	bls.n	8004f84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e164      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f84:	4ba8      	ldr	r3, [pc, #672]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e8      	bne.n	8004f64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f92:	7ffb      	ldrb	r3, [r7, #31]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d105      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f98:	4ba3      	ldr	r3, [pc, #652]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	4aa2      	ldr	r2, [pc, #648]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8004f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d03c      	beq.n	800502a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01c      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fb8:	4b9b      	ldr	r3, [pc, #620]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8004fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fbe:	4a9a      	ldr	r2, [pc, #616]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc8:	f7fd fe60 	bl	8002c8c <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fd0:	f7fd fe5c 	bl	8002c8c <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e130      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fe2:	4b91      	ldr	r3, [pc, #580]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8004fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ef      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x5cc>
 8004ff0:	e01b      	b.n	800502a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ff2:	4b8d      	ldr	r3, [pc, #564]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8004ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ff8:	4a8b      	ldr	r2, [pc, #556]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005002:	f7fd fe43 	bl	8002c8c <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800500a:	f7fd fe3f 	bl	8002c8c <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e113      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800501c:	4b82      	ldr	r3, [pc, #520]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 800501e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1ef      	bne.n	800500a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 8107 	beq.w	8005242 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	2b02      	cmp	r3, #2
 800503a:	f040 80cb 	bne.w	80051d4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800503e:	4b7a      	ldr	r3, [pc, #488]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f003 0203 	and.w	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	429a      	cmp	r2, r3
 8005050:	d12c      	bne.n	80050ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	3b01      	subs	r3, #1
 800505e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d123      	bne.n	80050ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d11b      	bne.n	80050ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005080:	429a      	cmp	r2, r3
 8005082:	d113      	bne.n	80050ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	085b      	lsrs	r3, r3, #1
 8005090:	3b01      	subs	r3, #1
 8005092:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d109      	bne.n	80050ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	085b      	lsrs	r3, r3, #1
 80050a4:	3b01      	subs	r3, #1
 80050a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d06d      	beq.n	8005188 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b0c      	cmp	r3, #12
 80050b0:	d068      	beq.n	8005184 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050b2:	4b5d      	ldr	r3, [pc, #372]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d105      	bne.n	80050ca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050be:	4b5a      	ldr	r3, [pc, #360]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e0ba      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050ce:	4b56      	ldr	r3, [pc, #344]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a55      	ldr	r2, [pc, #340]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80050d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050da:	f7fd fdd7 	bl	8002c8c <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e2:	f7fd fdd3 	bl	8002c8c <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e0a7      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f4:	4b4c      	ldr	r3, [pc, #304]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f0      	bne.n	80050e2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005100:	4b49      	ldr	r3, [pc, #292]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	4b49      	ldr	r3, [pc, #292]	; (800522c <HAL_RCC_OscConfig+0x828>)
 8005106:	4013      	ands	r3, r2
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005110:	3a01      	subs	r2, #1
 8005112:	0112      	lsls	r2, r2, #4
 8005114:	4311      	orrs	r1, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800511a:	0212      	lsls	r2, r2, #8
 800511c:	4311      	orrs	r1, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005122:	0852      	lsrs	r2, r2, #1
 8005124:	3a01      	subs	r2, #1
 8005126:	0552      	lsls	r2, r2, #21
 8005128:	4311      	orrs	r1, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800512e:	0852      	lsrs	r2, r2, #1
 8005130:	3a01      	subs	r2, #1
 8005132:	0652      	lsls	r2, r2, #25
 8005134:	4311      	orrs	r1, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800513a:	06d2      	lsls	r2, r2, #27
 800513c:	430a      	orrs	r2, r1
 800513e:	493a      	ldr	r1, [pc, #232]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8005140:	4313      	orrs	r3, r2
 8005142:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005144:	4b38      	ldr	r3, [pc, #224]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a37      	ldr	r2, [pc, #220]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 800514a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800514e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005150:	4b35      	ldr	r3, [pc, #212]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a34      	ldr	r2, [pc, #208]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8005156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800515a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800515c:	f7fd fd96 	bl	8002c8c <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005164:	f7fd fd92 	bl	8002c8c <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e066      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005176:	4b2c      	ldr	r3, [pc, #176]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005182:	e05e      	b.n	8005242 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e05d      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005188:	4b27      	ldr	r3, [pc, #156]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d156      	bne.n	8005242 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005194:	4b24      	ldr	r3, [pc, #144]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a23      	ldr	r2, [pc, #140]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 800519a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800519e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051a0:	4b21      	ldr	r3, [pc, #132]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4a20      	ldr	r2, [pc, #128]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80051a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051ac:	f7fd fd6e 	bl	8002c8c <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fd fd6a 	bl	8002c8c <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e03e      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c6:	4b18      	ldr	r3, [pc, #96]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0x7b0>
 80051d2:	e036      	b.n	8005242 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d031      	beq.n	800523e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a12      	ldr	r2, [pc, #72]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80051e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80051e6:	4b10      	ldr	r3, [pc, #64]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d105      	bne.n	80051fe <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80051f2:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	4a0c      	ldr	r2, [pc, #48]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 80051f8:	f023 0303 	bic.w	r3, r3, #3
 80051fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <HAL_RCC_OscConfig+0x824>)
 8005204:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520e:	f7fd fd3d 	bl	8002c8c <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005214:	e00c      	b.n	8005230 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005216:	f7fd fd39 	bl	8002c8c <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d905      	bls.n	8005230 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e00d      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
 8005228:	40021000 	.word	0x40021000
 800522c:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_RCC_OscConfig+0x848>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1ec      	bne.n	8005216 <HAL_RCC_OscConfig+0x812>
 800523c:	e001      	b.n	8005242 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3720      	adds	r7, #32
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40021000 	.word	0x40021000

08005250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0c8      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005264:	4b66      	ldr	r3, [pc, #408]	; (8005400 <HAL_RCC_ClockConfig+0x1b0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d910      	bls.n	8005294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b63      	ldr	r3, [pc, #396]	; (8005400 <HAL_RCC_ClockConfig+0x1b0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 0207 	bic.w	r2, r3, #7
 800527a:	4961      	ldr	r1, [pc, #388]	; (8005400 <HAL_RCC_ClockConfig+0x1b0>)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	4313      	orrs	r3, r2
 8005280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b5f      	ldr	r3, [pc, #380]	; (8005400 <HAL_RCC_ClockConfig+0x1b0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0b0      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d04c      	beq.n	800533a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052a8:	4b56      	ldr	r3, [pc, #344]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d121      	bne.n	80052f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e09e      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052c0:	4b50      	ldr	r3, [pc, #320]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d115      	bne.n	80052f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e092      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052d8:	4b4a      	ldr	r3, [pc, #296]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e086      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052e8:	4b46      	ldr	r3, [pc, #280]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e07e      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052f8:	4b42      	ldr	r3, [pc, #264]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f023 0203 	bic.w	r2, r3, #3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	493f      	ldr	r1, [pc, #252]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 8005306:	4313      	orrs	r3, r2
 8005308:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530a:	f7fd fcbf 	bl	8002c8c <HAL_GetTick>
 800530e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005310:	e00a      	b.n	8005328 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005312:	f7fd fcbb 	bl	8002c8c <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e066      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005328:	4b36      	ldr	r3, [pc, #216]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 020c 	and.w	r2, r3, #12
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	429a      	cmp	r2, r3
 8005338:	d1eb      	bne.n	8005312 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005346:	4b2f      	ldr	r3, [pc, #188]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	492c      	ldr	r1, [pc, #176]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 8005354:	4313      	orrs	r3, r2
 8005356:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005358:	4b29      	ldr	r3, [pc, #164]	; (8005400 <HAL_RCC_ClockConfig+0x1b0>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d210      	bcs.n	8005388 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005366:	4b26      	ldr	r3, [pc, #152]	; (8005400 <HAL_RCC_ClockConfig+0x1b0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 0207 	bic.w	r2, r3, #7
 800536e:	4924      	ldr	r1, [pc, #144]	; (8005400 <HAL_RCC_ClockConfig+0x1b0>)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b22      	ldr	r3, [pc, #136]	; (8005400 <HAL_RCC_ClockConfig+0x1b0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e036      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005394:	4b1b      	ldr	r3, [pc, #108]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	4918      	ldr	r1, [pc, #96]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d009      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053b2:	4b14      	ldr	r3, [pc, #80]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4910      	ldr	r1, [pc, #64]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053c6:	f000 f825 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80053ca:	4602      	mov	r2, r0
 80053cc:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <HAL_RCC_ClockConfig+0x1b4>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	490c      	ldr	r1, [pc, #48]	; (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 80053d8:	5ccb      	ldrb	r3, [r1, r3]
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	fa22 f303 	lsr.w	r3, r2, r3
 80053e2:	4a0a      	ldr	r2, [pc, #40]	; (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <HAL_RCC_ClockConfig+0x1c0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fd fbfe 	bl	8002bec <HAL_InitTick>
 80053f0:	4603      	mov	r3, r0
 80053f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80053f4:	7afb      	ldrb	r3, [r7, #11]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40022000 	.word	0x40022000
 8005404:	40021000 	.word	0x40021000
 8005408:	0800c600 	.word	0x0800c600
 800540c:	20000000 	.word	0x20000000
 8005410:	20000080 	.word	0x20000080

08005414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005414:	b480      	push	{r7}
 8005416:	b089      	sub	sp, #36	; 0x24
 8005418:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800541a:	2300      	movs	r3, #0
 800541c:	61fb      	str	r3, [r7, #28]
 800541e:	2300      	movs	r3, #0
 8005420:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005422:	4b3e      	ldr	r3, [pc, #248]	; (800551c <HAL_RCC_GetSysClockFreq+0x108>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 030c 	and.w	r3, r3, #12
 800542a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800542c:	4b3b      	ldr	r3, [pc, #236]	; (800551c <HAL_RCC_GetSysClockFreq+0x108>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d005      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x34>
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b0c      	cmp	r3, #12
 8005440:	d121      	bne.n	8005486 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d11e      	bne.n	8005486 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005448:	4b34      	ldr	r3, [pc, #208]	; (800551c <HAL_RCC_GetSysClockFreq+0x108>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d107      	bne.n	8005464 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005454:	4b31      	ldr	r3, [pc, #196]	; (800551c <HAL_RCC_GetSysClockFreq+0x108>)
 8005456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	e005      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005464:	4b2d      	ldr	r3, [pc, #180]	; (800551c <HAL_RCC_GetSysClockFreq+0x108>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005470:	4a2b      	ldr	r2, [pc, #172]	; (8005520 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005478:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10d      	bne.n	800549c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005484:	e00a      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b04      	cmp	r3, #4
 800548a:	d102      	bne.n	8005492 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800548c:	4b25      	ldr	r3, [pc, #148]	; (8005524 <HAL_RCC_GetSysClockFreq+0x110>)
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	e004      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b08      	cmp	r3, #8
 8005496:	d101      	bne.n	800549c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005498:	4b23      	ldr	r3, [pc, #140]	; (8005528 <HAL_RCC_GetSysClockFreq+0x114>)
 800549a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2b0c      	cmp	r3, #12
 80054a0:	d134      	bne.n	800550c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054a2:	4b1e      	ldr	r3, [pc, #120]	; (800551c <HAL_RCC_GetSysClockFreq+0x108>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d003      	beq.n	80054ba <HAL_RCC_GetSysClockFreq+0xa6>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d003      	beq.n	80054c0 <HAL_RCC_GetSysClockFreq+0xac>
 80054b8:	e005      	b.n	80054c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054ba:	4b1a      	ldr	r3, [pc, #104]	; (8005524 <HAL_RCC_GetSysClockFreq+0x110>)
 80054bc:	617b      	str	r3, [r7, #20]
      break;
 80054be:	e005      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054c0:	4b19      	ldr	r3, [pc, #100]	; (8005528 <HAL_RCC_GetSysClockFreq+0x114>)
 80054c2:	617b      	str	r3, [r7, #20]
      break;
 80054c4:	e002      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	617b      	str	r3, [r7, #20]
      break;
 80054ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054cc:	4b13      	ldr	r3, [pc, #76]	; (800551c <HAL_RCC_GetSysClockFreq+0x108>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	3301      	adds	r3, #1
 80054d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054da:	4b10      	ldr	r3, [pc, #64]	; (800551c <HAL_RCC_GetSysClockFreq+0x108>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	fb02 f203 	mul.w	r2, r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054f2:	4b0a      	ldr	r3, [pc, #40]	; (800551c <HAL_RCC_GetSysClockFreq+0x108>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	0e5b      	lsrs	r3, r3, #25
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	3301      	adds	r3, #1
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	fbb2 f3f3 	udiv	r3, r2, r3
 800550a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800550c:	69bb      	ldr	r3, [r7, #24]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3724      	adds	r7, #36	; 0x24
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40021000 	.word	0x40021000
 8005520:	0800c618 	.word	0x0800c618
 8005524:	00f42400 	.word	0x00f42400
 8005528:	007a1200 	.word	0x007a1200

0800552c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <HAL_RCC_GetHCLKFreq+0x14>)
 8005532:	681b      	ldr	r3, [r3, #0]
}
 8005534:	4618      	mov	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20000000 	.word	0x20000000

08005544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005548:	f7ff fff0 	bl	800552c <HAL_RCC_GetHCLKFreq>
 800554c:	4602      	mov	r2, r0
 800554e:	4b06      	ldr	r3, [pc, #24]	; (8005568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	4904      	ldr	r1, [pc, #16]	; (800556c <HAL_RCC_GetPCLK1Freq+0x28>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005564:	4618      	mov	r0, r3
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40021000 	.word	0x40021000
 800556c:	0800c610 	.word	0x0800c610

08005570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005574:	f7ff ffda 	bl	800552c <HAL_RCC_GetHCLKFreq>
 8005578:	4602      	mov	r2, r0
 800557a:	4b06      	ldr	r3, [pc, #24]	; (8005594 <HAL_RCC_GetPCLK2Freq+0x24>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	0adb      	lsrs	r3, r3, #11
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	4904      	ldr	r1, [pc, #16]	; (8005598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005586:	5ccb      	ldrb	r3, [r1, r3]
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40021000 	.word	0x40021000
 8005598:	0800c610 	.word	0x0800c610

0800559c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055a4:	2300      	movs	r3, #0
 80055a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055a8:	4b2a      	ldr	r3, [pc, #168]	; (8005654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055b4:	f7ff f9c2 	bl	800493c <HAL_PWREx_GetVoltageRange>
 80055b8:	6178      	str	r0, [r7, #20]
 80055ba:	e014      	b.n	80055e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055bc:	4b25      	ldr	r3, [pc, #148]	; (8005654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c0:	4a24      	ldr	r2, [pc, #144]	; (8005654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c6:	6593      	str	r3, [r2, #88]	; 0x58
 80055c8:	4b22      	ldr	r3, [pc, #136]	; (8005654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055d4:	f7ff f9b2 	bl	800493c <HAL_PWREx_GetVoltageRange>
 80055d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055da:	4b1e      	ldr	r3, [pc, #120]	; (8005654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055de:	4a1d      	ldr	r2, [pc, #116]	; (8005654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ec:	d10b      	bne.n	8005606 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	d919      	bls.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2ba0      	cmp	r3, #160	; 0xa0
 80055f8:	d902      	bls.n	8005600 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055fa:	2302      	movs	r3, #2
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	e013      	b.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005600:	2301      	movs	r3, #1
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	e010      	b.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b80      	cmp	r3, #128	; 0x80
 800560a:	d902      	bls.n	8005612 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800560c:	2303      	movs	r3, #3
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	e00a      	b.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b80      	cmp	r3, #128	; 0x80
 8005616:	d102      	bne.n	800561e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005618:	2302      	movs	r3, #2
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	e004      	b.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b70      	cmp	r3, #112	; 0x70
 8005622:	d101      	bne.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005624:	2301      	movs	r3, #1
 8005626:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 0207 	bic.w	r2, r3, #7
 8005630:	4909      	ldr	r1, [pc, #36]	; (8005658 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005638:	4b07      	ldr	r3, [pc, #28]	; (8005658 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	429a      	cmp	r2, r3
 8005644:	d001      	beq.n	800564a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40021000 	.word	0x40021000
 8005658:	40022000 	.word	0x40022000

0800565c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005664:	2300      	movs	r3, #0
 8005666:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005668:	2300      	movs	r3, #0
 800566a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005674:	2b00      	cmp	r3, #0
 8005676:	d041      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800567c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005680:	d02a      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005682:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005686:	d824      	bhi.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005688:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800568c:	d008      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800568e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005692:	d81e      	bhi.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800569c:	d010      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800569e:	e018      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056a0:	4b86      	ldr	r3, [pc, #536]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a85      	ldr	r2, [pc, #532]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056ac:	e015      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3304      	adds	r3, #4
 80056b2:	2100      	movs	r1, #0
 80056b4:	4618      	mov	r0, r3
 80056b6:	f001 f97f 	bl	80069b8 <RCCEx_PLLSAI1_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056be:	e00c      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3320      	adds	r3, #32
 80056c4:	2100      	movs	r1, #0
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 fa68 	bl	8006b9c <RCCEx_PLLSAI2_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056d0:	e003      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	74fb      	strb	r3, [r7, #19]
      break;
 80056d6:	e000      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80056d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056da:	7cfb      	ldrb	r3, [r7, #19]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056e0:	4b76      	ldr	r3, [pc, #472]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056ee:	4973      	ldr	r1, [pc, #460]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80056f6:	e001      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f8:	7cfb      	ldrb	r3, [r7, #19]
 80056fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d041      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800570c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005710:	d02a      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005712:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005716:	d824      	bhi.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005718:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800571c:	d008      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800571e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005722:	d81e      	bhi.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800572c:	d010      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800572e:	e018      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005730:	4b62      	ldr	r3, [pc, #392]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	4a61      	ldr	r2, [pc, #388]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800573a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800573c:	e015      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3304      	adds	r3, #4
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f001 f937 	bl	80069b8 <RCCEx_PLLSAI1_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800574e:	e00c      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3320      	adds	r3, #32
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f001 fa20 	bl	8006b9c <RCCEx_PLLSAI2_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005760:	e003      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	74fb      	strb	r3, [r7, #19]
      break;
 8005766:	e000      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800576a:	7cfb      	ldrb	r3, [r7, #19]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10b      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005770:	4b52      	ldr	r3, [pc, #328]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005776:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800577e:	494f      	ldr	r1, [pc, #316]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005786:	e001      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005788:	7cfb      	ldrb	r3, [r7, #19]
 800578a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80a0 	beq.w	80058da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800579a:	2300      	movs	r3, #0
 800579c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800579e:	4b47      	ldr	r3, [pc, #284]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00d      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b4:	4b41      	ldr	r3, [pc, #260]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b8:	4a40      	ldr	r2, [pc, #256]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057be:	6593      	str	r3, [r2, #88]	; 0x58
 80057c0:	4b3e      	ldr	r3, [pc, #248]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c8:	60bb      	str	r3, [r7, #8]
 80057ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057cc:	2301      	movs	r3, #1
 80057ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057d0:	4b3b      	ldr	r3, [pc, #236]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a3a      	ldr	r2, [pc, #232]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057dc:	f7fd fa56 	bl	8002c8c <HAL_GetTick>
 80057e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057e2:	e009      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e4:	f7fd fa52 	bl	8002c8c <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d902      	bls.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	74fb      	strb	r3, [r7, #19]
        break;
 80057f6:	e005      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057f8:	4b31      	ldr	r3, [pc, #196]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0ef      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005804:	7cfb      	ldrb	r3, [r7, #19]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d15c      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800580a:	4b2c      	ldr	r3, [pc, #176]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005814:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01f      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	429a      	cmp	r2, r3
 8005826:	d019      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005828:	4b24      	ldr	r3, [pc, #144]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005832:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005834:	4b21      	ldr	r3, [pc, #132]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583a:	4a20      	ldr	r2, [pc, #128]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800583c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005844:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	4a1c      	ldr	r2, [pc, #112]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800584c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005854:	4a19      	ldr	r2, [pc, #100]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d016      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005866:	f7fd fa11 	bl	8002c8c <HAL_GetTick>
 800586a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800586c:	e00b      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800586e:	f7fd fa0d 	bl	8002c8c <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	f241 3288 	movw	r2, #5000	; 0x1388
 800587c:	4293      	cmp	r3, r2
 800587e:	d902      	bls.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	74fb      	strb	r3, [r7, #19]
            break;
 8005884:	e006      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005886:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0ec      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005894:	7cfb      	ldrb	r3, [r7, #19]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10c      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800589a:	4b08      	ldr	r3, [pc, #32]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058aa:	4904      	ldr	r1, [pc, #16]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058b2:	e009      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058b4:	7cfb      	ldrb	r3, [r7, #19]
 80058b6:	74bb      	strb	r3, [r7, #18]
 80058b8:	e006      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80058ba:	bf00      	nop
 80058bc:	40021000 	.word	0x40021000
 80058c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058c8:	7c7b      	ldrb	r3, [r7, #17]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d105      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ce:	4ba6      	ldr	r3, [pc, #664]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d2:	4aa5      	ldr	r2, [pc, #660]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058e6:	4ba0      	ldr	r3, [pc, #640]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ec:	f023 0203 	bic.w	r2, r3, #3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	499c      	ldr	r1, [pc, #624]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005908:	4b97      	ldr	r3, [pc, #604]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800590a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590e:	f023 020c 	bic.w	r2, r3, #12
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005916:	4994      	ldr	r1, [pc, #592]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005918:	4313      	orrs	r3, r2
 800591a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800592a:	4b8f      	ldr	r3, [pc, #572]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	498b      	ldr	r1, [pc, #556]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800594c:	4b86      	ldr	r3, [pc, #536]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	4983      	ldr	r1, [pc, #524]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800596e:	4b7e      	ldr	r3, [pc, #504]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800597c:	497a      	ldr	r1, [pc, #488]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005990:	4b75      	ldr	r3, [pc, #468]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005996:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599e:	4972      	ldr	r1, [pc, #456]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059b2:	4b6d      	ldr	r3, [pc, #436]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c0:	4969      	ldr	r1, [pc, #420]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059d4:	4b64      	ldr	r3, [pc, #400]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e2:	4961      	ldr	r1, [pc, #388]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059f6:	4b5c      	ldr	r3, [pc, #368]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a04:	4958      	ldr	r1, [pc, #352]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a18:	4b53      	ldr	r3, [pc, #332]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	4950      	ldr	r1, [pc, #320]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a3a:	4b4b      	ldr	r3, [pc, #300]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a48:	4947      	ldr	r1, [pc, #284]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a5c:	4b42      	ldr	r3, [pc, #264]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a62:	f023 0203 	bic.w	r2, r3, #3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6a:	493f      	ldr	r1, [pc, #252]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d028      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a7e:	4b3a      	ldr	r3, [pc, #232]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8c:	4936      	ldr	r1, [pc, #216]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a9c:	d106      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a9e:	4b32      	ldr	r3, [pc, #200]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	4a31      	ldr	r2, [pc, #196]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005aa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aa8:	60d3      	str	r3, [r2, #12]
 8005aaa:	e011      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ab4:	d10c      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	2101      	movs	r1, #1
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 ff7b 	bl	80069b8 <RCCEx_PLLSAI1_Config>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ac6:	7cfb      	ldrb	r3, [r7, #19]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005acc:	7cfb      	ldrb	r3, [r7, #19]
 8005ace:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d028      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005adc:	4b22      	ldr	r3, [pc, #136]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aea:	491f      	ldr	r1, [pc, #124]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005afa:	d106      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005afc:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b06:	60d3      	str	r3, [r2, #12]
 8005b08:	e011      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b12:	d10c      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3304      	adds	r3, #4
 8005b18:	2101      	movs	r1, #1
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 ff4c 	bl	80069b8 <RCCEx_PLLSAI1_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b24:	7cfb      	ldrb	r3, [r7, #19]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005b2a:	7cfb      	ldrb	r3, [r7, #19]
 8005b2c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d02a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b48:	4907      	ldr	r1, [pc, #28]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b58:	d108      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b5a:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	4a02      	ldr	r2, [pc, #8]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b64:	60d3      	str	r3, [r2, #12]
 8005b66:	e013      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005b68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b74:	d10c      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 ff1b 	bl	80069b8 <RCCEx_PLLSAI1_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b86:	7cfb      	ldrb	r3, [r7, #19]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d02f      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b9c:	4b2c      	ldr	r3, [pc, #176]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005baa:	4929      	ldr	r1, [pc, #164]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bba:	d10d      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	2102      	movs	r1, #2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fef8 	bl	80069b8 <RCCEx_PLLSAI1_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d014      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005bd2:	7cfb      	ldrb	r3, [r7, #19]
 8005bd4:	74bb      	strb	r3, [r7, #18]
 8005bd6:	e011      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3320      	adds	r3, #32
 8005be6:	2102      	movs	r1, #2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 ffd7 	bl	8006b9c <RCCEx_PLLSAI2_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bf2:	7cfb      	ldrb	r3, [r7, #19]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005bf8:	7cfb      	ldrb	r3, [r7, #19]
 8005bfa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00b      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c08:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c18:	490d      	ldr	r1, [pc, #52]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00b      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c2c:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3c:	4904      	ldr	r1, [pc, #16]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c44:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40021000 	.word	0x40021000

08005c54 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L496xx) || defined(STM32L4A6xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a77      	ldr	r2, [pc, #476]	; (8005e3c <HAL_RCCEx_GetPeriphCLKConfig+0x1e8>)
 8005c60:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 8005c62:	4b77      	ldr	r3, [pc, #476]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0203 	and.w	r2, r3, #3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8005c6e:	4b74      	ldr	r3, [pc, #464]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	091b      	lsrs	r3, r3, #4
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005c7e:	4b70      	ldr	r3, [pc, #448]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8005c8c:	4b6c      	ldr	r3, [pc, #432]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	0c5b      	lsrs	r3, r3, #17
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	1dda      	adds	r2, r3, #7
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 8005c9e:	4b68      	ldr	r3, [pc, #416]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	0d5b      	lsrs	r3, r3, #21
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	3301      	adds	r3, #1
 8005caa:	005a      	lsls	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8005cb0:	4b63      	ldr	r3, [pc, #396]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	0e5b      	lsrs	r3, r3, #25
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	3301      	adds	r3, #1
 8005cbc:	005a      	lsls	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005cd2:	4b5b      	ldr	r3, [pc, #364]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8005ce0:	4b57      	ldr	r3, [pc, #348]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	0c5b      	lsrs	r3, r3, #17
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	1dda      	adds	r2, r3, #7
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 8005cf2:	4b53      	ldr	r3, [pc, #332]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	0e5b      	lsrs	r3, r3, #25
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	005a      	lsls	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8005d04:	4b4e      	ldr	r3, [pc, #312]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0a:	f003 0203 	and.w	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8005d12:	4b4b      	ldr	r3, [pc, #300]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d18:	f003 020c 	and.w	r2, r3, #12
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8005d20:	4b47      	ldr	r3, [pc, #284]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d26:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 8005d2e:	4b44      	ldr	r3, [pc, #272]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 8005d3c:	4b40      	ldr	r3, [pc, #256]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d42:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8005d4a:	4b3d      	ldr	r3, [pc, #244]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8005d58:	4b39      	ldr	r3, [pc, #228]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5e:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 8005d66:	4b36      	ldr	r3, [pc, #216]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 8005d74:	4b32      	ldr	r3, [pc, #200]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(I2C4)
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
 8005d82:	4b2f      	ldr	r3, [pc, #188]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d88:	f003 0203 	and.w	r2, r3, #3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005d90:	4b2b      	ldr	r3, [pc, #172]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005d9e:	4b28      	ldr	r3, [pc, #160]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da4:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 8005dac:	4b24      	ldr	r3, [pc, #144]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db2:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8005dba:	4b21      	ldr	r3, [pc, #132]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc0:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8005dc8:	4b1d      	ldr	r3, [pc, #116]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dce:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8005dd8:	4b19      	ldr	r3, [pc, #100]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dde:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005de6:	4b16      	ldr	r3, [pc, #88]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dec:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8005df4:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	679a      	str	r2, [r3, #120]	; 0x78

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8005e02:	4b0f      	ldr	r3, [pc, #60]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e08:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e16:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e26:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	001fffff 	.word	0x001fffff
 8005e40:	40021000 	.word	0x40021000

08005e44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e56:	d13e      	bne.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005e58:	4bb8      	ldr	r3, [pc, #736]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e62:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e6a:	d028      	beq.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e72:	f200 858e 	bhi.w	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e7c:	d005      	beq.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e84:	d00e      	beq.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005e86:	f000 bd84 	b.w	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e8a:	4bac      	ldr	r3, [pc, #688]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	f040 857e 	bne.w	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
        frequency = LSE_VALUE;
 8005e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e9e:	61fb      	str	r3, [r7, #28]
      break;
 8005ea0:	f000 bd79 	b.w	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005ea4:	4ba5      	ldr	r3, [pc, #660]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	f040 8573 	bne.w	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          frequency = LSI_VALUE;
 8005eb4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005eb8:	61fb      	str	r3, [r7, #28]
      break;
 8005eba:	f000 bd6e 	b.w	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ebe:	4b9f      	ldr	r3, [pc, #636]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eca:	f040 8568 	bne.w	800699e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
        frequency = HSE_VALUE / 32U;
 8005ece:	4b9c      	ldr	r3, [pc, #624]	; (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005ed0:	61fb      	str	r3, [r7, #28]
      break;
 8005ed2:	f000 bd64 	b.w	800699e <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ed6:	4b99      	ldr	r3, [pc, #612]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d036      	beq.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d840      	bhi.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d003      	beq.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d020      	beq.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005ef8:	e039      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005efa:	4b90      	ldr	r3, [pc, #576]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d116      	bne.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f06:	4b8d      	ldr	r3, [pc, #564]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005f12:	4b8a      	ldr	r3, [pc, #552]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	091b      	lsrs	r3, r3, #4
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	e005      	b.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005f1e:	4b87      	ldr	r3, [pc, #540]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f24:	0a1b      	lsrs	r3, r3, #8
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	4a86      	ldr	r2, [pc, #536]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005f32:	e01f      	b.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61bb      	str	r3, [r7, #24]
      break;
 8005f38:	e01c      	b.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f3a:	4b80      	ldr	r3, [pc, #512]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f46:	d102      	bne.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005f48:	4b7f      	ldr	r3, [pc, #508]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005f4a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005f4c:	e012      	b.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61bb      	str	r3, [r7, #24]
      break;
 8005f52:	e00f      	b.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f54:	4b79      	ldr	r3, [pc, #484]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f60:	d102      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005f62:	4b7a      	ldr	r3, [pc, #488]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005f64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005f66:	e005      	b.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61bb      	str	r3, [r7, #24]
      break;
 8005f6c:	e002      	b.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61bb      	str	r3, [r7, #24]
      break;
 8005f72:	bf00      	nop
    }

    switch(PeriphClk)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f7a:	f000 842b 	beq.w	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f84:	f200 850d 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f8e:	f000 80df 	beq.w	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f98:	f200 8503 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fa2:	f000 80d5 	beq.w	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fac:	f200 84f9 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb6:	f000 8374 	beq.w	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc0:	f200 84ef 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fca:	f000 84c0 	beq.w	800694e <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd4:	f200 84e5 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fde:	f000 82e7 	beq.w	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fe8:	f200 84db 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff2:	f000 80ad 	beq.w	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ffc:	f200 84d1 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006006:	f000 8091 	beq.w	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006010:	f200 84c7 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800601a:	d07f      	beq.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006022:	f200 84be 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602c:	f000 8445 	beq.w	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006036:	f200 84b4 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006040:	f000 83f1 	beq.w	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604a:	f200 84aa 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006054:	f000 8392 	beq.w	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605e:	f200 84a0 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b80      	cmp	r3, #128	; 0x80
 8006066:	f000 835d 	beq.w	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b80      	cmp	r3, #128	; 0x80
 800606e:	f200 8498 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b20      	cmp	r3, #32
 8006076:	d84b      	bhi.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 8491 	beq.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3b01      	subs	r3, #1
 8006084:	2b1f      	cmp	r3, #31
 8006086:	f200 848c 	bhi.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080062a7 	.word	0x080062a7
 8006094:	08006317 	.word	0x08006317
 8006098:	080069a3 	.word	0x080069a3
 800609c:	080063ab 	.word	0x080063ab
 80060a0:	080069a3 	.word	0x080069a3
 80060a4:	080069a3 	.word	0x080069a3
 80060a8:	080069a3 	.word	0x080069a3
 80060ac:	08006435 	.word	0x08006435
 80060b0:	080069a3 	.word	0x080069a3
 80060b4:	080069a3 	.word	0x080069a3
 80060b8:	080069a3 	.word	0x080069a3
 80060bc:	080069a3 	.word	0x080069a3
 80060c0:	080069a3 	.word	0x080069a3
 80060c4:	080069a3 	.word	0x080069a3
 80060c8:	080069a3 	.word	0x080069a3
 80060cc:	080064ad 	.word	0x080064ad
 80060d0:	080069a3 	.word	0x080069a3
 80060d4:	080069a3 	.word	0x080069a3
 80060d8:	080069a3 	.word	0x080069a3
 80060dc:	080069a3 	.word	0x080069a3
 80060e0:	080069a3 	.word	0x080069a3
 80060e4:	080069a3 	.word	0x080069a3
 80060e8:	080069a3 	.word	0x080069a3
 80060ec:	080069a3 	.word	0x080069a3
 80060f0:	080069a3 	.word	0x080069a3
 80060f4:	080069a3 	.word	0x080069a3
 80060f8:	080069a3 	.word	0x080069a3
 80060fc:	080069a3 	.word	0x080069a3
 8006100:	080069a3 	.word	0x080069a3
 8006104:	080069a3 	.word	0x080069a3
 8006108:	080069a3 	.word	0x080069a3
 800610c:	0800652f 	.word	0x0800652f
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	f000 82da 	beq.w	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006118:	f000 bc43 	b.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800611c:	69b9      	ldr	r1, [r7, #24]
 800611e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006122:	f000 fe17 	bl	8006d54 <RCCEx_GetSAIxPeriphCLKFreq>
 8006126:	61f8      	str	r0, [r7, #28]
      break;
 8006128:	f000 bc3c 	b.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800612c:	69b9      	ldr	r1, [r7, #24]
 800612e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006132:	f000 fe0f 	bl	8006d54 <RCCEx_GetSAIxPeriphCLKFreq>
 8006136:	61f8      	str	r0, [r7, #28]
      break;
 8006138:	f000 bc34 	b.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800613c:	40021000 	.word	0x40021000
 8006140:	0003d090 	.word	0x0003d090
 8006144:	0800c618 	.word	0x0800c618
 8006148:	00f42400 	.word	0x00f42400
 800614c:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006150:	4bb2      	ldr	r3, [pc, #712]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006156:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006162:	d015      	beq.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800616a:	f200 8092 	bhi.w	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006174:	d029      	beq.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800617c:	f200 8089 	bhi.w	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d07b      	beq.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800618c:	d04a      	beq.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 800618e:	e080      	b.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006190:	4ba2      	ldr	r3, [pc, #648]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b02      	cmp	r3, #2
 800619a:	d17c      	bne.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800619c:	4b9f      	ldr	r3, [pc, #636]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80061a8:	4b9c      	ldr	r3, [pc, #624]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	091b      	lsrs	r3, r3, #4
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	e005      	b.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80061b4:	4b99      	ldr	r3, [pc, #612]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80061b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ba:	0a1b      	lsrs	r3, r3, #8
 80061bc:	f003 030f 	and.w	r3, r3, #15
 80061c0:	4a97      	ldr	r2, [pc, #604]	; (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80061c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c6:	61fb      	str	r3, [r7, #28]
          break;
 80061c8:	e065      	b.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80061ca:	4b94      	ldr	r3, [pc, #592]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061d6:	d160      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80061d8:	4b90      	ldr	r3, [pc, #576]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e4:	d159      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061e6:	4b8d      	ldr	r3, [pc, #564]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	0a1b      	lsrs	r3, r3, #8
 80061ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	fb02 f203 	mul.w	r2, r2, r3
 80061fa:	4b88      	ldr	r3, [pc, #544]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	091b      	lsrs	r3, r3, #4
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	3301      	adds	r3, #1
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800620c:	4b83      	ldr	r3, [pc, #524]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	0d5b      	lsrs	r3, r3, #21
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	3301      	adds	r3, #1
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006220:	61fb      	str	r3, [r7, #28]
          break;
 8006222:	e03a      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006224:	4b7d      	ldr	r3, [pc, #500]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800622c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006230:	d135      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006232:	4b7a      	ldr	r3, [pc, #488]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800623a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800623e:	d12e      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006240:	4b76      	ldr	r3, [pc, #472]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	0a1b      	lsrs	r3, r3, #8
 8006246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800624a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	fb02 f203 	mul.w	r2, r2, r3
 8006254:	4b71      	ldr	r3, [pc, #452]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	3301      	adds	r3, #1
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006266:	4b6d      	ldr	r3, [pc, #436]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	0d5b      	lsrs	r3, r3, #21
 800626c:	f003 0303 	and.w	r3, r3, #3
 8006270:	3301      	adds	r3, #1
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	fbb2 f3f3 	udiv	r3, r2, r3
 800627a:	61fb      	str	r3, [r7, #28]
          break;
 800627c:	e00f      	b.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800627e:	4b67      	ldr	r3, [pc, #412]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b02      	cmp	r3, #2
 800628a:	d10a      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 800628c:	4b65      	ldr	r3, [pc, #404]	; (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800628e:	61fb      	str	r3, [r7, #28]
          break;
 8006290:	e007      	b.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 8006292:	bf00      	nop
 8006294:	e386      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006296:	bf00      	nop
 8006298:	e384      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800629a:	bf00      	nop
 800629c:	e382      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800629e:	bf00      	nop
 80062a0:	e380      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80062a2:	bf00      	nop
        break;
 80062a4:	e37e      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80062a6:	4b5d      	ldr	r3, [pc, #372]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ac:	f003 0303 	and.w	r3, r3, #3
 80062b0:	613b      	str	r3, [r7, #16]
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d828      	bhi.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 80062b8:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80062ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062be:	bf00      	nop
 80062c0:	080062d1 	.word	0x080062d1
 80062c4:	080062d9 	.word	0x080062d9
 80062c8:	080062e1 	.word	0x080062e1
 80062cc:	080062f5 	.word	0x080062f5
          frequency = HAL_RCC_GetPCLK2Freq();
 80062d0:	f7ff f94e 	bl	8005570 <HAL_RCC_GetPCLK2Freq>
 80062d4:	61f8      	str	r0, [r7, #28]
          break;
 80062d6:	e01d      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 80062d8:	f7ff f89c 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80062dc:	61f8      	str	r0, [r7, #28]
          break;
 80062de:	e019      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062e0:	4b4e      	ldr	r3, [pc, #312]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ec:	d10f      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 80062ee:	4b4e      	ldr	r3, [pc, #312]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 80062f0:	61fb      	str	r3, [r7, #28]
          break;
 80062f2:	e00c      	b.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062f4:	4b49      	ldr	r3, [pc, #292]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80062f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d107      	bne.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8006302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006306:	61fb      	str	r3, [r7, #28]
          break;
 8006308:	e003      	b.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 800630a:	bf00      	nop
 800630c:	e34a      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800630e:	bf00      	nop
 8006310:	e348      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006312:	bf00      	nop
        break;
 8006314:	e346      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006316:	4b41      	ldr	r3, [pc, #260]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631c:	f003 030c 	and.w	r3, r3, #12
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b0c      	cmp	r3, #12
 8006326:	d83a      	bhi.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8006328:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	08006365 	.word	0x08006365
 8006334:	0800639f 	.word	0x0800639f
 8006338:	0800639f 	.word	0x0800639f
 800633c:	0800639f 	.word	0x0800639f
 8006340:	0800636d 	.word	0x0800636d
 8006344:	0800639f 	.word	0x0800639f
 8006348:	0800639f 	.word	0x0800639f
 800634c:	0800639f 	.word	0x0800639f
 8006350:	08006375 	.word	0x08006375
 8006354:	0800639f 	.word	0x0800639f
 8006358:	0800639f 	.word	0x0800639f
 800635c:	0800639f 	.word	0x0800639f
 8006360:	08006389 	.word	0x08006389
          frequency = HAL_RCC_GetPCLK1Freq();
 8006364:	f7ff f8ee 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8006368:	61f8      	str	r0, [r7, #28]
          break;
 800636a:	e01d      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 800636c:	f7ff f852 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 8006370:	61f8      	str	r0, [r7, #28]
          break;
 8006372:	e019      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006374:	4b29      	ldr	r3, [pc, #164]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800637c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006380:	d10f      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8006382:	4b29      	ldr	r3, [pc, #164]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006384:	61fb      	str	r3, [r7, #28]
          break;
 8006386:	e00c      	b.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006388:	4b24      	ldr	r3, [pc, #144]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b02      	cmp	r3, #2
 8006394:	d107      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8006396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800639a:	61fb      	str	r3, [r7, #28]
          break;
 800639c:	e003      	b.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 800639e:	bf00      	nop
 80063a0:	e300      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80063a2:	bf00      	nop
 80063a4:	e2fe      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80063a6:	bf00      	nop
        break;
 80063a8:	e2fc      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80063aa:	4b1c      	ldr	r3, [pc, #112]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b30      	cmp	r3, #48	; 0x30
 80063ba:	d021      	beq.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b30      	cmp	r3, #48	; 0x30
 80063c0:	d829      	bhi.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d011      	beq.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d823      	bhi.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2b10      	cmp	r3, #16
 80063d8:	d004      	beq.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 80063da:	e01c      	b.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063dc:	f7ff f8b2 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 80063e0:	61f8      	str	r0, [r7, #28]
          break;
 80063e2:	e026      	b.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          frequency = HAL_RCC_GetSysClockFreq();
 80063e4:	f7ff f816 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80063e8:	61f8      	str	r0, [r7, #28]
          break;
 80063ea:	e022      	b.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063ec:	4b0b      	ldr	r3, [pc, #44]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f8:	d118      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
            frequency = HSI_VALUE;
 80063fa:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 80063fc:	61fb      	str	r3, [r7, #28]
          break;
 80063fe:	e015      	b.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006400:	4b06      	ldr	r3, [pc, #24]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b02      	cmp	r3, #2
 800640c:	d110      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
            frequency = LSE_VALUE;
 800640e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006412:	61fb      	str	r3, [r7, #28]
          break;
 8006414:	e00c      	b.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          break;
 8006416:	bf00      	nop
 8006418:	e2c4      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800641a:	bf00      	nop
 800641c:	40021000 	.word	0x40021000
 8006420:	0800c618 	.word	0x0800c618
 8006424:	02dc6c00 	.word	0x02dc6c00
 8006428:	00f42400 	.word	0x00f42400
          break;
 800642c:	bf00      	nop
 800642e:	e2b9      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006430:	bf00      	nop
        break;
 8006432:	e2b7      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006434:	4ba3      	ldr	r3, [pc, #652]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2bc0      	cmp	r3, #192	; 0xc0
 8006444:	d021      	beq.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2bc0      	cmp	r3, #192	; 0xc0
 800644a:	d829      	bhi.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b80      	cmp	r3, #128	; 0x80
 8006450:	d011      	beq.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2b80      	cmp	r3, #128	; 0x80
 8006456:	d823      	bhi.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d004      	beq.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
          break;
 8006464:	e01c      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006466:	f7ff f86d 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 800646a:	61f8      	str	r0, [r7, #28]
          break;
 800646c:	e01d      	b.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = HAL_RCC_GetSysClockFreq();
 800646e:	f7fe ffd1 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 8006472:	61f8      	str	r0, [r7, #28]
          break;
 8006474:	e019      	b.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006476:	4b93      	ldr	r3, [pc, #588]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006482:	d10f      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            frequency = HSI_VALUE;
 8006484:	4b90      	ldr	r3, [pc, #576]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8006486:	61fb      	str	r3, [r7, #28]
          break;
 8006488:	e00c      	b.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800648a:	4b8e      	ldr	r3, [pc, #568]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b02      	cmp	r3, #2
 8006496:	d107      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = LSE_VALUE;
 8006498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800649c:	61fb      	str	r3, [r7, #28]
          break;
 800649e:	e003      	b.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80064a0:	bf00      	nop
 80064a2:	e27f      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80064a4:	bf00      	nop
 80064a6:	e27d      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80064a8:	bf00      	nop
        break;
 80064aa:	e27b      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80064ac:	4b85      	ldr	r3, [pc, #532]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064be:	d025      	beq.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064c6:	d82c      	bhi.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ce:	d013      	beq.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d6:	d824      	bhi.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e4:	d004      	beq.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          break;
 80064e6:	e01c      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064e8:	f7ff f82c 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 80064ec:	61f8      	str	r0, [r7, #28]
          break;
 80064ee:	e01d      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80064f0:	f7fe ff90 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80064f4:	61f8      	str	r0, [r7, #28]
          break;
 80064f6:	e019      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064f8:	4b72      	ldr	r3, [pc, #456]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006504:	d10f      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = HSI_VALUE;
 8006506:	4b70      	ldr	r3, [pc, #448]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8006508:	61fb      	str	r3, [r7, #28]
          break;
 800650a:	e00c      	b.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800650c:	4b6d      	ldr	r3, [pc, #436]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800650e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d107      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
            frequency = LSE_VALUE;
 800651a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800651e:	61fb      	str	r3, [r7, #28]
          break;
 8006520:	e003      	b.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8006522:	bf00      	nop
 8006524:	e23e      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006526:	bf00      	nop
 8006528:	e23c      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800652a:	bf00      	nop
        break;
 800652c:	e23a      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800652e:	4b65      	ldr	r3, [pc, #404]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006540:	d025      	beq.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006548:	d82c      	bhi.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006550:	d013      	beq.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x736>
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006558:	d824      	bhi.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d004      	beq.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006566:	d004      	beq.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          break;
 8006568:	e01c      	b.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
          frequency = HAL_RCC_GetPCLK1Freq();
 800656a:	f7fe ffeb 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 800656e:	61f8      	str	r0, [r7, #28]
          break;
 8006570:	e01d      	b.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006572:	f7fe ff4f 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 8006576:	61f8      	str	r0, [r7, #28]
          break;
 8006578:	e019      	b.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800657a:	4b52      	ldr	r3, [pc, #328]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006586:	d10f      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
            frequency = HSI_VALUE;
 8006588:	4b4f      	ldr	r3, [pc, #316]	; (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 800658a:	61fb      	str	r3, [r7, #28]
          break;
 800658c:	e00c      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800658e:	4b4d      	ldr	r3, [pc, #308]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b02      	cmp	r3, #2
 800659a:	d107      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
            frequency = LSE_VALUE;
 800659c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a0:	61fb      	str	r3, [r7, #28]
          break;
 80065a2:	e003      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 80065a4:	bf00      	nop
 80065a6:	e1fd      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80065a8:	bf00      	nop
 80065aa:	e1fb      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80065ac:	bf00      	nop
        break;
 80065ae:	e1f9      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80065b0:	4b44      	ldr	r3, [pc, #272]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80065b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065c2:	d00c      	beq.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065ca:	d864      	bhi.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065d2:	d008      	beq.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065da:	d030      	beq.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
          break;
 80065dc:	e05b      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
          frequency = HAL_RCC_GetSysClockFreq();
 80065de:	f7fe ff19 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80065e2:	61f8      	str	r0, [r7, #28]
          break;
 80065e4:	e05c      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80065e6:	4b37      	ldr	r3, [pc, #220]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065f2:	d152      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80065f4:	4b33      	ldr	r3, [pc, #204]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d04c      	beq.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006600:	4b30      	ldr	r3, [pc, #192]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	0a1b      	lsrs	r3, r3, #8
 8006606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800660a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	fb02 f203 	mul.w	r2, r2, r3
 8006614:	4b2b      	ldr	r3, [pc, #172]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	3301      	adds	r3, #1
 8006620:	fbb2 f3f3 	udiv	r3, r2, r3
 8006624:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006626:	4b27      	ldr	r3, [pc, #156]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	0e5b      	lsrs	r3, r3, #25
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	3301      	adds	r3, #1
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	fbb2 f3f3 	udiv	r3, r2, r3
 800663a:	61fb      	str	r3, [r7, #28]
          break;
 800663c:	e02d      	b.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800663e:	4b21      	ldr	r3, [pc, #132]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800664a:	d128      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 800664c:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d022      	beq.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006658:	4b1a      	ldr	r3, [pc, #104]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	0a1b      	lsrs	r3, r3, #8
 800665e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006662:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	fb02 f203 	mul.w	r2, r2, r3
 800666c:	4b15      	ldr	r3, [pc, #84]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	091b      	lsrs	r3, r3, #4
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	3301      	adds	r3, #1
 8006678:	fbb2 f3f3 	udiv	r3, r2, r3
 800667c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800667e:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	0e5b      	lsrs	r3, r3, #25
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	3301      	adds	r3, #1
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006692:	61fb      	str	r3, [r7, #28]
          break;
 8006694:	e003      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 8006696:	bf00      	nop
 8006698:	e184      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800669a:	bf00      	nop
 800669c:	e182      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800669e:	bf00      	nop
        break;
 80066a0:	e180      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ac:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d103      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x878>
          frequency = HAL_RCC_GetPCLK2Freq();
 80066b4:	f7fe ff5c 	bl	8005570 <HAL_RCC_GetPCLK2Freq>
 80066b8:	61f8      	str	r0, [r7, #28]
        break;
 80066ba:	e173      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetSysClockFreq();
 80066bc:	f7fe feaa 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80066c0:	61f8      	str	r0, [r7, #28]
        break;
 80066c2:	e16f      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80066c4:	40021000 	.word	0x40021000
 80066c8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80066cc:	4ba7      	ldr	r3, [pc, #668]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80066ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066de:	d013      	beq.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e6:	d819      	bhi.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f4:	d004      	beq.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
          break;
 80066f6:	e011      	b.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066f8:	f7fe ff24 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 80066fc:	61f8      	str	r0, [r7, #28]
          break;
 80066fe:	e010      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 8006700:	f7fe fe88 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 8006704:	61f8      	str	r0, [r7, #28]
          break;
 8006706:	e00c      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006708:	4b98      	ldr	r3, [pc, #608]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006714:	d104      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
            frequency = HSI_VALUE;
 8006716:	4b96      	ldr	r3, [pc, #600]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8006718:	61fb      	str	r3, [r7, #28]
          break;
 800671a:	e001      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          break;
 800671c:	bf00      	nop
 800671e:	e141      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006720:	bf00      	nop
        break;
 8006722:	e13f      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006724:	4b91      	ldr	r3, [pc, #580]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800672e:	613b      	str	r3, [r7, #16]
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006736:	d013      	beq.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800673e:	d819      	bhi.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d004      	beq.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800674c:	d004      	beq.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 800674e:	e011      	b.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006750:	f7fe fef8 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8006754:	61f8      	str	r0, [r7, #28]
          break;
 8006756:	e010      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 8006758:	f7fe fe5c 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 800675c:	61f8      	str	r0, [r7, #28]
          break;
 800675e:	e00c      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006760:	4b82      	ldr	r3, [pc, #520]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800676c:	d104      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            frequency = HSI_VALUE;
 800676e:	4b80      	ldr	r3, [pc, #512]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8006770:	61fb      	str	r3, [r7, #28]
          break;
 8006772:	e001      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          break;
 8006774:	bf00      	nop
 8006776:	e115      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006778:	bf00      	nop
        break;
 800677a:	e113      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800677c:	4b7b      	ldr	r3, [pc, #492]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800677e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006782:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800678e:	d013      	beq.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006796:	d819      	bhi.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a4:	d004      	beq.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          break;
 80067a6:	e011      	b.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067a8:	f7fe fecc 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 80067ac:	61f8      	str	r0, [r7, #28]
          break;
 80067ae:	e010      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          frequency = HAL_RCC_GetSysClockFreq();
 80067b0:	f7fe fe30 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80067b4:	61f8      	str	r0, [r7, #28]
          break;
 80067b6:	e00c      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067b8:	4b6c      	ldr	r3, [pc, #432]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c4:	d104      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency = HSI_VALUE;
 80067c6:	4b6a      	ldr	r3, [pc, #424]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 80067c8:	61fb      	str	r3, [r7, #28]
          break;
 80067ca:	e001      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          break;
 80067cc:	bf00      	nop
 80067ce:	e0e9      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80067d0:	bf00      	nop
        break;
 80067d2:	e0e7      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80067d4:	4b65      	ldr	r3, [pc, #404]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80067d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	613b      	str	r3, [r7, #16]
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d011      	beq.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d818      	bhi.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d004      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          break;
 80067f8:	e011      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067fa:	f7fe fea3 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 80067fe:	61f8      	str	r0, [r7, #28]
          break;
 8006800:	e010      	b.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006802:	f7fe fe07 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 8006806:	61f8      	str	r0, [r7, #28]
          break;
 8006808:	e00c      	b.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800680a:	4b58      	ldr	r3, [pc, #352]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006816:	d104      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
            frequency = HSI_VALUE;
 8006818:	4b55      	ldr	r3, [pc, #340]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800681a:	61fb      	str	r3, [r7, #28]
          break;
 800681c:	e001      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          break;
 800681e:	bf00      	nop
 8006820:	e0c0      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006822:	bf00      	nop
        break;
 8006824:	e0be      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006826:	4b51      	ldr	r3, [pc, #324]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006838:	d02c      	beq.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006840:	d833      	bhi.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006848:	d01a      	beq.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006850:	d82b      	bhi.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d004      	beq.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800685e:	d004      	beq.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
          break;
 8006860:	e023      	b.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006862:	f7fe fe6f 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8006866:	61f8      	str	r0, [r7, #28]
          break;
 8006868:	e026      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800686a:	4b40      	ldr	r3, [pc, #256]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800686c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b02      	cmp	r3, #2
 8006876:	d11a      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
              frequency = LSI_VALUE;
 8006878:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800687c:	61fb      	str	r3, [r7, #28]
          break;
 800687e:	e016      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006880:	4b3a      	ldr	r3, [pc, #232]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800688c:	d111      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = HSI_VALUE;
 800688e:	4b38      	ldr	r3, [pc, #224]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8006890:	61fb      	str	r3, [r7, #28]
          break;
 8006892:	e00e      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006894:	4b35      	ldr	r3, [pc, #212]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d109      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
            frequency = LSE_VALUE;
 80068a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068a6:	61fb      	str	r3, [r7, #28]
          break;
 80068a8:	e005      	b.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          break;
 80068aa:	bf00      	nop
 80068ac:	e07a      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80068ae:	bf00      	nop
 80068b0:	e078      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80068b2:	bf00      	nop
 80068b4:	e076      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80068b6:	bf00      	nop
        break;
 80068b8:	e074      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80068ba:	4b2c      	ldr	r3, [pc, #176]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80068bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068cc:	d02c      	beq.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068d4:	d833      	bhi.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068dc:	d01a      	beq.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068e4:	d82b      	bhi.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d004      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068f2:	d004      	beq.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
          break;
 80068f4:	e023      	b.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068f6:	f7fe fe25 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 80068fa:	61f8      	str	r0, [r7, #28]
          break;
 80068fc:	e026      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80068fe:	4b1b      	ldr	r3, [pc, #108]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b02      	cmp	r3, #2
 800690a:	d11a      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
              frequency = LSI_VALUE;
 800690c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006910:	61fb      	str	r3, [r7, #28]
          break;
 8006912:	e016      	b.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006914:	4b15      	ldr	r3, [pc, #84]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800691c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006920:	d111      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
            frequency = HSI_VALUE;
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8006924:	61fb      	str	r3, [r7, #28]
          break;
 8006926:	e00e      	b.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006928:	4b10      	ldr	r3, [pc, #64]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	d109      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
            frequency = LSE_VALUE;
 8006936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693a:	61fb      	str	r3, [r7, #28]
          break;
 800693c:	e005      	b.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
          break;
 800693e:	bf00      	nop
 8006940:	e030      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006942:	bf00      	nop
 8006944:	e02e      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006946:	bf00      	nop
 8006948:	e02c      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800694a:	bf00      	nop
        break;
 800694c:	e02a      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800694e:	4b07      	ldr	r3, [pc, #28]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006954:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d009      	beq.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006966:	d009      	beq.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
          break;
 8006968:	e012      	b.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800696a:	bf00      	nop
 800696c:	40021000 	.word	0x40021000
 8006970:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 8006974:	f7fe fde6 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8006978:	61f8      	str	r0, [r7, #28]
          break;
 800697a:	e009      	b.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800697c:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006988:	d101      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
            frequency = HSI_VALUE;
 800698a:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>)
 800698c:	61fb      	str	r3, [r7, #28]
          break;
 800698e:	bf00      	nop
        break;
 8006990:	e008      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 8006992:	bf00      	nop
 8006994:	e006      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 8006996:	bf00      	nop
 8006998:	e004      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800699a:	bf00      	nop
 800699c:	e002      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800699e:	bf00      	nop
 80069a0:	e000      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 80069a2:	bf00      	nop
    }
  }

  return(frequency);
 80069a4:	69fb      	ldr	r3, [r7, #28]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40021000 	.word	0x40021000
 80069b4:	00f42400 	.word	0x00f42400

080069b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069c6:	4b74      	ldr	r3, [pc, #464]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d018      	beq.n	8006a04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80069d2:	4b71      	ldr	r3, [pc, #452]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0203 	and.w	r2, r3, #3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d10d      	bne.n	80069fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
       ||
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d009      	beq.n	80069fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80069ea:	4b6b      	ldr	r3, [pc, #428]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	091b      	lsrs	r3, r3, #4
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
       ||
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d047      	beq.n	8006a8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	73fb      	strb	r3, [r7, #15]
 8006a02:	e044      	b.n	8006a8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d018      	beq.n	8006a3e <RCCEx_PLLSAI1_Config+0x86>
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d825      	bhi.n	8006a5c <RCCEx_PLLSAI1_Config+0xa4>
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d002      	beq.n	8006a1a <RCCEx_PLLSAI1_Config+0x62>
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d009      	beq.n	8006a2c <RCCEx_PLLSAI1_Config+0x74>
 8006a18:	e020      	b.n	8006a5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a1a:	4b5f      	ldr	r3, [pc, #380]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d11d      	bne.n	8006a62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a2a:	e01a      	b.n	8006a62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a2c:	4b5a      	ldr	r3, [pc, #360]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d116      	bne.n	8006a66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a3c:	e013      	b.n	8006a66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a3e:	4b56      	ldr	r3, [pc, #344]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10f      	bne.n	8006a6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a4a:	4b53      	ldr	r3, [pc, #332]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a5a:	e006      	b.n	8006a6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a60:	e004      	b.n	8006a6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a62:	bf00      	nop
 8006a64:	e002      	b.n	8006a6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a66:	bf00      	nop
 8006a68:	e000      	b.n	8006a6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10d      	bne.n	8006a8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a72:	4b49      	ldr	r3, [pc, #292]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6819      	ldr	r1, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	430b      	orrs	r3, r1
 8006a88:	4943      	ldr	r1, [pc, #268]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d17c      	bne.n	8006b8e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a94:	4b40      	ldr	r3, [pc, #256]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a3f      	ldr	r2, [pc, #252]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aa0:	f7fc f8f4 	bl	8002c8c <HAL_GetTick>
 8006aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006aa6:	e009      	b.n	8006abc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aa8:	f7fc f8f0 	bl	8002c8c <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d902      	bls.n	8006abc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8006aba:	e005      	b.n	8006ac8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006abc:	4b36      	ldr	r3, [pc, #216]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1ef      	bne.n	8006aa8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d15f      	bne.n	8006b8e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d110      	bne.n	8006af6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ad4:	4b30      	ldr	r3, [pc, #192]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006adc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6892      	ldr	r2, [r2, #8]
 8006ae4:	0211      	lsls	r1, r2, #8
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	68d2      	ldr	r2, [r2, #12]
 8006aea:	06d2      	lsls	r2, r2, #27
 8006aec:	430a      	orrs	r2, r1
 8006aee:	492a      	ldr	r1, [pc, #168]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	610b      	str	r3, [r1, #16]
 8006af4:	e027      	b.n	8006b46 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d112      	bne.n	8006b22 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006afc:	4b26      	ldr	r3, [pc, #152]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6892      	ldr	r2, [r2, #8]
 8006b0c:	0211      	lsls	r1, r2, #8
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6912      	ldr	r2, [r2, #16]
 8006b12:	0852      	lsrs	r2, r2, #1
 8006b14:	3a01      	subs	r2, #1
 8006b16:	0552      	lsls	r2, r2, #21
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	491f      	ldr	r1, [pc, #124]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	610b      	str	r3, [r1, #16]
 8006b20:	e011      	b.n	8006b46 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b22:	4b1d      	ldr	r3, [pc, #116]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6892      	ldr	r2, [r2, #8]
 8006b32:	0211      	lsls	r1, r2, #8
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6952      	ldr	r2, [r2, #20]
 8006b38:	0852      	lsrs	r2, r2, #1
 8006b3a:	3a01      	subs	r2, #1
 8006b3c:	0652      	lsls	r2, r2, #25
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	4915      	ldr	r1, [pc, #84]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b46:	4b14      	ldr	r3, [pc, #80]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a13      	ldr	r2, [pc, #76]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b52:	f7fc f89b 	bl	8002c8c <HAL_GetTick>
 8006b56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b58:	e009      	b.n	8006b6e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b5a:	f7fc f897 	bl	8002c8c <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d902      	bls.n	8006b6e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	73fb      	strb	r3, [r7, #15]
          break;
 8006b6c:	e005      	b.n	8006b7a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b6e:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0ef      	beq.n	8006b5a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006b80:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	4903      	ldr	r1, [pc, #12]	; (8006b98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40021000 	.word	0x40021000

08006b9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006baa:	4b69      	ldr	r3, [pc, #420]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d018      	beq.n	8006be8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006bb6:	4b66      	ldr	r3, [pc, #408]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f003 0203 	and.w	r2, r3, #3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d10d      	bne.n	8006be2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d009      	beq.n	8006be2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006bce:	4b60      	ldr	r3, [pc, #384]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	091b      	lsrs	r3, r3, #4
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d047      	beq.n	8006c72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	73fb      	strb	r3, [r7, #15]
 8006be6:	e044      	b.n	8006c72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d018      	beq.n	8006c22 <RCCEx_PLLSAI2_Config+0x86>
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d825      	bhi.n	8006c40 <RCCEx_PLLSAI2_Config+0xa4>
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d002      	beq.n	8006bfe <RCCEx_PLLSAI2_Config+0x62>
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d009      	beq.n	8006c10 <RCCEx_PLLSAI2_Config+0x74>
 8006bfc:	e020      	b.n	8006c40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bfe:	4b54      	ldr	r3, [pc, #336]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d11d      	bne.n	8006c46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c0e:	e01a      	b.n	8006c46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c10:	4b4f      	ldr	r3, [pc, #316]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d116      	bne.n	8006c4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c20:	e013      	b.n	8006c4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c22:	4b4b      	ldr	r3, [pc, #300]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10f      	bne.n	8006c4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c2e:	4b48      	ldr	r3, [pc, #288]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d109      	bne.n	8006c4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c3e:	e006      	b.n	8006c4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	73fb      	strb	r3, [r7, #15]
      break;
 8006c44:	e004      	b.n	8006c50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c46:	bf00      	nop
 8006c48:	e002      	b.n	8006c50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c4a:	bf00      	nop
 8006c4c:	e000      	b.n	8006c50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10d      	bne.n	8006c72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c56:	4b3e      	ldr	r3, [pc, #248]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6819      	ldr	r1, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	430b      	orrs	r3, r1
 8006c6c:	4938      	ldr	r1, [pc, #224]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d166      	bne.n	8006d46 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006c78:	4b35      	ldr	r3, [pc, #212]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a34      	ldr	r2, [pc, #208]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c84:	f7fc f802 	bl	8002c8c <HAL_GetTick>
 8006c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c8a:	e009      	b.n	8006ca0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c8c:	f7fb fffe 	bl	8002c8c <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d902      	bls.n	8006ca0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c9e:	e005      	b.n	8006cac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ca0:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1ef      	bne.n	8006c8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d149      	bne.n	8006d46 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d110      	bne.n	8006cda <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006cb8:	4b25      	ldr	r3, [pc, #148]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006cc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6892      	ldr	r2, [r2, #8]
 8006cc8:	0211      	lsls	r1, r2, #8
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	68d2      	ldr	r2, [r2, #12]
 8006cce:	06d2      	lsls	r2, r2, #27
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	491f      	ldr	r1, [pc, #124]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	614b      	str	r3, [r1, #20]
 8006cd8:	e011      	b.n	8006cfe <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006cda:	4b1d      	ldr	r3, [pc, #116]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006ce2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6892      	ldr	r2, [r2, #8]
 8006cea:	0211      	lsls	r1, r2, #8
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6912      	ldr	r2, [r2, #16]
 8006cf0:	0852      	lsrs	r2, r2, #1
 8006cf2:	3a01      	subs	r2, #1
 8006cf4:	0652      	lsls	r2, r2, #25
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	4915      	ldr	r1, [pc, #84]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006cfe:	4b14      	ldr	r3, [pc, #80]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a13      	ldr	r2, [pc, #76]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d0a:	f7fb ffbf 	bl	8002c8c <HAL_GetTick>
 8006d0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d10:	e009      	b.n	8006d26 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d12:	f7fb ffbb 	bl	8002c8c <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d902      	bls.n	8006d26 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	73fb      	strb	r3, [r7, #15]
          break;
 8006d24:	e005      	b.n	8006d32 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d26:	4b0a      	ldr	r3, [pc, #40]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0ef      	beq.n	8006d12 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d106      	bne.n	8006d46 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006d38:	4b05      	ldr	r3, [pc, #20]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d3a:	695a      	ldr	r2, [r3, #20]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	4903      	ldr	r1, [pc, #12]	; (8006d50 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	40021000 	.word	0x40021000

08006d54 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b089      	sub	sp, #36	; 0x24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d70:	d10c      	bne.n	8006d8c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006d72:	4b77      	ldr	r3, [pc, #476]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d78:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006d7c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d84:	d112      	bne.n	8006dac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d86:	4b73      	ldr	r3, [pc, #460]	; (8006f54 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	e00f      	b.n	8006dac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d92:	d10b      	bne.n	8006dac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006d94:	4b6e      	ldr	r3, [pc, #440]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006d9e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006da6:	d101      	bne.n	8006dac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006da8:	4b6a      	ldr	r3, [pc, #424]	; (8006f54 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8006daa:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 80c6 	bne.w	8006f40 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dbe:	d003      	beq.n	8006dc8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dc6:	d13b      	bne.n	8006e40 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006dc8:	4b61      	ldr	r3, [pc, #388]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dd4:	f040 80b3 	bne.w	8006f3e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8006dd8:	4b5d      	ldr	r3, [pc, #372]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80ac 	beq.w	8006f3e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006de6:	4b5a      	ldr	r3, [pc, #360]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	091b      	lsrs	r3, r3, #4
 8006dec:	f003 0307 	and.w	r3, r3, #7
 8006df0:	3301      	adds	r3, #1
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006dfa:	4b55      	ldr	r3, [pc, #340]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e04:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006e06:	4b52      	ldr	r3, [pc, #328]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	0edb      	lsrs	r3, r3, #27
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10a      	bne.n	8006e2e <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006e18:	4b4d      	ldr	r3, [pc, #308]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8006e24:	2311      	movs	r3, #17
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	e001      	b.n	8006e2e <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8006e2a:	2307      	movs	r3, #7
 8006e2c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	fb02 f203 	mul.w	r2, r2, r3
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006e3e:	e07e      	b.n	8006f3e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d139      	bne.n	8006eba <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006e46:	4b42      	ldr	r3, [pc, #264]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e52:	d175      	bne.n	8006f40 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8006e54:	4b3e      	ldr	r3, [pc, #248]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d06f      	beq.n	8006f40 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006e60:	4b3b      	ldr	r3, [pc, #236]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	091b      	lsrs	r3, r3, #4
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e72:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006e74:	4b36      	ldr	r3, [pc, #216]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	0a1b      	lsrs	r3, r3, #8
 8006e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006e80:	4b33      	ldr	r3, [pc, #204]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	0edb      	lsrs	r3, r3, #27
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006e92:	4b2f      	ldr	r3, [pc, #188]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8006e9e:	2311      	movs	r3, #17
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	e001      	b.n	8006ea8 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8006ea4:	2307      	movs	r3, #7
 8006ea6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	fb02 f203 	mul.w	r2, r2, r3
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb6:	61fb      	str	r3, [r7, #28]
 8006eb8:	e042      	b.n	8006f40 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ec0:	d003      	beq.n	8006eca <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ec8:	d13a      	bne.n	8006f40 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006eca:	4b21      	ldr	r3, [pc, #132]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ed6:	d133      	bne.n	8006f40 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8006ed8:	4b1d      	ldr	r3, [pc, #116]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d02d      	beq.n	8006f40 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006ee4:	4b1a      	ldr	r3, [pc, #104]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	091b      	lsrs	r3, r3, #4
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	3301      	adds	r3, #1
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006ef8:	4b15      	ldr	r3, [pc, #84]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	0a1b      	lsrs	r3, r3, #8
 8006efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f02:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006f04:	4b12      	ldr	r3, [pc, #72]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	0edb      	lsrs	r3, r3, #27
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006f16:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8006f22:	2311      	movs	r3, #17
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	e001      	b.n	8006f2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8006f28:	2307      	movs	r3, #7
 8006f2a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	fb02 f203 	mul.w	r2, r2, r3
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3a:	61fb      	str	r3, [r7, #28]
 8006f3c:	e000      	b.n	8006f40 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f3e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006f40:	69fb      	ldr	r3, [r7, #28]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3724      	adds	r7, #36	; 0x24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40021000 	.word	0x40021000
 8006f54:	001fff68 	.word	0x001fff68

08006f58 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e022      	b.n	8006fb0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d105      	bne.n	8006f82 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7f9 fd41 	bl	8000a04 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2203      	movs	r2, #3
 8006f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f814 	bl	8006fb8 <HAL_SD_InitCard>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e00a      	b.n	8006fb0 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006fb8:	b5b0      	push	{r4, r5, r7, lr}
 8006fba:	b08e      	sub	sp, #56	; 0x38
 8006fbc:	af04      	add	r7, sp, #16
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006fd4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006fd8:	f7fe ff34 	bl	8005e44 <HAL_RCCEx_GetPeriphCLKFreq>
 8006fdc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d109      	bne.n	8006ff8 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ff2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e07b      	b.n	80070f0 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	09db      	lsrs	r3, r3, #7
 8006ffc:	4a3e      	ldr	r2, [pc, #248]	; (80070f8 <HAL_SD_InitCard+0x140>)
 8006ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8007002:	091b      	lsrs	r3, r3, #4
 8007004:	3b02      	subs	r3, #2
 8007006:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681d      	ldr	r5, [r3, #0]
 800700c:	466c      	mov	r4, sp
 800700e:	f107 0314 	add.w	r3, r7, #20
 8007012:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007016:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800701a:	f107 0308 	add.w	r3, r7, #8
 800701e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007020:	4628      	mov	r0, r5
 8007022:	f001 fc1f 	bl	8008864 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007034:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f001 fc5d 	bl	80088fa <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800704e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	3302      	adds	r3, #2
 8007054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007056:	fbb2 f3f3 	udiv	r3, r2, r3
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800705c:	4a27      	ldr	r2, [pc, #156]	; (80070fc <HAL_SD_InitCard+0x144>)
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	fbb2 f3f3 	udiv	r3, r2, r3
 8007064:	3301      	adds	r3, #1
 8007066:	4618      	mov	r0, r3
 8007068:	f7fb fe1c 	bl	8002ca4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 ffdd 	bl	800802c <SD_PowerON>
 8007072:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e02e      	b.n	80070f0 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fefe 	bl	8007e94 <SD_InitCard>
 8007098:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	431a      	orrs	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e01b      	b.n	80070f0 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070c0:	4618      	mov	r0, r3
 80070c2:	f001 fcad 	bl	8008a20 <SDMMC_CmdBlockLength>
 80070c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00f      	beq.n	80070ee <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a0b      	ldr	r2, [pc, #44]	; (8007100 <HAL_SD_InitCard+0x148>)
 80070d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3728      	adds	r7, #40	; 0x28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bdb0      	pop	{r4, r5, r7, pc}
 80070f8:	014f8b59 	.word	0x014f8b59
 80070fc:	00012110 	.word	0x00012110
 8007100:	004005ff 	.word	0x004005ff

08007104 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08c      	sub	sp, #48	; 0x30
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007120:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e0a9      	b.n	8007280 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	f040 80a2 	bne.w	800727e <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	441a      	add	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714a:	429a      	cmp	r2, r3
 800714c:	d907      	bls.n	800715e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e090      	b.n	8007280 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2203      	movs	r2, #3
 8007162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2200      	movs	r2, #0
 800716c:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	4a45      	ldr	r2, [pc, #276]	; (8007288 <HAL_SD_ReadBlocks_DMA+0x184>)
 8007174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	4a44      	ldr	r2, [pc, #272]	; (800728c <HAL_SD_ReadBlocks_DMA+0x188>)
 800717c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	2200      	movs	r2, #0
 8007184:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3380      	adds	r3, #128	; 0x80
 8007190:	4619      	mov	r1, r3
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	025b      	lsls	r3, r3, #9
 8007198:	089b      	lsrs	r3, r3, #2
 800719a:	f7fc f835 	bl	8003208 <HAL_DMA_Start_IT>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00f      	beq.n	80071c4 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a39      	ldr	r2, [pc, #228]	; (8007290 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e05d      	b.n	8007280 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0208 	orr.w	r2, r2, #8
 80071d2:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d002      	beq.n	80071e2 <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	025b      	lsls	r3, r3, #9
 80071e0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071e6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	025b      	lsls	r3, r3, #9
 80071ec:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80071ee:	2390      	movs	r3, #144	; 0x90
 80071f0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80071f2:	2302      	movs	r3, #2
 80071f4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80071fa:	2301      	movs	r3, #1
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f107 0210 	add.w	r2, r7, #16
 8007206:	4611      	mov	r1, r2
 8007208:	4618      	mov	r0, r3
 800720a:	f001 fbdd 	bl	80089c8 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d90a      	bls.n	800722a <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2282      	movs	r2, #130	; 0x82
 8007218:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007220:	4618      	mov	r0, r3
 8007222:	f001 fc41 	bl	8008aa8 <SDMMC_CmdReadMultiBlock>
 8007226:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007228:	e009      	b.n	800723e <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2281      	movs	r2, #129	; 0x81
 800722e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007236:	4618      	mov	r0, r3
 8007238:	f001 fc14 	bl	8008a64 <SDMMC_CmdReadSingleBlock>
 800723c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d012      	beq.n	800726a <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a11      	ldr	r2, [pc, #68]	; (8007290 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800724a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	431a      	orrs	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e00a      	b.n	8007280 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007278:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	e000      	b.n	8007280 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800727e:	2302      	movs	r3, #2
  }
}
 8007280:	4618      	mov	r0, r3
 8007282:	3730      	adds	r7, #48	; 0x30
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	08007caf 	.word	0x08007caf
 800728c:	08007d21 	.word	0x08007d21
 8007290:	004005ff 	.word	0x004005ff

08007294 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b08c      	sub	sp, #48	; 0x30
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d107      	bne.n	80072bc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e0ac      	b.n	8007416 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	f040 80a5 	bne.w	8007414 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80072d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072da:	429a      	cmp	r2, r3
 80072dc:	d907      	bls.n	80072ee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e093      	b.n	8007416 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2203      	movs	r2, #3
 80072f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	4a47      	ldr	r2, [pc, #284]	; (8007420 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8007304:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730a:	4a46      	ldr	r2, [pc, #280]	; (8007424 <HAL_SD_WriteBlocks_DMA+0x190>)
 800730c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	2200      	movs	r2, #0
 8007314:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	2b01      	cmp	r3, #1
 800731c:	d002      	beq.n	8007324 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	025b      	lsls	r3, r3, #9
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d90a      	bls.n	8007340 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	22a0      	movs	r2, #160	; 0xa0
 800732e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007336:	4618      	mov	r0, r3
 8007338:	f001 fbfa 	bl	8008b30 <SDMMC_CmdWriteMultiBlock>
 800733c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800733e:	e009      	b.n	8007354 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2290      	movs	r2, #144	; 0x90
 8007344:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800734c:	4618      	mov	r0, r3
 800734e:	f001 fbcd 	bl	8008aec <SDMMC_CmdWriteSingleBlock>
 8007352:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d012      	beq.n	8007380 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a32      	ldr	r2, [pc, #200]	; (8007428 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007360:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	431a      	orrs	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e04a      	b.n	8007416 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0208 	orr.w	r2, r2, #8
 800738e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3380      	adds	r3, #128	; 0x80
 800739c:	461a      	mov	r2, r3
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	025b      	lsls	r3, r3, #9
 80073a2:	089b      	lsrs	r3, r3, #2
 80073a4:	f7fb ff30 	bl	8003208 <HAL_DMA_Start_IT>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d012      	beq.n	80073d4 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <HAL_SD_WriteBlocks_DMA+0x194>)
 80073b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e020      	b.n	8007416 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073d8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	025b      	lsls	r3, r3, #9
 80073de:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80073e0:	2390      	movs	r3, #144	; 0x90
 80073e2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80073ec:	2301      	movs	r3, #1
 80073ee:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f107 0210 	add.w	r2, r7, #16
 80073f8:	4611      	mov	r1, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 fae4 	bl	80089c8 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 021a 	orr.w	r2, r2, #26
 800740e:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	e000      	b.n	8007416 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007414:	2302      	movs	r3, #2
  }
}
 8007416:	4618      	mov	r0, r3
 8007418:	3730      	adds	r7, #48	; 0x30
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	08007c85 	.word	0x08007c85
 8007424:	08007d21 	.word	0x08007d21
 8007428:	004005ff 	.word	0x004005ff

0800742c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007438:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d008      	beq.n	800745a <HAL_SD_IRQHandler+0x2e>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f003 0308 	and.w	r3, r3, #8
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 f800 	bl	8008458 <SD_Read_IT>
 8007458:	e155      	b.n	8007706 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 808f 	beq.w	8007588 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007472:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6812      	ldr	r2, [r2, #0]
 800747e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007482:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007486:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0201 	bic.w	r2, r2, #1
 8007496:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d039      	beq.n	8007516 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d104      	bne.n	80074b6 <HAL_SD_IRQHandler+0x8a>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d011      	beq.n	80074da <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 fb5a 	bl	8008b74 <SDMMC_CmdStopTransfer>
 80074c0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d008      	beq.n	80074da <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f91f 	bl	8007718 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f240 523a 	movw	r2, #1338	; 0x53a
 80074e2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <HAL_SD_IRQHandler+0xda>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fb fab7 	bl	8002a7a <HAL_SD_RxCpltCallback>
 800750c:	e0fb      	b.n	8007706 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fb faa9 	bl	8002a66 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007514:	e0f7      	b.n	8007706 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 80f2 	beq.w	8007706 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f003 0320 	and.w	r3, r3, #32
 8007528:	2b00      	cmp	r3, #0
 800752a:	d011      	beq.n	8007550 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4618      	mov	r0, r3
 8007532:	f001 fb1f 	bl	8008b74 <SDMMC_CmdStopTransfer>
 8007536:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d008      	beq.n	8007550 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f8e4 	bl	8007718 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	f040 80d5 	bne.w	8007706 <HAL_SD_IRQHandler+0x2da>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	f040 80cf 	bne.w	8007706 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0208 	bic.w	r2, r2, #8
 8007576:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7fb fa70 	bl	8002a66 <HAL_SD_TxCpltCallback>
}
 8007586:	e0be      	b.n	8007706 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d008      	beq.n	80075a8 <HAL_SD_IRQHandler+0x17c>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 ffaa 	bl	80084fa <SD_Write_IT>
 80075a6:	e0ae      	b.n	8007706 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ae:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 80a7 	beq.w	8007706 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	f043 0202 	orr.w	r2, r3, #2
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d8:	f003 0308 	and.w	r3, r3, #8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	f043 0208 	orr.w	r2, r3, #8
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	f043 0220 	orr.w	r2, r3, #32
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760c:	f003 0310 	and.w	r3, r3, #16
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007618:	f043 0210 	orr.w	r2, r3, #16
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f240 523a 	movw	r2, #1338	; 0x53a
 8007628:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007638:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f001 fa98 	bl	8008b74 <SDMMC_CmdStopTransfer>
 8007644:	4602      	mov	r2, r0
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 0308 	and.w	r3, r3, #8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f855 	bl	8007718 <HAL_SD_ErrorCallback>
}
 800766e:	e04a      	b.n	8007706 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007676:	2b00      	cmp	r3, #0
 8007678:	d045      	beq.n	8007706 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <HAL_SD_IRQHandler+0x262>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	d011      	beq.n	80076b2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007692:	4a1f      	ldr	r2, [pc, #124]	; (8007710 <HAL_SD_IRQHandler+0x2e4>)
 8007694:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769a:	4618      	mov	r0, r3
 800769c:	f7fb fe52 	bl	8003344 <HAL_DMA_Abort_IT>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d02f      	beq.n	8007706 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fb84 	bl	8007db8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80076b0:	e029      	b.n	8007706 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d104      	bne.n	80076c6 <HAL_SD_IRQHandler+0x29a>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d011      	beq.n	80076ea <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	4a12      	ldr	r2, [pc, #72]	; (8007714 <HAL_SD_IRQHandler+0x2e8>)
 80076cc:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fb fe36 	bl	8003344 <HAL_DMA_Abort_IT>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d013      	beq.n	8007706 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fb9f 	bl	8007e26 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80076e8:	e00d      	b.n	8007706 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7fb f9a7 	bl	8002a52 <HAL_SD_AbortCallback>
}
 8007704:	e7ff      	b.n	8007706 <HAL_SD_IRQHandler+0x2da>
 8007706:	bf00      	nop
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	08007db9 	.word	0x08007db9
 8007714:	08007e27 	.word	0x08007e27

08007718 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800773a:	0f9b      	lsrs	r3, r3, #30
 800773c:	b2da      	uxtb	r2, r3
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007746:	0e9b      	lsrs	r3, r3, #26
 8007748:	b2db      	uxtb	r3, r3
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	b2da      	uxtb	r2, r3
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007758:	0e1b      	lsrs	r3, r3, #24
 800775a:	b2db      	uxtb	r3, r3
 800775c:	f003 0303 	and.w	r3, r3, #3
 8007760:	b2da      	uxtb	r2, r3
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800776a:	0c1b      	lsrs	r3, r3, #16
 800776c:	b2da      	uxtb	r2, r3
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007776:	0a1b      	lsrs	r3, r3, #8
 8007778:	b2da      	uxtb	r2, r3
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007782:	b2da      	uxtb	r2, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800778c:	0d1b      	lsrs	r3, r3, #20
 800778e:	b29a      	uxth	r2, r3
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007798:	0c1b      	lsrs	r3, r3, #16
 800779a:	b2db      	uxtb	r3, r3
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077aa:	0bdb      	lsrs	r3, r3, #15
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077bc:	0b9b      	lsrs	r3, r3, #14
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077ce:	0b5b      	lsrs	r3, r3, #13
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077e0:	0b1b      	lsrs	r3, r3, #12
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2200      	movs	r2, #0
 80077f2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d163      	bne.n	80078c4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007800:	009a      	lsls	r2, r3, #2
 8007802:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007806:	4013      	ands	r3, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800780c:	0f92      	lsrs	r2, r2, #30
 800780e:	431a      	orrs	r2, r3
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007818:	0edb      	lsrs	r3, r3, #27
 800781a:	b2db      	uxtb	r3, r3
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	b2da      	uxtb	r2, r3
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782a:	0e1b      	lsrs	r3, r3, #24
 800782c:	b2db      	uxtb	r3, r3
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	b2da      	uxtb	r2, r3
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783c:	0d5b      	lsrs	r3, r3, #21
 800783e:	b2db      	uxtb	r3, r3
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	b2da      	uxtb	r2, r3
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800784e:	0c9b      	lsrs	r3, r3, #18
 8007850:	b2db      	uxtb	r3, r3
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	b2da      	uxtb	r2, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007860:	0bdb      	lsrs	r3, r3, #15
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	b2da      	uxtb	r2, r3
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	7e1b      	ldrb	r3, [r3, #24]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	3302      	adds	r3, #2
 8007884:	2201      	movs	r2, #1
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800788e:	fb02 f203 	mul.w	r2, r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	7a1b      	ldrb	r3, [r3, #8]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 030f 	and.w	r3, r3, #15
 80078a0:	2201      	movs	r2, #1
 80078a2:	409a      	lsls	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80078b0:	0a52      	lsrs	r2, r2, #9
 80078b2:	fb02 f203 	mul.w	r2, r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c0:	661a      	str	r2, [r3, #96]	; 0x60
 80078c2:	e031      	b.n	8007928 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d11d      	bne.n	8007908 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d0:	041b      	lsls	r3, r3, #16
 80078d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078da:	0c1b      	lsrs	r3, r3, #16
 80078dc:	431a      	orrs	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	3301      	adds	r3, #1
 80078e8:	029a      	lsls	r2, r3, #10
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	661a      	str	r2, [r3, #96]	; 0x60
 8007906:	e00f      	b.n	8007928 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a58      	ldr	r2, [pc, #352]	; (8007a70 <HAL_SD_GetCardCSD+0x344>)
 800790e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007914:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e09d      	b.n	8007a64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792c:	0b9b      	lsrs	r3, r3, #14
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	b2da      	uxtb	r2, r3
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800793e:	09db      	lsrs	r3, r3, #7
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007946:	b2da      	uxtb	r2, r3
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007950:	b2db      	uxtb	r3, r3
 8007952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007956:	b2da      	uxtb	r2, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007960:	0fdb      	lsrs	r3, r3, #31
 8007962:	b2da      	uxtb	r2, r3
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	0f5b      	lsrs	r3, r3, #29
 800796e:	b2db      	uxtb	r3, r3
 8007970:	f003 0303 	and.w	r3, r3, #3
 8007974:	b2da      	uxtb	r2, r3
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797e:	0e9b      	lsrs	r3, r3, #26
 8007980:	b2db      	uxtb	r3, r3
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	b2da      	uxtb	r2, r3
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007990:	0d9b      	lsrs	r3, r3, #22
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	b2da      	uxtb	r2, r3
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a2:	0d5b      	lsrs	r3, r3, #21
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	0c1b      	lsrs	r3, r3, #16
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d2:	0bdb      	lsrs	r3, r3, #15
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e6:	0b9b      	lsrs	r3, r3, #14
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fa:	0b5b      	lsrs	r3, r3, #13
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0e:	0b1b      	lsrs	r3, r3, #12
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a22:	0a9b      	lsrs	r3, r3, #10
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a36:	0a1b      	lsrs	r3, r3, #8
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	004005ff 	.word	0x004005ff

08007a74 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007acc:	b5b0      	push	{r4, r5, r7, lr}
 8007ace:	b090      	sub	sp, #64	; 0x40
 8007ad0:	af04      	add	r7, sp, #16
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2203      	movs	r2, #3
 8007ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d02e      	beq.n	8007b4a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af2:	d106      	bne.n	8007b02 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38
 8007b00:	e029      	b.n	8007b56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b08:	d10a      	bne.n	8007b20 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fb44 	bl	8008198 <SD_WideBus_Enable>
 8007b10:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	639a      	str	r2, [r3, #56]	; 0x38
 8007b1e:	e01a      	b.n	8007b56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10a      	bne.n	8007b3c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fb81 	bl	800822e <SD_WideBus_Disable>
 8007b2c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	431a      	orrs	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	639a      	str	r2, [r3, #56]	; 0x38
 8007b3a:	e00c      	b.n	8007b56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	639a      	str	r2, [r3, #56]	; 0x38
 8007b48:	e005      	b.n	8007b56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a35      	ldr	r2, [pc, #212]	; (8007c38 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8007b64:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b6c:	e042      	b.n	8007bf4 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007b6e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007b72:	f7fe f967 	bl	8005e44 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b76:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d031      	beq.n	8007be2 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	3302      	adds	r3, #2
 8007ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba6:	4a25      	ldr	r2, [pc, #148]	; (8007c3c <HAL_SD_ConfigWideBusOperation+0x170>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d907      	bls.n	8007bbc <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	4a24      	ldr	r2, [pc, #144]	; (8007c40 <HAL_SD_ConfigWideBusOperation+0x174>)
 8007bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb4:	0ddb      	lsrs	r3, r3, #23
 8007bb6:	3b02      	subs	r3, #2
 8007bb8:	623b      	str	r3, [r7, #32]
 8007bba:	e002      	b.n	8007bc2 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681d      	ldr	r5, [r3, #0]
 8007bc6:	466c      	mov	r4, sp
 8007bc8:	f107 0318 	add.w	r3, r7, #24
 8007bcc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007bd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007bd4:	f107 030c 	add.w	r3, r7, #12
 8007bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f000 fe42 	bl	8008864 <SDMMC_Init>
 8007be0:	e008      	b.n	8007bf4 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 ff0f 	bl	8008a20 <SDMMC_CmdBlockLength>
 8007c02:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00c      	beq.n	8007c24 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a0a      	ldr	r2, [pc, #40]	; (8007c38 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8007c10:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3730      	adds	r7, #48	; 0x30
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bdb0      	pop	{r4, r5, r7, pc}
 8007c38:	004005ff 	.word	0x004005ff
 8007c3c:	017d7840 	.word	0x017d7840
 8007c40:	55e63b89 	.word	0x55e63b89

08007c44 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007c50:	f107 030c 	add.w	r3, r7, #12
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fa76 	bl	8008148 <SD_SendStatus>
 8007c5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	0a5b      	lsrs	r3, r3, #9
 8007c74:	f003 030f 	and.w	r3, r3, #15
 8007c78:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007c7a:	693b      	ldr	r3, [r7, #16]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ca0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007ca2:	bf00      	nop
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc0:	2b82      	cmp	r3, #130	; 0x82
 8007cc2:	d111      	bne.n	8007ce8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 ff53 	bl	8008b74 <SDMMC_CmdStopTransfer>
 8007cce:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d008      	beq.n	8007ce8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7ff fd18 	bl	8007718 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0208 	bic.w	r2, r2, #8
 8007cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d00:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7fa feb2 	bl	8002a7a <HAL_SD_RxCpltCallback>
#endif
}
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3c:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d002      	beq.n	8007d4a <SD_DMAError+0x2a>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d12d      	bne.n	8007da6 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a19      	ldr	r2, [pc, #100]	; (8007db4 <SD_DMAError+0x94>)
 8007d50:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007d60:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8007d6e:	6978      	ldr	r0, [r7, #20]
 8007d70:	f7ff ff68 	bl	8007c44 <HAL_SD_GetCardState>
 8007d74:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b06      	cmp	r3, #6
 8007d7a:	d002      	beq.n	8007d82 <SD_DMAError+0x62>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b05      	cmp	r3, #5
 8007d80:	d10a      	bne.n	8007d98 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fef4 	bl	8008b74 <SDMMC_CmdStopTransfer>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d92:	431a      	orrs	r2, r3
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	2200      	movs	r2, #0
 8007da4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8007da6:	6978      	ldr	r0, [r7, #20]
 8007da8:	f7ff fcb6 	bl	8007718 <HAL_SD_ErrorCallback>
#endif
}
 8007dac:	bf00      	nop
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	004005ff 	.word	0x004005ff

08007db8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f240 523a 	movw	r2, #1338	; 0x53a
 8007dce:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7ff ff37 	bl	8007c44 <HAL_SD_GetCardState>
 8007dd6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b06      	cmp	r3, #6
 8007dea:	d002      	beq.n	8007df2 <SD_DMATxAbort+0x3a>
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b05      	cmp	r3, #5
 8007df0:	d10a      	bne.n	8007e08 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 febc 	bl	8008b74 <SDMMC_CmdStopTransfer>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e02:	431a      	orrs	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d103      	bne.n	8007e18 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f7fa fe1e 	bl	8002a52 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007e16:	e002      	b.n	8007e1e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff fc7d 	bl	8007718 <HAL_SD_ErrorCallback>
}
 8007e1e:	bf00      	nop
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e32:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f240 523a 	movw	r2, #1338	; 0x53a
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff ff00 	bl	8007c44 <HAL_SD_GetCardState>
 8007e44:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b06      	cmp	r3, #6
 8007e58:	d002      	beq.n	8007e60 <SD_DMARxAbort+0x3a>
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b05      	cmp	r3, #5
 8007e5e:	d10a      	bne.n	8007e76 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fe85 	bl	8008b74 <SDMMC_CmdStopTransfer>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	431a      	orrs	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d103      	bne.n	8007e86 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f7fa fde7 	bl	8002a52 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007e84:	e002      	b.n	8007e8c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f7ff fc46 	bl	8007718 <HAL_SD_ErrorCallback>
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e94:	b5b0      	push	{r4, r5, r7, lr}
 8007e96:	b094      	sub	sp, #80	; 0x50
 8007e98:	af04      	add	r7, sp, #16
 8007e9a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fd37 	bl	8008918 <SDMMC_GetPowerState>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d102      	bne.n	8007eb6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007eb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007eb4:	e0b6      	b.n	8008024 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d02f      	beq.n	8007f1e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 ff60 	bl	8008d88 <SDMMC_CmdSendCID>
 8007ec8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <SD_InitCard+0x40>
    {
      return errorstate;
 8007ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed2:	e0a7      	b.n	8008024 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 fd61 	bl	80089a2 <SDMMC_GetResponse>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2104      	movs	r1, #4
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fd58 	bl	80089a2 <SDMMC_GetResponse>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2108      	movs	r1, #8
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 fd4f 	bl	80089a2 <SDMMC_GetResponse>
 8007f04:	4602      	mov	r2, r0
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	210c      	movs	r1, #12
 8007f10:	4618      	mov	r0, r3
 8007f12:	f000 fd46 	bl	80089a2 <SDMMC_GetResponse>
 8007f16:	4602      	mov	r2, r0
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d00d      	beq.n	8007f42 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f107 020e 	add.w	r2, r7, #14
 8007f2e:	4611      	mov	r1, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 ff66 	bl	8008e02 <SDMMC_CmdSetRelAdd>
 8007f36:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <SD_InitCard+0xae>
    {
      return errorstate;
 8007f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f40:	e070      	b.n	8008024 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d036      	beq.n	8007fb8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007f4a:	89fb      	ldrh	r3, [r7, #14]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4610      	mov	r0, r2
 8007f60:	f000 ff30 	bl	8008dc4 <SDMMC_CmdSendCSD>
 8007f64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f6e:	e059      	b.n	8008024 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fd13 	bl	80089a2 <SDMMC_GetResponse>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2104      	movs	r1, #4
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 fd0a 	bl	80089a2 <SDMMC_GetResponse>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2108      	movs	r1, #8
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fd01 	bl	80089a2 <SDMMC_GetResponse>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	210c      	movs	r1, #12
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fcf8 	bl	80089a2 <SDMMC_GetResponse>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2104      	movs	r1, #4
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 fcef 	bl	80089a2 <SDMMC_GetResponse>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	0d1a      	lsrs	r2, r3, #20
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007fcc:	f107 0310 	add.w	r3, r7, #16
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff fbaa 	bl	800772c <HAL_SD_GetCardCSD>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007fe2:	e01f      	b.n	8008024 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6819      	ldr	r1, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fec:	041b      	lsls	r3, r3, #16
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	4608      	mov	r0, r1
 8007ff6:	f000 fddf 	bl	8008bb8 <SDMMC_CmdSelDesel>
 8007ffa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <SD_InitCard+0x172>
  {
    return errorstate;
 8008002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008004:	e00e      	b.n	8008024 <SD_InitCard+0x190>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681d      	ldr	r5, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	466c      	mov	r4, sp
 800800e:	f103 0210 	add.w	r2, r3, #16
 8008012:	ca07      	ldmia	r2, {r0, r1, r2}
 8008014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008018:	3304      	adds	r3, #4
 800801a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800801c:	4628      	mov	r0, r5
 800801e:	f000 fc21 	bl	8008864 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3740      	adds	r7, #64	; 0x40
 8008028:	46bd      	mov	sp, r7
 800802a:	bdb0      	pop	{r4, r5, r7, pc}

0800802c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	2300      	movs	r3, #0
 800803e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fdda 	bl	8008bfe <SDMMC_CmdGoIdleState>
 800804a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	e072      	b.n	800813c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4618      	mov	r0, r3
 800805c:	f000 fded 	bl	8008c3a <SDMMC_CmdOperCond>
 8008060:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00d      	beq.n	8008084 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f000 fdc3 	bl	8008bfe <SDMMC_CmdGoIdleState>
 8008078:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d004      	beq.n	800808a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	e05b      	b.n	800813c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800808e:	2b01      	cmp	r3, #1
 8008090:	d137      	bne.n	8008102 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2100      	movs	r1, #0
 8008098:	4618      	mov	r0, r3
 800809a:	f000 fded 	bl	8008c78 <SDMMC_CmdAppCommand>
 800809e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d02d      	beq.n	8008102 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80080aa:	e047      	b.n	800813c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2100      	movs	r1, #0
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 fde0 	bl	8008c78 <SDMMC_CmdAppCommand>
 80080b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <SD_PowerON+0x98>
    {
      return errorstate;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	e03b      	b.n	800813c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	491e      	ldr	r1, [pc, #120]	; (8008144 <SD_PowerON+0x118>)
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fdf6 	bl	8008cbc <SDMMC_CmdAppOperCommand>
 80080d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80080dc:	e02e      	b.n	800813c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2100      	movs	r1, #0
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 fc5c 	bl	80089a2 <SDMMC_GetResponse>
 80080ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	0fdb      	lsrs	r3, r3, #31
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d101      	bne.n	80080f8 <SD_PowerON+0xcc>
 80080f4:	2301      	movs	r3, #1
 80080f6:	e000      	b.n	80080fa <SD_PowerON+0xce>
 80080f8:	2300      	movs	r3, #0
 80080fa:	613b      	str	r3, [r7, #16]

    count++;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	3301      	adds	r3, #1
 8008100:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008108:	4293      	cmp	r3, r2
 800810a:	d802      	bhi.n	8008112 <SD_PowerON+0xe6>
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0cc      	beq.n	80080ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008118:	4293      	cmp	r3, r2
 800811a:	d902      	bls.n	8008122 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800811c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008120:	e00c      	b.n	800813c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	645a      	str	r2, [r3, #68]	; 0x44
 8008132:	e002      	b.n	800813a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	c1100000 	.word	0xc1100000

08008148 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d102      	bne.n	800815e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008158:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800815c:	e018      	b.n	8008190 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008166:	041b      	lsls	r3, r3, #16
 8008168:	4619      	mov	r1, r3
 800816a:	4610      	mov	r0, r2
 800816c:	f000 fe6a 	bl	8008e44 <SDMMC_CmdSendStatus>
 8008170:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	e009      	b.n	8008190 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2100      	movs	r1, #0
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fc0d 	bl	80089a2 <SDMMC_GetResponse>
 8008188:	4602      	mov	r2, r0
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80081a0:	2300      	movs	r3, #0
 80081a2:	60fb      	str	r3, [r7, #12]
 80081a4:	2300      	movs	r3, #0
 80081a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fbf7 	bl	80089a2 <SDMMC_GetResponse>
 80081b4:	4603      	mov	r3, r0
 80081b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081be:	d102      	bne.n	80081c6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80081c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081c4:	e02f      	b.n	8008226 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80081c6:	f107 030c 	add.w	r3, r7, #12
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f879 	bl	80082c4 <SD_FindSCR>
 80081d2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	e023      	b.n	8008226 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01c      	beq.n	8008222 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f0:	041b      	lsls	r3, r3, #16
 80081f2:	4619      	mov	r1, r3
 80081f4:	4610      	mov	r0, r2
 80081f6:	f000 fd3f 	bl	8008c78 <SDMMC_CmdAppCommand>
 80081fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	e00f      	b.n	8008226 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2102      	movs	r1, #2
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fd78 	bl	8008d02 <SDMMC_CmdBusWidth>
 8008212:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	e003      	b.n	8008226 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800821e:	2300      	movs	r3, #0
 8008220:	e001      	b.n	8008226 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008222:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
 800823a:	2300      	movs	r3, #0
 800823c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2100      	movs	r1, #0
 8008244:	4618      	mov	r0, r3
 8008246:	f000 fbac 	bl	80089a2 <SDMMC_GetResponse>
 800824a:	4603      	mov	r3, r0
 800824c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008254:	d102      	bne.n	800825c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008256:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800825a:	e02f      	b.n	80082bc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800825c:	f107 030c 	add.w	r3, r7, #12
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f82e 	bl	80082c4 <SD_FindSCR>
 8008268:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	e023      	b.n	80082bc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d01c      	beq.n	80082b8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008286:	041b      	lsls	r3, r3, #16
 8008288:	4619      	mov	r1, r3
 800828a:	4610      	mov	r0, r2
 800828c:	f000 fcf4 	bl	8008c78 <SDMMC_CmdAppCommand>
 8008290:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	e00f      	b.n	80082bc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2100      	movs	r1, #0
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fd2d 	bl	8008d02 <SDMMC_CmdBusWidth>
 80082a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	e003      	b.n	80082bc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80082b4:	2300      	movs	r3, #0
 80082b6:	e001      	b.n	80082bc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80082c4:	b590      	push	{r4, r7, lr}
 80082c6:	b08f      	sub	sp, #60	; 0x3c
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082ce:	f7fa fcdd 	bl	8002c8c <HAL_GetTick>
 80082d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80082d8:	2300      	movs	r3, #0
 80082da:	60bb      	str	r3, [r7, #8]
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2108      	movs	r1, #8
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fb98 	bl	8008a20 <SDMMC_CmdBlockLength>
 80082f0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80082f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <SD_FindSCR+0x38>
  {
    return errorstate;
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	e0a9      	b.n	8008450 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008304:	041b      	lsls	r3, r3, #16
 8008306:	4619      	mov	r1, r3
 8008308:	4610      	mov	r0, r2
 800830a:	f000 fcb5 	bl	8008c78 <SDMMC_CmdAppCommand>
 800830e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	e09a      	b.n	8008450 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800831a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800831e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008320:	2308      	movs	r3, #8
 8008322:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008324:	2330      	movs	r3, #48	; 0x30
 8008326:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008328:	2302      	movs	r3, #2
 800832a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800832c:	2300      	movs	r3, #0
 800832e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008330:	2301      	movs	r3, #1
 8008332:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f107 0210 	add.w	r2, r7, #16
 800833c:	4611      	mov	r1, r2
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fb42 	bl	80089c8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4618      	mov	r0, r3
 800834a:	f000 fcfc 	bl	8008d46 <SDMMC_CmdSendSCR>
 800834e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	2b00      	cmp	r3, #0
 8008354:	d022      	beq.n	800839c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008358:	e07a      	b.n	8008450 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00e      	beq.n	8008386 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6819      	ldr	r1, [r3, #0]
 800836c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	f107 0208 	add.w	r2, r7, #8
 8008374:	18d4      	adds	r4, r2, r3
 8008376:	4608      	mov	r0, r1
 8008378:	f000 faa1 	bl	80088be <SDMMC_ReadFIFO>
 800837c:	4603      	mov	r3, r0
 800837e:	6023      	str	r3, [r4, #0]
      index++;
 8008380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008382:	3301      	adds	r3, #1
 8008384:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008386:	f7fa fc81 	bl	8002c8c <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008394:	d102      	bne.n	800839c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008396:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800839a:	e059      	b.n	8008450 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083a2:	f240 432a 	movw	r3, #1066	; 0x42a
 80083a6:	4013      	ands	r3, r2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0d6      	beq.n	800835a <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	f003 0308 	and.w	r3, r3, #8
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2208      	movs	r2, #8
 80083c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80083c2:	2308      	movs	r3, #8
 80083c4:	e044      	b.n	8008450 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d005      	beq.n	80083e0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2202      	movs	r2, #2
 80083da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80083dc:	2302      	movs	r3, #2
 80083de:	e037      	b.n	8008450 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2220      	movs	r2, #32
 80083f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80083f6:	2320      	movs	r3, #32
 80083f8:	e02a      	b.n	8008450 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8008402:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	061a      	lsls	r2, r3, #24
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	021b      	lsls	r3, r3, #8
 800840c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008410:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	0a1b      	lsrs	r3, r3, #8
 8008416:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800841a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	0e1b      	lsrs	r3, r3, #24
 8008420:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	601a      	str	r2, [r3, #0]
    scr++;
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	3304      	adds	r3, #4
 800842a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	061a      	lsls	r2, r3, #24
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	021b      	lsls	r3, r3, #8
 8008434:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008438:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	0a1b      	lsrs	r3, r3, #8
 800843e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008442:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	0e1b      	lsrs	r3, r3, #24
 8008448:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	373c      	adds	r7, #60	; 0x3c
 8008454:	46bd      	mov	sp, r7
 8008456:	bd90      	pop	{r4, r7, pc}

08008458 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008464:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d03f      	beq.n	80084f2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	e033      	b.n	80084e0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fa1e 	bl	80088be <SDMMC_ReadFIFO>
 8008482:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	b2da      	uxtb	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3301      	adds	r3, #1
 8008490:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	3b01      	subs	r3, #1
 8008496:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	0a1b      	lsrs	r3, r3, #8
 800849c:	b2da      	uxtb	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3301      	adds	r3, #1
 80084a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	0c1b      	lsrs	r3, r3, #16
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3301      	adds	r3, #1
 80084bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	0e1b      	lsrs	r3, r3, #24
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3301      	adds	r3, #1
 80084d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	3301      	adds	r3, #1
 80084de:	617b      	str	r3, [r7, #20]
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	2b07      	cmp	r3, #7
 80084e4:	d9c8      	bls.n	8008478 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80084f2:	bf00      	nop
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b086      	sub	sp, #24
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d043      	beq.n	800859c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008514:	2300      	movs	r3, #0
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	e037      	b.n	800858a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3301      	adds	r3, #1
 8008524:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	3b01      	subs	r3, #1
 800852a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	021a      	lsls	r2, r3, #8
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	4313      	orrs	r3, r2
 8008536:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3301      	adds	r3, #1
 800853c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	3b01      	subs	r3, #1
 8008542:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	041a      	lsls	r2, r3, #16
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	4313      	orrs	r3, r2
 800854e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3301      	adds	r3, #1
 8008554:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	3b01      	subs	r3, #1
 800855a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	061a      	lsls	r2, r3, #24
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	4313      	orrs	r3, r2
 8008566:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3301      	adds	r3, #1
 800856c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	3b01      	subs	r3, #1
 8008572:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f107 0208 	add.w	r2, r7, #8
 800857c:	4611      	mov	r1, r2
 800857e:	4618      	mov	r0, r3
 8008580:	f000 f9aa 	bl	80088d8 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	3301      	adds	r3, #1
 8008588:	617b      	str	r3, [r7, #20]
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2b07      	cmp	r3, #7
 800858e:	d9c4      	bls.n	800851a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800859c:	bf00      	nop
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e038      	b.n	800862c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d106      	bne.n	80085d4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f7f8 fb6e 	bl	8000cb0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3308      	adds	r3, #8
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f000 f828 	bl	8008634 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6818      	ldr	r0, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	461a      	mov	r2, r3
 80085ee:	68b9      	ldr	r1, [r7, #8]
 80085f0:	f000 f8b0 	bl	8008754 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6858      	ldr	r0, [r3, #4]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	689a      	ldr	r2, [r3, #8]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	f000 f8f7 	bl	80087f4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	6892      	ldr	r2, [r2, #8]
 800860e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	6892      	ldr	r2, [r2, #8]
 800861a:	f041 0101 	orr.w	r1, r1, #1
 800861e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	6812      	ldr	r2, [r2, #0]
 800864c:	f023 0101 	bic.w	r1, r3, #1
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b08      	cmp	r3, #8
 800865c:	d102      	bne.n	8008664 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800865e:	2340      	movs	r3, #64	; 0x40
 8008660:	617b      	str	r3, [r7, #20]
 8008662:	e001      	b.n	8008668 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008664:	2300      	movs	r3, #0
 8008666:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008674:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800867a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008680:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008686:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800868c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8008692:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008698:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800869e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80086a4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80086aa:	4313      	orrs	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	4313      	orrs	r3, r2
 80086c0:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80086cc:	4b20      	ldr	r3, [pc, #128]	; (8008750 <FMC_NORSRAM_Init+0x11c>)
 80086ce:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086d6:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80086de:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80086e6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	43db      	mvns	r3, r3
 80086f6:	ea02 0103 	and.w	r1, r2, r3
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	4319      	orrs	r1, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008710:	d10c      	bne.n	800872c <FMC_NORSRAM_Init+0xf8>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d008      	beq.n	800872c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008726:	431a      	orrs	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d006      	beq.n	8008742 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	371c      	adds	r7, #28
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	0008fb7f 	.word	0x0008fb7f

08008754 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	431a      	orrs	r2, r3
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	021b      	lsls	r3, r3, #8
 8008780:	431a      	orrs	r2, r3
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	041b      	lsls	r3, r3, #16
 8008788:	431a      	orrs	r2, r3
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	3b01      	subs	r3, #1
 8008790:	051b      	lsls	r3, r3, #20
 8008792:	431a      	orrs	r2, r3
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	3b02      	subs	r3, #2
 800879a:	061b      	lsls	r3, r3, #24
 800879c:	431a      	orrs	r2, r3
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	3201      	adds	r2, #1
 80087a8:	4319      	orrs	r1, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087bc:	d113      	bne.n	80087e6 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087c6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	051b      	lsls	r3, r3, #20
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	431a      	orrs	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
 8008800:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008808:	d11d      	bne.n	8008846 <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008812:	4b13      	ldr	r3, [pc, #76]	; (8008860 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008814:	4013      	ands	r3, r2
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	6811      	ldr	r1, [r2, #0]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	6852      	ldr	r2, [r2, #4]
 800881e:	0112      	lsls	r2, r2, #4
 8008820:	4311      	orrs	r1, r2
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	6892      	ldr	r2, [r2, #8]
 8008826:	0212      	lsls	r2, r2, #8
 8008828:	4311      	orrs	r1, r2
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	69d2      	ldr	r2, [r2, #28]
 800882e:	4311      	orrs	r1, r2
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	6912      	ldr	r2, [r2, #16]
 8008834:	0412      	lsls	r2, r2, #16
 8008836:	430a      	orrs	r2, r1
 8008838:	ea43 0102 	orr.w	r1, r3, r2
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008844:	e005      	b.n	8008852 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800884e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	cff00000 	.word	0xcff00000

08008864 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008864:	b084      	sub	sp, #16
 8008866:	b480      	push	{r7}
 8008868:	b085      	sub	sp, #20
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	f107 001c 	add.w	r0, r7, #28
 8008872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008876:	2300      	movs	r3, #0
 8008878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4313      	orrs	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008882:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8008886:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800888a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800888e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008892:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	4313      	orrs	r3, r2
 8008898:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80088a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	431a      	orrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	b004      	add	sp, #16
 80088bc:	4770      	bx	lr

080088be <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2203      	movs	r2, #3
 8008906:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008908:	2002      	movs	r0, #2
 800890a:	f7fa f9cb 	bl	8002ca4 <HAL_Delay>

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0303 	and.w	r3, r3, #3
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008952:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008958:	431a      	orrs	r2, r3
                       Command->CPSM);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800895e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800896e:	f023 030f 	bic.w	r3, r3, #15
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	431a      	orrs	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	b2db      	uxtb	r3, r3
}
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b085      	sub	sp, #20
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3314      	adds	r3, #20
 80089b0:	461a      	mov	r2, r3
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	4413      	add	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089ee:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80089f4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80089fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0

}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008a2e:	2310      	movs	r3, #16
 8008a30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a32:	2340      	movs	r3, #64	; 0x40
 8008a34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a36:	2300      	movs	r3, #0
 8008a38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a40:	f107 0308 	add.w	r3, r7, #8
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff ff74 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a50:	2110      	movs	r1, #16
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa18 	bl	8008e88 <SDMMC_GetCmdResp1>
 8008a58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a5a:	69fb      	ldr	r3, [r7, #28]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3720      	adds	r7, #32
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008a72:	2311      	movs	r3, #17
 8008a74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a76:	2340      	movs	r3, #64	; 0x40
 8008a78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a84:	f107 0308 	add.w	r3, r7, #8
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff ff52 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a94:	2111      	movs	r1, #17
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f9f6 	bl	8008e88 <SDMMC_GetCmdResp1>
 8008a9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a9e:	69fb      	ldr	r3, [r7, #28]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3720      	adds	r7, #32
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008ab6:	2312      	movs	r3, #18
 8008ab8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008aba:	2340      	movs	r3, #64	; 0x40
 8008abc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ac6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ac8:	f107 0308 	add.w	r3, r7, #8
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff ff30 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad8:	2112      	movs	r1, #18
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f9d4 	bl	8008e88 <SDMMC_GetCmdResp1>
 8008ae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ae2:	69fb      	ldr	r3, [r7, #28]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3720      	adds	r7, #32
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008afa:	2318      	movs	r3, #24
 8008afc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008afe:	2340      	movs	r3, #64	; 0x40
 8008b00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b02:	2300      	movs	r3, #0
 8008b04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b0c:	f107 0308 	add.w	r3, r7, #8
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff ff0e 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b1c:	2118      	movs	r1, #24
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f9b2 	bl	8008e88 <SDMMC_GetCmdResp1>
 8008b24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b26:	69fb      	ldr	r3, [r7, #28]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3720      	adds	r7, #32
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008b3e:	2319      	movs	r3, #25
 8008b40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b42:	2340      	movs	r3, #64	; 0x40
 8008b44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b46:	2300      	movs	r3, #0
 8008b48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b50:	f107 0308 	add.w	r3, r7, #8
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff feec 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b60:	2119      	movs	r1, #25
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f990 	bl	8008e88 <SDMMC_GetCmdResp1>
 8008b68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3720      	adds	r7, #32
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008b80:	230c      	movs	r3, #12
 8008b82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b84:	2340      	movs	r3, #64	; 0x40
 8008b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b90:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b92:	f107 0308 	add.w	r3, r7, #8
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff fecb 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008b9e:	4a05      	ldr	r2, [pc, #20]	; (8008bb4 <SDMMC_CmdStopTransfer+0x40>)
 8008ba0:	210c      	movs	r1, #12
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f970 	bl	8008e88 <SDMMC_GetCmdResp1>
 8008ba8:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008baa:	69fb      	ldr	r3, [r7, #28]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3720      	adds	r7, #32
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	05f5e100 	.word	0x05f5e100

08008bb8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08a      	sub	sp, #40	; 0x28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008bc8:	2307      	movs	r3, #7
 8008bca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bcc:	2340      	movs	r3, #64	; 0x40
 8008bce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bd8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bda:	f107 0310 	add.w	r3, r7, #16
 8008bde:	4619      	mov	r1, r3
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f7ff fea7 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bea:	2107      	movs	r1, #7
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 f94b 	bl	8008e88 <SDMMC_GetCmdResp1>
 8008bf2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3728      	adds	r7, #40	; 0x28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b088      	sub	sp, #32
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c1c:	f107 0308 	add.w	r3, r7, #8
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff fe86 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fb65 	bl	80092f8 <SDMMC_GetCmdError>
 8008c2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c30:	69fb      	ldr	r3, [r7, #28]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3720      	adds	r7, #32
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b088      	sub	sp, #32
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008c42:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008c46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008c48:	2308      	movs	r3, #8
 8008c4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c4c:	2340      	movs	r3, #64	; 0x40
 8008c4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c5a:	f107 0308 	add.w	r3, r7, #8
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff fe67 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 faf8 	bl	800925c <SDMMC_GetCmdResp7>
 8008c6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c6e:	69fb      	ldr	r3, [r7, #28]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3720      	adds	r7, #32
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008c86:	2337      	movs	r3, #55	; 0x37
 8008c88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c8a:	2340      	movs	r3, #64	; 0x40
 8008c8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c98:	f107 0308 	add.w	r3, r7, #8
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff fe48 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca8:	2137      	movs	r1, #55	; 0x37
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f8ec 	bl	8008e88 <SDMMC_GetCmdResp1>
 8008cb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cb2:	69fb      	ldr	r3, [r7, #28]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3720      	adds	r7, #32
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cd0:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008cd2:	2329      	movs	r3, #41	; 0x29
 8008cd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cd6:	2340      	movs	r3, #64	; 0x40
 8008cd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ce2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ce4:	f107 0308 	add.w	r3, r7, #8
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff fe22 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f9ff 	bl	80090f4 <SDMMC_GetCmdResp3>
 8008cf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cf8:	69fb      	ldr	r3, [r7, #28]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3720      	adds	r7, #32
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b088      	sub	sp, #32
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008d10:	2306      	movs	r3, #6
 8008d12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d14:	2340      	movs	r3, #64	; 0x40
 8008d16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d22:	f107 0308 	add.w	r3, r7, #8
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff fe03 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d32:	2106      	movs	r1, #6
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f8a7 	bl	8008e88 <SDMMC_GetCmdResp1>
 8008d3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3720      	adds	r7, #32
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b088      	sub	sp, #32
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008d52:	2333      	movs	r3, #51	; 0x33
 8008d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d56:	2340      	movs	r3, #64	; 0x40
 8008d58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d64:	f107 0308 	add.w	r3, r7, #8
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff fde2 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d74:	2133      	movs	r1, #51	; 0x33
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f886 	bl	8008e88 <SDMMC_GetCmdResp1>
 8008d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d7e:	69fb      	ldr	r3, [r7, #28]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3720      	adds	r7, #32
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b088      	sub	sp, #32
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008d90:	2300      	movs	r3, #0
 8008d92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008d94:	2302      	movs	r3, #2
 8008d96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008d98:	23c0      	movs	r3, #192	; 0xc0
 8008d9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008da4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008da6:	f107 0308 	add.w	r3, r7, #8
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff fdc1 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f956 	bl	8009064 <SDMMC_GetCmdResp2>
 8008db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dba:	69fb      	ldr	r3, [r7, #28]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3720      	adds	r7, #32
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008dd2:	2309      	movs	r3, #9
 8008dd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008dd6:	23c0      	movs	r3, #192	; 0xc0
 8008dd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008de2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008de4:	f107 0308 	add.w	r3, r7, #8
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff fda2 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f937 	bl	8009064 <SDMMC_GetCmdResp2>
 8008df6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008df8:	69fb      	ldr	r3, [r7, #28]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3720      	adds	r7, #32
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b088      	sub	sp, #32
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008e10:	2303      	movs	r3, #3
 8008e12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e14:	2340      	movs	r3, #64	; 0x40
 8008e16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e22:	f107 0308 	add.w	r3, r7, #8
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff fd83 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	2103      	movs	r1, #3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f99c 	bl	8009170 <SDMMC_GetCmdResp6>
 8008e38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e3a:	69fb      	ldr	r3, [r7, #28]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3720      	adds	r7, #32
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008e52:	230d      	movs	r3, #13
 8008e54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e56:	2340      	movs	r3, #64	; 0x40
 8008e58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e64:	f107 0308 	add.w	r3, r7, #8
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff fd62 	bl	8008934 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e74:	210d      	movs	r1, #13
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f806 	bl	8008e88 <SDMMC_GetCmdResp1>
 8008e7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e7e:	69fb      	ldr	r3, [r7, #28]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3720      	adds	r7, #32
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b088      	sub	sp, #32
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	460b      	mov	r3, r1
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008e96:	4b70      	ldr	r3, [pc, #448]	; (8009058 <SDMMC_GetCmdResp1+0x1d0>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a70      	ldr	r2, [pc, #448]	; (800905c <SDMMC_GetCmdResp1+0x1d4>)
 8008e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea0:	0a5a      	lsrs	r2, r3, #9
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	fb02 f303 	mul.w	r3, r2, r3
 8008ea8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	1e5a      	subs	r2, r3, #1
 8008eae:	61fa      	str	r2, [r7, #28]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d102      	bne.n	8008eba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008eb8:	e0c9      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ebe:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0ef      	beq.n	8008eaa <SDMMC_GetCmdResp1+0x22>
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1ea      	bne.n	8008eaa <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2204      	movs	r2, #4
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ee6:	2304      	movs	r3, #4
 8008ee8:	e0b1      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d004      	beq.n	8008f00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e0a6      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	22c5      	movs	r2, #197	; 0xc5
 8008f04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f7ff fd3e 	bl	8008988 <SDMMC_GetCommandResponse>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	461a      	mov	r2, r3
 8008f10:	7afb      	ldrb	r3, [r7, #11]
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d001      	beq.n	8008f1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e099      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f7ff fd40 	bl	80089a2 <SDMMC_GetResponse>
 8008f22:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	4b4e      	ldr	r3, [pc, #312]	; (8009060 <SDMMC_GetCmdResp1+0x1d8>)
 8008f28:	4013      	ands	r3, r2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	e08d      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	da02      	bge.n	8008f3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f3c:	e087      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008f48:	2340      	movs	r3, #64	; 0x40
 8008f4a:	e080      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008f56:	2380      	movs	r3, #128	; 0x80
 8008f58:	e079      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f68:	e071      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d002      	beq.n	8008f7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f78:	e069      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f88:	e061      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d002      	beq.n	8008f9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008f94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f98:	e059      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fa8:	e051      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008fb8:	e049      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008fc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008fc8:	e041      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008fd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fd8:	e039      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008fe8:	e031      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008ff4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ff8:	e029      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009004:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009008:	e021      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009014:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009018:	e019      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009024:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009028:	e011      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009034:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009038:	e009      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f003 0308 	and.w	r3, r3, #8
 8009040:	2b00      	cmp	r3, #0
 8009042:	d002      	beq.n	800904a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009044:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009048:	e001      	b.n	800904e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800904a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800904e:	4618      	mov	r0, r3
 8009050:	3720      	adds	r7, #32
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20000000 	.word	0x20000000
 800905c:	10624dd3 	.word	0x10624dd3
 8009060:	fdffe008 	.word	0xfdffe008

08009064 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800906c:	4b1f      	ldr	r3, [pc, #124]	; (80090ec <SDMMC_GetCmdResp2+0x88>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a1f      	ldr	r2, [pc, #124]	; (80090f0 <SDMMC_GetCmdResp2+0x8c>)
 8009072:	fba2 2303 	umull	r2, r3, r2, r3
 8009076:	0a5b      	lsrs	r3, r3, #9
 8009078:	f241 3288 	movw	r2, #5000	; 0x1388
 800907c:	fb02 f303 	mul.w	r3, r2, r3
 8009080:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	1e5a      	subs	r2, r3, #1
 8009086:	60fa      	str	r2, [r7, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d102      	bne.n	8009092 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800908c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009090:	e026      	b.n	80090e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009096:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d0ef      	beq.n	8009082 <SDMMC_GetCmdResp2+0x1e>
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1ea      	bne.n	8009082 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d004      	beq.n	80090c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2204      	movs	r2, #4
 80090bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090be:	2304      	movs	r3, #4
 80090c0:	e00e      	b.n	80090e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d004      	beq.n	80090d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e003      	b.n	80090e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	22c5      	movs	r2, #197	; 0xc5
 80090dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	20000000 	.word	0x20000000
 80090f0:	10624dd3 	.word	0x10624dd3

080090f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090fc:	4b1a      	ldr	r3, [pc, #104]	; (8009168 <SDMMC_GetCmdResp3+0x74>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a1a      	ldr	r2, [pc, #104]	; (800916c <SDMMC_GetCmdResp3+0x78>)
 8009102:	fba2 2303 	umull	r2, r3, r2, r3
 8009106:	0a5b      	lsrs	r3, r3, #9
 8009108:	f241 3288 	movw	r2, #5000	; 0x1388
 800910c:	fb02 f303 	mul.w	r3, r2, r3
 8009110:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	1e5a      	subs	r2, r3, #1
 8009116:	60fa      	str	r2, [r7, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800911c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009120:	e01b      	b.n	800915a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009126:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0ef      	beq.n	8009112 <SDMMC_GetCmdResp3+0x1e>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1ea      	bne.n	8009112 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	d004      	beq.n	8009152 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2204      	movs	r2, #4
 800914c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800914e:	2304      	movs	r3, #4
 8009150:	e003      	b.n	800915a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	22c5      	movs	r2, #197	; 0xc5
 8009156:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	20000000 	.word	0x20000000
 800916c:	10624dd3 	.word	0x10624dd3

08009170 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	460b      	mov	r3, r1
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800917e:	4b35      	ldr	r3, [pc, #212]	; (8009254 <SDMMC_GetCmdResp6+0xe4>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a35      	ldr	r2, [pc, #212]	; (8009258 <SDMMC_GetCmdResp6+0xe8>)
 8009184:	fba2 2303 	umull	r2, r3, r2, r3
 8009188:	0a5b      	lsrs	r3, r3, #9
 800918a:	f241 3288 	movw	r2, #5000	; 0x1388
 800918e:	fb02 f303 	mul.w	r3, r2, r3
 8009192:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	1e5a      	subs	r2, r3, #1
 8009198:	61fa      	str	r2, [r7, #28]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d102      	bne.n	80091a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800919e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091a2:	e052      	b.n	800924a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0ef      	beq.n	8009194 <SDMMC_GetCmdResp6+0x24>
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1ea      	bne.n	8009194 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c2:	f003 0304 	and.w	r3, r3, #4
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d004      	beq.n	80091d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2204      	movs	r2, #4
 80091ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091d0:	2304      	movs	r3, #4
 80091d2:	e03a      	b.n	800924a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d004      	beq.n	80091ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2201      	movs	r2, #1
 80091e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e02f      	b.n	800924a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f7ff fbcc 	bl	8008988 <SDMMC_GetCommandResponse>
 80091f0:	4603      	mov	r3, r0
 80091f2:	461a      	mov	r2, r3
 80091f4:	7afb      	ldrb	r3, [r7, #11]
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d001      	beq.n	80091fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e025      	b.n	800924a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	22c5      	movs	r2, #197	; 0xc5
 8009202:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009204:	2100      	movs	r1, #0
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7ff fbcb 	bl	80089a2 <SDMMC_GetResponse>
 800920c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d106      	bne.n	8009226 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	0c1b      	lsrs	r3, r3, #16
 800921c:	b29a      	uxth	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009222:	2300      	movs	r3, #0
 8009224:	e011      	b.n	800924a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009234:	e009      	b.n	800924a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009244:	e001      	b.n	800924a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800924a:	4618      	mov	r0, r3
 800924c:	3720      	adds	r7, #32
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20000000 	.word	0x20000000
 8009258:	10624dd3 	.word	0x10624dd3

0800925c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009264:	4b22      	ldr	r3, [pc, #136]	; (80092f0 <SDMMC_GetCmdResp7+0x94>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a22      	ldr	r2, [pc, #136]	; (80092f4 <SDMMC_GetCmdResp7+0x98>)
 800926a:	fba2 2303 	umull	r2, r3, r2, r3
 800926e:	0a5b      	lsrs	r3, r3, #9
 8009270:	f241 3288 	movw	r2, #5000	; 0x1388
 8009274:	fb02 f303 	mul.w	r3, r2, r3
 8009278:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	1e5a      	subs	r2, r3, #1
 800927e:	60fa      	str	r2, [r7, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d102      	bne.n	800928a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009284:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009288:	e02c      	b.n	80092e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009296:	2b00      	cmp	r3, #0
 8009298:	d0ef      	beq.n	800927a <SDMMC_GetCmdResp7+0x1e>
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1ea      	bne.n	800927a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d004      	beq.n	80092ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2204      	movs	r2, #4
 80092b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092b6:	2304      	movs	r3, #4
 80092b8:	e014      	b.n	80092e4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d004      	beq.n	80092d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e009      	b.n	80092e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2240      	movs	r2, #64	; 0x40
 80092e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80092e2:	2300      	movs	r3, #0

}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	20000000 	.word	0x20000000
 80092f4:	10624dd3 	.word	0x10624dd3

080092f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009300:	4b11      	ldr	r3, [pc, #68]	; (8009348 <SDMMC_GetCmdError+0x50>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a11      	ldr	r2, [pc, #68]	; (800934c <SDMMC_GetCmdError+0x54>)
 8009306:	fba2 2303 	umull	r2, r3, r2, r3
 800930a:	0a5b      	lsrs	r3, r3, #9
 800930c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009310:	fb02 f303 	mul.w	r3, r2, r3
 8009314:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	1e5a      	subs	r2, r3, #1
 800931a:	60fa      	str	r2, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009320:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009324:	e009      	b.n	800933a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0f1      	beq.n	8009316 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	22c5      	movs	r2, #197	; 0xc5
 8009336:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	20000000 	.word	0x20000000
 800934c:	10624dd3 	.word	0x10624dd3

08009350 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009354:	4904      	ldr	r1, [pc, #16]	; (8009368 <MX_FATFS_Init+0x18>)
 8009356:	4805      	ldr	r0, [pc, #20]	; (800936c <MX_FATFS_Init+0x1c>)
 8009358:	f003 f8ac 	bl	800c4b4 <FATFS_LinkDriver>
 800935c:	4603      	mov	r3, r0
 800935e:	461a      	mov	r2, r3
 8009360:	4b03      	ldr	r3, [pc, #12]	; (8009370 <MX_FATFS_Init+0x20>)
 8009362:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009364:	bf00      	nop
 8009366:	bd80      	pop	{r7, pc}
 8009368:	2000057c 	.word	0x2000057c
 800936c:	0800c64c 	.word	0x0800c64c
 8009370:	20000af8 	.word	0x20000af8

08009374 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009374:	b480      	push	{r7}
 8009376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009378:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800937a:	4618      	mov	r0, r3
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800938c:	f7f9 fc7e 	bl	8002c8c <HAL_GetTick>
 8009390:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009392:	e006      	b.n	80093a2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009394:	f7f9 faa0 	bl	80028d8 <BSP_SD_GetCardState>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800939e:	2300      	movs	r3, #0
 80093a0:	e009      	b.n	80093b6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80093a2:	f7f9 fc73 	bl	8002c8c <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d8f0      	bhi.n	8009394 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80093b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
	...

080093c0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80093ca:	4b0b      	ldr	r3, [pc, #44]	; (80093f8 <SD_CheckStatus+0x38>)
 80093cc:	2201      	movs	r2, #1
 80093ce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80093d0:	f7f9 fa82 	bl	80028d8 <BSP_SD_GetCardState>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d107      	bne.n	80093ea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80093da:	4b07      	ldr	r3, [pc, #28]	; (80093f8 <SD_CheckStatus+0x38>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f023 0301 	bic.w	r3, r3, #1
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	4b04      	ldr	r3, [pc, #16]	; (80093f8 <SD_CheckStatus+0x38>)
 80093e8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80093ea:	4b03      	ldr	r3, [pc, #12]	; (80093f8 <SD_CheckStatus+0x38>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	b2db      	uxtb	r3, r3
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20000085 	.word	0x20000085

080093fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009406:	f7f9 f99f 	bl	8002748 <BSP_SD_Init>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d107      	bne.n	8009420 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009410:	79fb      	ldrb	r3, [r7, #7]
 8009412:	4618      	mov	r0, r3
 8009414:	f7ff ffd4 	bl	80093c0 <SD_CheckStatus>
 8009418:	4603      	mov	r3, r0
 800941a:	461a      	mov	r2, r3
 800941c:	4b04      	ldr	r3, [pc, #16]	; (8009430 <SD_initialize+0x34>)
 800941e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009420:	4b03      	ldr	r3, [pc, #12]	; (8009430 <SD_initialize+0x34>)
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	b2db      	uxtb	r3, r3
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20000085 	.word	0x20000085

08009434 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	4603      	mov	r3, r0
 800943c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	4618      	mov	r0, r3
 8009442:	f7ff ffbd 	bl	80093c0 <SD_CheckStatus>
 8009446:	4603      	mov	r3, r0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	607a      	str	r2, [r7, #4]
 800945a:	603b      	str	r3, [r7, #0]
 800945c:	4603      	mov	r3, r0
 800945e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009464:	f247 5030 	movw	r0, #30000	; 0x7530
 8009468:	f7ff ff8c 	bl	8009384 <SD_CheckStatusWithTimeout>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	da01      	bge.n	8009476 <SD_read+0x26>
  {
    return res;
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	e03b      	b.n	80094ee <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	68b8      	ldr	r0, [r7, #8]
 800947c:	f7f9 f9dc 	bl	8002838 <BSP_SD_ReadBlocks_DMA>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d132      	bne.n	80094ec <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009486:	4b1c      	ldr	r3, [pc, #112]	; (80094f8 <SD_read+0xa8>)
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800948c:	f7f9 fbfe 	bl	8002c8c <HAL_GetTick>
 8009490:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009492:	bf00      	nop
 8009494:	4b18      	ldr	r3, [pc, #96]	; (80094f8 <SD_read+0xa8>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d108      	bne.n	80094ae <SD_read+0x5e>
 800949c:	f7f9 fbf6 	bl	8002c8c <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	f247 522f 	movw	r2, #29999	; 0x752f
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d9f2      	bls.n	8009494 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80094ae:	4b12      	ldr	r3, [pc, #72]	; (80094f8 <SD_read+0xa8>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d102      	bne.n	80094bc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	75fb      	strb	r3, [r7, #23]
 80094ba:	e017      	b.n	80094ec <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80094bc:	4b0e      	ldr	r3, [pc, #56]	; (80094f8 <SD_read+0xa8>)
 80094be:	2200      	movs	r2, #0
 80094c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80094c2:	f7f9 fbe3 	bl	8002c8c <HAL_GetTick>
 80094c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80094c8:	e007      	b.n	80094da <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80094ca:	f7f9 fa05 	bl	80028d8 <BSP_SD_GetCardState>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <SD_read+0x8a>
          {
            res = RES_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80094d8:	e008      	b.n	80094ec <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80094da:	f7f9 fbd7 	bl	8002c8c <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	f247 522f 	movw	r2, #29999	; 0x752f
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d9ee      	bls.n	80094ca <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20000194 	.word	0x20000194

080094fc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	607a      	str	r2, [r7, #4]
 8009506:	603b      	str	r3, [r7, #0]
 8009508:	4603      	mov	r3, r0
 800950a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009510:	4b24      	ldr	r3, [pc, #144]	; (80095a4 <SD_write+0xa8>)
 8009512:	2200      	movs	r2, #0
 8009514:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009516:	f247 5030 	movw	r0, #30000	; 0x7530
 800951a:	f7ff ff33 	bl	8009384 <SD_CheckStatusWithTimeout>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	da01      	bge.n	8009528 <SD_write+0x2c>
  {
    return res;
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	e038      	b.n	800959a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	68b8      	ldr	r0, [r7, #8]
 800952e:	f7f9 f9ab 	bl	8002888 <BSP_SD_WriteBlocks_DMA>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d12f      	bne.n	8009598 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009538:	f7f9 fba8 	bl	8002c8c <HAL_GetTick>
 800953c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800953e:	bf00      	nop
 8009540:	4b18      	ldr	r3, [pc, #96]	; (80095a4 <SD_write+0xa8>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d108      	bne.n	800955a <SD_write+0x5e>
 8009548:	f7f9 fba0 	bl	8002c8c <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	f247 522f 	movw	r2, #29999	; 0x752f
 8009556:	4293      	cmp	r3, r2
 8009558:	d9f2      	bls.n	8009540 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800955a:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <SD_write+0xa8>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d102      	bne.n	8009568 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	75fb      	strb	r3, [r7, #23]
 8009566:	e017      	b.n	8009598 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009568:	4b0e      	ldr	r3, [pc, #56]	; (80095a4 <SD_write+0xa8>)
 800956a:	2200      	movs	r2, #0
 800956c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800956e:	f7f9 fb8d 	bl	8002c8c <HAL_GetTick>
 8009572:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009574:	e007      	b.n	8009586 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009576:	f7f9 f9af 	bl	80028d8 <BSP_SD_GetCardState>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d102      	bne.n	8009586 <SD_write+0x8a>
          {
            res = RES_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	75fb      	strb	r3, [r7, #23]
            break;
 8009584:	e008      	b.n	8009598 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009586:	f7f9 fb81 	bl	8002c8c <HAL_GetTick>
 800958a:	4602      	mov	r2, r0
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	f247 522f 	movw	r2, #29999	; 0x752f
 8009594:	4293      	cmp	r3, r2
 8009596:	d9ee      	bls.n	8009576 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009598:	7dfb      	ldrb	r3, [r7, #23]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20000190 	.word	0x20000190

080095a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08c      	sub	sp, #48	; 0x30
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	603a      	str	r2, [r7, #0]
 80095b2:	71fb      	strb	r3, [r7, #7]
 80095b4:	460b      	mov	r3, r1
 80095b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80095be:	4b25      	ldr	r3, [pc, #148]	; (8009654 <SD_ioctl+0xac>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <SD_ioctl+0x28>
 80095cc:	2303      	movs	r3, #3
 80095ce:	e03c      	b.n	800964a <SD_ioctl+0xa2>

  switch (cmd)
 80095d0:	79bb      	ldrb	r3, [r7, #6]
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d834      	bhi.n	8009640 <SD_ioctl+0x98>
 80095d6:	a201      	add	r2, pc, #4	; (adr r2, 80095dc <SD_ioctl+0x34>)
 80095d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095dc:	080095ed 	.word	0x080095ed
 80095e0:	080095f5 	.word	0x080095f5
 80095e4:	0800960d 	.word	0x0800960d
 80095e8:	08009627 	.word	0x08009627
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80095f2:	e028      	b.n	8009646 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80095f4:	f107 030c 	add.w	r3, r7, #12
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7f9 f98b 	bl	8002914 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80095fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800960a:	e01c      	b.n	8009646 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800960c:	f107 030c 	add.w	r3, r7, #12
 8009610:	4618      	mov	r0, r3
 8009612:	f7f9 f97f 	bl	8002914 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009618:	b29a      	uxth	r2, r3
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009624:	e00f      	b.n	8009646 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009626:	f107 030c 	add.w	r3, r7, #12
 800962a:	4618      	mov	r0, r3
 800962c:	f7f9 f972 	bl	8002914 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	0a5a      	lsrs	r2, r3, #9
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800963e:	e002      	b.n	8009646 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009640:	2304      	movs	r3, #4
 8009642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800964a:	4618      	mov	r0, r3
 800964c:	3730      	adds	r7, #48	; 0x30
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20000085 	.word	0x20000085

08009658 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009658:	b480      	push	{r7}
 800965a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800965c:	4b03      	ldr	r3, [pc, #12]	; (800966c <BSP_SD_WriteCpltCallback+0x14>)
 800965e:	2201      	movs	r2, #1
 8009660:	601a      	str	r2, [r3, #0]
}
 8009662:	bf00      	nop
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	20000190 	.word	0x20000190

08009670 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009670:	b480      	push	{r7}
 8009672:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009674:	4b03      	ldr	r3, [pc, #12]	; (8009684 <BSP_SD_ReadCpltCallback+0x14>)
 8009676:	2201      	movs	r2, #1
 8009678:	601a      	str	r2, [r3, #0]
}
 800967a:	bf00      	nop
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	20000194 	.word	0x20000194

08009688 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009692:	79fb      	ldrb	r3, [r7, #7]
 8009694:	4a08      	ldr	r2, [pc, #32]	; (80096b8 <disk_status+0x30>)
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	79fa      	ldrb	r2, [r7, #7]
 80096a0:	4905      	ldr	r1, [pc, #20]	; (80096b8 <disk_status+0x30>)
 80096a2:	440a      	add	r2, r1
 80096a4:	7a12      	ldrb	r2, [r2, #8]
 80096a6:	4610      	mov	r0, r2
 80096a8:	4798      	blx	r3
 80096aa:	4603      	mov	r3, r0
 80096ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	200001c0 	.word	0x200001c0

080096bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80096ca:	79fb      	ldrb	r3, [r7, #7]
 80096cc:	4a0d      	ldr	r2, [pc, #52]	; (8009704 <disk_initialize+0x48>)
 80096ce:	5cd3      	ldrb	r3, [r2, r3]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d111      	bne.n	80096f8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80096d4:	79fb      	ldrb	r3, [r7, #7]
 80096d6:	4a0b      	ldr	r2, [pc, #44]	; (8009704 <disk_initialize+0x48>)
 80096d8:	2101      	movs	r1, #1
 80096da:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	4a09      	ldr	r2, [pc, #36]	; (8009704 <disk_initialize+0x48>)
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4413      	add	r3, r2
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	79fa      	ldrb	r2, [r7, #7]
 80096ea:	4906      	ldr	r1, [pc, #24]	; (8009704 <disk_initialize+0x48>)
 80096ec:	440a      	add	r2, r1
 80096ee:	7a12      	ldrb	r2, [r2, #8]
 80096f0:	4610      	mov	r0, r2
 80096f2:	4798      	blx	r3
 80096f4:	4603      	mov	r3, r0
 80096f6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	200001c0 	.word	0x200001c0

08009708 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009708:	b590      	push	{r4, r7, lr}
 800970a:	b087      	sub	sp, #28
 800970c:	af00      	add	r7, sp, #0
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	607a      	str	r2, [r7, #4]
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	4a0a      	ldr	r2, [pc, #40]	; (8009744 <disk_read+0x3c>)
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	689c      	ldr	r4, [r3, #8]
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	4a07      	ldr	r2, [pc, #28]	; (8009744 <disk_read+0x3c>)
 8009728:	4413      	add	r3, r2
 800972a:	7a18      	ldrb	r0, [r3, #8]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	68b9      	ldr	r1, [r7, #8]
 8009732:	47a0      	blx	r4
 8009734:	4603      	mov	r3, r0
 8009736:	75fb      	strb	r3, [r7, #23]
  return res;
 8009738:	7dfb      	ldrb	r3, [r7, #23]
}
 800973a:	4618      	mov	r0, r3
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	bd90      	pop	{r4, r7, pc}
 8009742:	bf00      	nop
 8009744:	200001c0 	.word	0x200001c0

08009748 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009748:	b590      	push	{r4, r7, lr}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	607a      	str	r2, [r7, #4]
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009758:	7bfb      	ldrb	r3, [r7, #15]
 800975a:	4a0a      	ldr	r2, [pc, #40]	; (8009784 <disk_write+0x3c>)
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	68dc      	ldr	r4, [r3, #12]
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	4a07      	ldr	r2, [pc, #28]	; (8009784 <disk_write+0x3c>)
 8009768:	4413      	add	r3, r2
 800976a:	7a18      	ldrb	r0, [r3, #8]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	68b9      	ldr	r1, [r7, #8]
 8009772:	47a0      	blx	r4
 8009774:	4603      	mov	r3, r0
 8009776:	75fb      	strb	r3, [r7, #23]
  return res;
 8009778:	7dfb      	ldrb	r3, [r7, #23]
}
 800977a:	4618      	mov	r0, r3
 800977c:	371c      	adds	r7, #28
 800977e:	46bd      	mov	sp, r7
 8009780:	bd90      	pop	{r4, r7, pc}
 8009782:	bf00      	nop
 8009784:	200001c0 	.word	0x200001c0

08009788 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	4603      	mov	r3, r0
 8009790:	603a      	str	r2, [r7, #0]
 8009792:	71fb      	strb	r3, [r7, #7]
 8009794:	460b      	mov	r3, r1
 8009796:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009798:	79fb      	ldrb	r3, [r7, #7]
 800979a:	4a09      	ldr	r2, [pc, #36]	; (80097c0 <disk_ioctl+0x38>)
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	79fa      	ldrb	r2, [r7, #7]
 80097a6:	4906      	ldr	r1, [pc, #24]	; (80097c0 <disk_ioctl+0x38>)
 80097a8:	440a      	add	r2, r1
 80097aa:	7a10      	ldrb	r0, [r2, #8]
 80097ac:	79b9      	ldrb	r1, [r7, #6]
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	4798      	blx	r3
 80097b2:	4603      	mov	r3, r0
 80097b4:	73fb      	strb	r3, [r7, #15]
  return res;
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	200001c0 	.word	0x200001c0

080097c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3301      	adds	r3, #1
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80097d4:	89fb      	ldrh	r3, [r7, #14]
 80097d6:	021b      	lsls	r3, r3, #8
 80097d8:	b21a      	sxth	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	b21b      	sxth	r3, r3
 80097e0:	4313      	orrs	r3, r2
 80097e2:	b21b      	sxth	r3, r3
 80097e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80097e6:	89fb      	ldrh	r3, [r7, #14]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3303      	adds	r3, #3
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	021b      	lsls	r3, r3, #8
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	3202      	adds	r2, #2
 800980c:	7812      	ldrb	r2, [r2, #0]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	021b      	lsls	r3, r3, #8
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	3201      	adds	r2, #1
 800981a:	7812      	ldrb	r2, [r2, #0]
 800981c:	4313      	orrs	r3, r2
 800981e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	021b      	lsls	r3, r3, #8
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	7812      	ldrb	r2, [r2, #0]
 8009828:	4313      	orrs	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]
	return rv;
 800982c:	68fb      	ldr	r3, [r7, #12]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	460b      	mov	r3, r1
 8009844:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	887a      	ldrh	r2, [r7, #2]
 800984e:	b2d2      	uxtb	r2, r2
 8009850:	701a      	strb	r2, [r3, #0]
 8009852:	887b      	ldrh	r3, [r7, #2]
 8009854:	0a1b      	lsrs	r3, r3, #8
 8009856:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	607a      	str	r2, [r7, #4]
 800985e:	887a      	ldrh	r2, [r7, #2]
 8009860:	b2d2      	uxtb	r2, r2
 8009862:	701a      	strb	r2, [r3, #0]
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	1c5a      	adds	r2, r3, #1
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	0a1b      	lsrs	r3, r3, #8
 800988a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	607a      	str	r2, [r7, #4]
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	b2d2      	uxtb	r2, r2
 8009896:	701a      	strb	r2, [r3, #0]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	0a1b      	lsrs	r3, r3, #8
 800989c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	607a      	str	r2, [r7, #4]
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	b2d2      	uxtb	r2, r2
 80098a8:	701a      	strb	r2, [r3, #0]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	0a1b      	lsrs	r3, r3, #8
 80098ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	607a      	str	r2, [r7, #4]
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	b2d2      	uxtb	r2, r2
 80098ba:	701a      	strb	r2, [r3, #0]
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00d      	beq.n	80098fe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	1c53      	adds	r3, r2, #1
 80098e6:	613b      	str	r3, [r7, #16]
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	1c59      	adds	r1, r3, #1
 80098ec:	6179      	str	r1, [r7, #20]
 80098ee:	7812      	ldrb	r2, [r2, #0]
 80098f0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	607b      	str	r3, [r7, #4]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1f1      	bne.n	80098e2 <mem_cpy+0x1a>
	}
}
 80098fe:	bf00      	nop
 8009900:	371c      	adds	r7, #28
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800990a:	b480      	push	{r7}
 800990c:	b087      	sub	sp, #28
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	1c5a      	adds	r2, r3, #1
 800991e:	617a      	str	r2, [r7, #20]
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	b2d2      	uxtb	r2, r2
 8009924:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	3b01      	subs	r3, #1
 800992a:	607b      	str	r3, [r7, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1f3      	bne.n	800991a <mem_set+0x10>
}
 8009932:	bf00      	nop
 8009934:	bf00      	nop
 8009936:	371c      	adds	r7, #28
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009940:	b480      	push	{r7}
 8009942:	b089      	sub	sp, #36	; 0x24
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	61fb      	str	r3, [r7, #28]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	1c5a      	adds	r2, r3, #1
 800995c:	61fa      	str	r2, [r7, #28]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	4619      	mov	r1, r3
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	61ba      	str	r2, [r7, #24]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	1acb      	subs	r3, r1, r3
 800996c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	3b01      	subs	r3, #1
 8009972:	607b      	str	r3, [r7, #4]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d002      	beq.n	8009980 <mem_cmp+0x40>
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0eb      	beq.n	8009958 <mem_cmp+0x18>

	return r;
 8009980:	697b      	ldr	r3, [r7, #20]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3724      	adds	r7, #36	; 0x24
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009998:	e002      	b.n	80099a0 <chk_chr+0x12>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	3301      	adds	r3, #1
 800999e:	607b      	str	r3, [r7, #4]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d005      	beq.n	80099b4 <chk_chr+0x26>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	461a      	mov	r2, r3
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d1f2      	bne.n	800999a <chk_chr+0xc>
	return *str;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	781b      	ldrb	r3, [r3, #0]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099ce:	2300      	movs	r3, #0
 80099d0:	60bb      	str	r3, [r7, #8]
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	60fb      	str	r3, [r7, #12]
 80099d6:	e029      	b.n	8009a2c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80099d8:	4a27      	ldr	r2, [pc, #156]	; (8009a78 <chk_lock+0xb4>)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	011b      	lsls	r3, r3, #4
 80099de:	4413      	add	r3, r2
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d01d      	beq.n	8009a22 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80099e6:	4a24      	ldr	r2, [pc, #144]	; (8009a78 <chk_lock+0xb4>)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	011b      	lsls	r3, r3, #4
 80099ec:	4413      	add	r3, r2
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d116      	bne.n	8009a26 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80099f8:	4a1f      	ldr	r2, [pc, #124]	; (8009a78 <chk_lock+0xb4>)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	011b      	lsls	r3, r3, #4
 80099fe:	4413      	add	r3, r2
 8009a00:	3304      	adds	r3, #4
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d10c      	bne.n	8009a26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a0c:	4a1a      	ldr	r2, [pc, #104]	; (8009a78 <chk_lock+0xb4>)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	011b      	lsls	r3, r3, #4
 8009a12:	4413      	add	r3, r2
 8009a14:	3308      	adds	r3, #8
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d102      	bne.n	8009a26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a20:	e007      	b.n	8009a32 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009a22:	2301      	movs	r3, #1
 8009a24:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d9d2      	bls.n	80099d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d109      	bne.n	8009a4c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d102      	bne.n	8009a44 <chk_lock+0x80>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d101      	bne.n	8009a48 <chk_lock+0x84>
 8009a44:	2300      	movs	r3, #0
 8009a46:	e010      	b.n	8009a6a <chk_lock+0xa6>
 8009a48:	2312      	movs	r3, #18
 8009a4a:	e00e      	b.n	8009a6a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d108      	bne.n	8009a64 <chk_lock+0xa0>
 8009a52:	4a09      	ldr	r2, [pc, #36]	; (8009a78 <chk_lock+0xb4>)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	011b      	lsls	r3, r3, #4
 8009a58:	4413      	add	r3, r2
 8009a5a:	330c      	adds	r3, #12
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a62:	d101      	bne.n	8009a68 <chk_lock+0xa4>
 8009a64:	2310      	movs	r3, #16
 8009a66:	e000      	b.n	8009a6a <chk_lock+0xa6>
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	200001a0 	.word	0x200001a0

08009a7c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a82:	2300      	movs	r3, #0
 8009a84:	607b      	str	r3, [r7, #4]
 8009a86:	e002      	b.n	8009a8e <enq_lock+0x12>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	607b      	str	r3, [r7, #4]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d806      	bhi.n	8009aa2 <enq_lock+0x26>
 8009a94:	4a09      	ldr	r2, [pc, #36]	; (8009abc <enq_lock+0x40>)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	011b      	lsls	r3, r3, #4
 8009a9a:	4413      	add	r3, r2
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1f2      	bne.n	8009a88 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	bf14      	ite	ne
 8009aa8:	2301      	movne	r3, #1
 8009aaa:	2300      	moveq	r3, #0
 8009aac:	b2db      	uxtb	r3, r3
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	200001a0 	.word	0x200001a0

08009ac0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009aca:	2300      	movs	r3, #0
 8009acc:	60fb      	str	r3, [r7, #12]
 8009ace:	e01f      	b.n	8009b10 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009ad0:	4a41      	ldr	r2, [pc, #260]	; (8009bd8 <inc_lock+0x118>)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	011b      	lsls	r3, r3, #4
 8009ad6:	4413      	add	r3, r2
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d113      	bne.n	8009b0a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009ae2:	4a3d      	ldr	r2, [pc, #244]	; (8009bd8 <inc_lock+0x118>)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	011b      	lsls	r3, r3, #4
 8009ae8:	4413      	add	r3, r2
 8009aea:	3304      	adds	r3, #4
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d109      	bne.n	8009b0a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009af6:	4a38      	ldr	r2, [pc, #224]	; (8009bd8 <inc_lock+0x118>)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	011b      	lsls	r3, r3, #4
 8009afc:	4413      	add	r3, r2
 8009afe:	3308      	adds	r3, #8
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d006      	beq.n	8009b18 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d9dc      	bls.n	8009ad0 <inc_lock+0x10>
 8009b16:	e000      	b.n	8009b1a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009b18:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d132      	bne.n	8009b86 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b20:	2300      	movs	r3, #0
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	e002      	b.n	8009b2c <inc_lock+0x6c>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d806      	bhi.n	8009b40 <inc_lock+0x80>
 8009b32:	4a29      	ldr	r2, [pc, #164]	; (8009bd8 <inc_lock+0x118>)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	011b      	lsls	r3, r3, #4
 8009b38:	4413      	add	r3, r2
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1f2      	bne.n	8009b26 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d101      	bne.n	8009b4a <inc_lock+0x8a>
 8009b46:	2300      	movs	r3, #0
 8009b48:	e040      	b.n	8009bcc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	4922      	ldr	r1, [pc, #136]	; (8009bd8 <inc_lock+0x118>)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	011b      	lsls	r3, r3, #4
 8009b54:	440b      	add	r3, r1
 8009b56:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689a      	ldr	r2, [r3, #8]
 8009b5c:	491e      	ldr	r1, [pc, #120]	; (8009bd8 <inc_lock+0x118>)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	011b      	lsls	r3, r3, #4
 8009b62:	440b      	add	r3, r1
 8009b64:	3304      	adds	r3, #4
 8009b66:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	695a      	ldr	r2, [r3, #20]
 8009b6c:	491a      	ldr	r1, [pc, #104]	; (8009bd8 <inc_lock+0x118>)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	011b      	lsls	r3, r3, #4
 8009b72:	440b      	add	r3, r1
 8009b74:	3308      	adds	r3, #8
 8009b76:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009b78:	4a17      	ldr	r2, [pc, #92]	; (8009bd8 <inc_lock+0x118>)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	011b      	lsls	r3, r3, #4
 8009b7e:	4413      	add	r3, r2
 8009b80:	330c      	adds	r3, #12
 8009b82:	2200      	movs	r2, #0
 8009b84:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d009      	beq.n	8009ba0 <inc_lock+0xe0>
 8009b8c:	4a12      	ldr	r2, [pc, #72]	; (8009bd8 <inc_lock+0x118>)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	011b      	lsls	r3, r3, #4
 8009b92:	4413      	add	r3, r2
 8009b94:	330c      	adds	r3, #12
 8009b96:	881b      	ldrh	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d001      	beq.n	8009ba0 <inc_lock+0xe0>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	e015      	b.n	8009bcc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d108      	bne.n	8009bb8 <inc_lock+0xf8>
 8009ba6:	4a0c      	ldr	r2, [pc, #48]	; (8009bd8 <inc_lock+0x118>)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	011b      	lsls	r3, r3, #4
 8009bac:	4413      	add	r3, r2
 8009bae:	330c      	adds	r3, #12
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	e001      	b.n	8009bbc <inc_lock+0xfc>
 8009bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bbc:	4906      	ldr	r1, [pc, #24]	; (8009bd8 <inc_lock+0x118>)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	011b      	lsls	r3, r3, #4
 8009bc2:	440b      	add	r3, r1
 8009bc4:	330c      	adds	r3, #12
 8009bc6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3301      	adds	r3, #1
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	200001a0 	.word	0x200001a0

08009bdc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	607b      	str	r3, [r7, #4]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d825      	bhi.n	8009c3c <dec_lock+0x60>
		n = Files[i].ctr;
 8009bf0:	4a17      	ldr	r2, [pc, #92]	; (8009c50 <dec_lock+0x74>)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	011b      	lsls	r3, r3, #4
 8009bf6:	4413      	add	r3, r2
 8009bf8:	330c      	adds	r3, #12
 8009bfa:	881b      	ldrh	r3, [r3, #0]
 8009bfc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009bfe:	89fb      	ldrh	r3, [r7, #14]
 8009c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c04:	d101      	bne.n	8009c0a <dec_lock+0x2e>
 8009c06:	2300      	movs	r3, #0
 8009c08:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009c0a:	89fb      	ldrh	r3, [r7, #14]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <dec_lock+0x3a>
 8009c10:	89fb      	ldrh	r3, [r7, #14]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c16:	4a0e      	ldr	r2, [pc, #56]	; (8009c50 <dec_lock+0x74>)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	011b      	lsls	r3, r3, #4
 8009c1c:	4413      	add	r3, r2
 8009c1e:	330c      	adds	r3, #12
 8009c20:	89fa      	ldrh	r2, [r7, #14]
 8009c22:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c24:	89fb      	ldrh	r3, [r7, #14]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d105      	bne.n	8009c36 <dec_lock+0x5a>
 8009c2a:	4a09      	ldr	r2, [pc, #36]	; (8009c50 <dec_lock+0x74>)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	011b      	lsls	r3, r3, #4
 8009c30:	4413      	add	r3, r2
 8009c32:	2200      	movs	r2, #0
 8009c34:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	737b      	strb	r3, [r7, #13]
 8009c3a:	e001      	b.n	8009c40 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c40:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	200001a0 	.word	0x200001a0

08009c54 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	e010      	b.n	8009c84 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c62:	4a0d      	ldr	r2, [pc, #52]	; (8009c98 <clear_lock+0x44>)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	011b      	lsls	r3, r3, #4
 8009c68:	4413      	add	r3, r2
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d105      	bne.n	8009c7e <clear_lock+0x2a>
 8009c72:	4a09      	ldr	r2, [pc, #36]	; (8009c98 <clear_lock+0x44>)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	4413      	add	r3, r2
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3301      	adds	r3, #1
 8009c82:	60fb      	str	r3, [r7, #12]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d9eb      	bls.n	8009c62 <clear_lock+0xe>
	}
}
 8009c8a:	bf00      	nop
 8009c8c:	bf00      	nop
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	200001a0 	.word	0x200001a0

08009c9c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	78db      	ldrb	r3, [r3, #3]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d034      	beq.n	8009d1a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	7858      	ldrb	r0, [r3, #1]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	f7ff fd40 	bl	8009748 <disk_write>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d002      	beq.n	8009cd4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	73fb      	strb	r3, [r7, #15]
 8009cd2:	e022      	b.n	8009d1a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	1ad2      	subs	r2, r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d217      	bcs.n	8009d1a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	789b      	ldrb	r3, [r3, #2]
 8009cee:	613b      	str	r3, [r7, #16]
 8009cf0:	e010      	b.n	8009d14 <sync_window+0x78>
					wsect += fs->fsize;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	7858      	ldrb	r0, [r3, #1]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d06:	2301      	movs	r3, #1
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	f7ff fd1d 	bl	8009748 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	613b      	str	r3, [r7, #16]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d8eb      	bhi.n	8009cf2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d01b      	beq.n	8009d74 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7ff ffad 	bl	8009c9c <sync_window>
 8009d42:	4603      	mov	r3, r0
 8009d44:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d113      	bne.n	8009d74 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	7858      	ldrb	r0, [r3, #1]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d56:	2301      	movs	r3, #1
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	f7ff fcd5 	bl	8009708 <disk_read>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d004      	beq.n	8009d6e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d68:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff ff87 	bl	8009c9c <sync_window>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d158      	bne.n	8009e4a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d148      	bne.n	8009e32 <sync_fs+0xb2>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	791b      	ldrb	r3, [r3, #4]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d144      	bne.n	8009e32 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	3330      	adds	r3, #48	; 0x30
 8009dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009db0:	2100      	movs	r1, #0
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7ff fda9 	bl	800990a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3330      	adds	r3, #48	; 0x30
 8009dbc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009dc0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7ff fd38 	bl	800983a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	3330      	adds	r3, #48	; 0x30
 8009dce:	4921      	ldr	r1, [pc, #132]	; (8009e54 <sync_fs+0xd4>)
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7ff fd4d 	bl	8009870 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3330      	adds	r3, #48	; 0x30
 8009dda:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009dde:	491e      	ldr	r1, [pc, #120]	; (8009e58 <sync_fs+0xd8>)
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7ff fd45 	bl	8009870 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3330      	adds	r3, #48	; 0x30
 8009dea:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	4619      	mov	r1, r3
 8009df4:	4610      	mov	r0, r2
 8009df6:	f7ff fd3b 	bl	8009870 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3330      	adds	r3, #48	; 0x30
 8009dfe:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	4619      	mov	r1, r3
 8009e08:	4610      	mov	r0, r2
 8009e0a:	f7ff fd31 	bl	8009870 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	69db      	ldr	r3, [r3, #28]
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	7858      	ldrb	r0, [r3, #1]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e26:	2301      	movs	r3, #1
 8009e28:	f7ff fc8e 	bl	8009748 <disk_write>
			fs->fsi_flag = 0;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	785b      	ldrb	r3, [r3, #1]
 8009e36:	2200      	movs	r2, #0
 8009e38:	2100      	movs	r1, #0
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7ff fca4 	bl	8009788 <disk_ioctl>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <sync_fs+0xca>
 8009e46:	2301      	movs	r3, #1
 8009e48:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	41615252 	.word	0x41615252
 8009e58:	61417272 	.word	0x61417272

08009e5c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	3b02      	subs	r3, #2
 8009e6a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	3b02      	subs	r3, #2
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d301      	bcc.n	8009e7c <clust2sect+0x20>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	e008      	b.n	8009e8e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	895b      	ldrh	r3, [r3, #10]
 8009e80:	461a      	mov	r2, r3
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	fb03 f202 	mul.w	r2, r3, r2
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8c:	4413      	add	r3, r2
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b086      	sub	sp, #24
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d904      	bls.n	8009eba <get_fat+0x20>
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d302      	bcc.n	8009ec0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009eba:	2301      	movs	r3, #1
 8009ebc:	617b      	str	r3, [r7, #20]
 8009ebe:	e08f      	b.n	8009fe0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ec4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	d062      	beq.n	8009f94 <get_fat+0xfa>
 8009ece:	2b03      	cmp	r3, #3
 8009ed0:	dc7c      	bgt.n	8009fcc <get_fat+0x132>
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d002      	beq.n	8009edc <get_fat+0x42>
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d042      	beq.n	8009f60 <get_fat+0xc6>
 8009eda:	e077      	b.n	8009fcc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	085b      	lsrs	r3, r3, #1
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	6a1a      	ldr	r2, [r3, #32]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	0a5b      	lsrs	r3, r3, #9
 8009ef2:	4413      	add	r3, r2
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6938      	ldr	r0, [r7, #16]
 8009ef8:	f7ff ff14 	bl	8009d24 <move_window>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d167      	bne.n	8009fd2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	60fa      	str	r2, [r7, #12]
 8009f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f14:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	6a1a      	ldr	r2, [r3, #32]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	0a5b      	lsrs	r3, r3, #9
 8009f1e:	4413      	add	r3, r2
 8009f20:	4619      	mov	r1, r3
 8009f22:	6938      	ldr	r0, [r7, #16]
 8009f24:	f7ff fefe 	bl	8009d24 <move_window>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d153      	bne.n	8009fd6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	4413      	add	r3, r2
 8009f38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f3c:	021b      	lsls	r3, r3, #8
 8009f3e:	461a      	mov	r2, r3
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <get_fat+0xbc>
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	091b      	lsrs	r3, r3, #4
 8009f54:	e002      	b.n	8009f5c <get_fat+0xc2>
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f5c:	617b      	str	r3, [r7, #20]
			break;
 8009f5e:	e03f      	b.n	8009fe0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	6a1a      	ldr	r2, [r3, #32]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	0a1b      	lsrs	r3, r3, #8
 8009f68:	4413      	add	r3, r2
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6938      	ldr	r0, [r7, #16]
 8009f6e:	f7ff fed9 	bl	8009d24 <move_window>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d130      	bne.n	8009fda <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009f86:	4413      	add	r3, r2
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7ff fc1b 	bl	80097c4 <ld_word>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	617b      	str	r3, [r7, #20]
			break;
 8009f92:	e025      	b.n	8009fe0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	6a1a      	ldr	r2, [r3, #32]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	09db      	lsrs	r3, r3, #7
 8009f9c:	4413      	add	r3, r2
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	6938      	ldr	r0, [r7, #16]
 8009fa2:	f7ff febf 	bl	8009d24 <move_window>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d118      	bne.n	8009fde <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009fba:	4413      	add	r3, r2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7ff fc19 	bl	80097f4 <ld_dword>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009fc8:	617b      	str	r3, [r7, #20]
			break;
 8009fca:	e009      	b.n	8009fe0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009fcc:	2301      	movs	r3, #1
 8009fce:	617b      	str	r3, [r7, #20]
 8009fd0:	e006      	b.n	8009fe0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fd2:	bf00      	nop
 8009fd4:	e004      	b.n	8009fe0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fd6:	bf00      	nop
 8009fd8:	e002      	b.n	8009fe0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009fda:	bf00      	nop
 8009fdc:	e000      	b.n	8009fe0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009fde:	bf00      	nop
		}
	}

	return val;
 8009fe0:	697b      	ldr	r3, [r7, #20]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009fea:	b590      	push	{r4, r7, lr}
 8009fec:	b089      	sub	sp, #36	; 0x24
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	f240 80d2 	bls.w	800a1a6 <put_fat+0x1bc>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	429a      	cmp	r2, r3
 800a00a:	f080 80cc 	bcs.w	800a1a6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	2b03      	cmp	r3, #3
 800a014:	f000 8096 	beq.w	800a144 <put_fat+0x15a>
 800a018:	2b03      	cmp	r3, #3
 800a01a:	f300 80cd 	bgt.w	800a1b8 <put_fat+0x1ce>
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d002      	beq.n	800a028 <put_fat+0x3e>
 800a022:	2b02      	cmp	r3, #2
 800a024:	d06e      	beq.n	800a104 <put_fat+0x11a>
 800a026:	e0c7      	b.n	800a1b8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	61bb      	str	r3, [r7, #24]
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	085b      	lsrs	r3, r3, #1
 800a030:	69ba      	ldr	r2, [r7, #24]
 800a032:	4413      	add	r3, r2
 800a034:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6a1a      	ldr	r2, [r3, #32]
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	0a5b      	lsrs	r3, r3, #9
 800a03e:	4413      	add	r3, r2
 800a040:	4619      	mov	r1, r3
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f7ff fe6e 	bl	8009d24 <move_window>
 800a048:	4603      	mov	r3, r0
 800a04a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a04c:	7ffb      	ldrb	r3, [r7, #31]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f040 80ab 	bne.w	800a1aa <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	1c59      	adds	r1, r3, #1
 800a05e:	61b9      	str	r1, [r7, #24]
 800a060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a064:	4413      	add	r3, r2
 800a066:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	f003 0301 	and.w	r3, r3, #1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00d      	beq.n	800a08e <put_fat+0xa4>
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	b25b      	sxtb	r3, r3
 800a078:	f003 030f 	and.w	r3, r3, #15
 800a07c:	b25a      	sxtb	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	b2db      	uxtb	r3, r3
 800a082:	011b      	lsls	r3, r3, #4
 800a084:	b25b      	sxtb	r3, r3
 800a086:	4313      	orrs	r3, r2
 800a088:	b25b      	sxtb	r3, r3
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	e001      	b.n	800a092 <put_fat+0xa8>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	b2db      	uxtb	r3, r3
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6a1a      	ldr	r2, [r3, #32]
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	0a5b      	lsrs	r3, r3, #9
 800a0a4:	4413      	add	r3, r2
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f7ff fe3b 	bl	8009d24 <move_window>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a0b2:	7ffb      	ldrb	r3, [r7, #31]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d17a      	bne.n	800a1ae <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c4:	4413      	add	r3, r2
 800a0c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <put_fat+0xf0>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	091b      	lsrs	r3, r3, #4
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	e00e      	b.n	800a0f8 <put_fat+0x10e>
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	b25b      	sxtb	r3, r3
 800a0e0:	f023 030f 	bic.w	r3, r3, #15
 800a0e4:	b25a      	sxtb	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	0a1b      	lsrs	r3, r3, #8
 800a0ea:	b25b      	sxtb	r3, r3
 800a0ec:	f003 030f 	and.w	r3, r3, #15
 800a0f0:	b25b      	sxtb	r3, r3
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	b25b      	sxtb	r3, r3
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2201      	movs	r2, #1
 800a100:	70da      	strb	r2, [r3, #3]
			break;
 800a102:	e059      	b.n	800a1b8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6a1a      	ldr	r2, [r3, #32]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	0a1b      	lsrs	r3, r3, #8
 800a10c:	4413      	add	r3, r2
 800a10e:	4619      	mov	r1, r3
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7ff fe07 	bl	8009d24 <move_window>
 800a116:	4603      	mov	r3, r0
 800a118:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a11a:	7ffb      	ldrb	r3, [r7, #31]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d148      	bne.n	800a1b2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	005b      	lsls	r3, r3, #1
 800a12a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a12e:	4413      	add	r3, r2
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	b292      	uxth	r2, r2
 800a134:	4611      	mov	r1, r2
 800a136:	4618      	mov	r0, r3
 800a138:	f7ff fb7f 	bl	800983a <st_word>
			fs->wflag = 1;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2201      	movs	r2, #1
 800a140:	70da      	strb	r2, [r3, #3]
			break;
 800a142:	e039      	b.n	800a1b8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6a1a      	ldr	r2, [r3, #32]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	09db      	lsrs	r3, r3, #7
 800a14c:	4413      	add	r3, r2
 800a14e:	4619      	mov	r1, r3
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f7ff fde7 	bl	8009d24 <move_window>
 800a156:	4603      	mov	r3, r0
 800a158:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a15a:	7ffb      	ldrb	r3, [r7, #31]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d12a      	bne.n	800a1b6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a174:	4413      	add	r3, r2
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff fb3c 	bl	80097f4 <ld_dword>
 800a17c:	4603      	mov	r3, r0
 800a17e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a182:	4323      	orrs	r3, r4
 800a184:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a194:	4413      	add	r3, r2
 800a196:	6879      	ldr	r1, [r7, #4]
 800a198:	4618      	mov	r0, r3
 800a19a:	f7ff fb69 	bl	8009870 <st_dword>
			fs->wflag = 1;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	70da      	strb	r2, [r3, #3]
			break;
 800a1a4:	e008      	b.n	800a1b8 <put_fat+0x1ce>
		}
	}
 800a1a6:	bf00      	nop
 800a1a8:	e006      	b.n	800a1b8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a1aa:	bf00      	nop
 800a1ac:	e004      	b.n	800a1b8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a1ae:	bf00      	nop
 800a1b0:	e002      	b.n	800a1b8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a1b2:	bf00      	nop
 800a1b4:	e000      	b.n	800a1b8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a1b6:	bf00      	nop
	return res;
 800a1b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3724      	adds	r7, #36	; 0x24
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd90      	pop	{r4, r7, pc}

0800a1c2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b088      	sub	sp, #32
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d904      	bls.n	800a1e8 <remove_chain+0x26>
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d301      	bcc.n	800a1ec <remove_chain+0x2a>
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	e04b      	b.n	800a284 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00c      	beq.n	800a20c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a1f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	69b8      	ldr	r0, [r7, #24]
 800a1fa:	f7ff fef6 	bl	8009fea <put_fat>
 800a1fe:	4603      	mov	r3, r0
 800a200:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a202:	7ffb      	ldrb	r3, [r7, #31]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <remove_chain+0x4a>
 800a208:	7ffb      	ldrb	r3, [r7, #31]
 800a20a:	e03b      	b.n	800a284 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a20c:	68b9      	ldr	r1, [r7, #8]
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7ff fe43 	bl	8009e9a <get_fat>
 800a214:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d031      	beq.n	800a280 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d101      	bne.n	800a226 <remove_chain+0x64>
 800a222:	2302      	movs	r3, #2
 800a224:	e02e      	b.n	800a284 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a22c:	d101      	bne.n	800a232 <remove_chain+0x70>
 800a22e:	2301      	movs	r3, #1
 800a230:	e028      	b.n	800a284 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a232:	2200      	movs	r2, #0
 800a234:	68b9      	ldr	r1, [r7, #8]
 800a236:	69b8      	ldr	r0, [r7, #24]
 800a238:	f7ff fed7 	bl	8009fea <put_fat>
 800a23c:	4603      	mov	r3, r0
 800a23e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a240:	7ffb      	ldrb	r3, [r7, #31]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <remove_chain+0x88>
 800a246:	7ffb      	ldrb	r3, [r7, #31]
 800a248:	e01c      	b.n	800a284 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	691a      	ldr	r2, [r3, #16]
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	3b02      	subs	r3, #2
 800a254:	429a      	cmp	r2, r3
 800a256:	d20b      	bcs.n	800a270 <remove_chain+0xae>
			fs->free_clst++;
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	791b      	ldrb	r3, [r3, #4]
 800a266:	f043 0301 	orr.w	r3, r3, #1
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	695b      	ldr	r3, [r3, #20]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d3c6      	bcc.n	800a20c <remove_chain+0x4a>
 800a27e:	e000      	b.n	800a282 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a280:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3720      	adds	r7, #32
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10d      	bne.n	800a2be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d004      	beq.n	800a2b8 <create_chain+0x2c>
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d31b      	bcc.n	800a2f0 <create_chain+0x64>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	61bb      	str	r3, [r7, #24]
 800a2bc:	e018      	b.n	800a2f0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7ff fdea 	bl	8009e9a <get_fat>
 800a2c6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d801      	bhi.n	800a2d2 <create_chain+0x46>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e070      	b.n	800a3b4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d8:	d101      	bne.n	800a2de <create_chain+0x52>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	e06a      	b.n	800a3b4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d201      	bcs.n	800a2ec <create_chain+0x60>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	e063      	b.n	800a3b4 <create_chain+0x128>
		scl = clst;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	69fa      	ldr	r2, [r7, #28]
 800a300:	429a      	cmp	r2, r3
 800a302:	d307      	bcc.n	800a314 <create_chain+0x88>
				ncl = 2;
 800a304:	2302      	movs	r3, #2
 800a306:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a308:	69fa      	ldr	r2, [r7, #28]
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d901      	bls.n	800a314 <create_chain+0x88>
 800a310:	2300      	movs	r3, #0
 800a312:	e04f      	b.n	800a3b4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a314:	69f9      	ldr	r1, [r7, #28]
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7ff fdbf 	bl	8009e9a <get_fat>
 800a31c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00e      	beq.n	800a342 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d003      	beq.n	800a332 <create_chain+0xa6>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a330:	d101      	bne.n	800a336 <create_chain+0xaa>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	e03e      	b.n	800a3b4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a336:	69fa      	ldr	r2, [r7, #28]
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d1da      	bne.n	800a2f4 <create_chain+0x68>
 800a33e:	2300      	movs	r3, #0
 800a340:	e038      	b.n	800a3b4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a342:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a348:	69f9      	ldr	r1, [r7, #28]
 800a34a:	6938      	ldr	r0, [r7, #16]
 800a34c:	f7ff fe4d 	bl	8009fea <put_fat>
 800a350:	4603      	mov	r3, r0
 800a352:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a354:	7dfb      	ldrb	r3, [r7, #23]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d109      	bne.n	800a36e <create_chain+0xe2>
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d006      	beq.n	800a36e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a360:	69fa      	ldr	r2, [r7, #28]
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6938      	ldr	r0, [r7, #16]
 800a366:	f7ff fe40 	bl	8009fea <put_fat>
 800a36a:	4603      	mov	r3, r0
 800a36c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a36e:	7dfb      	ldrb	r3, [r7, #23]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d116      	bne.n	800a3a2 <create_chain+0x116>
		fs->last_clst = ncl;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	69fa      	ldr	r2, [r7, #28]
 800a378:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	691a      	ldr	r2, [r3, #16]
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	3b02      	subs	r3, #2
 800a384:	429a      	cmp	r2, r3
 800a386:	d804      	bhi.n	800a392 <create_chain+0x106>
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	1e5a      	subs	r2, r3, #1
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	791b      	ldrb	r3, [r3, #4]
 800a396:	f043 0301 	orr.w	r3, r3, #1
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	711a      	strb	r2, [r3, #4]
 800a3a0:	e007      	b.n	800a3b2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d102      	bne.n	800a3ae <create_chain+0x122>
 800a3a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3ac:	e000      	b.n	800a3b0 <create_chain+0x124>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a3b2:	69fb      	ldr	r3, [r7, #28]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3720      	adds	r7, #32
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b087      	sub	sp, #28
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	0a5b      	lsrs	r3, r3, #9
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	8952      	ldrh	r2, [r2, #10]
 800a3dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	1d1a      	adds	r2, r3, #4
 800a3e6:	613a      	str	r2, [r7, #16]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <clmt_clust+0x3a>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e010      	b.n	800a418 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d307      	bcc.n	800a40e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	617b      	str	r3, [r7, #20]
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	3304      	adds	r3, #4
 800a40a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a40c:	e7e9      	b.n	800a3e2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a40e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	4413      	add	r3, r2
}
 800a418:	4618      	mov	r0, r3
 800a41a:	371c      	adds	r7, #28
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a43a:	d204      	bcs.n	800a446 <dir_sdi+0x22>
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	f003 031f 	and.w	r3, r3, #31
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <dir_sdi+0x26>
		return FR_INT_ERR;
 800a446:	2302      	movs	r3, #2
 800a448:	e063      	b.n	800a512 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d106      	bne.n	800a46a <dir_sdi+0x46>
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	2b02      	cmp	r3, #2
 800a462:	d902      	bls.n	800a46a <dir_sdi+0x46>
		clst = fs->dirbase;
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a468:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10c      	bne.n	800a48a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	095b      	lsrs	r3, r3, #5
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	8912      	ldrh	r2, [r2, #8]
 800a478:	4293      	cmp	r3, r2
 800a47a:	d301      	bcc.n	800a480 <dir_sdi+0x5c>
 800a47c:	2302      	movs	r3, #2
 800a47e:	e048      	b.n	800a512 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	61da      	str	r2, [r3, #28]
 800a488:	e029      	b.n	800a4de <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	895b      	ldrh	r3, [r3, #10]
 800a48e:	025b      	lsls	r3, r3, #9
 800a490:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a492:	e019      	b.n	800a4c8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6979      	ldr	r1, [r7, #20]
 800a498:	4618      	mov	r0, r3
 800a49a:	f7ff fcfe 	bl	8009e9a <get_fat>
 800a49e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4a6:	d101      	bne.n	800a4ac <dir_sdi+0x88>
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e032      	b.n	800a512 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d904      	bls.n	800a4bc <dir_sdi+0x98>
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d301      	bcc.n	800a4c0 <dir_sdi+0x9c>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	e028      	b.n	800a512 <dir_sdi+0xee>
			ofs -= csz;
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a4c8:	683a      	ldr	r2, [r7, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d2e1      	bcs.n	800a494 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a4d0:	6979      	ldr	r1, [r7, #20]
 800a4d2:	6938      	ldr	r0, [r7, #16]
 800a4d4:	f7ff fcc2 	bl	8009e5c <clust2sect>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	69db      	ldr	r3, [r3, #28]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <dir_sdi+0xcc>
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	e010      	b.n	800a512 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	69da      	ldr	r2, [r3, #28]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	0a5b      	lsrs	r3, r3, #9
 800a4f8:	441a      	add	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50a:	441a      	add	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3718      	adds	r7, #24
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b086      	sub	sp, #24
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	3320      	adds	r3, #32
 800a530:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	69db      	ldr	r3, [r3, #28]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <dir_next+0x28>
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a540:	d301      	bcc.n	800a546 <dir_next+0x2c>
 800a542:	2304      	movs	r3, #4
 800a544:	e0aa      	b.n	800a69c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f040 8098 	bne.w	800a682 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10b      	bne.n	800a57c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	095b      	lsrs	r3, r3, #5
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	8912      	ldrh	r2, [r2, #8]
 800a56c:	4293      	cmp	r3, r2
 800a56e:	f0c0 8088 	bcc.w	800a682 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	61da      	str	r2, [r3, #28]
 800a578:	2304      	movs	r3, #4
 800a57a:	e08f      	b.n	800a69c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	0a5b      	lsrs	r3, r3, #9
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	8952      	ldrh	r2, [r2, #10]
 800a584:	3a01      	subs	r2, #1
 800a586:	4013      	ands	r3, r2
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d17a      	bne.n	800a682 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	4619      	mov	r1, r3
 800a594:	4610      	mov	r0, r2
 800a596:	f7ff fc80 	bl	8009e9a <get_fat>
 800a59a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d801      	bhi.n	800a5a6 <dir_next+0x8c>
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	e07a      	b.n	800a69c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5ac:	d101      	bne.n	800a5b2 <dir_next+0x98>
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e074      	b.n	800a69c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d358      	bcc.n	800a66e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d104      	bne.n	800a5cc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	61da      	str	r2, [r3, #28]
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	e067      	b.n	800a69c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	699b      	ldr	r3, [r3, #24]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	f7ff fe59 	bl	800a28c <create_chain>
 800a5da:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <dir_next+0xcc>
 800a5e2:	2307      	movs	r3, #7
 800a5e4:	e05a      	b.n	800a69c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d101      	bne.n	800a5f0 <dir_next+0xd6>
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	e055      	b.n	800a69c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5f6:	d101      	bne.n	800a5fc <dir_next+0xe2>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e04f      	b.n	800a69c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f7ff fb4d 	bl	8009c9c <sync_window>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <dir_next+0xf2>
 800a608:	2301      	movs	r3, #1
 800a60a:	e047      	b.n	800a69c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	3330      	adds	r3, #48	; 0x30
 800a610:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a614:	2100      	movs	r1, #0
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff f977 	bl	800990a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a61c:	2300      	movs	r3, #0
 800a61e:	613b      	str	r3, [r7, #16]
 800a620:	6979      	ldr	r1, [r7, #20]
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f7ff fc1a 	bl	8009e5c <clust2sect>
 800a628:	4602      	mov	r2, r0
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	62da      	str	r2, [r3, #44]	; 0x2c
 800a62e:	e012      	b.n	800a656 <dir_next+0x13c>
						fs->wflag = 1;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2201      	movs	r2, #1
 800a634:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f7ff fb30 	bl	8009c9c <sync_window>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <dir_next+0x12c>
 800a642:	2301      	movs	r3, #1
 800a644:	e02a      	b.n	800a69c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	3301      	adds	r3, #1
 800a64a:	613b      	str	r3, [r7, #16]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a650:	1c5a      	adds	r2, r3, #1
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	62da      	str	r2, [r3, #44]	; 0x2c
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	895b      	ldrh	r3, [r3, #10]
 800a65a:	461a      	mov	r2, r3
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	4293      	cmp	r3, r2
 800a660:	d3e6      	bcc.n	800a630 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	1ad2      	subs	r2, r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a674:	6979      	ldr	r1, [r7, #20]
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f7ff fbf0 	bl	8009e5c <clust2sect>
 800a67c:	4602      	mov	r2, r0
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a694:	441a      	add	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3718      	adds	r7, #24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff feb4 	bl	800a424 <dir_sdi>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a6c0:	7dfb      	ldrb	r3, [r7, #23]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d12b      	bne.n	800a71e <dir_alloc+0x7a>
		n = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	69db      	ldr	r3, [r3, #28]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f7ff fb27 	bl	8009d24 <move_window>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a6da:	7dfb      	ldrb	r3, [r7, #23]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d11d      	bne.n	800a71c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	2be5      	cmp	r3, #229	; 0xe5
 800a6e8:	d004      	beq.n	800a6f4 <dir_alloc+0x50>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d107      	bne.n	800a704 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	613b      	str	r3, [r7, #16]
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d102      	bne.n	800a708 <dir_alloc+0x64>
 800a702:	e00c      	b.n	800a71e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a704:	2300      	movs	r3, #0
 800a706:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a708:	2101      	movs	r1, #1
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff ff05 	bl	800a51a <dir_next>
 800a710:	4603      	mov	r3, r0
 800a712:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a714:	7dfb      	ldrb	r3, [r7, #23]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0d7      	beq.n	800a6ca <dir_alloc+0x26>
 800a71a:	e000      	b.n	800a71e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a71c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	2b04      	cmp	r3, #4
 800a722:	d101      	bne.n	800a728 <dir_alloc+0x84>
 800a724:	2307      	movs	r3, #7
 800a726:	75fb      	strb	r3, [r7, #23]
	return res;
 800a728:	7dfb      	ldrb	r3, [r7, #23]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3718      	adds	r7, #24
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	331a      	adds	r3, #26
 800a740:	4618      	mov	r0, r3
 800a742:	f7ff f83f 	bl	80097c4 <ld_word>
 800a746:	4603      	mov	r3, r0
 800a748:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d109      	bne.n	800a766 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	3314      	adds	r3, #20
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff f834 	bl	80097c4 <ld_word>
 800a75c:	4603      	mov	r3, r0
 800a75e:	041b      	lsls	r3, r3, #16
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	4313      	orrs	r3, r2
 800a764:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a766:	68fb      	ldr	r3, [r7, #12]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	331a      	adds	r3, #26
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	b292      	uxth	r2, r2
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff f857 	bl	800983a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	2b03      	cmp	r3, #3
 800a792:	d109      	bne.n	800a7a8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	f103 0214 	add.w	r2, r3, #20
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	0c1b      	lsrs	r3, r3, #16
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	f7ff f849 	bl	800983a <st_word>
	}
}
 800a7a8:	bf00      	nop
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a7be:	2100      	movs	r1, #0
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7ff fe2f 	bl	800a424 <dir_sdi>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a7ca:	7dfb      	ldrb	r3, [r7, #23]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <dir_find+0x24>
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
 800a7d2:	e03e      	b.n	800a852 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	69db      	ldr	r3, [r3, #28]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6938      	ldr	r0, [r7, #16]
 800a7dc:	f7ff faa2 	bl	8009d24 <move_window>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d12f      	bne.n	800a84a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d102      	bne.n	800a7fe <dir_find+0x4e>
 800a7f8:	2304      	movs	r3, #4
 800a7fa:	75fb      	strb	r3, [r7, #23]
 800a7fc:	e028      	b.n	800a850 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	330b      	adds	r3, #11
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a1b      	ldr	r3, [r3, #32]
 800a814:	330b      	adds	r3, #11
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	f003 0308 	and.w	r3, r3, #8
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10a      	bne.n	800a836 <dir_find+0x86>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a18      	ldr	r0, [r3, #32]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3324      	adds	r3, #36	; 0x24
 800a828:	220b      	movs	r2, #11
 800a82a:	4619      	mov	r1, r3
 800a82c:	f7ff f888 	bl	8009940 <mem_cmp>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00b      	beq.n	800a84e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a836:	2100      	movs	r1, #0
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7ff fe6e 	bl	800a51a <dir_next>
 800a83e:	4603      	mov	r3, r0
 800a840:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a842:	7dfb      	ldrb	r3, [r7, #23]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d0c5      	beq.n	800a7d4 <dir_find+0x24>
 800a848:	e002      	b.n	800a850 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a84a:	bf00      	nop
 800a84c:	e000      	b.n	800a850 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a84e:	bf00      	nop

	return res;
 800a850:	7dfb      	ldrb	r3, [r7, #23]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3718      	adds	r7, #24
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a868:	2101      	movs	r1, #1
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff ff1a 	bl	800a6a4 <dir_alloc>
 800a870:	4603      	mov	r3, r0
 800a872:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d11c      	bne.n	800a8b4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	4619      	mov	r1, r3
 800a880:	68b8      	ldr	r0, [r7, #8]
 800a882:	f7ff fa4f 	bl	8009d24 <move_window>
 800a886:	4603      	mov	r3, r0
 800a888:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a88a:	7bfb      	ldrb	r3, [r7, #15]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d111      	bne.n	800a8b4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	2220      	movs	r2, #32
 800a896:	2100      	movs	r1, #0
 800a898:	4618      	mov	r0, r3
 800a89a:	f7ff f836 	bl	800990a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a18      	ldr	r0, [r3, #32]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3324      	adds	r3, #36	; 0x24
 800a8a6:	220b      	movs	r2, #11
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	f7ff f80d 	bl	80098c8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
	...

0800a8c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b088      	sub	sp, #32
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	3324      	adds	r3, #36	; 0x24
 800a8d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a8d6:	220b      	movs	r2, #11
 800a8d8:	2120      	movs	r1, #32
 800a8da:	68b8      	ldr	r0, [r7, #8]
 800a8dc:	f7ff f815 	bl	800990a <mem_set>
	si = i = 0; ni = 8;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	613b      	str	r3, [r7, #16]
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	61fb      	str	r3, [r7, #28]
 800a8e8:	2308      	movs	r3, #8
 800a8ea:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	61fa      	str	r2, [r7, #28]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a8fa:	7efb      	ldrb	r3, [r7, #27]
 800a8fc:	2b20      	cmp	r3, #32
 800a8fe:	d94e      	bls.n	800a99e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a900:	7efb      	ldrb	r3, [r7, #27]
 800a902:	2b2f      	cmp	r3, #47	; 0x2f
 800a904:	d006      	beq.n	800a914 <create_name+0x54>
 800a906:	7efb      	ldrb	r3, [r7, #27]
 800a908:	2b5c      	cmp	r3, #92	; 0x5c
 800a90a:	d110      	bne.n	800a92e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a90c:	e002      	b.n	800a914 <create_name+0x54>
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	3301      	adds	r3, #1
 800a912:	61fb      	str	r3, [r7, #28]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	4413      	add	r3, r2
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2b2f      	cmp	r3, #47	; 0x2f
 800a91e:	d0f6      	beq.n	800a90e <create_name+0x4e>
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	4413      	add	r3, r2
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	2b5c      	cmp	r3, #92	; 0x5c
 800a92a:	d0f0      	beq.n	800a90e <create_name+0x4e>
			break;
 800a92c:	e038      	b.n	800a9a0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a92e:	7efb      	ldrb	r3, [r7, #27]
 800a930:	2b2e      	cmp	r3, #46	; 0x2e
 800a932:	d003      	beq.n	800a93c <create_name+0x7c>
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d30c      	bcc.n	800a956 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	2b0b      	cmp	r3, #11
 800a940:	d002      	beq.n	800a948 <create_name+0x88>
 800a942:	7efb      	ldrb	r3, [r7, #27]
 800a944:	2b2e      	cmp	r3, #46	; 0x2e
 800a946:	d001      	beq.n	800a94c <create_name+0x8c>
 800a948:	2306      	movs	r3, #6
 800a94a:	e044      	b.n	800a9d6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a94c:	2308      	movs	r3, #8
 800a94e:	613b      	str	r3, [r7, #16]
 800a950:	230b      	movs	r3, #11
 800a952:	617b      	str	r3, [r7, #20]
			continue;
 800a954:	e022      	b.n	800a99c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a956:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	da04      	bge.n	800a968 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a95e:	7efb      	ldrb	r3, [r7, #27]
 800a960:	3b80      	subs	r3, #128	; 0x80
 800a962:	4a1f      	ldr	r2, [pc, #124]	; (800a9e0 <create_name+0x120>)
 800a964:	5cd3      	ldrb	r3, [r2, r3]
 800a966:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a968:	7efb      	ldrb	r3, [r7, #27]
 800a96a:	4619      	mov	r1, r3
 800a96c:	481d      	ldr	r0, [pc, #116]	; (800a9e4 <create_name+0x124>)
 800a96e:	f7ff f80e 	bl	800998e <chk_chr>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d001      	beq.n	800a97c <create_name+0xbc>
 800a978:	2306      	movs	r3, #6
 800a97a:	e02c      	b.n	800a9d6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a97c:	7efb      	ldrb	r3, [r7, #27]
 800a97e:	2b60      	cmp	r3, #96	; 0x60
 800a980:	d905      	bls.n	800a98e <create_name+0xce>
 800a982:	7efb      	ldrb	r3, [r7, #27]
 800a984:	2b7a      	cmp	r3, #122	; 0x7a
 800a986:	d802      	bhi.n	800a98e <create_name+0xce>
 800a988:	7efb      	ldrb	r3, [r7, #27]
 800a98a:	3b20      	subs	r3, #32
 800a98c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	1c5a      	adds	r2, r3, #1
 800a992:	613a      	str	r2, [r7, #16]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	4413      	add	r3, r2
 800a998:	7efa      	ldrb	r2, [r7, #27]
 800a99a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a99c:	e7a6      	b.n	800a8ec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a99e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	441a      	add	r2, r3
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <create_name+0xf4>
 800a9b0:	2306      	movs	r3, #6
 800a9b2:	e010      	b.n	800a9d6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	2be5      	cmp	r3, #229	; 0xe5
 800a9ba:	d102      	bne.n	800a9c2 <create_name+0x102>
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2205      	movs	r2, #5
 800a9c0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a9c2:	7efb      	ldrb	r3, [r7, #27]
 800a9c4:	2b20      	cmp	r3, #32
 800a9c6:	d801      	bhi.n	800a9cc <create_name+0x10c>
 800a9c8:	2204      	movs	r2, #4
 800a9ca:	e000      	b.n	800a9ce <create_name+0x10e>
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	330b      	adds	r3, #11
 800a9d2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a9d4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3720      	adds	r7, #32
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	0800c660 	.word	0x0800c660
 800a9e4:	0800c5bc 	.word	0x0800c5bc

0800a9e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a9fc:	e002      	b.n	800aa04 <follow_path+0x1c>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	3301      	adds	r3, #1
 800aa02:	603b      	str	r3, [r7, #0]
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	2b2f      	cmp	r3, #47	; 0x2f
 800aa0a:	d0f8      	beq.n	800a9fe <follow_path+0x16>
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b5c      	cmp	r3, #92	; 0x5c
 800aa12:	d0f4      	beq.n	800a9fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	2200      	movs	r2, #0
 800aa18:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	2b1f      	cmp	r3, #31
 800aa20:	d80a      	bhi.n	800aa38 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2280      	movs	r2, #128	; 0x80
 800aa26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7ff fcf9 	bl	800a424 <dir_sdi>
 800aa32:	4603      	mov	r3, r0
 800aa34:	75fb      	strb	r3, [r7, #23]
 800aa36:	e043      	b.n	800aac0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aa38:	463b      	mov	r3, r7
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7ff ff3f 	bl	800a8c0 <create_name>
 800aa42:	4603      	mov	r3, r0
 800aa44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa46:	7dfb      	ldrb	r3, [r7, #23]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d134      	bne.n	800aab6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7ff feaf 	bl	800a7b0 <dir_find>
 800aa52:	4603      	mov	r3, r0
 800aa54:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aa5c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aa5e:	7dfb      	ldrb	r3, [r7, #23]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00a      	beq.n	800aa7a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
 800aa66:	2b04      	cmp	r3, #4
 800aa68:	d127      	bne.n	800aaba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aa6a:	7afb      	ldrb	r3, [r7, #11]
 800aa6c:	f003 0304 	and.w	r3, r3, #4
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d122      	bne.n	800aaba <follow_path+0xd2>
 800aa74:	2305      	movs	r3, #5
 800aa76:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800aa78:	e01f      	b.n	800aaba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aa7a:	7afb      	ldrb	r3, [r7, #11]
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d11c      	bne.n	800aabe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	799b      	ldrb	r3, [r3, #6]
 800aa88:	f003 0310 	and.w	r3, r3, #16
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d102      	bne.n	800aa96 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800aa90:	2305      	movs	r3, #5
 800aa92:	75fb      	strb	r3, [r7, #23]
 800aa94:	e014      	b.n	800aac0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa4:	4413      	add	r3, r2
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f7ff fe42 	bl	800a732 <ld_clust>
 800aaae:	4602      	mov	r2, r0
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aab4:	e7c0      	b.n	800aa38 <follow_path+0x50>
			if (res != FR_OK) break;
 800aab6:	bf00      	nop
 800aab8:	e002      	b.n	800aac0 <follow_path+0xd8>
				break;
 800aaba:	bf00      	nop
 800aabc:	e000      	b.n	800aac0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aabe:	bf00      	nop
			}
		}
	}

	return res;
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3718      	adds	r7, #24
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aaca:	b480      	push	{r7}
 800aacc:	b087      	sub	sp, #28
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800aad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aad6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d031      	beq.n	800ab44 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	617b      	str	r3, [r7, #20]
 800aae6:	e002      	b.n	800aaee <get_ldnumber+0x24>
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	3301      	adds	r3, #1
 800aaec:	617b      	str	r3, [r7, #20]
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	2b20      	cmp	r3, #32
 800aaf4:	d903      	bls.n	800aafe <get_ldnumber+0x34>
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	2b3a      	cmp	r3, #58	; 0x3a
 800aafc:	d1f4      	bne.n	800aae8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	2b3a      	cmp	r3, #58	; 0x3a
 800ab04:	d11c      	bne.n	800ab40 <get_ldnumber+0x76>
			tp = *path;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	60fa      	str	r2, [r7, #12]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	3b30      	subs	r3, #48	; 0x30
 800ab16:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	2b09      	cmp	r3, #9
 800ab1c:	d80e      	bhi.n	800ab3c <get_ldnumber+0x72>
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d10a      	bne.n	800ab3c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d107      	bne.n	800ab3c <get_ldnumber+0x72>
					vol = (int)i;
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	3301      	adds	r3, #1
 800ab34:	617b      	str	r3, [r7, #20]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	e002      	b.n	800ab46 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ab40:	2300      	movs	r3, #0
 800ab42:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ab44:	693b      	ldr	r3, [r7, #16]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	371c      	adds	r7, #28
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
	...

0800ab54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	70da      	strb	r2, [r3, #3]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab6a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff f8d8 	bl	8009d24 <move_window>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <check_fs+0x2a>
 800ab7a:	2304      	movs	r3, #4
 800ab7c:	e038      	b.n	800abf0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3330      	adds	r3, #48	; 0x30
 800ab82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe fe1c 	bl	80097c4 <ld_word>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d001      	beq.n	800ab9c <check_fs+0x48>
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e029      	b.n	800abf0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aba2:	2be9      	cmp	r3, #233	; 0xe9
 800aba4:	d009      	beq.n	800abba <check_fs+0x66>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800abac:	2beb      	cmp	r3, #235	; 0xeb
 800abae:	d11e      	bne.n	800abee <check_fs+0x9a>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800abb6:	2b90      	cmp	r3, #144	; 0x90
 800abb8:	d119      	bne.n	800abee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	3330      	adds	r3, #48	; 0x30
 800abbe:	3336      	adds	r3, #54	; 0x36
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fe fe17 	bl	80097f4 <ld_dword>
 800abc6:	4603      	mov	r3, r0
 800abc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800abcc:	4a0a      	ldr	r2, [pc, #40]	; (800abf8 <check_fs+0xa4>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d101      	bne.n	800abd6 <check_fs+0x82>
 800abd2:	2300      	movs	r3, #0
 800abd4:	e00c      	b.n	800abf0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	3330      	adds	r3, #48	; 0x30
 800abda:	3352      	adds	r3, #82	; 0x52
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe fe09 	bl	80097f4 <ld_dword>
 800abe2:	4603      	mov	r3, r0
 800abe4:	4a05      	ldr	r2, [pc, #20]	; (800abfc <check_fs+0xa8>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d101      	bne.n	800abee <check_fs+0x9a>
 800abea:	2300      	movs	r3, #0
 800abec:	e000      	b.n	800abf0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800abee:	2302      	movs	r3, #2
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	00544146 	.word	0x00544146
 800abfc:	33544146 	.word	0x33544146

0800ac00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b096      	sub	sp, #88	; 0x58
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2200      	movs	r2, #0
 800ac12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f7ff ff58 	bl	800aaca <get_ldnumber>
 800ac1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	da01      	bge.n	800ac26 <find_volume+0x26>
 800ac22:	230b      	movs	r3, #11
 800ac24:	e22e      	b.n	800b084 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ac26:	4aa8      	ldr	r2, [pc, #672]	; (800aec8 <find_volume+0x2c8>)
 800ac28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ac30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <find_volume+0x3a>
 800ac36:	230c      	movs	r3, #12
 800ac38:	e224      	b.n	800b084 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac3e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	f023 0301 	bic.w	r3, r3, #1
 800ac46:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ac48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d01a      	beq.n	800ac86 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ac50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac52:	785b      	ldrb	r3, [r3, #1]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fe fd17 	bl	8009688 <disk_status>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ac60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10c      	bne.n	800ac86 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ac6c:	79fb      	ldrb	r3, [r7, #7]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d007      	beq.n	800ac82 <find_volume+0x82>
 800ac72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac76:	f003 0304 	and.w	r3, r3, #4
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ac7e:	230a      	movs	r3, #10
 800ac80:	e200      	b.n	800b084 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800ac82:	2300      	movs	r3, #0
 800ac84:	e1fe      	b.n	800b084 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ac86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac88:	2200      	movs	r2, #0
 800ac8a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ac8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac92:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ac94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac96:	785b      	ldrb	r3, [r3, #1]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fe fd0f 	bl	80096bc <disk_initialize>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800aca4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aca8:	f003 0301 	and.w	r3, r3, #1
 800acac:	2b00      	cmp	r3, #0
 800acae:	d001      	beq.n	800acb4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800acb0:	2303      	movs	r3, #3
 800acb2:	e1e7      	b.n	800b084 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800acb4:	79fb      	ldrb	r3, [r7, #7]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d007      	beq.n	800acca <find_volume+0xca>
 800acba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acbe:	f003 0304 	and.w	r3, r3, #4
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800acc6:	230a      	movs	r3, #10
 800acc8:	e1dc      	b.n	800b084 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800acca:	2300      	movs	r3, #0
 800accc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800acce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800acd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800acd2:	f7ff ff3f 	bl	800ab54 <check_fs>
 800acd6:	4603      	mov	r3, r0
 800acd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800acdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d14b      	bne.n	800ad7c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ace4:	2300      	movs	r3, #0
 800ace6:	643b      	str	r3, [r7, #64]	; 0x40
 800ace8:	e01f      	b.n	800ad2a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800acea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800acf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acf2:	011b      	lsls	r3, r3, #4
 800acf4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800acf8:	4413      	add	r3, r2
 800acfa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfe:	3304      	adds	r3, #4
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d006      	beq.n	800ad14 <find_volume+0x114>
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	3308      	adds	r3, #8
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe fd72 	bl	80097f4 <ld_dword>
 800ad10:	4602      	mov	r2, r0
 800ad12:	e000      	b.n	800ad16 <find_volume+0x116>
 800ad14:	2200      	movs	r2, #0
 800ad16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ad1e:	440b      	add	r3, r1
 800ad20:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ad24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad26:	3301      	adds	r3, #1
 800ad28:	643b      	str	r3, [r7, #64]	; 0x40
 800ad2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	d9dc      	bls.n	800acea <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ad30:	2300      	movs	r3, #0
 800ad32:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ad34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d002      	beq.n	800ad40 <find_volume+0x140>
 800ad3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ad40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ad48:	4413      	add	r3, r2
 800ad4a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ad4e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ad50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d005      	beq.n	800ad62 <find_volume+0x162>
 800ad56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad5a:	f7ff fefb 	bl	800ab54 <check_fs>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	e000      	b.n	800ad64 <find_volume+0x164>
 800ad62:	2303      	movs	r3, #3
 800ad64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ad68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d905      	bls.n	800ad7c <find_volume+0x17c>
 800ad70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad72:	3301      	adds	r3, #1
 800ad74:	643b      	str	r3, [r7, #64]	; 0x40
 800ad76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad78:	2b03      	cmp	r3, #3
 800ad7a:	d9e1      	bls.n	800ad40 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ad7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad80:	2b04      	cmp	r3, #4
 800ad82:	d101      	bne.n	800ad88 <find_volume+0x188>
 800ad84:	2301      	movs	r3, #1
 800ad86:	e17d      	b.n	800b084 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ad88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d901      	bls.n	800ad94 <find_volume+0x194>
 800ad90:	230d      	movs	r3, #13
 800ad92:	e177      	b.n	800b084 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ad94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad96:	3330      	adds	r3, #48	; 0x30
 800ad98:	330b      	adds	r3, #11
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fe fd12 	bl	80097c4 <ld_word>
 800ada0:	4603      	mov	r3, r0
 800ada2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ada6:	d001      	beq.n	800adac <find_volume+0x1ac>
 800ada8:	230d      	movs	r3, #13
 800adaa:	e16b      	b.n	800b084 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800adac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adae:	3330      	adds	r3, #48	; 0x30
 800adb0:	3316      	adds	r3, #22
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fe fd06 	bl	80097c4 <ld_word>
 800adb8:	4603      	mov	r3, r0
 800adba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800adbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d106      	bne.n	800add0 <find_volume+0x1d0>
 800adc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc4:	3330      	adds	r3, #48	; 0x30
 800adc6:	3324      	adds	r3, #36	; 0x24
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fe fd13 	bl	80097f4 <ld_dword>
 800adce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800add4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800add6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adde:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	789b      	ldrb	r3, [r3, #2]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d005      	beq.n	800adf4 <find_volume+0x1f4>
 800ade8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adea:	789b      	ldrb	r3, [r3, #2]
 800adec:	2b02      	cmp	r3, #2
 800adee:	d001      	beq.n	800adf4 <find_volume+0x1f4>
 800adf0:	230d      	movs	r3, #13
 800adf2:	e147      	b.n	800b084 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	789b      	ldrb	r3, [r3, #2]
 800adf8:	461a      	mov	r2, r3
 800adfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adfc:	fb02 f303 	mul.w	r3, r2, r3
 800ae00:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ae02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ae0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae10:	895b      	ldrh	r3, [r3, #10]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d008      	beq.n	800ae28 <find_volume+0x228>
 800ae16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae18:	895b      	ldrh	r3, [r3, #10]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1e:	895b      	ldrh	r3, [r3, #10]
 800ae20:	3b01      	subs	r3, #1
 800ae22:	4013      	ands	r3, r2
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <find_volume+0x22c>
 800ae28:	230d      	movs	r3, #13
 800ae2a:	e12b      	b.n	800b084 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ae2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2e:	3330      	adds	r3, #48	; 0x30
 800ae30:	3311      	adds	r3, #17
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe fcc6 	bl	80097c4 <ld_word>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	891b      	ldrh	r3, [r3, #8]
 800ae44:	f003 030f 	and.w	r3, r3, #15
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <find_volume+0x252>
 800ae4e:	230d      	movs	r3, #13
 800ae50:	e118      	b.n	800b084 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ae52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae54:	3330      	adds	r3, #48	; 0x30
 800ae56:	3313      	adds	r3, #19
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7fe fcb3 	bl	80097c4 <ld_word>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ae62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d106      	bne.n	800ae76 <find_volume+0x276>
 800ae68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6a:	3330      	adds	r3, #48	; 0x30
 800ae6c:	3320      	adds	r3, #32
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fcc0 	bl	80097f4 <ld_dword>
 800ae74:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	3330      	adds	r3, #48	; 0x30
 800ae7a:	330e      	adds	r3, #14
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fe fca1 	bl	80097c4 <ld_word>
 800ae82:	4603      	mov	r3, r0
 800ae84:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ae86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <find_volume+0x290>
 800ae8c:	230d      	movs	r3, #13
 800ae8e:	e0f9      	b.n	800b084 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ae90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ae92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae94:	4413      	add	r3, r2
 800ae96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae98:	8912      	ldrh	r2, [r2, #8]
 800ae9a:	0912      	lsrs	r2, r2, #4
 800ae9c:	b292      	uxth	r2, r2
 800ae9e:	4413      	add	r3, r2
 800aea0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800aea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d201      	bcs.n	800aeae <find_volume+0x2ae>
 800aeaa:	230d      	movs	r3, #13
 800aeac:	e0ea      	b.n	800b084 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800aeae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aeb6:	8952      	ldrh	r2, [r2, #10]
 800aeb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aebc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d103      	bne.n	800aecc <find_volume+0x2cc>
 800aec4:	230d      	movs	r3, #13
 800aec6:	e0dd      	b.n	800b084 <find_volume+0x484>
 800aec8:	20000198 	.word	0x20000198
		fmt = FS_FAT32;
 800aecc:	2303      	movs	r3, #3
 800aece:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800aed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d802      	bhi.n	800aee2 <find_volume+0x2e2>
 800aedc:	2302      	movs	r3, #2
 800aede:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800aee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d802      	bhi.n	800aef2 <find_volume+0x2f2>
 800aeec:	2301      	movs	r3, #1
 800aeee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	1c9a      	adds	r2, r3, #2
 800aef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800aefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aefe:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800af00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af04:	441a      	add	r2, r3
 800af06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af08:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800af0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	441a      	add	r2, r3
 800af10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af12:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800af14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d11e      	bne.n	800af5a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800af1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1e:	3330      	adds	r3, #48	; 0x30
 800af20:	332a      	adds	r3, #42	; 0x2a
 800af22:	4618      	mov	r0, r3
 800af24:	f7fe fc4e 	bl	80097c4 <ld_word>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d001      	beq.n	800af32 <find_volume+0x332>
 800af2e:	230d      	movs	r3, #13
 800af30:	e0a8      	b.n	800b084 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800af32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af34:	891b      	ldrh	r3, [r3, #8]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d001      	beq.n	800af3e <find_volume+0x33e>
 800af3a:	230d      	movs	r3, #13
 800af3c:	e0a2      	b.n	800b084 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800af3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af40:	3330      	adds	r3, #48	; 0x30
 800af42:	332c      	adds	r3, #44	; 0x2c
 800af44:	4618      	mov	r0, r3
 800af46:	f7fe fc55 	bl	80097f4 <ld_dword>
 800af4a:	4602      	mov	r2, r0
 800af4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800af50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	647b      	str	r3, [r7, #68]	; 0x44
 800af58:	e01f      	b.n	800af9a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800af5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5c:	891b      	ldrh	r3, [r3, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d101      	bne.n	800af66 <find_volume+0x366>
 800af62:	230d      	movs	r3, #13
 800af64:	e08e      	b.n	800b084 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800af66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af68:	6a1a      	ldr	r2, [r3, #32]
 800af6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af6c:	441a      	add	r2, r3
 800af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af70:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800af72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af76:	2b02      	cmp	r3, #2
 800af78:	d103      	bne.n	800af82 <find_volume+0x382>
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	695b      	ldr	r3, [r3, #20]
 800af7e:	005b      	lsls	r3, r3, #1
 800af80:	e00a      	b.n	800af98 <find_volume+0x398>
 800af82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af84:	695a      	ldr	r2, [r3, #20]
 800af86:	4613      	mov	r3, r2
 800af88:	005b      	lsls	r3, r3, #1
 800af8a:	4413      	add	r3, r2
 800af8c:	085a      	lsrs	r2, r3, #1
 800af8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	f003 0301 	and.w	r3, r3, #1
 800af96:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800af98:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800af9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9c:	699a      	ldr	r2, [r3, #24]
 800af9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afa0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800afa4:	0a5b      	lsrs	r3, r3, #9
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d201      	bcs.n	800afae <find_volume+0x3ae>
 800afaa:	230d      	movs	r3, #13
 800afac:	e06a      	b.n	800b084 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800afae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afb4:	611a      	str	r2, [r3, #16]
 800afb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb8:	691a      	ldr	r2, [r3, #16]
 800afba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800afbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc0:	2280      	movs	r2, #128	; 0x80
 800afc2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800afc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d149      	bne.n	800b060 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	3330      	adds	r3, #48	; 0x30
 800afd0:	3330      	adds	r3, #48	; 0x30
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fe fbf6 	bl	80097c4 <ld_word>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d140      	bne.n	800b060 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800afde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afe0:	3301      	adds	r3, #1
 800afe2:	4619      	mov	r1, r3
 800afe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afe6:	f7fe fe9d 	bl	8009d24 <move_window>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d137      	bne.n	800b060 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	2200      	movs	r2, #0
 800aff4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff8:	3330      	adds	r3, #48	; 0x30
 800affa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800affe:	4618      	mov	r0, r3
 800b000:	f7fe fbe0 	bl	80097c4 <ld_word>
 800b004:	4603      	mov	r3, r0
 800b006:	461a      	mov	r2, r3
 800b008:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d127      	bne.n	800b060 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b012:	3330      	adds	r3, #48	; 0x30
 800b014:	4618      	mov	r0, r3
 800b016:	f7fe fbed 	bl	80097f4 <ld_dword>
 800b01a:	4603      	mov	r3, r0
 800b01c:	4a1b      	ldr	r2, [pc, #108]	; (800b08c <find_volume+0x48c>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d11e      	bne.n	800b060 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b024:	3330      	adds	r3, #48	; 0x30
 800b026:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fe fbe2 	bl	80097f4 <ld_dword>
 800b030:	4603      	mov	r3, r0
 800b032:	4a17      	ldr	r2, [pc, #92]	; (800b090 <find_volume+0x490>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d113      	bne.n	800b060 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03a:	3330      	adds	r3, #48	; 0x30
 800b03c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b040:	4618      	mov	r0, r3
 800b042:	f7fe fbd7 	bl	80097f4 <ld_dword>
 800b046:	4602      	mov	r2, r0
 800b048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04e:	3330      	adds	r3, #48	; 0x30
 800b050:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b054:	4618      	mov	r0, r3
 800b056:	f7fe fbcd 	bl	80097f4 <ld_dword>
 800b05a:	4602      	mov	r2, r0
 800b05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b066:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b068:	4b0a      	ldr	r3, [pc, #40]	; (800b094 <find_volume+0x494>)
 800b06a:	881b      	ldrh	r3, [r3, #0]
 800b06c:	3301      	adds	r3, #1
 800b06e:	b29a      	uxth	r2, r3
 800b070:	4b08      	ldr	r3, [pc, #32]	; (800b094 <find_volume+0x494>)
 800b072:	801a      	strh	r2, [r3, #0]
 800b074:	4b07      	ldr	r3, [pc, #28]	; (800b094 <find_volume+0x494>)
 800b076:	881a      	ldrh	r2, [r3, #0]
 800b078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b07c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b07e:	f7fe fde9 	bl	8009c54 <clear_lock>
#endif
	return FR_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3758      	adds	r7, #88	; 0x58
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	41615252 	.word	0x41615252
 800b090:	61417272 	.word	0x61417272
 800b094:	2000019c 	.word	0x2000019c

0800b098 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b0a2:	2309      	movs	r3, #9
 800b0a4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d01c      	beq.n	800b0e6 <validate+0x4e>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d018      	beq.n	800b0e6 <validate+0x4e>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d013      	beq.n	800b0e6 <validate+0x4e>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	889a      	ldrh	r2, [r3, #4]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	88db      	ldrh	r3, [r3, #6]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d10c      	bne.n	800b0e6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	785b      	ldrb	r3, [r3, #1]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fe fad8 	bl	8009688 <disk_status>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d101      	bne.n	800b0e6 <validate+0x4e>
			res = FR_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d102      	bne.n	800b0f2 <validate+0x5a>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	e000      	b.n	800b0f4 <validate+0x5c>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	6013      	str	r3, [r2, #0]
	return res;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	4613      	mov	r3, r2
 800b110:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b116:	f107 0310 	add.w	r3, r7, #16
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7ff fcd5 	bl	800aaca <get_ldnumber>
 800b120:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	2b00      	cmp	r3, #0
 800b126:	da01      	bge.n	800b12c <f_mount+0x28>
 800b128:	230b      	movs	r3, #11
 800b12a:	e02b      	b.n	800b184 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b12c:	4a17      	ldr	r2, [pc, #92]	; (800b18c <f_mount+0x88>)
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b134:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d005      	beq.n	800b148 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b13c:	69b8      	ldr	r0, [r7, #24]
 800b13e:	f7fe fd89 	bl	8009c54 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2200      	movs	r2, #0
 800b146:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d002      	beq.n	800b154 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2200      	movs	r2, #0
 800b152:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	490d      	ldr	r1, [pc, #52]	; (800b18c <f_mount+0x88>)
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <f_mount+0x66>
 800b164:	79fb      	ldrb	r3, [r7, #7]
 800b166:	2b01      	cmp	r3, #1
 800b168:	d001      	beq.n	800b16e <f_mount+0x6a>
 800b16a:	2300      	movs	r3, #0
 800b16c:	e00a      	b.n	800b184 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b16e:	f107 010c 	add.w	r1, r7, #12
 800b172:	f107 0308 	add.w	r3, r7, #8
 800b176:	2200      	movs	r2, #0
 800b178:	4618      	mov	r0, r3
 800b17a:	f7ff fd41 	bl	800ac00 <find_volume>
 800b17e:	4603      	mov	r3, r0
 800b180:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b182:	7dfb      	ldrb	r3, [r7, #23]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3720      	adds	r7, #32
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	20000198 	.word	0x20000198

0800b190 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b098      	sub	sp, #96	; 0x60
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	4613      	mov	r3, r2
 800b19c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <f_open+0x18>
 800b1a4:	2309      	movs	r3, #9
 800b1a6:	e1ad      	b.n	800b504 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b1a8:	79fb      	ldrb	r3, [r7, #7]
 800b1aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b1b0:	79fa      	ldrb	r2, [r7, #7]
 800b1b2:	f107 0110 	add.w	r1, r7, #16
 800b1b6:	f107 0308 	add.w	r3, r7, #8
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7ff fd20 	bl	800ac00 <find_volume>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b1c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f040 8191 	bne.w	800b4f2 <f_open+0x362>
		dj.obj.fs = fs;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	f107 0314 	add.w	r3, r7, #20
 800b1da:	4611      	mov	r1, r2
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7ff fc03 	bl	800a9e8 <follow_path>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b1e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d11a      	bne.n	800b226 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b1f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b1f4:	b25b      	sxtb	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	da03      	bge.n	800b202 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b1fa:	2306      	movs	r3, #6
 800b1fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b200:	e011      	b.n	800b226 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b202:	79fb      	ldrb	r3, [r7, #7]
 800b204:	f023 0301 	bic.w	r3, r3, #1
 800b208:	2b00      	cmp	r3, #0
 800b20a:	bf14      	ite	ne
 800b20c:	2301      	movne	r3, #1
 800b20e:	2300      	moveq	r3, #0
 800b210:	b2db      	uxtb	r3, r3
 800b212:	461a      	mov	r2, r3
 800b214:	f107 0314 	add.w	r3, r7, #20
 800b218:	4611      	mov	r1, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fe fbd2 	bl	80099c4 <chk_lock>
 800b220:	4603      	mov	r3, r0
 800b222:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b226:	79fb      	ldrb	r3, [r7, #7]
 800b228:	f003 031c 	and.w	r3, r3, #28
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d07f      	beq.n	800b330 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b230:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b234:	2b00      	cmp	r3, #0
 800b236:	d017      	beq.n	800b268 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b23c:	2b04      	cmp	r3, #4
 800b23e:	d10e      	bne.n	800b25e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b240:	f7fe fc1c 	bl	8009a7c <enq_lock>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d006      	beq.n	800b258 <f_open+0xc8>
 800b24a:	f107 0314 	add.w	r3, r7, #20
 800b24e:	4618      	mov	r0, r3
 800b250:	f7ff fb03 	bl	800a85a <dir_register>
 800b254:	4603      	mov	r3, r0
 800b256:	e000      	b.n	800b25a <f_open+0xca>
 800b258:	2312      	movs	r3, #18
 800b25a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	f043 0308 	orr.w	r3, r3, #8
 800b264:	71fb      	strb	r3, [r7, #7]
 800b266:	e010      	b.n	800b28a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b268:	7ebb      	ldrb	r3, [r7, #26]
 800b26a:	f003 0311 	and.w	r3, r3, #17
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <f_open+0xea>
					res = FR_DENIED;
 800b272:	2307      	movs	r3, #7
 800b274:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b278:	e007      	b.n	800b28a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b27a:	79fb      	ldrb	r3, [r7, #7]
 800b27c:	f003 0304 	and.w	r3, r3, #4
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <f_open+0xfa>
 800b284:	2308      	movs	r3, #8
 800b286:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b28a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d168      	bne.n	800b364 <f_open+0x1d4>
 800b292:	79fb      	ldrb	r3, [r7, #7]
 800b294:	f003 0308 	and.w	r3, r3, #8
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d063      	beq.n	800b364 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b29c:	f7fe f86a 	bl	8009374 <get_fattime>
 800b2a0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a4:	330e      	adds	r3, #14
 800b2a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fe fae1 	bl	8009870 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b0:	3316      	adds	r3, #22
 800b2b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fe fadb 	bl	8009870 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2bc:	330b      	adds	r3, #11
 800b2be:	2220      	movs	r2, #32
 800b2c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7ff fa32 	bl	800a732 <ld_clust>
 800b2ce:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7ff fa4a 	bl	800a770 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2de:	331c      	adds	r3, #28
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe fac4 	bl	8009870 <st_dword>
					fs->wflag = 1;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b2ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d037      	beq.n	800b364 <f_open+0x1d4>
						dw = fs->winsect;
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b2fa:	f107 0314 	add.w	r3, r7, #20
 800b2fe:	2200      	movs	r2, #0
 800b300:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b302:	4618      	mov	r0, r3
 800b304:	f7fe ff5d 	bl	800a1c2 <remove_chain>
 800b308:	4603      	mov	r3, r0
 800b30a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b30e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b312:	2b00      	cmp	r3, #0
 800b314:	d126      	bne.n	800b364 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe fd02 	bl	8009d24 <move_window>
 800b320:	4603      	mov	r3, r0
 800b322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b32a:	3a01      	subs	r2, #1
 800b32c:	60da      	str	r2, [r3, #12]
 800b32e:	e019      	b.n	800b364 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b334:	2b00      	cmp	r3, #0
 800b336:	d115      	bne.n	800b364 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b338:	7ebb      	ldrb	r3, [r7, #26]
 800b33a:	f003 0310 	and.w	r3, r3, #16
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d003      	beq.n	800b34a <f_open+0x1ba>
					res = FR_NO_FILE;
 800b342:	2304      	movs	r3, #4
 800b344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b348:	e00c      	b.n	800b364 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	f003 0302 	and.w	r3, r3, #2
 800b350:	2b00      	cmp	r3, #0
 800b352:	d007      	beq.n	800b364 <f_open+0x1d4>
 800b354:	7ebb      	ldrb	r3, [r7, #26]
 800b356:	f003 0301 	and.w	r3, r3, #1
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d002      	beq.n	800b364 <f_open+0x1d4>
						res = FR_DENIED;
 800b35e:	2307      	movs	r3, #7
 800b360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b364:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d128      	bne.n	800b3be <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b36c:	79fb      	ldrb	r3, [r7, #7]
 800b36e:	f003 0308 	and.w	r3, r3, #8
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b37c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	f023 0301 	bic.w	r3, r3, #1
 800b392:	2b00      	cmp	r3, #0
 800b394:	bf14      	ite	ne
 800b396:	2301      	movne	r3, #1
 800b398:	2300      	moveq	r3, #0
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	461a      	mov	r2, r3
 800b39e:	f107 0314 	add.w	r3, r7, #20
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fe fb8b 	bl	8009ac0 <inc_lock>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d102      	bne.n	800b3be <f_open+0x22e>
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b3be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f040 8095 	bne.w	800b4f2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3cc:	4611      	mov	r1, r2
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7ff f9af 	bl	800a732 <ld_clust>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3dc:	331c      	adds	r3, #28
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fe fa08 	bl	80097f4 <ld_dword>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	88da      	ldrh	r2, [r3, #6]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	79fa      	ldrb	r2, [r7, #7]
 800b402:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2200      	movs	r2, #0
 800b40e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3330      	adds	r3, #48	; 0x30
 800b41a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b41e:	2100      	movs	r1, #0
 800b420:	4618      	mov	r0, r3
 800b422:	f7fe fa72 	bl	800990a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b426:	79fb      	ldrb	r3, [r7, #7]
 800b428:	f003 0320 	and.w	r3, r3, #32
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d060      	beq.n	800b4f2 <f_open+0x362>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d05c      	beq.n	800b4f2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	68da      	ldr	r2, [r3, #12]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	895b      	ldrh	r3, [r3, #10]
 800b444:	025b      	lsls	r3, r3, #9
 800b446:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	657b      	str	r3, [r7, #84]	; 0x54
 800b454:	e016      	b.n	800b484 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe fd1d 	bl	8009e9a <get_fat>
 800b460:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b464:	2b01      	cmp	r3, #1
 800b466:	d802      	bhi.n	800b46e <f_open+0x2de>
 800b468:	2302      	movs	r3, #2
 800b46a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b46e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b474:	d102      	bne.n	800b47c <f_open+0x2ec>
 800b476:	2301      	movs	r3, #1
 800b478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b47c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b47e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	657b      	str	r3, [r7, #84]	; 0x54
 800b484:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d103      	bne.n	800b494 <f_open+0x304>
 800b48c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b48e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b490:	429a      	cmp	r2, r3
 800b492:	d8e0      	bhi.n	800b456 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b498:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b49a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d127      	bne.n	800b4f2 <f_open+0x362>
 800b4a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d022      	beq.n	800b4f2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fe fcd3 	bl	8009e5c <clust2sect>
 800b4b6:	6478      	str	r0, [r7, #68]	; 0x44
 800b4b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d103      	bne.n	800b4c6 <f_open+0x336>
						res = FR_INT_ERR;
 800b4be:	2302      	movs	r3, #2
 800b4c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b4c4:	e015      	b.n	800b4f2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b4c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4c8:	0a5a      	lsrs	r2, r3, #9
 800b4ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4cc:	441a      	add	r2, r3
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	7858      	ldrb	r0, [r3, #1]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6a1a      	ldr	r2, [r3, #32]
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	f7fe f911 	bl	8009708 <disk_read>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <f_open+0x362>
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b4f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d002      	beq.n	800b500 <f_open+0x370>
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b504:	4618      	mov	r0, r3
 800b506:	3760      	adds	r7, #96	; 0x60
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b08e      	sub	sp, #56	; 0x38
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
 800b518:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2200      	movs	r2, #0
 800b522:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f107 0214 	add.w	r2, r7, #20
 800b52a:	4611      	mov	r1, r2
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7ff fdb3 	bl	800b098 <validate>
 800b532:	4603      	mov	r3, r0
 800b534:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d107      	bne.n	800b550 <f_read+0x44>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	7d5b      	ldrb	r3, [r3, #21]
 800b544:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b548:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <f_read+0x4a>
 800b550:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b554:	e115      	b.n	800b782 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	7d1b      	ldrb	r3, [r3, #20]
 800b55a:	f003 0301 	and.w	r3, r3, #1
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d101      	bne.n	800b566 <f_read+0x5a>
 800b562:	2307      	movs	r3, #7
 800b564:	e10d      	b.n	800b782 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	68da      	ldr	r2, [r3, #12]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	6a3b      	ldr	r3, [r7, #32]
 800b576:	429a      	cmp	r2, r3
 800b578:	f240 80fe 	bls.w	800b778 <f_read+0x26c>
 800b57c:	6a3b      	ldr	r3, [r7, #32]
 800b57e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b580:	e0fa      	b.n	800b778 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	699b      	ldr	r3, [r3, #24]
 800b586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f040 80c6 	bne.w	800b71c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	0a5b      	lsrs	r3, r3, #9
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	8952      	ldrh	r2, [r2, #10]
 800b59a:	3a01      	subs	r2, #1
 800b59c:	4013      	ands	r3, r2
 800b59e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d12f      	bne.n	800b606 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d103      	bne.n	800b5b6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	633b      	str	r3, [r7, #48]	; 0x30
 800b5b4:	e013      	b.n	800b5de <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d007      	beq.n	800b5ce <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f7fe fef9 	bl	800a3bc <clmt_clust>
 800b5ca:	6338      	str	r0, [r7, #48]	; 0x30
 800b5cc:	e007      	b.n	800b5de <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	69db      	ldr	r3, [r3, #28]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	f7fe fc5f 	bl	8009e9a <get_fat>
 800b5dc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d804      	bhi.n	800b5ee <f_read+0xe2>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	755a      	strb	r2, [r3, #21]
 800b5ea:	2302      	movs	r3, #2
 800b5ec:	e0c9      	b.n	800b782 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5f4:	d104      	bne.n	800b600 <f_read+0xf4>
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	755a      	strb	r2, [r3, #21]
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e0c0      	b.n	800b782 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b604:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	4619      	mov	r1, r3
 800b60e:	4610      	mov	r0, r2
 800b610:	f7fe fc24 	bl	8009e5c <clust2sect>
 800b614:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d104      	bne.n	800b626 <f_read+0x11a>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2202      	movs	r2, #2
 800b620:	755a      	strb	r2, [r3, #21]
 800b622:	2302      	movs	r3, #2
 800b624:	e0ad      	b.n	800b782 <f_read+0x276>
			sect += csect;
 800b626:	69ba      	ldr	r2, [r7, #24]
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	4413      	add	r3, r2
 800b62c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	0a5b      	lsrs	r3, r3, #9
 800b632:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b636:	2b00      	cmp	r3, #0
 800b638:	d039      	beq.n	800b6ae <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b63a:	69fa      	ldr	r2, [r7, #28]
 800b63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63e:	4413      	add	r3, r2
 800b640:	697a      	ldr	r2, [r7, #20]
 800b642:	8952      	ldrh	r2, [r2, #10]
 800b644:	4293      	cmp	r3, r2
 800b646:	d905      	bls.n	800b654 <f_read+0x148>
					cc = fs->csize - csect;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	895b      	ldrh	r3, [r3, #10]
 800b64c:	461a      	mov	r2, r3
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	7858      	ldrb	r0, [r3, #1]
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	69ba      	ldr	r2, [r7, #24]
 800b65c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b65e:	f7fe f853 	bl	8009708 <disk_read>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d004      	beq.n	800b672 <f_read+0x166>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2201      	movs	r2, #1
 800b66c:	755a      	strb	r2, [r3, #21]
 800b66e:	2301      	movs	r3, #1
 800b670:	e087      	b.n	800b782 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	7d1b      	ldrb	r3, [r3, #20]
 800b676:	b25b      	sxtb	r3, r3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	da14      	bge.n	800b6a6 <f_read+0x19a>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6a1a      	ldr	r2, [r3, #32]
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b686:	429a      	cmp	r2, r3
 800b688:	d90d      	bls.n	800b6a6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6a1a      	ldr	r2, [r3, #32]
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	1ad3      	subs	r3, r2, r3
 800b692:	025b      	lsls	r3, r3, #9
 800b694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b696:	18d0      	adds	r0, r2, r3
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	3330      	adds	r3, #48	; 0x30
 800b69c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	f7fe f911 	bl	80098c8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a8:	025b      	lsls	r3, r3, #9
 800b6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b6ac:	e050      	b.n	800b750 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	69ba      	ldr	r2, [r7, #24]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d02e      	beq.n	800b716 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	7d1b      	ldrb	r3, [r3, #20]
 800b6bc:	b25b      	sxtb	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	da18      	bge.n	800b6f4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	7858      	ldrb	r0, [r3, #1]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6a1a      	ldr	r2, [r3, #32]
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	f7fe f839 	bl	8009748 <disk_write>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d004      	beq.n	800b6e6 <f_read+0x1da>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	755a      	strb	r2, [r3, #21]
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e04d      	b.n	800b782 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	7d1b      	ldrb	r3, [r3, #20]
 800b6ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	7858      	ldrb	r0, [r3, #1]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b6fe:	2301      	movs	r3, #1
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	f7fe f801 	bl	8009708 <disk_read>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d004      	beq.n	800b716 <f_read+0x20a>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2201      	movs	r2, #1
 800b710:	755a      	strb	r2, [r3, #21]
 800b712:	2301      	movs	r3, #1
 800b714:	e035      	b.n	800b782 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	69ba      	ldr	r2, [r7, #24]
 800b71a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b724:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b728:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b72a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d901      	bls.n	800b736 <f_read+0x22a>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b744:	4413      	add	r3, r2
 800b746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b748:	4619      	mov	r1, r3
 800b74a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b74c:	f7fe f8bc 	bl	80098c8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b754:	4413      	add	r3, r2
 800b756:	627b      	str	r3, [r7, #36]	; 0x24
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	699a      	ldr	r2, [r3, #24]
 800b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75e:	441a      	add	r2, r3
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	619a      	str	r2, [r3, #24]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76a:	441a      	add	r2, r3
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f47f af01 	bne.w	800b582 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3738      	adds	r7, #56	; 0x38
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b08c      	sub	sp, #48	; 0x30
 800b78e:	af00      	add	r7, sp, #0
 800b790:	60f8      	str	r0, [r7, #12]
 800b792:	60b9      	str	r1, [r7, #8]
 800b794:	607a      	str	r2, [r7, #4]
 800b796:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f107 0210 	add.w	r2, r7, #16
 800b7a8:	4611      	mov	r1, r2
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7ff fc74 	bl	800b098 <validate>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b7b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d107      	bne.n	800b7ce <f_write+0x44>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	7d5b      	ldrb	r3, [r3, #21]
 800b7c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b7c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d002      	beq.n	800b7d4 <f_write+0x4a>
 800b7ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7d2:	e14b      	b.n	800ba6c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	7d1b      	ldrb	r3, [r3, #20]
 800b7d8:	f003 0302 	and.w	r3, r3, #2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <f_write+0x5a>
 800b7e0:	2307      	movs	r3, #7
 800b7e2:	e143      	b.n	800ba6c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	699a      	ldr	r2, [r3, #24]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	441a      	add	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	699b      	ldr	r3, [r3, #24]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	f080 812d 	bcs.w	800ba50 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	43db      	mvns	r3, r3
 800b7fc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b7fe:	e127      	b.n	800ba50 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f040 80e3 	bne.w	800b9d4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	0a5b      	lsrs	r3, r3, #9
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	8952      	ldrh	r2, [r2, #10]
 800b818:	3a01      	subs	r2, #1
 800b81a:	4013      	ands	r3, r2
 800b81c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d143      	bne.n	800b8ac <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10c      	bne.n	800b846 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b834:	2b00      	cmp	r3, #0
 800b836:	d11a      	bne.n	800b86e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2100      	movs	r1, #0
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fe fd25 	bl	800a28c <create_chain>
 800b842:	62b8      	str	r0, [r7, #40]	; 0x28
 800b844:	e013      	b.n	800b86e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d007      	beq.n	800b85e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	4619      	mov	r1, r3
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f7fe fdb1 	bl	800a3bc <clmt_clust>
 800b85a:	62b8      	str	r0, [r7, #40]	; 0x28
 800b85c:	e007      	b.n	800b86e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	69db      	ldr	r3, [r3, #28]
 800b864:	4619      	mov	r1, r3
 800b866:	4610      	mov	r0, r2
 800b868:	f7fe fd10 	bl	800a28c <create_chain>
 800b86c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	2b00      	cmp	r3, #0
 800b872:	f000 80f2 	beq.w	800ba5a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d104      	bne.n	800b886 <f_write+0xfc>
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2202      	movs	r2, #2
 800b880:	755a      	strb	r2, [r3, #21]
 800b882:	2302      	movs	r3, #2
 800b884:	e0f2      	b.n	800ba6c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b88c:	d104      	bne.n	800b898 <f_write+0x10e>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2201      	movs	r2, #1
 800b892:	755a      	strb	r2, [r3, #21]
 800b894:	2301      	movs	r3, #1
 800b896:	e0e9      	b.n	800ba6c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b89c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d102      	bne.n	800b8ac <f_write+0x122>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8aa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	7d1b      	ldrb	r3, [r3, #20]
 800b8b0:	b25b      	sxtb	r3, r3
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	da18      	bge.n	800b8e8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	7858      	ldrb	r0, [r3, #1]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6a1a      	ldr	r2, [r3, #32]
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	f7fd ff3f 	bl	8009748 <disk_write>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d004      	beq.n	800b8da <f_write+0x150>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	755a      	strb	r2, [r3, #21]
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e0c8      	b.n	800ba6c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	7d1b      	ldrb	r3, [r3, #20]
 800b8de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	69db      	ldr	r3, [r3, #28]
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	4610      	mov	r0, r2
 800b8f2:	f7fe fab3 	bl	8009e5c <clust2sect>
 800b8f6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d104      	bne.n	800b908 <f_write+0x17e>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2202      	movs	r2, #2
 800b902:	755a      	strb	r2, [r3, #21]
 800b904:	2302      	movs	r3, #2
 800b906:	e0b1      	b.n	800ba6c <f_write+0x2e2>
			sect += csect;
 800b908:	697a      	ldr	r2, [r7, #20]
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	4413      	add	r3, r2
 800b90e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	0a5b      	lsrs	r3, r3, #9
 800b914:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b916:	6a3b      	ldr	r3, [r7, #32]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d03c      	beq.n	800b996 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b91c:	69ba      	ldr	r2, [r7, #24]
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	4413      	add	r3, r2
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	8952      	ldrh	r2, [r2, #10]
 800b926:	4293      	cmp	r3, r2
 800b928:	d905      	bls.n	800b936 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	895b      	ldrh	r3, [r3, #10]
 800b92e:	461a      	mov	r2, r3
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	7858      	ldrb	r0, [r3, #1]
 800b93a:	6a3b      	ldr	r3, [r7, #32]
 800b93c:	697a      	ldr	r2, [r7, #20]
 800b93e:	69f9      	ldr	r1, [r7, #28]
 800b940:	f7fd ff02 	bl	8009748 <disk_write>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d004      	beq.n	800b954 <f_write+0x1ca>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2201      	movs	r2, #1
 800b94e:	755a      	strb	r2, [r3, #21]
 800b950:	2301      	movs	r3, #1
 800b952:	e08b      	b.n	800ba6c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6a1a      	ldr	r2, [r3, #32]
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	6a3a      	ldr	r2, [r7, #32]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d915      	bls.n	800b98e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6a1a      	ldr	r2, [r3, #32]
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	025b      	lsls	r3, r3, #9
 800b972:	69fa      	ldr	r2, [r7, #28]
 800b974:	4413      	add	r3, r2
 800b976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b97a:	4619      	mov	r1, r3
 800b97c:	f7fd ffa4 	bl	80098c8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	7d1b      	ldrb	r3, [r3, #20]
 800b984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b988:	b2da      	uxtb	r2, r3
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	025b      	lsls	r3, r3, #9
 800b992:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b994:	e03f      	b.n	800ba16 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	697a      	ldr	r2, [r7, #20]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d016      	beq.n	800b9ce <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	699a      	ldr	r2, [r3, #24]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d210      	bcs.n	800b9ce <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	7858      	ldrb	r0, [r3, #1]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	697a      	ldr	r2, [r7, #20]
 800b9ba:	f7fd fea5 	bl	8009708 <disk_read>
 800b9be:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d004      	beq.n	800b9ce <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	755a      	strb	r2, [r3, #21]
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e04e      	b.n	800ba6c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b9e0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b9e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d901      	bls.n	800b9ee <f_write+0x264>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fc:	4413      	add	r3, r2
 800b9fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba00:	69f9      	ldr	r1, [r7, #28]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fd ff60 	bl	80098c8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	7d1b      	ldrb	r3, [r3, #20]
 800ba0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ba16:	69fa      	ldr	r2, [r7, #28]
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	4413      	add	r3, r2
 800ba1c:	61fb      	str	r3, [r7, #28]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	699a      	ldr	r2, [r3, #24]
 800ba22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba24:	441a      	add	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	619a      	str	r2, [r3, #24]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	68da      	ldr	r2, [r3, #12]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	bf38      	it	cc
 800ba36:	461a      	movcc	r2, r3
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	60da      	str	r2, [r3, #12]
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	441a      	add	r2, r3
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f47f aed4 	bne.w	800b800 <f_write+0x76>
 800ba58:	e000      	b.n	800ba5c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba5a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	7d1b      	ldrb	r3, [r3, #20]
 800ba60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3730      	adds	r7, #48	; 0x30
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f107 0208 	add.w	r2, r7, #8
 800ba82:	4611      	mov	r1, r2
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7ff fb07 	bl	800b098 <validate>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d168      	bne.n	800bb66 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	7d1b      	ldrb	r3, [r3, #20]
 800ba98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d062      	beq.n	800bb66 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	7d1b      	ldrb	r3, [r3, #20]
 800baa4:	b25b      	sxtb	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	da15      	bge.n	800bad6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	7858      	ldrb	r0, [r3, #1]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a1a      	ldr	r2, [r3, #32]
 800bab8:	2301      	movs	r3, #1
 800baba:	f7fd fe45 	bl	8009748 <disk_write>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d001      	beq.n	800bac8 <f_sync+0x54>
 800bac4:	2301      	movs	r3, #1
 800bac6:	e04f      	b.n	800bb68 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	7d1b      	ldrb	r3, [r3, #20]
 800bacc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bad0:	b2da      	uxtb	r2, r3
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bad6:	f7fd fc4d 	bl	8009374 <get_fattime>
 800bada:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae2:	4619      	mov	r1, r3
 800bae4:	4610      	mov	r0, r2
 800bae6:	f7fe f91d 	bl	8009d24 <move_window>
 800baea:	4603      	mov	r3, r0
 800baec:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800baee:	7dfb      	ldrb	r3, [r7, #23]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d138      	bne.n	800bb66 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	330b      	adds	r3, #11
 800bafe:	781a      	ldrb	r2, [r3, #0]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	330b      	adds	r3, #11
 800bb04:	f042 0220 	orr.w	r2, r2, #32
 800bb08:	b2d2      	uxtb	r2, r2
 800bb0a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6818      	ldr	r0, [r3, #0]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	461a      	mov	r2, r3
 800bb16:	68f9      	ldr	r1, [r7, #12]
 800bb18:	f7fe fe2a 	bl	800a770 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f103 021c 	add.w	r2, r3, #28
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	4619      	mov	r1, r3
 800bb28:	4610      	mov	r0, r2
 800bb2a:	f7fd fea1 	bl	8009870 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3316      	adds	r3, #22
 800bb32:	6939      	ldr	r1, [r7, #16]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fd fe9b 	bl	8009870 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	3312      	adds	r3, #18
 800bb3e:	2100      	movs	r1, #0
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7fd fe7a 	bl	800983a <st_word>
					fs->wflag = 1;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fe f916 	bl	8009d80 <sync_fs>
 800bb54:	4603      	mov	r3, r0
 800bb56:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	7d1b      	ldrb	r3, [r3, #20]
 800bb5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bb66:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f7ff ff7b 	bl	800ba74 <f_sync>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d118      	bne.n	800bbba <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f107 0208 	add.w	r2, r7, #8
 800bb8e:	4611      	mov	r1, r2
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7ff fa81 	bl	800b098 <validate>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10c      	bne.n	800bbba <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fe f819 	bl	8009bdc <dec_lock>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bbae:	7bfb      	ldrb	r3, [r7, #15]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d102      	bne.n	800bbba <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800bbc4:	b590      	push	{r4, r7, lr}
 800bbc6:	b09d      	sub	sp, #116	; 0x74
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	607a      	str	r2, [r7, #4]
 800bbce:	603b      	str	r3, [r7, #0]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800bbd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbdc:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800bbde:	f107 030c 	add.w	r3, r7, #12
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe ff71 	bl	800aaca <get_ldnumber>
 800bbe8:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bbea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	da02      	bge.n	800bbf6 <f_mkfs+0x32>
 800bbf0:	230b      	movs	r3, #11
 800bbf2:	f000 bc0d 	b.w	800c410 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800bbf6:	4a94      	ldr	r2, [pc, #592]	; (800be48 <f_mkfs+0x284>)
 800bbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d005      	beq.n	800bc0e <f_mkfs+0x4a>
 800bc02:	4a91      	ldr	r2, [pc, #580]	; (800be48 <f_mkfs+0x284>)
 800bc04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800bc0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc10:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800bc14:	2300      	movs	r3, #0
 800bc16:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800bc1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fd fd4c 	bl	80096bc <disk_initialize>
 800bc24:	4603      	mov	r3, r0
 800bc26:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800bc2a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc2e:	f003 0301 	and.w	r3, r3, #1
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <f_mkfs+0x76>
 800bc36:	2303      	movs	r3, #3
 800bc38:	e3ea      	b.n	800c410 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800bc3a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bc3e:	f003 0304 	and.w	r3, r3, #4
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <f_mkfs+0x86>
 800bc46:	230a      	movs	r3, #10
 800bc48:	e3e2      	b.n	800c410 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800bc4a:	f107 0214 	add.w	r2, r7, #20
 800bc4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc52:	2103      	movs	r1, #3
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7fd fd97 	bl	8009788 <disk_ioctl>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10c      	bne.n	800bc7a <f_mkfs+0xb6>
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d009      	beq.n	800bc7a <f_mkfs+0xb6>
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc6c:	d805      	bhi.n	800bc7a <f_mkfs+0xb6>
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	1e5a      	subs	r2, r3, #1
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	4013      	ands	r3, r2
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d001      	beq.n	800bc7e <f_mkfs+0xba>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800bc7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc82:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d003      	beq.n	800bc92 <f_mkfs+0xce>
 800bc8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d309      	bcc.n	800bca6 <f_mkfs+0xe2>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc98:	d805      	bhi.n	800bca6 <f_mkfs+0xe2>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	1e5a      	subs	r2, r3, #1
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4013      	ands	r3, r2
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <f_mkfs+0xe6>
 800bca6:	2313      	movs	r3, #19
 800bca8:	e3b2      	b.n	800c410 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800bcaa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcb2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800bcb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800bcc4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bcc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc8:	fb02 f303 	mul.w	r3, r2, r3
 800bccc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d101      	bne.n	800bcd8 <f_mkfs+0x114>
 800bcd4:	230e      	movs	r3, #14
 800bcd6:	e39b      	b.n	800c410 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800bcd8:	f107 0210 	add.w	r2, r7, #16
 800bcdc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bce0:	2101      	movs	r1, #1
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7fd fd50 	bl	8009788 <disk_ioctl>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d001      	beq.n	800bcf2 <f_mkfs+0x12e>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e38e      	b.n	800c410 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800bcf2:	7afb      	ldrb	r3, [r7, #11]
 800bcf4:	f003 0308 	and.w	r3, r3, #8
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d001      	beq.n	800bd00 <f_mkfs+0x13c>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	e000      	b.n	800bd02 <f_mkfs+0x13e>
 800bd00:	233f      	movs	r3, #63	; 0x3f
 800bd02:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d901      	bls.n	800bd10 <f_mkfs+0x14c>
 800bd0c:	230e      	movs	r3, #14
 800bd0e:	e37f      	b.n	800c410 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	2b7f      	cmp	r3, #127	; 0x7f
 800bd1c:	d801      	bhi.n	800bd22 <f_mkfs+0x15e>
 800bd1e:	230e      	movs	r3, #14
 800bd20:	e376      	b.n	800c410 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b80      	cmp	r3, #128	; 0x80
 800bd26:	d901      	bls.n	800bd2c <f_mkfs+0x168>
 800bd28:	2313      	movs	r3, #19
 800bd2a:	e371      	b.n	800c410 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800bd2c:	7afb      	ldrb	r3, [r7, #11]
 800bd2e:	f003 0302 	and.w	r3, r3, #2
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00d      	beq.n	800bd52 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800bd36:	7afb      	ldrb	r3, [r7, #11]
 800bd38:	f003 0307 	and.w	r3, r3, #7
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d004      	beq.n	800bd4a <f_mkfs+0x186>
 800bd40:	7afb      	ldrb	r3, [r7, #11]
 800bd42:	f003 0301 	and.w	r3, r3, #1
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d103      	bne.n	800bd52 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bd50:	e009      	b.n	800bd66 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800bd52:	7afb      	ldrb	r3, [r7, #11]
 800bd54:	f003 0301 	and.w	r3, r3, #1
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <f_mkfs+0x19c>
 800bd5c:	2313      	movs	r3, #19
 800bd5e:	e357      	b.n	800c410 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800bd60:	2302      	movs	r3, #2
 800bd62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800bd6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd6e:	2b03      	cmp	r3, #3
 800bd70:	d13c      	bne.n	800bdec <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800bd72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d11b      	bne.n	800bdb0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	0c5b      	lsrs	r3, r3, #17
 800bd7c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bd7e:	2300      	movs	r3, #0
 800bd80:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd82:	2301      	movs	r3, #1
 800bd84:	653b      	str	r3, [r7, #80]	; 0x50
 800bd86:	e005      	b.n	800bd94 <f_mkfs+0x1d0>
 800bd88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd90:	005b      	lsls	r3, r3, #1
 800bd92:	653b      	str	r3, [r7, #80]	; 0x50
 800bd94:	4a2d      	ldr	r2, [pc, #180]	; (800be4c <f_mkfs+0x288>)
 800bd96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d007      	beq.n	800bdb0 <f_mkfs+0x1ec>
 800bda0:	4a2a      	ldr	r2, [pc, #168]	; (800be4c <f_mkfs+0x288>)
 800bda2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bda4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bda8:	461a      	mov	r2, r3
 800bdaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d2eb      	bcs.n	800bd88 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800bdb0:	693a      	ldr	r2, [r7, #16]
 800bdb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdb8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	3302      	adds	r3, #2
 800bdbe:	009a      	lsls	r2, r3, #2
 800bdc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdc2:	4413      	add	r3, r2
 800bdc4:	1e5a      	subs	r2, r3, #1
 800bdc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdcc:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800bdce:	2320      	movs	r3, #32
 800bdd0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800bdd6:	6a3b      	ldr	r3, [r7, #32]
 800bdd8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d903      	bls.n	800bde8 <f_mkfs+0x224>
 800bde0:	6a3b      	ldr	r3, [r7, #32]
 800bde2:	4a1b      	ldr	r2, [pc, #108]	; (800be50 <f_mkfs+0x28c>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d952      	bls.n	800be8e <f_mkfs+0x2ca>
 800bde8:	230e      	movs	r3, #14
 800bdea:	e311      	b.n	800c410 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800bdec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d11b      	bne.n	800be2a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	0b1b      	lsrs	r3, r3, #12
 800bdf6:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	653b      	str	r3, [r7, #80]	; 0x50
 800be00:	e005      	b.n	800be0e <f_mkfs+0x24a>
 800be02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be04:	3301      	adds	r3, #1
 800be06:	64bb      	str	r3, [r7, #72]	; 0x48
 800be08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be0a:	005b      	lsls	r3, r3, #1
 800be0c:	653b      	str	r3, [r7, #80]	; 0x50
 800be0e:	4a11      	ldr	r2, [pc, #68]	; (800be54 <f_mkfs+0x290>)
 800be10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d007      	beq.n	800be2a <f_mkfs+0x266>
 800be1a:	4a0e      	ldr	r2, [pc, #56]	; (800be54 <f_mkfs+0x290>)
 800be1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be22:	461a      	mov	r2, r3
 800be24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be26:	4293      	cmp	r3, r2
 800be28:	d2eb      	bcs.n	800be02 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be32:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800be34:	6a3b      	ldr	r3, [r7, #32]
 800be36:	f640 72f5 	movw	r2, #4085	; 0xff5
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d90c      	bls.n	800be58 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800be3e:	6a3b      	ldr	r3, [r7, #32]
 800be40:	3302      	adds	r3, #2
 800be42:	005b      	lsls	r3, r3, #1
 800be44:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be46:	e012      	b.n	800be6e <f_mkfs+0x2aa>
 800be48:	20000198 	.word	0x20000198
 800be4c:	0800c6e0 	.word	0x0800c6e0
 800be50:	0ffffff5 	.word	0x0ffffff5
 800be54:	0800c6f0 	.word	0x0800c6f0
				} else {
					fmt = FS_FAT12;
 800be58:	2301      	movs	r3, #1
 800be5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800be5e:	6a3a      	ldr	r2, [r7, #32]
 800be60:	4613      	mov	r3, r2
 800be62:	005b      	lsls	r3, r3, #1
 800be64:	4413      	add	r3, r2
 800be66:	3301      	adds	r3, #1
 800be68:	085b      	lsrs	r3, r3, #1
 800be6a:	3303      	adds	r3, #3
 800be6c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800be6e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800be70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be72:	4413      	add	r3, r2
 800be74:	1e5a      	subs	r2, r3, #1
 800be76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be78:	fbb2 f3f3 	udiv	r3, r2, r3
 800be7c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800be7e:	2301      	movs	r3, #1
 800be80:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800be82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be84:	015a      	lsls	r2, r3, #5
 800be86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be88:	fbb2 f3f3 	udiv	r3, r2, r3
 800be8c:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800be8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be92:	4413      	add	r3, r2
 800be94:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800be96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be9a:	fb02 f203 	mul.w	r2, r2, r3
 800be9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bea0:	4413      	add	r3, r2
 800bea2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bea4:	4413      	add	r3, r2
 800bea6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	4413      	add	r3, r2
 800beae:	1e5a      	subs	r2, r3, #1
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	425b      	negs	r3, r3
 800beb4:	401a      	ands	r2, r3
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800bebc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bec0:	2b03      	cmp	r3, #3
 800bec2:	d108      	bne.n	800bed6 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800bec4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bec8:	4413      	add	r3, r2
 800beca:	657b      	str	r3, [r7, #84]	; 0x54
 800becc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bed0:	4413      	add	r3, r2
 800bed2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bed4:	e006      	b.n	800bee4 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800bed6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800beda:	fbb2 f3f3 	udiv	r3, r2, r3
 800bede:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bee0:	4413      	add	r3, r2
 800bee2:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800bee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee6:	011a      	lsls	r2, r3, #4
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	441a      	add	r2, r3
 800beec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beee:	1ad2      	subs	r2, r2, r3
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d901      	bls.n	800befa <f_mkfs+0x336>
 800bef6:	230e      	movs	r3, #14
 800bef8:	e28a      	b.n	800c410 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800befe:	1ad2      	subs	r2, r2, r3
 800bf00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf04:	fb01 f303 	mul.w	r3, r1, r3
 800bf08:	1ad2      	subs	r2, r2, r3
 800bf0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf0c:	1ad2      	subs	r2, r2, r3
 800bf0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf10:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf14:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800bf16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf1a:	2b03      	cmp	r3, #3
 800bf1c:	d10f      	bne.n	800bf3e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800bf1e:	6a3b      	ldr	r3, [r7, #32]
 800bf20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d80a      	bhi.n	800bf3e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d105      	bne.n	800bf3a <f_mkfs+0x376>
 800bf2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf30:	085b      	lsrs	r3, r3, #1
 800bf32:	607b      	str	r3, [r7, #4]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d144      	bne.n	800bfc4 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800bf3a:	230e      	movs	r3, #14
 800bf3c:	e268      	b.n	800c410 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800bf3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d133      	bne.n	800bfae <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800bf46:	6a3b      	ldr	r3, [r7, #32]
 800bf48:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d91e      	bls.n	800bf8e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d107      	bne.n	800bf66 <f_mkfs+0x3a2>
 800bf56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf58:	005b      	lsls	r3, r3, #1
 800bf5a:	2b40      	cmp	r3, #64	; 0x40
 800bf5c:	d803      	bhi.n	800bf66 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800bf5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	607b      	str	r3, [r7, #4]
 800bf64:	e033      	b.n	800bfce <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800bf66:	7afb      	ldrb	r3, [r7, #11]
 800bf68:	f003 0302 	and.w	r3, r3, #2
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d003      	beq.n	800bf78 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800bf70:	2303      	movs	r3, #3
 800bf72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bf76:	e02a      	b.n	800bfce <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d105      	bne.n	800bf8a <f_mkfs+0x3c6>
 800bf7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	607b      	str	r3, [r7, #4]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b80      	cmp	r3, #128	; 0x80
 800bf88:	d91e      	bls.n	800bfc8 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800bf8a:	230e      	movs	r3, #14
 800bf8c:	e240      	b.n	800c410 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800bf8e:	6a3b      	ldr	r3, [r7, #32]
 800bf90:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d80a      	bhi.n	800bfae <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d105      	bne.n	800bfaa <f_mkfs+0x3e6>
 800bf9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	607b      	str	r3, [r7, #4]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b80      	cmp	r3, #128	; 0x80
 800bfa8:	d910      	bls.n	800bfcc <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800bfaa:	230e      	movs	r3, #14
 800bfac:	e230      	b.n	800c410 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800bfae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d10c      	bne.n	800bfd0 <f_mkfs+0x40c>
 800bfb6:	6a3b      	ldr	r3, [r7, #32]
 800bfb8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d907      	bls.n	800bfd0 <f_mkfs+0x40c>
 800bfc0:	230e      	movs	r3, #14
 800bfc2:	e225      	b.n	800c410 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bfc4:	bf00      	nop
 800bfc6:	e6ce      	b.n	800bd66 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfc8:	bf00      	nop
 800bfca:	e6cc      	b.n	800bd66 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bfcc:	bf00      	nop
			pau = au;
 800bfce:	e6ca      	b.n	800bd66 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800bfd0:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800bfd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfda:	f7fd fc96 	bl	800990a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800bfde:	220b      	movs	r2, #11
 800bfe0:	49bc      	ldr	r1, [pc, #752]	; (800c2d4 <f_mkfs+0x710>)
 800bfe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfe4:	f7fd fc70 	bl	80098c8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	330b      	adds	r3, #11
 800bfec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bfee:	4611      	mov	r1, r2
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7fd fc22 	bl	800983a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	330d      	adds	r3, #13
 800bffa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bffc:	b2d2      	uxtb	r2, r2
 800bffe:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	330e      	adds	r3, #14
 800c004:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c006:	b292      	uxth	r2, r2
 800c008:	4611      	mov	r1, r2
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fd fc15 	bl	800983a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800c010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c012:	3310      	adds	r3, #16
 800c014:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c016:	b2d2      	uxtb	r2, r2
 800c018:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	f103 0211 	add.w	r2, r3, #17
 800c020:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c024:	2b03      	cmp	r3, #3
 800c026:	d002      	beq.n	800c02e <f_mkfs+0x46a>
 800c028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	e000      	b.n	800c030 <f_mkfs+0x46c>
 800c02e:	2300      	movs	r3, #0
 800c030:	4619      	mov	r1, r3
 800c032:	4610      	mov	r0, r2
 800c034:	f7fd fc01 	bl	800983a <st_word>
		if (sz_vol < 0x10000) {
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c03e:	d208      	bcs.n	800c052 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800c040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c042:	3313      	adds	r3, #19
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	b292      	uxth	r2, r2
 800c048:	4611      	mov	r1, r2
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fd fbf5 	bl	800983a <st_word>
 800c050:	e006      	b.n	800c060 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c054:	3320      	adds	r3, #32
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	4611      	mov	r1, r2
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fd fc08 	bl	8009870 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800c060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c062:	3315      	adds	r3, #21
 800c064:	22f8      	movs	r2, #248	; 0xf8
 800c066:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	3318      	adds	r3, #24
 800c06c:	213f      	movs	r1, #63	; 0x3f
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fd fbe3 	bl	800983a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800c074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c076:	331a      	adds	r3, #26
 800c078:	21ff      	movs	r1, #255	; 0xff
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fd fbdd 	bl	800983a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	331c      	adds	r3, #28
 800c084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c086:	4618      	mov	r0, r3
 800c088:	f7fd fbf2 	bl	8009870 <st_dword>
		if (fmt == FS_FAT32) {
 800c08c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c090:	2b03      	cmp	r3, #3
 800c092:	d131      	bne.n	800c0f8 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800c094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c096:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800c09a:	f7fd f96b 	bl	8009374 <get_fattime>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f7fd fbe4 	bl	8009870 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800c0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0aa:	3324      	adds	r3, #36	; 0x24
 800c0ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fd fbde 	bl	8009870 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b6:	332c      	adds	r3, #44	; 0x2c
 800c0b8:	2102      	movs	r1, #2
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fd fbd8 	bl	8009870 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c2:	3330      	adds	r3, #48	; 0x30
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fd fbb7 	bl	800983a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ce:	3332      	adds	r3, #50	; 0x32
 800c0d0:	2106      	movs	r1, #6
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fd fbb1 	bl	800983a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0da:	3340      	adds	r3, #64	; 0x40
 800c0dc:	2280      	movs	r2, #128	; 0x80
 800c0de:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800c0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e2:	3342      	adds	r3, #66	; 0x42
 800c0e4:	2229      	movs	r2, #41	; 0x29
 800c0e6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ea:	3347      	adds	r3, #71	; 0x47
 800c0ec:	2213      	movs	r2, #19
 800c0ee:	497a      	ldr	r1, [pc, #488]	; (800c2d8 <f_mkfs+0x714>)
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fd fbe9 	bl	80098c8 <mem_cpy>
 800c0f6:	e020      	b.n	800c13a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fa:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800c0fe:	f7fd f939 	bl	8009374 <get_fattime>
 800c102:	4603      	mov	r3, r0
 800c104:	4619      	mov	r1, r3
 800c106:	4620      	mov	r0, r4
 800c108:	f7fd fbb2 	bl	8009870 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10e:	3316      	adds	r3, #22
 800c110:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c112:	b292      	uxth	r2, r2
 800c114:	4611      	mov	r1, r2
 800c116:	4618      	mov	r0, r3
 800c118:	f7fd fb8f 	bl	800983a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	3324      	adds	r3, #36	; 0x24
 800c120:	2280      	movs	r2, #128	; 0x80
 800c122:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	3326      	adds	r3, #38	; 0x26
 800c128:	2229      	movs	r2, #41	; 0x29
 800c12a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12e:	332b      	adds	r3, #43	; 0x2b
 800c130:	2213      	movs	r2, #19
 800c132:	496a      	ldr	r1, [pc, #424]	; (800c2dc <f_mkfs+0x718>)
 800c134:	4618      	mov	r0, r3
 800c136:	f7fd fbc7 	bl	80098c8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800c13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c140:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c144:	4618      	mov	r0, r3
 800c146:	f7fd fb78 	bl	800983a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800c14a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c14e:	2301      	movs	r3, #1
 800c150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c152:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c154:	f7fd faf8 	bl	8009748 <disk_write>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <f_mkfs+0x59e>
 800c15e:	2301      	movs	r3, #1
 800c160:	e156      	b.n	800c410 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800c162:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c166:	2b03      	cmp	r3, #3
 800c168:	d140      	bne.n	800c1ec <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	1d9a      	adds	r2, r3, #6
 800c16e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c172:	2301      	movs	r3, #1
 800c174:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c176:	f7fd fae7 	bl	8009748 <disk_write>
			mem_set(buf, 0, ss);
 800c17a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c17c:	461a      	mov	r2, r3
 800c17e:	2100      	movs	r1, #0
 800c180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c182:	f7fd fbc2 	bl	800990a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800c186:	4956      	ldr	r1, [pc, #344]	; (800c2e0 <f_mkfs+0x71c>)
 800c188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c18a:	f7fd fb71 	bl	8009870 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800c18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c190:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c194:	4953      	ldr	r1, [pc, #332]	; (800c2e4 <f_mkfs+0x720>)
 800c196:	4618      	mov	r0, r3
 800c198:	f7fd fb6a 	bl	8009870 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c1a2:	6a3b      	ldr	r3, [r7, #32]
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	f7fd fb61 	bl	8009870 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c1b4:	2102      	movs	r1, #2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fd fb5a 	bl	8009870 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1c2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fd fb37 	bl	800983a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ce:	1dda      	adds	r2, r3, #7
 800c1d0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1d8:	f7fd fab6 	bl	8009748 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1de:	1c5a      	adds	r2, r3, #1
 800c1e0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1e8:	f7fd faae 	bl	8009748 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c1ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1f2:	f7fd fb8a 	bl	800990a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c1f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1f8:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1fe:	e04b      	b.n	800c298 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800c200:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c204:	2b03      	cmp	r3, #3
 800c206:	d113      	bne.n	800c230 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c208:	f06f 0107 	mvn.w	r1, #7
 800c20c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c20e:	f7fd fb2f 	bl	8009870 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c214:	3304      	adds	r3, #4
 800c216:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fd fb28 	bl	8009870 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c222:	3308      	adds	r3, #8
 800c224:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fd fb21 	bl	8009870 <st_dword>
 800c22e:	e00b      	b.n	800c248 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c230:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c234:	2b01      	cmp	r3, #1
 800c236:	d101      	bne.n	800c23c <f_mkfs+0x678>
 800c238:	4b2b      	ldr	r3, [pc, #172]	; (800c2e8 <f_mkfs+0x724>)
 800c23a:	e001      	b.n	800c240 <f_mkfs+0x67c>
 800c23c:	f06f 0307 	mvn.w	r3, #7
 800c240:	4619      	mov	r1, r3
 800c242:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c244:	f7fd fb14 	bl	8009870 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c24a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c24c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c250:	4293      	cmp	r3, r2
 800c252:	bf28      	it	cs
 800c254:	4613      	movcs	r3, r2
 800c256:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c258:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c25c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c25e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c262:	f7fd fa71 	bl	8009748 <disk_write>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <f_mkfs+0x6ac>
 800c26c:	2301      	movs	r3, #1
 800c26e:	e0cf      	b.n	800c410 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800c270:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c272:	461a      	mov	r2, r3
 800c274:	2100      	movs	r1, #0
 800c276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c278:	f7fd fb47 	bl	800990a <mem_set>
				sect += n; nsect -= n;
 800c27c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c27e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c280:	4413      	add	r3, r2
 800c282:	667b      	str	r3, [r7, #100]	; 0x64
 800c284:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c288:	1ad3      	subs	r3, r2, r3
 800c28a:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c28c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1dc      	bne.n	800c24c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c294:	3301      	adds	r3, #1
 800c296:	64bb      	str	r3, [r7, #72]	; 0x48
 800c298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c29a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d3af      	bcc.n	800c200 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c2a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c2a4:	2b03      	cmp	r3, #3
 800c2a6:	d101      	bne.n	800c2ac <f_mkfs+0x6e8>
 800c2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2aa:	e000      	b.n	800c2ae <f_mkfs+0x6ea>
 800c2ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2ae:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c2b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	bf28      	it	cs
 800c2b8:	4613      	movcs	r3, r2
 800c2ba:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c2bc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c2c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2c6:	f7fd fa3f 	bl	8009748 <disk_write>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d00d      	beq.n	800c2ec <f_mkfs+0x728>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e09d      	b.n	800c410 <f_mkfs+0x84c>
 800c2d4:	0800c5cc 	.word	0x0800c5cc
 800c2d8:	0800c5d8 	.word	0x0800c5d8
 800c2dc:	0800c5ec 	.word	0x0800c5ec
 800c2e0:	41615252 	.word	0x41615252
 800c2e4:	61417272 	.word	0x61417272
 800c2e8:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800c2ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2f0:	4413      	add	r3, r2
 800c2f2:	667b      	str	r3, [r7, #100]	; 0x64
 800c2f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c2fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1d6      	bne.n	800c2b0 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c302:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c306:	2b03      	cmp	r3, #3
 800c308:	d103      	bne.n	800c312 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800c30a:	230c      	movs	r3, #12
 800c30c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c310:	e010      	b.n	800c334 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c318:	d303      	bcc.n	800c322 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c31a:	2306      	movs	r3, #6
 800c31c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c320:	e008      	b.n	800c334 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c322:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c326:	2b02      	cmp	r3, #2
 800c328:	d101      	bne.n	800c32e <f_mkfs+0x76a>
 800c32a:	2304      	movs	r3, #4
 800c32c:	e000      	b.n	800c330 <f_mkfs+0x76c>
 800c32e:	2301      	movs	r3, #1
 800c330:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c334:	7afb      	ldrb	r3, [r7, #11]
 800c336:	f003 0308 	and.w	r3, r3, #8
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d15b      	bne.n	800c3f6 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800c33e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c340:	461a      	mov	r2, r3
 800c342:	2100      	movs	r1, #0
 800c344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c346:	f7fd fae0 	bl	800990a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c350:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c354:	4618      	mov	r0, r3
 800c356:	f7fd fa70 	bl	800983a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c360:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	2200      	movs	r2, #0
 800c366:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	3301      	adds	r3, #1
 800c36c:	2201      	movs	r2, #1
 800c36e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	3302      	adds	r3, #2
 800c374:	2201      	movs	r2, #1
 800c376:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	3303      	adds	r3, #3
 800c37c:	2200      	movs	r2, #0
 800c37e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	3304      	adds	r3, #4
 800c384:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c388:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800c38a:	693a      	ldr	r2, [r7, #16]
 800c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38e:	441a      	add	r2, r3
 800c390:	4b21      	ldr	r3, [pc, #132]	; (800c418 <f_mkfs+0x854>)
 800c392:	fba3 1302 	umull	r1, r3, r3, r2
 800c396:	1ad2      	subs	r2, r2, r3
 800c398:	0852      	lsrs	r2, r2, #1
 800c39a:	4413      	add	r3, r2
 800c39c:	0b5b      	lsrs	r3, r3, #13
 800c39e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	3305      	adds	r3, #5
 800c3a4:	22fe      	movs	r2, #254	; 0xfe
 800c3a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800c3a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3aa:	089b      	lsrs	r3, r3, #2
 800c3ac:	b2da      	uxtb	r2, r3
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	3306      	adds	r3, #6
 800c3b2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c3b6:	b2d2      	uxtb	r2, r2
 800c3b8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	3307      	adds	r3, #7
 800c3be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3c0:	b2d2      	uxtb	r2, r2
 800c3c2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fd fa50 	bl	8009870 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	330c      	adds	r3, #12
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	4611      	mov	r1, r2
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fd fa49 	bl	8009870 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800c3de:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3e8:	f7fd f9ae 	bl	8009748 <disk_write>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <f_mkfs+0x832>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e00c      	b.n	800c410 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800c3f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fd f9c2 	bl	8009788 <disk_ioctl>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <f_mkfs+0x84a>
 800c40a:	2301      	movs	r3, #1
 800c40c:	e000      	b.n	800c410 <f_mkfs+0x84c>

	return FR_OK;
 800c40e:	2300      	movs	r3, #0
}
 800c410:	4618      	mov	r0, r3
 800c412:	3774      	adds	r7, #116	; 0x74
 800c414:	46bd      	mov	sp, r7
 800c416:	bd90      	pop	{r4, r7, pc}
 800c418:	0515565b 	.word	0x0515565b

0800c41c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b087      	sub	sp, #28
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	4613      	mov	r3, r2
 800c428:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c42a:	2301      	movs	r3, #1
 800c42c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c432:	4b1f      	ldr	r3, [pc, #124]	; (800c4b0 <FATFS_LinkDriverEx+0x94>)
 800c434:	7a5b      	ldrb	r3, [r3, #9]
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d131      	bne.n	800c4a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c43c:	4b1c      	ldr	r3, [pc, #112]	; (800c4b0 <FATFS_LinkDriverEx+0x94>)
 800c43e:	7a5b      	ldrb	r3, [r3, #9]
 800c440:	b2db      	uxtb	r3, r3
 800c442:	461a      	mov	r2, r3
 800c444:	4b1a      	ldr	r3, [pc, #104]	; (800c4b0 <FATFS_LinkDriverEx+0x94>)
 800c446:	2100      	movs	r1, #0
 800c448:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c44a:	4b19      	ldr	r3, [pc, #100]	; (800c4b0 <FATFS_LinkDriverEx+0x94>)
 800c44c:	7a5b      	ldrb	r3, [r3, #9]
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	4a17      	ldr	r2, [pc, #92]	; (800c4b0 <FATFS_LinkDriverEx+0x94>)
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c45a:	4b15      	ldr	r3, [pc, #84]	; (800c4b0 <FATFS_LinkDriverEx+0x94>)
 800c45c:	7a5b      	ldrb	r3, [r3, #9]
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	461a      	mov	r2, r3
 800c462:	4b13      	ldr	r3, [pc, #76]	; (800c4b0 <FATFS_LinkDriverEx+0x94>)
 800c464:	4413      	add	r3, r2
 800c466:	79fa      	ldrb	r2, [r7, #7]
 800c468:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c46a:	4b11      	ldr	r3, [pc, #68]	; (800c4b0 <FATFS_LinkDriverEx+0x94>)
 800c46c:	7a5b      	ldrb	r3, [r3, #9]
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	1c5a      	adds	r2, r3, #1
 800c472:	b2d1      	uxtb	r1, r2
 800c474:	4a0e      	ldr	r2, [pc, #56]	; (800c4b0 <FATFS_LinkDriverEx+0x94>)
 800c476:	7251      	strb	r1, [r2, #9]
 800c478:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c47a:	7dbb      	ldrb	r3, [r7, #22]
 800c47c:	3330      	adds	r3, #48	; 0x30
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	3301      	adds	r3, #1
 800c488:	223a      	movs	r2, #58	; 0x3a
 800c48a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	3302      	adds	r3, #2
 800c490:	222f      	movs	r2, #47	; 0x2f
 800c492:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	3303      	adds	r3, #3
 800c498:	2200      	movs	r2, #0
 800c49a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c49c:	2300      	movs	r3, #0
 800c49e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	371c      	adds	r7, #28
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	200001c0 	.word	0x200001c0

0800c4b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c4be:	2200      	movs	r2, #0
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7ff ffaa 	bl	800c41c <FATFS_LinkDriverEx>
 800c4c8:	4603      	mov	r3, r0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
	...

0800c4d4 <__libc_init_array>:
 800c4d4:	b570      	push	{r4, r5, r6, lr}
 800c4d6:	4d0d      	ldr	r5, [pc, #52]	; (800c50c <__libc_init_array+0x38>)
 800c4d8:	4c0d      	ldr	r4, [pc, #52]	; (800c510 <__libc_init_array+0x3c>)
 800c4da:	1b64      	subs	r4, r4, r5
 800c4dc:	10a4      	asrs	r4, r4, #2
 800c4de:	2600      	movs	r6, #0
 800c4e0:	42a6      	cmp	r6, r4
 800c4e2:	d109      	bne.n	800c4f8 <__libc_init_array+0x24>
 800c4e4:	4d0b      	ldr	r5, [pc, #44]	; (800c514 <__libc_init_array+0x40>)
 800c4e6:	4c0c      	ldr	r4, [pc, #48]	; (800c518 <__libc_init_array+0x44>)
 800c4e8:	f000 f82e 	bl	800c548 <_init>
 800c4ec:	1b64      	subs	r4, r4, r5
 800c4ee:	10a4      	asrs	r4, r4, #2
 800c4f0:	2600      	movs	r6, #0
 800c4f2:	42a6      	cmp	r6, r4
 800c4f4:	d105      	bne.n	800c502 <__libc_init_array+0x2e>
 800c4f6:	bd70      	pop	{r4, r5, r6, pc}
 800c4f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4fc:	4798      	blx	r3
 800c4fe:	3601      	adds	r6, #1
 800c500:	e7ee      	b.n	800c4e0 <__libc_init_array+0xc>
 800c502:	f855 3b04 	ldr.w	r3, [r5], #4
 800c506:	4798      	blx	r3
 800c508:	3601      	adds	r6, #1
 800c50a:	e7f2      	b.n	800c4f2 <__libc_init_array+0x1e>
 800c50c:	0800c700 	.word	0x0800c700
 800c510:	0800c700 	.word	0x0800c700
 800c514:	0800c700 	.word	0x0800c700
 800c518:	0800c704 	.word	0x0800c704

0800c51c <memcpy>:
 800c51c:	440a      	add	r2, r1
 800c51e:	4291      	cmp	r1, r2
 800c520:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c524:	d100      	bne.n	800c528 <memcpy+0xc>
 800c526:	4770      	bx	lr
 800c528:	b510      	push	{r4, lr}
 800c52a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c52e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c532:	4291      	cmp	r1, r2
 800c534:	d1f9      	bne.n	800c52a <memcpy+0xe>
 800c536:	bd10      	pop	{r4, pc}

0800c538 <memset>:
 800c538:	4402      	add	r2, r0
 800c53a:	4603      	mov	r3, r0
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d100      	bne.n	800c542 <memset+0xa>
 800c540:	4770      	bx	lr
 800c542:	f803 1b01 	strb.w	r1, [r3], #1
 800c546:	e7f9      	b.n	800c53c <memset+0x4>

0800c548 <_init>:
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	bf00      	nop
 800c54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c54e:	bc08      	pop	{r3}
 800c550:	469e      	mov	lr, r3
 800c552:	4770      	bx	lr

0800c554 <_fini>:
 800c554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c556:	bf00      	nop
 800c558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c55a:	bc08      	pop	{r3}
 800c55c:	469e      	mov	lr, r3
 800c55e:	4770      	bx	lr
