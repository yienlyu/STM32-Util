
SDcard-example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009470  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800961c  0800961c  0001961c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800967c  0800967c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800967c  0800967c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800967c  0800967c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800967c  0800967c  0001967c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009680  08009680  00019680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a4c  20000088  0800970c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ad4  0800970c  00020ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e468  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035e9  00000000  00000000  0003e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00041b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  00042f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bdc8  00000000  00000000  00044278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ca2  00000000  00000000  00070040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103a04  00000000  00000000  00086ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018a6e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000535c  00000000  00000000  0018a73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000088 	.word	0x20000088
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009604 	.word	0x08009604

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000008c 	.word	0x2000008c
 80001e8:	08009604 	.word	0x08009604

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f2:	f002 fc21 	bl	8002a38 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(LED2);
 80001f6:	2001      	movs	r0, #1
 80001f8:	f001 fdfc 	bl	8001df4 <BSP_LED_Init>
  BSP_LED_Init(LED1);
 80001fc:	2000      	movs	r0, #0
 80001fe:	f001 fdf9 	bl	8001df4 <BSP_LED_Init>

  // init MFX
  uint8_t ret_mfx = IO_ERROR;
 8000202:	2301      	movs	r3, #1
 8000204:	71fb      	strb	r3, [r7, #7]

  ret_mfx = BSP_IO_Init();
 8000206:	f002 f95b 	bl	80024c0 <BSP_IO_Init>
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  BSP_LED_Off(LED2);
 800020e:	2001      	movs	r0, #1
 8000210:	f001 fe60 	bl	8001ed4 <BSP_LED_Off>

  if (ret_mfx == IO_OK || ret_mfx == IO_ALREADY_INITIALIZED) {
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d002      	beq.n	8000220 <main+0x34>
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	2b03      	cmp	r3, #3
 800021e:	d102      	bne.n	8000226 <main+0x3a>
	  BSP_LED_On(LED2);
 8000220:	2001      	movs	r0, #1
 8000222:	f001 fe35 	bl	8001e90 <BSP_LED_On>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f849 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f99b 	bl	8000564 <MX_GPIO_Init>
  MX_DMA_Init();
 800022e:	f000 f8f7 	bl	8000420 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000232:	f000 f8d5 	bl	80003e0 <MX_SDMMC1_SD_Init>
  MX_I2C2_Init();
 8000236:	f000 f893 	bl	8000360 <MX_I2C2_Init>
  MX_FATFS_Init();
 800023a:	f008 ffc7 	bl	80091cc <MX_FATFS_Init>
  MX_FMC_Init();
 800023e:	f000 f931 	bl	80004a4 <MX_FMC_Init>

  /* USER CODE BEGIN 2 */


  /* 1- Link the micro SD disk I/O driver */
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8000242:	491a      	ldr	r1, [pc, #104]	; (80002ac <main+0xc0>)
 8000244:	481a      	ldr	r0, [pc, #104]	; (80002b0 <main+0xc4>)
 8000246:	f009 f9a1 	bl	800958c <FATFS_LinkDriver>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d108      	bne.n	8000262 <main+0x76>
  {
    /*##-2- Init the SD Card #################################################*/

//    SD_Initialize();

    if(BSP_SD_IsDetected())
 8000250:	f002 fa1c 	bl	800268c <BSP_SD_IsDetected>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d006      	beq.n	8000268 <main+0x7c>
    {
      Appli_state = APPLICATION_RUNNING;
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <main+0xc8>)
 800025c:	2201      	movs	r2, #1
 800025e:	701a      	strb	r2, [r3, #0]
 8000260:	e002      	b.n	8000268 <main+0x7c>
    }
  }
  else
  {
    Error_Handler();
 8000262:	f000 f9f3 	bl	800064c <Error_Handler>
    while(1) {};
 8000266:	e7fe      	b.n	8000266 <main+0x7a>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(Appli_state)
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <main+0xc8>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b02      	cmp	r3, #2
 800026e:	d00c      	beq.n	800028a <main+0x9e>
 8000270:	2b02      	cmp	r3, #2
 8000272:	dc17      	bgt.n	80002a4 <main+0xb8>
 8000274:	2b00      	cmp	r3, #0
 8000276:	d017      	beq.n	80002a8 <main+0xbc>
 8000278:	2b01      	cmp	r3, #1
 800027a:	d113      	bne.n	80002a4 <main+0xb8>
	{
	case APPLICATION_RUNNING:
	  BSP_LED_Off(LED1);
 800027c:	2000      	movs	r0, #0
 800027e:	f001 fe29 	bl	8001ed4 <BSP_LED_Off>
//	  SD_Initialize();
//	  FS_FileOperations();
	  Appli_state = APPLICATION_IDLE;
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <main+0xc8>)
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
	  break;
 8000288:	e00f      	b.n	80002aa <main+0xbe>

	case APPLICATION_IDLE:
	  break;

	case APPLICATION_SD_UNPLUGGED:
	  if (isInitialized == 1)
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <main+0xcc>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d104      	bne.n	800029c <main+0xb0>
	  {
		Error_Handler();
 8000292:	f000 f9db 	bl	800064c <Error_Handler>
		isInitialized = 0;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <main+0xcc>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
	  }

	  Appli_state = APPLICATION_IDLE;
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <main+0xc8>)
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
	  break;
 80002a2:	e002      	b.n	80002aa <main+0xbe>

	default:
	  break;
 80002a4:	bf00      	nop
 80002a6:	e7df      	b.n	8000268 <main+0x7c>
	  break;
 80002a8:	bf00      	nop
	switch(Appli_state)
 80002aa:	e7dd      	b.n	8000268 <main+0x7c>
 80002ac:	20000670 	.word	0x20000670
 80002b0:	08009668 	.word	0x08009668
 80002b4:	200000a4 	.word	0x200000a4
 80002b8:	200000a5 	.word	0x200000a5

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b096      	sub	sp, #88	; 0x58
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	2244      	movs	r2, #68	; 0x44
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f009 f992 	bl	80095f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	463b      	mov	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e2:	f004 fa77 	bl	80047d4 <HAL_PWREx_ControlVoltageScaling>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002ec:	f000 f9ae 	bl	800064c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f0:	2310      	movs	r3, #16
 80002f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f4:	2301      	movs	r3, #1
 80002f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002fc:	2360      	movs	r3, #96	; 0x60
 80002fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000300:	2302      	movs	r3, #2
 8000302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000304:	2301      	movs	r3, #1
 8000306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000308:	2301      	movs	r3, #1
 800030a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800030c:	2328      	movs	r3, #40	; 0x28
 800030e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000310:	2302      	movs	r3, #2
 8000312:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000314:	2308      	movs	r3, #8
 8000316:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000318:	2302      	movs	r3, #2
 800031a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031c:	f107 0314 	add.w	r3, r7, #20
 8000320:	4618      	mov	r0, r3
 8000322:	f004 faad 	bl	8004880 <HAL_RCC_OscConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800032c:	f000 f98e 	bl	800064c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
 8000332:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2303      	movs	r3, #3
 8000336:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	2104      	movs	r1, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f004 febf 	bl	80050cc <HAL_RCC_ClockConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000354:	f000 f97a 	bl	800064c <Error_Handler>
  }
}
 8000358:	bf00      	nop
 800035a:	3758      	adds	r7, #88	; 0x58
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000364:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <MX_I2C2_Init+0x74>)
 8000366:	4a1c      	ldr	r2, [pc, #112]	; (80003d8 <MX_I2C2_Init+0x78>)
 8000368:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800036a:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <MX_I2C2_Init+0x74>)
 800036c:	4a1b      	ldr	r2, [pc, #108]	; (80003dc <MX_I2C2_Init+0x7c>)
 800036e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000370:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <MX_I2C2_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000376:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <MX_I2C2_Init+0x74>)
 8000378:	2201      	movs	r2, #1
 800037a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_I2C2_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_I2C2_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_I2C2_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_I2C2_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_I2C2_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800039a:	480e      	ldr	r0, [pc, #56]	; (80003d4 <MX_I2C2_Init+0x74>)
 800039c:	f003 facc 	bl	8003938 <HAL_I2C_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003a6:	f000 f951 	bl	800064c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003aa:	2100      	movs	r1, #0
 80003ac:	4809      	ldr	r0, [pc, #36]	; (80003d4 <MX_I2C2_Init+0x74>)
 80003ae:	f004 f96b 	bl	8004688 <HAL_I2CEx_ConfigAnalogFilter>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003b8:	f000 f948 	bl	800064c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003bc:	2100      	movs	r1, #0
 80003be:	4805      	ldr	r0, [pc, #20]	; (80003d4 <MX_I2C2_Init+0x74>)
 80003c0:	f004 f9ad 	bl	800471e <HAL_I2CEx_ConfigDigitalFilter>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003ca:	f000 f93f 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	200001a4 	.word	0x200001a4
 80003d8:	40005800 	.word	0x40005800
 80003dc:	10909cec 	.word	0x10909cec

080003e0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 80003e6:	4a0d      	ldr	r2, [pc, #52]	; (800041c <MX_SDMMC1_SD_Init+0x3c>)
 80003e8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 8000404:	2200      	movs	r2, #0
 8000406:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <MX_SDMMC1_SD_Init+0x38>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	200001f0 	.word	0x200001f0
 800041c:	40012800 	.word	0x40012800

08000420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000426:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <MX_DMA_Init+0x80>)
 8000428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800042a:	4a1d      	ldr	r2, [pc, #116]	; (80004a0 <MX_DMA_Init+0x80>)
 800042c:	f043 0302 	orr.w	r3, r3, #2
 8000430:	6493      	str	r3, [r2, #72]	; 0x48
 8000432:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <MX_DMA_Init+0x80>)
 8000434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000436:	f003 0302 	and.w	r3, r3, #2
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <MX_DMA_Init+0x80>)
 8000440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000442:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <MX_DMA_Init+0x80>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6493      	str	r3, [r2, #72]	; 0x48
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <MX_DMA_Init+0x80>)
 800044c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	2100      	movs	r1, #0
 800045a:	200e      	movs	r0, #14
 800045c:	f002 fc83 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000460:	200e      	movs	r0, #14
 8000462:	f002 fc9c 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	200f      	movs	r0, #15
 800046c:	f002 fc7b 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000470:	200f      	movs	r0, #15
 8000472:	f002 fc94 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	2100      	movs	r1, #0
 800047a:	203b      	movs	r0, #59	; 0x3b
 800047c:	f002 fc73 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000480:	203b      	movs	r0, #59	; 0x3b
 8000482:	f002 fc8c 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	203c      	movs	r0, #60	; 0x3c
 800048c:	f002 fc6b 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000490:	203c      	movs	r0, #60	; 0x3c
 8000492:	f002 fc84 	bl	8002d9e <HAL_NVIC_EnableIRQ>

}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80004aa:	463b      	mov	r3, r7
 80004ac:	2220      	movs	r2, #32
 80004ae:	2100      	movs	r1, #0
 80004b0:	4618      	mov	r0, r3
 80004b2:	f009 f89f 	bl	80095f4 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80004b6:	4b29      	ldr	r3, [pc, #164]	; (800055c <MX_FMC_Init+0xb8>)
 80004b8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80004bc:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80004be:	4b27      	ldr	r3, [pc, #156]	; (800055c <MX_FMC_Init+0xb8>)
 80004c0:	4a27      	ldr	r2, [pc, #156]	; (8000560 <MX_FMC_Init+0xbc>)
 80004c2:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80004c4:	4b25      	ldr	r3, [pc, #148]	; (800055c <MX_FMC_Init+0xb8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80004ca:	4b24      	ldr	r3, [pc, #144]	; (800055c <MX_FMC_Init+0xb8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80004d0:	4b22      	ldr	r3, [pc, #136]	; (800055c <MX_FMC_Init+0xb8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80004d6:	4b21      	ldr	r3, [pc, #132]	; (800055c <MX_FMC_Init+0xb8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <MX_FMC_Init+0xb8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <MX_FMC_Init+0xb8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	; (800055c <MX_FMC_Init+0xb8>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_FMC_Init+0xb8>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80004f4:	4b19      	ldr	r3, [pc, #100]	; (800055c <MX_FMC_Init+0xb8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80004fa:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_FMC_Init+0xb8>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_FMC_Init+0xb8>)
 8000502:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000506:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_FMC_Init+0xb8>)
 800050a:	2200      	movs	r2, #0
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <MX_FMC_Init+0xb8>)
 8000510:	2200      	movs	r2, #0
 8000512:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_FMC_Init+0xb8>)
 8000516:	2200      	movs	r2, #0
 8000518:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <MX_FMC_Init+0xb8>)
 800051c:	2200      	movs	r2, #0
 800051e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000520:	230f      	movs	r3, #15
 8000522:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000524:	230f      	movs	r3, #15
 8000526:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000528:	23ff      	movs	r3, #255	; 0xff
 800052a:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800052c:	230f      	movs	r3, #15
 800052e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000530:	2310      	movs	r3, #16
 8000532:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000534:	2311      	movs	r3, #17
 8000536:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	; (800055c <MX_FMC_Init+0xb8>)
 8000544:	f007 ff6c 	bl	8008420 <HAL_SRAM_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_FMC_Init+0xae>
  {
    Error_Handler( );
 800054e:	f000 f87d 	bl	800064c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000552:	bf00      	nop
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000274 	.word	0x20000274
 8000560:	a0000104 	.word	0xa0000104

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08c      	sub	sp, #48	; 0x30
 8000568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 031c 	add.w	r3, r7, #28
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b32      	ldr	r3, [pc, #200]	; (8000644 <MX_GPIO_Init+0xe0>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a31      	ldr	r2, [pc, #196]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
 8000590:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000592:	4b2c      	ldr	r3, [pc, #176]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	4a2b      	ldr	r2, [pc, #172]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059e:	4b29      	ldr	r3, [pc, #164]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b26      	ldr	r3, [pc, #152]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a25      	ldr	r2, [pc, #148]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b23      	ldr	r3, [pc, #140]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a1f      	ldr	r2, [pc, #124]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0320 	and.w	r3, r3, #32
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a19      	ldr	r2, [pc, #100]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005e0:	f043 0310 	orr.w	r3, r3, #16
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0310 	and.w	r3, r3, #16
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_GPIO_Init+0xe0>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_GPIO_Init+0xe0>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_GPIO_Init+0xe0>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4619      	mov	r1, r3
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_GPIO_Init+0xe4>)
 8000638:	f002 fee2 	bl	8003400 <HAL_GPIO_Init>

}
 800063c:	bf00      	nop
 800063e:	3730      	adds	r7, #48	; 0x30
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000
 8000648:	48000400 	.word	0x48000400

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	e7fe      	b.n	8000654 <Error_Handler+0x8>
	...

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_MspInit+0x44>)
 8000660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_MspInit+0x44>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6613      	str	r3, [r2, #96]	; 0x60
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_MspInit+0x44>)
 800066c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_MspInit+0x44>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067a:	4a08      	ldr	r2, [pc, #32]	; (800069c <HAL_MspInit+0x44>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	6593      	str	r3, [r2, #88]	; 0x58
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_MspInit+0x44>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0ae      	sub	sp, #184	; 0xb8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b8:	f107 0318 	add.w	r3, r7, #24
 80006bc:	228c      	movs	r2, #140	; 0x8c
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f008 ff97 	bl	80095f4 <memset>
  if(hi2c->Instance==I2C2)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a5b      	ldr	r2, [pc, #364]	; (8000838 <HAL_I2C_MspInit+0x198>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	f040 80af 	bne.w	8000830 <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006d2:	2380      	movs	r3, #128	; 0x80
 80006d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fefa 	bl	80054d8 <HAL_RCCEx_PeriphCLKConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80006ea:	f7ff ffaf 	bl	800064c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	4b53      	ldr	r3, [pc, #332]	; (800083c <HAL_I2C_MspInit+0x19c>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a52      	ldr	r2, [pc, #328]	; (800083c <HAL_I2C_MspInit+0x19c>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b50      	ldr	r3, [pc, #320]	; (800083c <HAL_I2C_MspInit+0x19c>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b4d      	ldr	r3, [pc, #308]	; (800083c <HAL_I2C_MspInit+0x19c>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a4c      	ldr	r2, [pc, #304]	; (800083c <HAL_I2C_MspInit+0x19c>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b4a      	ldr	r3, [pc, #296]	; (800083c <HAL_I2C_MspInit+0x19c>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800071e:	2310      	movs	r3, #16
 8000720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000724:	2312      	movs	r3, #18
 8000726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000736:	2304      	movs	r3, #4
 8000738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800073c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000740:	4619      	mov	r1, r3
 8000742:	483f      	ldr	r0, [pc, #252]	; (8000840 <HAL_I2C_MspInit+0x1a0>)
 8000744:	f002 fe5c 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000748:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800074c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000750:	2312      	movs	r3, #18
 8000752:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000762:	2304      	movs	r3, #4
 8000764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800076c:	4619      	mov	r1, r3
 800076e:	4835      	ldr	r0, [pc, #212]	; (8000844 <HAL_I2C_MspInit+0x1a4>)
 8000770:	f002 fe46 	bl	8003400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000774:	4b31      	ldr	r3, [pc, #196]	; (800083c <HAL_I2C_MspInit+0x19c>)
 8000776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000778:	4a30      	ldr	r2, [pc, #192]	; (800083c <HAL_I2C_MspInit+0x19c>)
 800077a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800077e:	6593      	str	r3, [r2, #88]	; 0x58
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <HAL_I2C_MspInit+0x19c>)
 8000782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 800078c:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <HAL_I2C_MspInit+0x1a8>)
 800078e:	4a2f      	ldr	r2, [pc, #188]	; (800084c <HAL_I2C_MspInit+0x1ac>)
 8000790:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <HAL_I2C_MspInit+0x1a8>)
 8000794:	2203      	movs	r2, #3
 8000796:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000798:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <HAL_I2C_MspInit+0x1a8>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <HAL_I2C_MspInit+0x1a8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <HAL_I2C_MspInit+0x1a8>)
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <HAL_I2C_MspInit+0x1a8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <HAL_I2C_MspInit+0x1a8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <HAL_I2C_MspInit+0x1a8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <HAL_I2C_MspInit+0x1a8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80007c2:	4821      	ldr	r0, [pc, #132]	; (8000848 <HAL_I2C_MspInit+0x1a8>)
 80007c4:	f002 fb14 	bl	8002df0 <HAL_DMA_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_I2C_MspInit+0x132>
    {
      Error_Handler();
 80007ce:	f7ff ff3d 	bl	800064c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a1c      	ldr	r2, [pc, #112]	; (8000848 <HAL_I2C_MspInit+0x1a8>)
 80007d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <HAL_I2C_MspInit+0x1a8>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <HAL_I2C_MspInit+0x1b0>)
 80007e0:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <HAL_I2C_MspInit+0x1b4>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <HAL_I2C_MspInit+0x1b0>)
 80007e6:	2203      	movs	r2, #3
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_I2C_MspInit+0x1b0>)
 80007ec:	2210      	movs	r2, #16
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <HAL_I2C_MspInit+0x1b0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <HAL_I2C_MspInit+0x1b0>)
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_I2C_MspInit+0x1b0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <HAL_I2C_MspInit+0x1b0>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_I2C_MspInit+0x1b0>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_I2C_MspInit+0x1b0>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000814:	480e      	ldr	r0, [pc, #56]	; (8000850 <HAL_I2C_MspInit+0x1b0>)
 8000816:	f002 faeb 	bl	8002df0 <HAL_DMA_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <HAL_I2C_MspInit+0x184>
    {
      Error_Handler();
 8000820:	f7ff ff14 	bl	800064c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_I2C_MspInit+0x1b0>)
 8000828:	639a      	str	r2, [r3, #56]	; 0x38
 800082a:	4a09      	ldr	r2, [pc, #36]	; (8000850 <HAL_I2C_MspInit+0x1b0>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000830:	bf00      	nop
 8000832:	37b8      	adds	r7, #184	; 0xb8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40005800 	.word	0x40005800
 800083c:	40021000 	.word	0x40021000
 8000840:	48001c00 	.word	0x48001c00
 8000844:	48000400 	.word	0x48000400
 8000848:	200002c4 	.word	0x200002c4
 800084c:	40020058 	.word	0x40020058
 8000850:	2000030c 	.word	0x2000030c
 8000854:	40020044 	.word	0x40020044

08000858 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <HAL_I2C_MspDeInit+0x4c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d118      	bne.n	800089c <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_I2C_MspDeInit+0x50>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <HAL_I2C_MspDeInit+0x50>)
 8000870:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000874:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 8000876:	2110      	movs	r1, #16
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <HAL_I2C_MspDeInit+0x54>)
 800087a:	f002 ff53 	bl	8003724 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14);
 800087e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000882:	480b      	ldr	r0, [pc, #44]	; (80008b0 <HAL_I2C_MspDeInit+0x58>)
 8000884:	f002 ff4e 	bl	8003724 <HAL_GPIO_DeInit>

    /* I2C2 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800088c:	4618      	mov	r0, r3
 800088e:	f002 fb67 	bl	8002f60 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000896:	4618      	mov	r0, r3
 8000898:	f002 fb62 	bl	8002f60 <HAL_DMA_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40005800 	.word	0x40005800
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48001c00 	.word	0x48001c00
 80008b0:	48000400 	.word	0x48000400

080008b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0ae      	sub	sp, #184	; 0xb8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008cc:	f107 0318 	add.w	r3, r7, #24
 80008d0:	228c      	movs	r2, #140	; 0x8c
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f008 fe8d 	bl	80095f4 <memset>
  if(hsd->Instance==SDMMC1)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a6a      	ldr	r2, [pc, #424]	; (8000a88 <HAL_SD_MspInit+0x1d4>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	f040 80cd 	bne.w	8000a80 <HAL_SD_MspInit+0x1cc>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80008e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80008ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80008ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80008f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80008fc:	2310      	movs	r3, #16
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000904:	2302      	movs	r3, #2
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000908:	2302      	movs	r3, #2
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800090c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000912:	f107 0318 	add.w	r3, r7, #24
 8000916:	4618      	mov	r0, r3
 8000918:	f004 fdde 	bl	80054d8 <HAL_RCCEx_PeriphCLKConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_SD_MspInit+0x72>
    {
      Error_Handler();
 8000922:	f7ff fe93 	bl	800064c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000926:	4b59      	ldr	r3, [pc, #356]	; (8000a8c <HAL_SD_MspInit+0x1d8>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	4a58      	ldr	r2, [pc, #352]	; (8000a8c <HAL_SD_MspInit+0x1d8>)
 800092c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000930:	6613      	str	r3, [r2, #96]	; 0x60
 8000932:	4b56      	ldr	r3, [pc, #344]	; (8000a8c <HAL_SD_MspInit+0x1d8>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	4b53      	ldr	r3, [pc, #332]	; (8000a8c <HAL_SD_MspInit+0x1d8>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a52      	ldr	r2, [pc, #328]	; (8000a8c <HAL_SD_MspInit+0x1d8>)
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b50      	ldr	r3, [pc, #320]	; (8000a8c <HAL_SD_MspInit+0x1d8>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b4d      	ldr	r3, [pc, #308]	; (8000a8c <HAL_SD_MspInit+0x1d8>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a4c      	ldr	r2, [pc, #304]	; (8000a8c <HAL_SD_MspInit+0x1d8>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b4a      	ldr	r3, [pc, #296]	; (8000a8c <HAL_SD_MspInit+0x1d8>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800096e:	2304      	movs	r3, #4
 8000970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000986:	230c      	movs	r3, #12
 8000988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000990:	4619      	mov	r1, r3
 8000992:	483f      	ldr	r0, [pc, #252]	; (8000a90 <HAL_SD_MspInit+0x1dc>)
 8000994:	f002 fd34 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_9
 8000998:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800099c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009b2:	230c      	movs	r3, #12
 80009b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009bc:	4619      	mov	r1, r3
 80009be:	4835      	ldr	r0, [pc, #212]	; (8000a94 <HAL_SD_MspInit+0x1e0>)
 80009c0:	f002 fd1e 	bl	8003400 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 80009c4:	4b34      	ldr	r3, [pc, #208]	; (8000a98 <HAL_SD_MspInit+0x1e4>)
 80009c6:	4a35      	ldr	r2, [pc, #212]	; (8000a9c <HAL_SD_MspInit+0x1e8>)
 80009c8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 80009ca:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <HAL_SD_MspInit+0x1e4>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d0:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <HAL_SD_MspInit+0x1e4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d6:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <HAL_SD_MspInit+0x1e4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009dc:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <HAL_SD_MspInit+0x1e4>)
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <HAL_SD_MspInit+0x1e4>)
 80009e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009ea:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <HAL_SD_MspInit+0x1e4>)
 80009ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009f0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 80009f2:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <HAL_SD_MspInit+0x1e4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009f8:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <HAL_SD_MspInit+0x1e4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80009fe:	4826      	ldr	r0, [pc, #152]	; (8000a98 <HAL_SD_MspInit+0x1e4>)
 8000a00:	f002 f9f6 	bl	8002df0 <HAL_DMA_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_SD_MspInit+0x15a>
    {
      Error_Handler();
 8000a0a:	f7ff fe1f 	bl	800064c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <HAL_SD_MspInit+0x1e4>)
 8000a12:	641a      	str	r2, [r3, #64]	; 0x40
 8000a14:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <HAL_SD_MspInit+0x1e4>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <HAL_SD_MspInit+0x1ec>)
 8000a1c:	4a21      	ldr	r2, [pc, #132]	; (8000aa4 <HAL_SD_MspInit+0x1f0>)
 8000a1e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <HAL_SD_MspInit+0x1ec>)
 8000a22:	2207      	movs	r2, #7
 8000a24:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <HAL_SD_MspInit+0x1ec>)
 8000a28:	2210      	movs	r2, #16
 8000a2a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <HAL_SD_MspInit+0x1ec>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <HAL_SD_MspInit+0x1ec>)
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_SD_MspInit+0x1ec>)
 8000a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_SD_MspInit+0x1ec>)
 8000a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a46:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_SD_MspInit+0x1ec>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_SD_MspInit+0x1ec>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000a54:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <HAL_SD_MspInit+0x1ec>)
 8000a56:	f002 f9cb 	bl	8002df0 <HAL_DMA_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8000a60:	f7ff fdf4 	bl	800064c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_SD_MspInit+0x1ec>)
 8000a68:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a6a:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <HAL_SD_MspInit+0x1ec>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2031      	movs	r0, #49	; 0x31
 8000a76:	f002 f976 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000a7a:	2031      	movs	r0, #49	; 0x31
 8000a7c:	f002 f98f 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	37b8      	adds	r7, #184	; 0xb8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40012800 	.word	0x40012800
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000c00 	.word	0x48000c00
 8000a94:	48000800 	.word	0x48000800
 8000a98:	20000554 	.word	0x20000554
 8000a9c:	40020444 	.word	0x40020444
 8000aa0:	2000059c 	.word	0x2000059c
 8000aa4:	40020458 	.word	0x40020458

08000aa8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <HAL_FMC_MspInit+0xa4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d13e      	bne.n	8000b42 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <HAL_FMC_MspInit+0xa4>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <HAL_FMC_MspInit+0xa8>)
 8000acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ace:	4a20      	ldr	r2, [pc, #128]	; (8000b50 <HAL_FMC_MspInit+0xa8>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6513      	str	r3, [r2, #80]	; 0x50
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <HAL_FMC_MspInit+0xa8>)
 8000ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  PE9   ------> FMC_D6
  PE8   ------> FMC_D5
  PD14   ------> FMC_D0
  PE7   ------> FMC_D4
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_5
 8000ae2:	f24c 03f3 	movw	r3, #49395	; 0xc0f3
 8000ae6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000af4:	230c      	movs	r3, #12
 8000af6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4619      	mov	r1, r3
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <HAL_FMC_MspInit+0xac>)
 8000afe:	f002 fc7f 	bl	8003400 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3;
 8000b02:	230f      	movs	r3, #15
 8000b04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b12:	230c      	movs	r3, #12
 8000b14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480f      	ldr	r0, [pc, #60]	; (8000b58 <HAL_FMC_MspInit+0xb0>)
 8000b1c:	f002 fc70 	bl	8003400 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 8000b20:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000b24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b32:	230c      	movs	r3, #12
 8000b34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4808      	ldr	r0, [pc, #32]	; (8000b5c <HAL_FMC_MspInit+0xb4>)
 8000b3c:	f002 fc60 	bl	8003400 <HAL_GPIO_Init>
 8000b40:	e000      	b.n	8000b44 <HAL_FMC_MspInit+0x9c>
    return;
 8000b42:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000a8 	.word	0x200000a8
 8000b50:	40021000 	.word	0x40021000
 8000b54:	48000c00 	.word	0x48000c00
 8000b58:	48001400 	.word	0x48001400
 8000b5c:	48001000 	.word	0x48001000

08000b60 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b68:	f7ff ff9e 	bl	8000aa8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f001 ff8e 	bl	8002ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <DMA1_Channel4_IRQHandler+0x10>)
 8000bce:	f002 fb38 	bl	8003242 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000030c 	.word	0x2000030c

08000bdc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <DMA1_Channel5_IRQHandler+0x10>)
 8000be2:	f002 fb2e 	bl	8003242 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200002c4 	.word	0x200002c4

08000bf0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <SDMMC1_IRQHandler+0x10>)
 8000bf6:	f006 fb57 	bl	80072a8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200001f0 	.word	0x200001f0

08000c04 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <DMA2_Channel4_IRQHandler+0x10>)
 8000c0a:	f002 fb1a 	bl	8003242 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000554 	.word	0x20000554

08000c18 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <DMA2_Channel5_IRQHandler+0x10>)
 8000c1e:	f002 fb10 	bl	8003242 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000059c 	.word	0x2000059c

08000c2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff ffea 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	; (8000c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	; (8000c9c <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f008 fc95 	bl	80095ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c82:	f7ff fab3 	bl	80001ec <main>

08000c86 <LoopForever>:

LoopForever:
    b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c94:	08009684 	.word	0x08009684
  ldr r2, =_sbss
 8000c98:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c9c:	20000ad4 	.word	0x20000ad4

08000ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_2_IRQHandler>
	...

08000ca4 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 ffd1 	bl	8001c58 <mfxstm32l152_GetInstance>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	2bff      	cmp	r3, #255	; 0xff
 8000cbe:	d10e      	bne.n	8000cde <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 ffc9 	bl	8001c58 <mfxstm32l152_GetInstance>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d806      	bhi.n	8000cde <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	88fa      	ldrh	r2, [r7, #6]
 8000cd4:	b2d1      	uxtb	r1, r2
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <mfxstm32l152_Init+0x58>)
 8000cd8:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8000cda:	f001 faf1 	bl	80022c0 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f8db 	bl	8000e9e <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	2101      	movs	r1, #1
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f8fc 	bl	8000eea <mfxstm32l152_SetIrqOutPinType>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000ac 	.word	0x200000ac

08000d00 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 ffc3 	bl	8001c98 <mfxstm32l152_ReleaseInstance>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d001      	beq.n	8000d20 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8000d1c:	f001 fae0 	bl	80022e0 <MFX_IO_DeInit>
  }
}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 fb73 	bl	8002424 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8000d3e:	200a      	movs	r0, #10
 8000d40:	f001 fbb2 	bl	80024a8 <MFX_IO_Delay>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	2240      	movs	r2, #64	; 0x40
 8000d5a:	2140      	movs	r1, #64	; 0x40
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 fb61 	bl	8002424 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8000d62:	f001 fb27 	bl	80023b4 <MFX_IO_EnableWakeupPin>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 ff6c 	bl	8001c58 <mfxstm32l152_GetInstance>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2bff      	cmp	r3, #255	; 0xff
 8000d88:	d101      	bne.n	8000d8e <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 8000d8a:	f001 fb13 	bl	80023b4 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 8000d8e:	f001 fb35 	bl	80023fc <MFX_IO_Wakeup>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f001 fb7f 	bl	80024a8 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8000daa:	f001 fa89 	bl	80022c0 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 fb4a 	bl	800244c <MFX_IO_Read>
 8000db8:	4603      	mov	r3, r0
 8000dba:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	b29b      	uxth	r3, r3
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	80fb      	strh	r3, [r7, #6]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	2142      	movs	r1, #66	; 0x42
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fb33 	bl	800244c <MFX_IO_Read>
 8000de6:	4603      	mov	r3, r0
 8000de8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8000dea:	7bfa      	ldrb	r2, [r7, #15]
 8000dec:	797b      	ldrb	r3, [r7, #5]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000df2:	7bfa      	ldrb	r2, [r7, #15]
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	2142      	movs	r1, #66	; 0x42
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 fb13 	bl	8002424 <MFX_IO_Write>
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b084      	sub	sp, #16
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	460a      	mov	r2, r1
 8000e10:	80fb      	strh	r3, [r7, #6]
 8000e12:	4613      	mov	r3, r2
 8000e14:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	2142      	movs	r1, #66	; 0x42
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fb14 	bl	800244c <MFX_IO_Read>
 8000e24:	4603      	mov	r3, r0
 8000e26:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8000e28:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	b25a      	sxtb	r2, r3
 8000e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e34:	4013      	ands	r3, r2
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000e3a:	7bfa      	ldrb	r2, [r7, #15]
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	2142      	movs	r1, #66	; 0x42
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 faef 	bl	8002424 <MFX_IO_Write>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	460a      	mov	r2, r1
 8000e58:	80fb      	strh	r3, [r7, #6]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	2108      	movs	r1, #8
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 faf2 	bl	800244c <MFX_IO_Read>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	797b      	ldrb	r3, [r7, #5]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	b2db      	uxtb	r3, r3
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	460a      	mov	r2, r1
 8000e84:	80fb      	strh	r3, [r7, #6]
 8000e86:	4613      	mov	r3, r2
 8000e88:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8000e8a:	797a      	ldrb	r2, [r7, #5]
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	2144      	movs	r1, #68	; 0x44
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 fac7 	bl	8002424 <MFX_IO_Write>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	460a      	mov	r2, r1
 8000ea8:	80fb      	strh	r3, [r7, #6]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	2141      	movs	r1, #65	; 0x41
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fac8 	bl	800244c <MFX_IO_Read>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	f023 0302 	bic.w	r3, r3, #2
 8000ec6:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	797b      	ldrb	r3, [r7, #5]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	2141      	movs	r1, #65	; 0x41
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 faa4 	bl	8002424 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f001 fae3 	bl	80024a8 <MFX_IO_Delay>

}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	460a      	mov	r2, r1
 8000ef4:	80fb      	strh	r3, [r7, #6]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	2141      	movs	r1, #65	; 0x41
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 faa2 	bl	800244c <MFX_IO_Read>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	f023 0301 	bic.w	r3, r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	797b      	ldrb	r3, [r7, #5]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	2141      	movs	r1, #65	; 0x41
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fa7e 	bl	8002424 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f001 fabd 	bl	80024a8 <MFX_IO_Delay>

}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	6039      	str	r1, [r7, #0]
 8000f40:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	2140      	movs	r1, #64	; 0x40
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fa80 	bl	800244c <MFX_IO_Read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5e:	d304      	bcc.n	8000f6a <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0308 	orr.w	r3, r3, #8
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e003      	b.n	8000f72 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	f023 0308 	bic.w	r3, r3, #8
 8000f70:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 fa53 	bl	8002424 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f001 fa92 	bl	80024a8 <MFX_IO_Delay>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	80fb      	strh	r3, [r7, #6]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8000fa0:	797b      	ldrb	r3, [r7, #5]
 8000fa2:	2b17      	cmp	r3, #23
 8000fa4:	f200 82d4 	bhi.w	8001550 <mfxstm32l152_IO_Config+0x5c4>
 8000fa8:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <mfxstm32l152_IO_Config+0x24>)
 8000faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fae:	bf00      	nop
 8000fb0:	08001041 	.word	0x08001041
 8000fb4:	080010d1 	.word	0x080010d1
 8000fb8:	08001191 	.word	0x08001191
 8000fbc:	08001281 	.word	0x08001281
 8000fc0:	08001371 	.word	0x08001371
 8000fc4:	08001461 	.word	0x08001461
 8000fc8:	08001011 	.word	0x08001011
 8000fcc:	08001011 	.word	0x08001011
 8000fd0:	08001071 	.word	0x08001071
 8000fd4:	080010a1 	.word	0x080010a1
 8000fd8:	08001551 	.word	0x08001551
 8000fdc:	08001161 	.word	0x08001161
 8000fe0:	08001131 	.word	0x08001131
 8000fe4:	08001551 	.word	0x08001551
 8000fe8:	08001101 	.word	0x08001101
 8000fec:	080010d1 	.word	0x080010d1
 8000ff0:	080011e1 	.word	0x080011e1
 8000ff4:	08001231 	.word	0x08001231
 8000ff8:	080012d1 	.word	0x080012d1
 8000ffc:	08001321 	.word	0x08001321
 8001000:	080013c1 	.word	0x080013c1
 8001004:	08001411 	.word	0x08001411
 8001008:	080014b1 	.word	0x080014b1
 800100c:	08001501 	.word	0x08001501
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fb67 	bl	80016e8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	2200      	movs	r2, #0
 800101e:	6839      	ldr	r1, [r7, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fa9d 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001026:	88f8      	ldrh	r0, [r7, #6]
 8001028:	2300      	movs	r3, #0
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	2164      	movs	r1, #100	; 0x64
 800102e:	f000 fe57 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001032:	88f8      	ldrh	r0, [r7, #6]
 8001034:	2300      	movs	r3, #0
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	2168      	movs	r1, #104	; 0x68
 800103a:	f000 fe51 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    break;
 800103e:	e28a      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	6839      	ldr	r1, [r7, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fb4f 	bl	80016e8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	2200      	movs	r2, #0
 800104e:	6839      	ldr	r1, [r7, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 fa85 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001056:	88f8      	ldrh	r0, [r7, #6]
 8001058:	2300      	movs	r3, #0
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	2164      	movs	r1, #100	; 0x64
 800105e:	f000 fe3f 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001062:	88f8      	ldrh	r0, [r7, #6]
 8001064:	2301      	movs	r3, #1
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	2168      	movs	r1, #104	; 0x68
 800106a:	f000 fe39 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    break;
 800106e:	e272      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	6839      	ldr	r1, [r7, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fb37 	bl	80016e8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	2200      	movs	r2, #0
 800107e:	6839      	ldr	r1, [r7, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fa6d 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001086:	88f8      	ldrh	r0, [r7, #6]
 8001088:	2301      	movs	r3, #1
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	2164      	movs	r1, #100	; 0x64
 800108e:	f000 fe27 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001092:	88f8      	ldrh	r0, [r7, #6]
 8001094:	2301      	movs	r3, #1
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	2168      	movs	r1, #104	; 0x68
 800109a:	f000 fe21 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    break;
 800109e:	e25a      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	6839      	ldr	r1, [r7, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fb1f 	bl	80016e8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	2200      	movs	r2, #0
 80010ae:	6839      	ldr	r1, [r7, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fa55 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80010b6:	88f8      	ldrh	r0, [r7, #6]
 80010b8:	2301      	movs	r3, #1
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	2164      	movs	r1, #100	; 0x64
 80010be:	f000 fe0f 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80010c2:	88f8      	ldrh	r0, [r7, #6]
 80010c4:	2300      	movs	r3, #0
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	2168      	movs	r1, #104	; 0x68
 80010ca:	f000 fe09 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    break;
 80010ce:	e242      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	6839      	ldr	r1, [r7, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fb07 	bl	80016e8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	2201      	movs	r2, #1
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fa3d 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80010e6:	88f8      	ldrh	r0, [r7, #6]
 80010e8:	2300      	movs	r3, #0
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	2164      	movs	r1, #100	; 0x64
 80010ee:	f000 fdf7 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80010f2:	88f8      	ldrh	r0, [r7, #6]
 80010f4:	2300      	movs	r3, #0
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	2168      	movs	r1, #104	; 0x68
 80010fa:	f000 fdf1 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    break;
 80010fe:	e22a      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 faef 	bl	80016e8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	2201      	movs	r2, #1
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fa25 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8001116:	88f8      	ldrh	r0, [r7, #6]
 8001118:	2300      	movs	r3, #0
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	2164      	movs	r1, #100	; 0x64
 800111e:	f000 fddf 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001122:	88f8      	ldrh	r0, [r7, #6]
 8001124:	2301      	movs	r3, #1
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	2168      	movs	r1, #104	; 0x68
 800112a:	f000 fdd9 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    break;
 800112e:	e212      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fad7 	bl	80016e8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	2201      	movs	r2, #1
 800113e:	6839      	ldr	r1, [r7, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fa0d 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8001146:	88f8      	ldrh	r0, [r7, #6]
 8001148:	2301      	movs	r3, #1
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	2164      	movs	r1, #100	; 0x64
 800114e:	f000 fdc7 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001152:	88f8      	ldrh	r0, [r7, #6]
 8001154:	2300      	movs	r3, #0
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	2168      	movs	r1, #104	; 0x68
 800115a:	f000 fdc1 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    break;
 800115e:	e1fa      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	6839      	ldr	r1, [r7, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fabf 	bl	80016e8 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	2201      	movs	r2, #1
 800116e:	6839      	ldr	r1, [r7, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f9f5 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8001176:	88f8      	ldrh	r0, [r7, #6]
 8001178:	2301      	movs	r3, #1
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	2164      	movs	r1, #100	; 0x64
 800117e:	f000 fdaf 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001182:	88f8      	ldrh	r0, [r7, #6]
 8001184:	2301      	movs	r3, #1
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	2168      	movs	r1, #104	; 0x68
 800118a:	f000 fda9 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    break;
 800118e:	e1e2      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fa7a 	bl	800168c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	2200      	movs	r2, #0
 800119c:	6839      	ldr	r1, [r7, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f9de 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80011a4:	88f8      	ldrh	r0, [r7, #6]
 80011a6:	2300      	movs	r3, #0
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	2164      	movs	r1, #100	; 0x64
 80011ac:	f000 fd98 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80011b0:	88f8      	ldrh	r0, [r7, #6]
 80011b2:	2301      	movs	r3, #1
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	2168      	movs	r1, #104	; 0x68
 80011b8:	f000 fd92 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	2201      	movs	r2, #1
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f9de 	bl	8001584 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	2201      	movs	r2, #1
 80011cc:	6839      	ldr	r1, [r7, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f9ed 	bl	80015ae <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	6839      	ldr	r1, [r7, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fa75 	bl	80016c8 <mfxstm32l152_IO_EnablePinIT>
    break;
 80011de:	e1ba      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fa52 	bl	800168c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	2200      	movs	r2, #0
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f9b6 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80011f4:	88f8      	ldrh	r0, [r7, #6]
 80011f6:	2301      	movs	r3, #1
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	2164      	movs	r1, #100	; 0x64
 80011fc:	f000 fd70 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001200:	88f8      	ldrh	r0, [r7, #6]
 8001202:	2301      	movs	r3, #1
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	2168      	movs	r1, #104	; 0x68
 8001208:	f000 fd6a 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	2201      	movs	r2, #1
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f9b6 	bl	8001584 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	2201      	movs	r2, #1
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f9c5 	bl	80015ae <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	6839      	ldr	r1, [r7, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fa4d 	bl	80016c8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800122e:	e192      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fa2a 	bl	800168c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	2200      	movs	r2, #0
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f98e 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001244:	88f8      	ldrh	r0, [r7, #6]
 8001246:	2301      	movs	r3, #1
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	2164      	movs	r1, #100	; 0x64
 800124c:	f000 fd48 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001250:	88f8      	ldrh	r0, [r7, #6]
 8001252:	2300      	movs	r3, #0
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	2168      	movs	r1, #104	; 0x68
 8001258:	f000 fd42 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	2201      	movs	r2, #1
 8001260:	6839      	ldr	r1, [r7, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f98e 	bl	8001584 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	2201      	movs	r2, #1
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f99d 	bl	80015ae <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	6839      	ldr	r1, [r7, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fa25 	bl	80016c8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800127e:	e16a      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fa02 	bl	800168c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	2200      	movs	r2, #0
 800128c:	6839      	ldr	r1, [r7, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f966 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001294:	88f8      	ldrh	r0, [r7, #6]
 8001296:	2300      	movs	r3, #0
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	2164      	movs	r1, #100	; 0x64
 800129c:	f000 fd20 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80012a0:	88f8      	ldrh	r0, [r7, #6]
 80012a2:	2301      	movs	r3, #1
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	2168      	movs	r1, #104	; 0x68
 80012a8:	f000 fd1a 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	2201      	movs	r2, #1
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f966 	bl	8001584 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	2200      	movs	r2, #0
 80012bc:	6839      	ldr	r1, [r7, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f975 	bl	80015ae <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	6839      	ldr	r1, [r7, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f9fd 	bl	80016c8 <mfxstm32l152_IO_EnablePinIT>
    break;
 80012ce:	e142      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f9da 	bl	800168c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	2200      	movs	r2, #0
 80012dc:	6839      	ldr	r1, [r7, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f93e 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80012e4:	88f8      	ldrh	r0, [r7, #6]
 80012e6:	2301      	movs	r3, #1
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	2164      	movs	r1, #100	; 0x64
 80012ec:	f000 fcf8 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80012f0:	88f8      	ldrh	r0, [r7, #6]
 80012f2:	2301      	movs	r3, #1
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	2168      	movs	r1, #104	; 0x68
 80012f8:	f000 fcf2 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	2201      	movs	r2, #1
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f93e 	bl	8001584 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	2200      	movs	r2, #0
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f94d 	bl	80015ae <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	6839      	ldr	r1, [r7, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f9d5 	bl	80016c8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800131e:	e11a      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f9b2 	bl	800168c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	2200      	movs	r2, #0
 800132c:	6839      	ldr	r1, [r7, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f916 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001334:	88f8      	ldrh	r0, [r7, #6]
 8001336:	2301      	movs	r3, #1
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	2164      	movs	r1, #100	; 0x64
 800133c:	f000 fcd0 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001340:	88f8      	ldrh	r0, [r7, #6]
 8001342:	2300      	movs	r3, #0
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	2168      	movs	r1, #104	; 0x68
 8001348:	f000 fcca 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	2201      	movs	r2, #1
 8001350:	6839      	ldr	r1, [r7, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f916 	bl	8001584 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	2200      	movs	r2, #0
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f925 	bl	80015ae <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	6839      	ldr	r1, [r7, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f9ad 	bl	80016c8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800136e:	e0f2      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f98a 	bl	800168c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	2200      	movs	r2, #0
 800137c:	6839      	ldr	r1, [r7, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f8ee 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001384:	88f8      	ldrh	r0, [r7, #6]
 8001386:	2300      	movs	r3, #0
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	2164      	movs	r1, #100	; 0x64
 800138c:	f000 fca8 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001390:	88f8      	ldrh	r0, [r7, #6]
 8001392:	2301      	movs	r3, #1
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	2168      	movs	r1, #104	; 0x68
 8001398:	f000 fca2 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	2200      	movs	r2, #0
 80013a0:	6839      	ldr	r1, [r7, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f8ee 	bl	8001584 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	2200      	movs	r2, #0
 80013ac:	6839      	ldr	r1, [r7, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f8fd 	bl	80015ae <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f985 	bl	80016c8 <mfxstm32l152_IO_EnablePinIT>
    break;
 80013be:	e0ca      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f962 	bl	800168c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	2200      	movs	r2, #0
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f8c6 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80013d4:	88f8      	ldrh	r0, [r7, #6]
 80013d6:	2301      	movs	r3, #1
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	2164      	movs	r1, #100	; 0x64
 80013dc:	f000 fc80 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80013e0:	88f8      	ldrh	r0, [r7, #6]
 80013e2:	2301      	movs	r3, #1
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	2168      	movs	r1, #104	; 0x68
 80013e8:	f000 fc7a 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	2200      	movs	r2, #0
 80013f0:	6839      	ldr	r1, [r7, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f8c6 	bl	8001584 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	2200      	movs	r2, #0
 80013fc:	6839      	ldr	r1, [r7, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f8d5 	bl	80015ae <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 f95d 	bl	80016c8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800140e:	e0a2      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f93a 	bl	800168c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	2200      	movs	r2, #0
 800141c:	6839      	ldr	r1, [r7, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f89e 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001424:	88f8      	ldrh	r0, [r7, #6]
 8001426:	2301      	movs	r3, #1
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	2164      	movs	r1, #100	; 0x64
 800142c:	f000 fc58 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001430:	88f8      	ldrh	r0, [r7, #6]
 8001432:	2300      	movs	r3, #0
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	2168      	movs	r1, #104	; 0x68
 8001438:	f000 fc52 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	2200      	movs	r2, #0
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f89e 	bl	8001584 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	2200      	movs	r2, #0
 800144c:	6839      	ldr	r1, [r7, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f8ad 	bl	80015ae <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f000 f935 	bl	80016c8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800145e:	e07a      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f912 	bl	800168c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	2200      	movs	r2, #0
 800146c:	6839      	ldr	r1, [r7, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f876 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001474:	88f8      	ldrh	r0, [r7, #6]
 8001476:	2300      	movs	r3, #0
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	2164      	movs	r1, #100	; 0x64
 800147c:	f000 fc30 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001480:	88f8      	ldrh	r0, [r7, #6]
 8001482:	2301      	movs	r3, #1
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	2168      	movs	r1, #104	; 0x68
 8001488:	f000 fc2a 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	2200      	movs	r2, #0
 8001490:	6839      	ldr	r1, [r7, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f876 	bl	8001584 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	2201      	movs	r2, #1
 800149c:	6839      	ldr	r1, [r7, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f885 	bl	80015ae <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	6839      	ldr	r1, [r7, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f90d 	bl	80016c8 <mfxstm32l152_IO_EnablePinIT>
    break;
 80014ae:	e052      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f8ea 	bl	800168c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	2200      	movs	r2, #0
 80014bc:	6839      	ldr	r1, [r7, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f84e 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80014c4:	88f8      	ldrh	r0, [r7, #6]
 80014c6:	2301      	movs	r3, #1
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	2164      	movs	r1, #100	; 0x64
 80014cc:	f000 fc08 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80014d0:	88f8      	ldrh	r0, [r7, #6]
 80014d2:	2301      	movs	r3, #1
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	2168      	movs	r1, #104	; 0x68
 80014d8:	f000 fc02 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	2200      	movs	r2, #0
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f84e 	bl	8001584 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	2201      	movs	r2, #1
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f85d 	bl	80015ae <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	6839      	ldr	r1, [r7, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f8e5 	bl	80016c8 <mfxstm32l152_IO_EnablePinIT>
    break;
 80014fe:	e02a      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f8c2 	bl	800168c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	2200      	movs	r2, #0
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f826 	bl	8001560 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001514:	88f8      	ldrh	r0, [r7, #6]
 8001516:	2301      	movs	r3, #1
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	2164      	movs	r1, #100	; 0x64
 800151c:	f000 fbe0 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001520:	88f8      	ldrh	r0, [r7, #6]
 8001522:	2300      	movs	r3, #0
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	2168      	movs	r1, #104	; 0x68
 8001528:	f000 fbda 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	2200      	movs	r2, #0
 8001530:	6839      	ldr	r1, [r7, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f826 	bl	8001584 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	2201      	movs	r2, #1
 800153c:	6839      	ldr	r1, [r7, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f835 	bl	80015ae <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f8bd 	bl	80016c8 <mfxstm32l152_IO_EnablePinIT>
    break;
 800154e:	e002      	b.n	8001556 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8001550:	797b      	ldrb	r3, [r7, #5]
 8001552:	73fb      	strb	r3, [r7, #15]
    break;
 8001554:	bf00      	nop
  }

  return error_code;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8001570:	797b      	ldrb	r3, [r7, #5]
 8001572:	88f8      	ldrh	r0, [r7, #6]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	2160      	movs	r1, #96	; 0x60
 8001578:	f000 fbb2 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	80fb      	strh	r3, [r7, #6]
 8001590:	4613      	mov	r3, r2
 8001592:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8001594:	797b      	ldrb	r3, [r7, #5]
 8001596:	88f8      	ldrh	r0, [r7, #6]
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	214c      	movs	r1, #76	; 0x4c
 800159c:	f000 fba0 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f000 ff81 	bl	80024a8 <MFX_IO_Delay>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	6039      	str	r1, [r7, #0]
 80015b8:	80fb      	strh	r3, [r7, #6]
 80015ba:	4613      	mov	r3, r2
 80015bc:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 80015be:	797b      	ldrb	r3, [r7, #5]
 80015c0:	88f8      	ldrh	r0, [r7, #6]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	2150      	movs	r1, #80	; 0x50
 80015c6:	f000 fb8b 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f000 ff6c 	bl	80024a8 <MFX_IO_Delay>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	80fb      	strh	r3, [r7, #6]
 80015e4:	4613      	mov	r3, r2
 80015e6:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 80015e8:	797b      	ldrb	r3, [r7, #5]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 80015ee:	88f8      	ldrh	r0, [r7, #6]
 80015f0:	2301      	movs	r3, #1
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	216c      	movs	r1, #108	; 0x6c
 80015f6:	f000 fb73 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 80015fa:	e005      	b.n	8001608 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 80015fc:	88f8      	ldrh	r0, [r7, #6]
 80015fe:	2301      	movs	r3, #1
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	2170      	movs	r1, #112	; 0x70
 8001604:	f000 fb6c 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	2110      	movs	r1, #16
 8001634:	4618      	mov	r0, r3
 8001636:	f000 ff09 	bl	800244c <MFX_IO_Read>
 800163a:	4603      	mov	r3, r0
 800163c:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	2111      	movs	r1, #17
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fefd 	bl	800244c <MFX_IO_Read>
 8001652:	4603      	mov	r3, r0
 8001654:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d006      	beq.n	800166e <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	2112      	movs	r1, #18
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fef1 	bl	800244c <MFX_IO_Read>
 800166a:	4603      	mov	r3, r0
 800166c:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	021a      	lsls	r2, r3, #8
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	441a      	add	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	4013      	ands	r3, r2
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001696:	f000 fe5f 	bl	8002358 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	2101      	movs	r1, #1
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fb92 	bl	8000dc8 <mfxstm32l152_EnableITSource>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fba3 	bl	8000e06 <mfxstm32l152_DisableITSource>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 80016d4:	88f8      	ldrh	r0, [r7, #6]
 80016d6:	2301      	movs	r3, #1
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	2148      	movs	r1, #72	; 0x48
 80016dc:	f000 fb00 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 80016f4:	88f8      	ldrh	r0, [r7, #6]
 80016f6:	2300      	movs	r3, #0
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	2148      	movs	r1, #72	; 0x48
 80016fc:	f000 faf0 	bl	8001ce0 <mfxstm32l152_reg24_setPinValue>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	210c      	movs	r1, #12
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fe8d 	bl	800244c <MFX_IO_Read>
 8001732:	4603      	mov	r3, r0
 8001734:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800173c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	210d      	movs	r1, #13
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fe7f 	bl	800244c <MFX_IO_Read>
 800174e:	4603      	mov	r3, r0
 8001750:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	0c1b      	lsrs	r3, r3, #16
 8001756:	041b      	lsls	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	210e      	movs	r1, #14
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fe73 	bl	800244c <MFX_IO_Read>
 8001766:	4603      	mov	r3, r0
 8001768:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	89bb      	ldrh	r3, [r7, #12]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	4413      	add	r3, r2
 8001772:	461a      	mov	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	4413      	add	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	4013      	ands	r3, r2
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	6039      	str	r1, [r7, #0]
 8001794:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	0c1b      	lsrs	r3, r3, #16
 80017a4:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	2154      	movs	r1, #84	; 0x54
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 fe36 	bl	8002424 <MFX_IO_Write>
  }
  if (pin_8_15)
 80017b8:	7bbb      	ldrb	r3, [r7, #14]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 80017be:	7bba      	ldrb	r2, [r7, #14]
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	2155      	movs	r1, #85	; 0x55
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fe2d 	bl	8002424 <MFX_IO_Write>
  }
  if (pin_16_23)
 80017ca:	7b7b      	ldrb	r3, [r7, #13]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 80017d0:	7b7a      	ldrb	r2, [r7, #13]
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	2156      	movs	r1, #86	; 0x56
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fe24 	bl	8002424 <MFX_IO_Write>
  }
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fe26 	bl	800244c <MFX_IO_Read>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	b29b      	uxth	r3, r3
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fe04 	bl	8002424 <MFX_IO_Write>
}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8001824:	b084      	sub	sp, #16
 8001826:	b590      	push	{r4, r7, lr}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	4604      	mov	r4, r0
 800182e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001836:	4623      	mov	r3, r4
 8001838:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	b29b      	uxth	r3, r3
 8001848:	2140      	movs	r1, #64	; 0x40
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fdfe 	bl	800244c <MFX_IO_Read>
 8001850:	4603      	mov	r3, r0
 8001852:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8001854:	7bbb      	ldrb	r3, [r7, #14]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10b      	bne.n	8001876 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 800185e:	7bbb      	ldrb	r3, [r7, #14]
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	b29b      	uxth	r3, r3
 800186c:	7bba      	ldrb	r2, [r7, #14]
 800186e:	2140      	movs	r1, #64	; 0x40
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fdd7 	bl	8002424 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8001876:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f003 030e 	and.w	r3, r3, #14
 8001882:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8001884:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001888:	b25b      	sxtb	r3, r3
 800188a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188e:	b25a      	sxtb	r2, r3
 8001890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001894:	4313      	orrs	r3, r2
 8001896:	b25b      	sxtb	r3, r3
 8001898:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 800189a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80018a4:	b25a      	sxtb	r2, r3
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fdb2 	bl	8002424 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 80018c0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80018ca:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 80018cc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018d6:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 80018d8:	4313      	orrs	r3, r2
 80018da:	b25b      	sxtb	r3, r3
 80018dc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	2181      	movs	r1, #129	; 0x81
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fd9b 	bl	8002424 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 80018ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	2182      	movs	r1, #130	; 0x82
 8001900:	4618      	mov	r0, r3
 8001902:	f000 fd8f 	bl	8002424 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8001906:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001908:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	b29b      	uxth	r3, r3
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	2183      	movs	r1, #131	; 0x83
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fd85 	bl	8002424 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 800191a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	b29b      	uxth	r3, r3
 8001920:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	b29b      	uxth	r3, r3
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	2184      	movs	r1, #132	; 0x84
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fd79 	bl	8002424 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8001932:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001934:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	b29b      	uxth	r3, r3
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	2185      	movs	r1, #133	; 0x85
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fd6f 	bl	8002424 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8001946:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	b29b      	uxth	r3, r3
 800194c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	b29b      	uxth	r3, r3
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	2186      	movs	r1, #134	; 0x86
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fd63 	bl	8002424 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 800195e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001960:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	2187      	movs	r1, #135	; 0x87
 800196c:	4618      	mov	r0, r3
 800196e:	f000 fd59 	bl	8002424 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8001972:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	b29b      	uxth	r3, r3
 8001978:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	b29b      	uxth	r3, r3
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	2188      	movs	r1, #136	; 0x88
 8001984:	4618      	mov	r0, r3
 8001986:	f000 fd4d 	bl	8002424 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 800198a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800198c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	b29b      	uxth	r3, r3
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	2189      	movs	r1, #137	; 0x89
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fd43 	bl	8002424 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 800199e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	218a      	movs	r1, #138	; 0x8a
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fd37 	bl	8002424 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 80019b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019b8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	b29b      	uxth	r3, r3
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	218b      	movs	r1, #139	; 0x8b
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fd2d 	bl	8002424 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 80019ca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80019cc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	2190      	movs	r1, #144	; 0x90
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fd23 	bl	8002424 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 80019de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019e0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	2191      	movs	r1, #145	; 0x91
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fd19 	bl	8002424 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 80019f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019f4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	2192      	movs	r1, #146	; 0x92
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fd0f 	bl	8002424 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8001a06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a08:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	2193      	movs	r1, #147	; 0x93
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fd05 	bl	8002424 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8001a1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001a1c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	2194      	movs	r1, #148	; 0x94
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 fcfb 	bl	8002424 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8001a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	218c      	movs	r1, #140	; 0x8c
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 fcef 	bl	8002424 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8001a46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a48:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	218d      	movs	r1, #141	; 0x8d
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fce5 	bl	8002424 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8001a5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	218e      	movs	r1, #142	; 0x8e
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 fcd9 	bl	8002424 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8001a72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a74:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	218f      	movs	r1, #143	; 0x8f
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fccf 	bl	8002424 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8001a86:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001a8a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	2196      	movs	r1, #150	; 0x96
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fcc4 	bl	8002424 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001a9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001aa6:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8001aa8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab2:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	2197      	movs	r1, #151	; 0x97
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 fcad 	bl	8002424 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8001aca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001ace:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	2198      	movs	r1, #152	; 0x98
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fca2 	bl	8002424 <MFX_IO_Write>
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001aea:	b004      	add	sp, #16
 8001aec:	4770      	bx	lr

08001aee <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	6039      	str	r1, [r7, #0]
 8001af8:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	b298      	uxth	r0, r3
 8001b00:	f107 020c 	add.w	r2, r7, #12
 8001b04:	2303      	movs	r3, #3
 8001b06:	2114      	movs	r1, #20
 8001b08:	f000 fcb4 	bl	8002474 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8001b0c:	7b3b      	ldrb	r3, [r7, #12]
 8001b0e:	041a      	lsls	r2, r3, #16
 8001b10:	7b7b      	ldrb	r3, [r7, #13]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	4313      	orrs	r3, r2
 8001b16:	7bba      	ldrb	r2, [r7, #14]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	601a      	str	r2, [r3, #0]

}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001b32:	f000 fc11 	bl	8002358 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	2102      	movs	r1, #2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f944 	bl	8000dc8 <mfxstm32l152_EnableITSource>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	2102      	movs	r1, #2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f98f 	bl	8000e7a <mfxstm32l152_ClearGlobalIT>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	2102      	movs	r1, #2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f96b 	bl	8000e4e <mfxstm32l152_GlobalITStatus>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	2102      	movs	r1, #2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f938 	bl	8000e06 <mfxstm32l152_DisableITSource>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2103      	movs	r1, #3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fc4b 	bl	800244c <MFX_IO_Read>
 8001bb6:	4603      	mov	r3, r0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fc3a 	bl	800244c <MFX_IO_Read>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001bec:	f000 fbb4 	bl	8002358 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff f8e7 	bl	8000dc8 <mfxstm32l152_EnableITSource>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	2104      	movs	r1, #4
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f932 	bl	8000e7a <mfxstm32l152_ClearGlobalIT>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f90e 	bl	8000e4e <mfxstm32l152_GlobalITStatus>
 8001c32:	4603      	mov	r3, r0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	2104      	movs	r1, #4
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f8db 	bl	8000e06 <mfxstm32l152_DisableITSource>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	e00b      	b.n	8001c80 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <mfxstm32l152_GetInstance+0x3c>)
 8001c6c:	5cd3      	ldrb	r3, [r2, r3]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d101      	bne.n	8001c7a <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	e006      	b.n	8001c88 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d9f0      	bls.n	8001c68 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8001c86:	23ff      	movs	r3, #255	; 0xff
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	200000ac 	.word	0x200000ac

08001c98 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e00f      	b.n	8001cc8 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <mfxstm32l152_ReleaseInstance+0x44>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	88fa      	ldrh	r2, [r7, #6]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d105      	bne.n	8001cc2 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <mfxstm32l152_ReleaseInstance+0x44>)
 8001cba:	2100      	movs	r1, #0
 8001cbc:	54d1      	strb	r1, [r2, r3]
      return idx;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	e006      	b.n	8001cd0 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d9ec      	bls.n	8001ca8 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8001cce:	23ff      	movs	r3, #255	; 0xff
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	200000ac 	.word	0x200000ac

08001ce0 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	603a      	str	r2, [r7, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	717b      	strb	r3, [r7, #5]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	0c1b      	lsrs	r3, r3, #16
 8001d08:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8001d0a:	7bbb      	ldrb	r3, [r7, #14]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d01e      	beq.n	8001d4e <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8001d10:	797a      	ldrb	r2, [r7, #5]
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fb98 	bl	800244c <MFX_IO_Read>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001d20:	793b      	ldrb	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	7bbb      	ldrb	r3, [r7, #14]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	e008      	b.n	8001d42 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8001d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	b25a      	sxtb	r2, r3
 8001d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	7979      	ldrb	r1, [r7, #5]
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fb6b 	bl	8002424 <MFX_IO_Write>
  }

  if (pin_8_15)
 8001d4e:	7b7b      	ldrb	r3, [r7, #13]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d022      	beq.n	8001d9a <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8001d54:	797b      	ldrb	r3, [r7, #5]
 8001d56:	3301      	adds	r3, #1
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fb74 	bl	800244c <MFX_IO_Read>
 8001d64:	4603      	mov	r3, r0
 8001d66:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001d68:	793b      	ldrb	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	7b7b      	ldrb	r3, [r7, #13]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e008      	b.n	8001d8a <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8001d78:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	b25a      	sxtb	r2, r3
 8001d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d84:	4013      	ands	r3, r2
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 8001d8a:	797b      	ldrb	r3, [r7, #5]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	b2d9      	uxtb	r1, r3
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fb45 	bl	8002424 <MFX_IO_Write>
  }

  if (pin_16_23)
 8001d9a:	7b3b      	ldrb	r3, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d022      	beq.n	8001de6 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8001da0:	797b      	ldrb	r3, [r7, #5]
 8001da2:	3302      	adds	r3, #2
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fb4e 	bl	800244c <MFX_IO_Read>
 8001db0:	4603      	mov	r3, r0
 8001db2:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001db4:	793b      	ldrb	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	7b3b      	ldrb	r3, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	73fb      	strb	r3, [r7, #15]
 8001dc2:	e008      	b.n	8001dd6 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001dc4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	b25a      	sxtb	r2, r3
 8001dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8001dd6:	797b      	ldrb	r3, [r7, #5]
 8001dd8:	3302      	adds	r3, #2
 8001dda:	b2d9      	uxtb	r1, r3
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fb1f 	bl	8002424 <MFX_IO_Write>
  }
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  while (1);
 8001df2:	e7fe      	b.n	8001df2 <BSP_ErrorHandler+0x4>

08001df4 <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d124      	bne.n	8001e4e <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <BSP_LED_Init+0x90>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <BSP_LED_Init+0x90>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <BSP_LED_Init+0x90>)
 8001e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	4a1a      	ldr	r2, [pc, #104]	; (8001e88 <BSP_LED_Init+0x94>)
 8001e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	4619      	mov	r1, r3
 8001e38:	4814      	ldr	r0, [pc, #80]	; (8001e8c <BSP_LED_Init+0x98>)
 8001e3a:	f001 fae1 	bl	8003400 <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2201      	movs	r2, #1
 8001e44:	4619      	mov	r1, r3
 8001e46:	4811      	ldr	r0, [pc, #68]	; (8001e8c <BSP_LED_Init+0x98>)
 8001e48:	f001 fd5e 	bl	8003908 <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 8001e4c:	e016      	b.n	8001e7c <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 8001e4e:	f000 fb37 	bl	80024c0 <BSP_IO_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 8001e58:	f7ff ffc9 	bl	8001dee <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <BSP_LED_Init+0x94>)
 8001e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e64:	2101      	movs	r1, #1
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fb6e 	bl	8002548 <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <BSP_LED_Init+0x94>)
 8001e70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e74:	2101      	movs	r1, #1
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fb82 	bl	8002580 <BSP_IO_WritePin>
}
 8001e7c:	bf00      	nop
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08009664 	.word	0x08009664
 8001e8c:	48000400 	.word	0x48000400

08001e90 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d109      	bne.n	8001eb4 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <BSP_LED_On+0x3c>)
 8001ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <BSP_LED_On+0x40>)
 8001eae:	f001 fd2b 	bl	8003908 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 8001eb2:	e007      	b.n	8001ec4 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <BSP_LED_On+0x3c>)
 8001eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fb5e 	bl	8002580 <BSP_IO_WritePin>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	08009664 	.word	0x08009664
 8001ed0:	48000400 	.word	0x48000400

08001ed4 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d109      	bne.n	8001ef8 <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <BSP_LED_Off+0x3c>)
 8001ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eec:	2201      	movs	r2, #1
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <BSP_LED_Off+0x40>)
 8001ef2:	f001 fd09 	bl	8003908 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 8001ef6:	e007      	b.n	8001f08 <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <BSP_LED_Off+0x3c>)
 8001efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f00:	2101      	movs	r1, #1
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fb3c 	bl	8002580 <BSP_IO_WritePin>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	08009664 	.word	0x08009664
 8001f14:	48000400 	.word	0x48000400

08001f18 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8001f1c:	4812      	ldr	r0, [pc, #72]	; (8001f68 <I2C2_Init+0x50>)
 8001f1e:	f002 f8fe 	bl	800411e <HAL_I2C_GetState>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11d      	bne.n	8001f64 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <I2C2_Init+0x50>)
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <I2C2_Init+0x54>)
 8001f2c:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <I2C2_Init+0x50>)
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <I2C2_Init+0x58>)
 8001f32:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <I2C2_Init+0x50>)
 8001f36:	2270      	movs	r2, #112	; 0x70
 8001f38:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <I2C2_Init+0x50>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <I2C2_Init+0x50>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <I2C2_Init+0x50>)
 8001f48:	22ff      	movs	r2, #255	; 0xff
 8001f4a:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <I2C2_Init+0x50>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <I2C2_Init+0x50>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8001f58:	4803      	ldr	r0, [pc, #12]	; (8001f68 <I2C2_Init+0x50>)
 8001f5a:	f000 f80b 	bl	8001f74 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8001f5e:	4802      	ldr	r0, [pc, #8]	; (8001f68 <I2C2_Init+0x50>)
 8001f60:	f001 fcea 	bl	8003938 <HAL_I2C_Init>
  }
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200000b0 	.word	0x200000b0
 8001f6c:	40005800 	.word	0x40005800
 8001f70:	40403e5d 	.word	0x40403e5d

08001f74 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0ae      	sub	sp, #184	; 0xb8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a37      	ldr	r2, [pc, #220]	; (8002060 <I2C2_MspInit+0xec>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d168      	bne.n	8002058 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8001f8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001f90:	f107 0318 	add.w	r3, r7, #24
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 fa9f 	bl	80054d8 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8001f9a:	4b32      	ldr	r3, [pc, #200]	; (8002064 <I2C2_MspInit+0xf0>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a31      	ldr	r2, [pc, #196]	; (8002064 <I2C2_MspInit+0xf0>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <I2C2_MspInit+0xf0>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8001fb2:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <I2C2_MspInit+0xf0>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <I2C2_MspInit+0xf0>)
 8001fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <I2C2_MspInit+0xf0>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8001fca:	2310      	movs	r3, #16
 8001fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001fd0:	2312      	movs	r3, #18
 8001fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001fe8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fec:	4619      	mov	r1, r3
 8001fee:	481e      	ldr	r0, [pc, #120]	; (8002068 <I2C2_MspInit+0xf4>)
 8001ff0:	f001 fa06 	bl	8003400 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8001ff4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8001ffc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002000:	4619      	mov	r1, r3
 8002002:	481a      	ldr	r0, [pc, #104]	; (800206c <I2C2_MspInit+0xf8>)
 8002004:	f001 f9fc 	bl	8003400 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <I2C2_MspInit+0xf0>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	4a15      	ldr	r2, [pc, #84]	; (8002064 <I2C2_MspInit+0xf0>)
 800200e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002012:	6593      	str	r3, [r2, #88]	; 0x58
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <I2C2_MspInit+0xf0>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <I2C2_MspInit+0xf0>)
 8002022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002024:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <I2C2_MspInit+0xf0>)
 8002026:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800202a:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <I2C2_MspInit+0xf0>)
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <I2C2_MspInit+0xf0>)
 8002032:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002036:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	2021      	movs	r0, #33	; 0x21
 800203e:	f000 fe92 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8002042:	2021      	movs	r0, #33	; 0x21
 8002044:	f000 feab 	bl	8002d9e <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	2022      	movs	r0, #34	; 0x22
 800204e:	f000 fe8a 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8002052:	2022      	movs	r0, #34	; 0x22
 8002054:	f000 fea3 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  }
}
 8002058:	bf00      	nop
 800205a:	37b8      	adds	r7, #184	; 0xb8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40005800 	.word	0x40005800
 8002064:	40021000 	.word	0x40021000
 8002068:	48001c00 	.word	0x48001c00
 800206c:	48000400 	.word	0x48000400

08002070 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8002074:	4806      	ldr	r0, [pc, #24]	; (8002090 <I2C2_DeInit+0x20>)
 8002076:	f002 f852 	bl	800411e <HAL_I2C_GetState>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <I2C2_DeInit+0x20>)
 8002082:	f001 fce8 	bl	8003a56 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 8002086:	4802      	ldr	r0, [pc, #8]	; (8002090 <I2C2_DeInit+0x20>)
 8002088:	f000 f804 	bl	8002094 <I2C2_MspDeInit>
  }
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200000b0 	.word	0x200000b0

08002094 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <I2C2_MspDeInit+0x8c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d138      	bne.n	8002118 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <I2C2_MspDeInit+0x90>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	4a1e      	ldr	r2, [pc, #120]	; (8002124 <I2C2_MspDeInit+0x90>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <I2C2_MspDeInit+0x90>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <I2C2_MspDeInit+0x90>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <I2C2_MspDeInit+0x90>)
 80020c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <I2C2_MspDeInit+0x90>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 80020d6:	2110      	movs	r1, #16
 80020d8:	4813      	ldr	r0, [pc, #76]	; (8002128 <I2C2_MspDeInit+0x94>)
 80020da:	f001 fb23 	bl	8003724 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 80020de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020e2:	4812      	ldr	r0, [pc, #72]	; (800212c <I2C2_MspDeInit+0x98>)
 80020e4:	f001 fb1e 	bl	8003724 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <I2C2_MspDeInit+0x90>)
 80020ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <I2C2_MspDeInit+0x90>)
 80020ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f2:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <I2C2_MspDeInit+0x90>)
 80020f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <I2C2_MspDeInit+0x90>)
 80020fa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <I2C2_MspDeInit+0x90>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <I2C2_MspDeInit+0x90>)
 8002106:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800210a:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 800210c:	2021      	movs	r0, #33	; 0x21
 800210e:	f000 fe54 	bl	8002dba <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8002112:	2022      	movs	r0, #34	; 0x22
 8002114:	f000 fe51 	bl	8002dba <HAL_NVIC_DisableIRQ>
  }
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40005800 	.word	0x40005800
 8002124:	40021000 	.word	0x40021000
 8002128:	48001c00 	.word	0x48001c00
 800212c:	48000400 	.word	0x48000400

08002130 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af04      	add	r7, sp, #16
 8002136:	4604      	mov	r4, r0
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	461a      	mov	r2, r3
 800213e:	4623      	mov	r3, r4
 8002140:	80fb      	strh	r3, [r7, #6]
 8002142:	4603      	mov	r3, r0
 8002144:	80bb      	strh	r3, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	807b      	strh	r3, [r7, #2]
 800214a:	4613      	mov	r3, r2
 800214c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002152:	b672      	cpsid	i
}
 8002154:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <I2C2_WriteData+0x5c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	8878      	ldrh	r0, [r7, #2]
 800215c:	88ba      	ldrh	r2, [r7, #4]
 800215e:	88f9      	ldrh	r1, [r7, #6]
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	2301      	movs	r3, #1
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	1c7b      	adds	r3, r7, #1
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	4603      	mov	r3, r0
 800216c:	4808      	ldr	r0, [pc, #32]	; (8002190 <I2C2_WriteData+0x60>)
 800216e:	f001 fca1 	bl	8003ab4 <HAL_I2C_Mem_Write>
 8002172:	4603      	mov	r3, r0
 8002174:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002176:	b662      	cpsie	i
}
 8002178:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8002180:	f000 f890 	bl	80022a4 <I2C2_Error>
  }
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	2000007c 	.word	0x2000007c
 8002190:	200000b0 	.word	0x200000b0

08002194 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af04      	add	r7, sp, #16
 800219a:	4603      	mov	r3, r0
 800219c:	80fb      	strh	r3, [r7, #6]
 800219e:	460b      	mov	r3, r1
 80021a0:	80bb      	strh	r3, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80021ae:	b672      	cpsid	i
}
 80021b0:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <I2C2_ReadData+0x60>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	8878      	ldrh	r0, [r7, #2]
 80021b8:	88ba      	ldrh	r2, [r7, #4]
 80021ba:	88f9      	ldrh	r1, [r7, #6]
 80021bc:	9302      	str	r3, [sp, #8]
 80021be:	2301      	movs	r3, #1
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	f107 030e 	add.w	r3, r7, #14
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	4603      	mov	r3, r0
 80021ca:	480b      	ldr	r0, [pc, #44]	; (80021f8 <I2C2_ReadData+0x64>)
 80021cc:	f001 fd86 	bl	8003cdc <HAL_I2C_Mem_Read>
 80021d0:	4603      	mov	r3, r0
 80021d2:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80021d4:	b662      	cpsie	i
}
 80021d6:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80021de:	f000 f861 	bl	80022a4 <I2C2_Error>
    HAL_Delay(200);
 80021e2:	20c8      	movs	r0, #200	; 0xc8
 80021e4:	f000 fc9c 	bl	8002b20 <HAL_Delay>
  }

  return value;
 80021e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000007c 	.word	0x2000007c
 80021f8:	200000b0 	.word	0x200000b0

080021fc <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800220c:	2300      	movs	r3, #0
 800220e:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8002210:	b672      	cpsid	i
}
 8002212:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8002214:	88f9      	ldrh	r1, [r7, #6]
 8002216:	2332      	movs	r3, #50	; 0x32
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	480a      	ldr	r0, [pc, #40]	; (8002244 <I2C2_isDeviceReady+0x48>)
 800221c:	f001 fe78 	bl	8003f10 <HAL_I2C_IsDeviceReady>
 8002220:	4603      	mov	r3, r0
 8002222:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002224:	b662      	cpsie	i
}
 8002226:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d004      	beq.n	8002238 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800222e:	f000 f839 	bl	80022a4 <I2C2_Error>
    HAL_Delay(200);
 8002232:	20c8      	movs	r0, #200	; 0xc8
 8002234:	f000 fc74 	bl	8002b20 <HAL_Delay>
  }

  return value;
 8002238:	7bbb      	ldrb	r3, [r7, #14]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200000b0 	.word	0x200000b0

08002248 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af04      	add	r7, sp, #16
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	4603      	mov	r3, r0
 8002252:	81fb      	strh	r3, [r7, #14]
 8002254:	460b      	mov	r3, r1
 8002256:	81bb      	strh	r3, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8002260:	b672      	cpsid	i
}
 8002262:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8002264:	4b0d      	ldr	r3, [pc, #52]	; (800229c <I2C2_ReadBuffer+0x54>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	8978      	ldrh	r0, [r7, #10]
 800226a:	89ba      	ldrh	r2, [r7, #12]
 800226c:	89f9      	ldrh	r1, [r7, #14]
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	8c3b      	ldrh	r3, [r7, #32]
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4603      	mov	r3, r0
 800227a:	4809      	ldr	r0, [pc, #36]	; (80022a0 <I2C2_ReadBuffer+0x58>)
 800227c:	f001 fd2e 	bl	8003cdc <HAL_I2C_Mem_Read>
 8002280:	4603      	mov	r3, r0
 8002282:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8002284:	b662      	cpsie	i
}
 8002286:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800228e:	f000 f809 	bl	80022a4 <I2C2_Error>
  }

  return status;
 8002292:	7dfb      	ldrb	r3, [r7, #23]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	2000007c 	.word	0x2000007c
 80022a0:	200000b0 	.word	0x200000b0

080022a4 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 80022a8:	f7ff fda1 	bl	8001dee <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 80022ac:	4803      	ldr	r0, [pc, #12]	; (80022bc <I2C2_Error+0x18>)
 80022ae:	f001 fbd2 	bl	8003a56 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 80022b2:	f7ff fe31 	bl	8001f18 <I2C2_Init>
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200000b0 	.word	0x200000b0

080022c0 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 80022c4:	f7ff fe28 	bl	8001f18 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 80022c8:	2104      	movs	r1, #4
 80022ca:	2084      	movs	r0, #132	; 0x84
 80022cc:	f7ff ff96 	bl	80021fc <I2C2_isDeviceReady>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 80022d6:	f7ff fd8a 	bl	8001dee <BSP_ErrorHandler>
  }
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <MFX_IO_DeInit+0x6c>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <MFX_IO_DeInit+0x6c>)
 80022ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <MFX_IO_DeInit+0x6c>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80022fe:	2340      	movs	r3, #64	; 0x40
 8002300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 800230a:	2302      	movs	r3, #2
 800230c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	4619      	mov	r1, r3
 8002314:	480e      	ldr	r0, [pc, #56]	; (8002350 <MFX_IO_DeInit+0x70>)
 8002316:	f001 f873 	bl	8003400 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800231a:	2017      	movs	r0, #23
 800231c:	f000 fd4d 	bl	8002dba <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <MFX_IO_DeInit+0x6c>)
 8002322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002324:	4a09      	ldr	r2, [pc, #36]	; (800234c <MFX_IO_DeInit+0x6c>)
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <MFX_IO_DeInit+0x6c>)
 800232e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8002338:	2120      	movs	r1, #32
 800233a:	4806      	ldr	r0, [pc, #24]	; (8002354 <MFX_IO_DeInit+0x74>)
 800233c:	f001 f9f2 	bl	8003724 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8002340:	f7ff fe96 	bl	8002070 <I2C2_DeInit>
}
 8002344:	bf00      	nop
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	48001c00 	.word	0x48001c00
 8002354:	48000800 	.word	0x48000800

08002358 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <MFX_IO_ITConfig+0x54>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <MFX_IO_ITConfig+0x54>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <MFX_IO_ITConfig+0x54>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8002376:	2320      	movs	r3, #32
 8002378:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8002382:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002386:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	4619      	mov	r1, r3
 800238c:	4808      	ldr	r0, [pc, #32]	; (80023b0 <MFX_IO_ITConfig+0x58>)
 800238e:	f001 f837 	bl	8003400 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8002392:	220f      	movs	r2, #15
 8002394:	210f      	movs	r1, #15
 8002396:	2017      	movs	r0, #23
 8002398:	f000 fce5 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800239c:	2017      	movs	r0, #23
 800239e:	f000 fcfe 	bl	8002d9e <HAL_NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	48000800 	.word	0x48000800

080023b4 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <MFX_IO_EnableWakeupPin+0x40>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023be:	4a0d      	ldr	r2, [pc, #52]	; (80023f4 <MFX_IO_EnableWakeupPin+0x40>)
 80023c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <MFX_IO_EnableWakeupPin+0x40>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80023d2:	2340      	movs	r3, #64	; 0x40
 80023d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023da:	2302      	movs	r3, #2
 80023dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	4804      	ldr	r0, [pc, #16]	; (80023f8 <MFX_IO_EnableWakeupPin+0x44>)
 80023e8:	f001 f80a 	bl	8003400 <HAL_GPIO_Init>
}
 80023ec:	bf00      	nop
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000
 80023f8:	48001c00 	.word	0x48001c00

080023fc <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8002400:	2201      	movs	r2, #1
 8002402:	2140      	movs	r1, #64	; 0x40
 8002404:	4806      	ldr	r0, [pc, #24]	; (8002420 <MFX_IO_Wakeup+0x24>)
 8002406:	f001 fa7f 	bl	8003908 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 800240a:	2001      	movs	r0, #1
 800240c:	f000 fb88 	bl	8002b20 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	2140      	movs	r1, #64	; 0x40
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <MFX_IO_Wakeup+0x24>)
 8002416:	f001 fa77 	bl	8003908 <HAL_GPIO_WritePin>
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	48001c00 	.word	0x48001c00

08002424 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	80fb      	strh	r3, [r7, #6]
 800242e:	460b      	mov	r3, r1
 8002430:	717b      	strb	r3, [r7, #5]
 8002432:	4613      	mov	r3, r2
 8002434:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 8002436:	797b      	ldrb	r3, [r7, #5]
 8002438:	b299      	uxth	r1, r3
 800243a:	793b      	ldrb	r3, [r7, #4]
 800243c:	88f8      	ldrh	r0, [r7, #6]
 800243e:	2201      	movs	r2, #1
 8002440:	f7ff fe76 	bl	8002130 <I2C2_WriteData>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	460a      	mov	r2, r1
 8002456:	80fb      	strh	r3, [r7, #6]
 8002458:	4613      	mov	r3, r2
 800245a:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800245c:	797b      	ldrb	r3, [r7, #5]
 800245e:	b299      	uxth	r1, r3
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	2201      	movs	r2, #1
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fe95 	bl	8002194 <I2C2_ReadData>
 800246a:	4603      	mov	r3, r0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af02      	add	r7, sp, #8
 800247a:	60ba      	str	r2, [r7, #8]
 800247c:	461a      	mov	r2, r3
 800247e:	4603      	mov	r3, r0
 8002480:	81fb      	strh	r3, [r7, #14]
 8002482:	460b      	mov	r3, r1
 8002484:	737b      	strb	r3, [r7, #13]
 8002486:	4613      	mov	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800248a:	7b7b      	ldrb	r3, [r7, #13]
 800248c:	b299      	uxth	r1, r3
 800248e:	89f8      	ldrh	r0, [r7, #14]
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2201      	movs	r2, #1
 8002498:	f7ff fed6 	bl	8002248 <I2C2_ReadBuffer>
 800249c:	4603      	mov	r3, r0
 800249e:	b29b      	uxth	r3, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fb35 	bl	8002b20 <HAL_Delay>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <BSP_IO_Init+0x78>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d128      	bne.n	8002528 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <BSP_IO_Init+0x7c>)
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2084      	movs	r0, #132	; 0x84
 80024dc:	4798      	blx	r3

    HAL_Delay(10);
 80024de:	200a      	movs	r0, #10
 80024e0:	f000 fb1e 	bl	8002b20 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <BSP_IO_Init+0x80>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2084      	movs	r0, #132	; 0x84
 80024ea:	4798      	blx	r3
 80024ec:	4603      	mov	r3, r0
 80024ee:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	2b7b      	cmp	r3, #123	; 0x7b
 80024f4:	d002      	beq.n	80024fc <BSP_IO_Init+0x3c>
 80024f6:	79bb      	ldrb	r3, [r7, #6]
 80024f8:	2b79      	cmp	r3, #121	; 0x79
 80024fa:	d117      	bne.n	800252c <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 80024fc:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <BSP_IO_Init+0x78>)
 80024fe:	4a10      	ldr	r2, [pc, #64]	; (8002540 <BSP_IO_Init+0x80>)
 8002500:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <BSP_IO_Init+0x78>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00f      	beq.n	800252c <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <BSP_IO_Init+0x78>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2084      	movs	r0, #132	; 0x84
 8002514:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <BSP_IO_Init+0x78>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4909      	ldr	r1, [pc, #36]	; (8002544 <BSP_IO_Init+0x84>)
 800251e:	2084      	movs	r0, #132	; 0x84
 8002520:	4798      	blx	r3

        ret = IO_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	e001      	b.n	800252c <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8002528:	2303      	movs	r3, #3
 800252a:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 800252c:	79fb      	ldrb	r3, [r7, #7]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200000fc 	.word	0x200000fc
 800253c:	20000030 	.word	0x20000030
 8002540:	20000004 	.word	0x20000004
 8002544:	000301ff 	.word	0x000301ff

08002548 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <BSP_IO_ConfigPin+0x30>)
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <BSP_IO_ConfigPin+0x34>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	78fa      	ldrb	r2, [r7, #3]
 8002568:	68f9      	ldr	r1, [r7, #12]
 800256a:	2084      	movs	r0, #132	; 0x84
 800256c:	4798      	blx	r3

  return IO_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	000301ff 	.word	0x000301ff
 800257c:	200000fc 	.word	0x200000fc

08002580 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <BSP_IO_WritePin+0x30>)
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <BSP_IO_WritePin+0x34>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	2084      	movs	r0, #132	; 0x84
 80025a4:	4798      	blx	r3

}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	000301ff 	.word	0x000301ff
 80025b4:	200000fc 	.word	0x200000fc

080025b8 <BSP_IO_ReadPin>:
  * @param  IO_Pin: Selected pins to read.
  *          This parameter can be any combination of the IO pins.
  * @retval The current pins state
  */
uint32_t BSP_IO_ReadPin(uint32_t IO_Pin)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t pin_state = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  uint32_t io1_pin = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <BSP_IO_ReadPin+0x38>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]

  /* Gets the IO Expander 1 selected pins current state */
  pin_state |= (io1_driver->ReadPin(IO1_I2C_ADDRESS, io1_pin)) << IO1_PIN_OFFSET;
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <BSP_IO_ReadPin+0x3c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	2084      	movs	r0, #132	; 0x84
 80025da:	4798      	blx	r3
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]


  return pin_state;
 80025e4:	68fb      	ldr	r3, [r7, #12]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	000301ff 	.word	0x000301ff
 80025f4:	200000fc 	.word	0x200000fc

080025f8 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  None
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	71fb      	strb	r3, [r7, #7]

  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <BSP_SD_Init+0x8c>)
 8002604:	4a20      	ldr	r2, [pc, #128]	; (8002688 <BSP_SD_Init+0x90>)
 8002606:	601a      	str	r2, [r3, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <BSP_SD_Init+0x8c>)
 800260a:	2200      	movs	r2, #0
 800260c:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800260e:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <BSP_SD_Init+0x8c>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <BSP_SD_Init+0x8c>)
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <BSP_SD_Init+0x8c>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <BSP_SD_Init+0x8c>)
 8002622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002626:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <BSP_SD_Init+0x8c>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]

  /* Msp SD Detect pin initialization */
  SD_Detect_MspInit();
 800262e:	f000 f96c 	bl	800290a <SD_Detect_MspInit>

  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8002632:	f000 f82b 	bl	800268c <BSP_SD_IsDetected>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d001      	beq.n	8002640 <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800263c:	2302      	movs	r3, #2
 800263e:	e01c      	b.n	800267a <BSP_SD_Init+0x82>
  }

  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 8002640:	2100      	movs	r1, #0
 8002642:	4810      	ldr	r0, [pc, #64]	; (8002684 <BSP_SD_Init+0x8c>)
 8002644:	f000 f8b2 	bl	80027ac <BSP_SD_MspInit>
    
  /* HAL SD initialization */
  if (HAL_SD_Init(&uSdHandle) != HAL_OK)
 8002648:	480e      	ldr	r0, [pc, #56]	; (8002684 <BSP_SD_Init+0x8c>)
 800264a:	f004 fbc3 	bl	8006dd4 <HAL_SD_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <BSP_SD_Init+0x60>
  {
    sd_state = MSD_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	71fb      	strb	r3, [r7, #7]
  }

  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <BSP_SD_Init+0x80>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800265e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002662:	4808      	ldr	r0, [pc, #32]	; (8002684 <BSP_SD_Init+0x8c>)
 8002664:	f005 f970 	bl	8007948 <HAL_SD_ConfigWideBusOperation>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <BSP_SD_Init+0x7c>
    {
      sd_state = MSD_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	71fb      	strb	r3, [r7, #7]
 8002672:	e001      	b.n	8002678 <BSP_SD_Init+0x80>
    }
    else
    {
      sd_state = MSD_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	71fb      	strb	r3, [r7, #7]
    }
  }

  return  sd_state;
 8002678:	79fb      	ldrb	r3, [r7, #7]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200005e4 	.word	0x200005e4
 8002688:	40012800 	.word	0x40012800

0800268c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8002692:	2301      	movs	r3, #1
 8002694:	71fb      	strb	r3, [r7, #7]

  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002696:	f44f 7080 	mov.w	r0, #256	; 0x100
 800269a:	f7ff ff8d 	bl	80025b8 <BSP_IO_ReadPin>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 80026a4:	2300      	movs	r3, #0
 80026a6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	b2db      	uxtb	r3, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	75fb      	strb	r3, [r7, #23]

  /* Invalidate the dma tx handle*/
  uSdHandle.hdmatx = NULL;
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <BSP_SD_ReadBlocks_DMA+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Prepare the dma channel for a read operation */
  sd_state = SD_DMAConfigRx(&uSdHandle);
 80026ca:	480d      	ldr	r0, [pc, #52]	; (8002700 <BSP_SD_ReadBlocks_DMA+0x4c>)
 80026cc:	f000 f92e 	bl	800292c <SD_DMAConfigRx>
 80026d0:	4603      	mov	r3, r0
 80026d2:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d107      	bne.n	80026ea <BSP_SD_ReadBlocks_DMA+0x36>
  {
    /* Read block(s) in DMA transfer mode */
    sd_state = HAL_SD_ReadBlocks_DMA(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	68f9      	ldr	r1, [r7, #12]
 80026e0:	4807      	ldr	r0, [pc, #28]	; (8002700 <BSP_SD_ReadBlocks_DMA+0x4c>)
 80026e2:	f004 fc4d 	bl	8006f80 <HAL_SD_ReadBlocks_DMA>
 80026e6:	4603      	mov	r3, r0
 80026e8:	75fb      	strb	r3, [r7, #23]
  }

  if (sd_state == HAL_OK)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <BSP_SD_ReadBlocks_DMA+0x40>
  {
    return MSD_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	e000      	b.n	80026f6 <BSP_SD_ReadBlocks_DMA+0x42>
  }
  else
  {
    return MSD_ERROR;
 80026f4:	2301      	movs	r3, #1
  }
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200005e4 	.word	0x200005e4

08002704 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	75fb      	strb	r3, [r7, #23]

  /* Invalidate the dma rx handle*/
  uSdHandle.hdmarx = NULL;
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <BSP_SD_WriteBlocks_DMA+0x4c>)
 8002716:	2200      	movs	r2, #0
 8002718:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare the dma channel for a read operation */
  sd_state = SD_DMAConfigTx(&uSdHandle);
 800271a:	480d      	ldr	r0, [pc, #52]	; (8002750 <BSP_SD_WriteBlocks_DMA+0x4c>)
 800271c:	f000 f94a 	bl	80029b4 <SD_DMAConfigTx>
 8002720:	4603      	mov	r3, r0
 8002722:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <BSP_SD_WriteBlocks_DMA+0x36>
  {
    /* Write block(s) in DMA transfer mode */
    sd_state = HAL_SD_WriteBlocks_DMA(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	68f9      	ldr	r1, [r7, #12]
 8002730:	4807      	ldr	r0, [pc, #28]	; (8002750 <BSP_SD_WriteBlocks_DMA+0x4c>)
 8002732:	f004 fced 	bl	8007110 <HAL_SD_WriteBlocks_DMA>
 8002736:	4603      	mov	r3, r0
 8002738:	75fb      	strb	r3, [r7, #23]
  }

  if (sd_state == HAL_OK)
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <BSP_SD_WriteBlocks_DMA+0x40>
  {
    return MSD_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <BSP_SD_WriteBlocks_DMA+0x42>
  }
  else
  {
    return MSD_ERROR;
 8002744:	2301      	movs	r3, #1
  }
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200005e4 	.word	0x200005e4

08002754 <BSP_SD_GetCardState>:
  * @brief  Gets the current SD card data status.
  * @param  None
  * @retval Data transfer state.
  */
uint8_t BSP_SD_GetCardState(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypedef card_state;
  card_state = HAL_SD_GetCardState(&uSdHandle);
 800275a:	480c      	ldr	r0, [pc, #48]	; (800278c <BSP_SD_GetCardState+0x38>)
 800275c:	f005 f9b0 	bl	8007ac0 <HAL_SD_GetCardState>
 8002760:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d101      	bne.n	800276c <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 8002768:	2300      	movs	r3, #0
 800276a:	e00b      	b.n	8002784 <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) ||
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d005      	beq.n	800277e <BSP_SD_GetCardState+0x2a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b06      	cmp	r3, #6
 8002776:	d002      	beq.n	800277e <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) ||
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b07      	cmp	r3, #7
 800277c:	d101      	bne.n	8002782 <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <BSP_SD_GetCardState+0x30>
  }
  else
  {
    return (SD_TRANSFER_ERROR);
 8002782:	2302      	movs	r3, #2
  }
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200005e4 	.word	0x200005e4

08002790 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4803      	ldr	r0, [pc, #12]	; (80027a8 <BSP_SD_GetCardInfo+0x18>)
 800279c:	f005 f8a8 	bl	80078f0 <HAL_SD_GetCardInfo>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200005e4 	.word	0x200005e4

080027ac <BSP_SD_MspInit>:
  * @param hsd: SD handle
  * @param Params: Additional parameters
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b0ae      	sub	sp, #184	; 0xb8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80027b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef  RCC_PeriphClkInit;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);

  HAL_RCCEx_GetPeriphCLKConfig(&RCC_PeriphClkInit);
 80027c6:	f107 0318 	add.w	r3, r7, #24
 80027ca:	4618      	mov	r0, r3
 80027cc:	f003 f980 	bl	8005ad0 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the SDMMC1 clock source. The clock is derived from the PLLSAI1 */
  /* Hypothesis is that PLLSAI1 VCO input is 8Mhz */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80027d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80027d4:	61bb      	str	r3, [r7, #24]
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80027d6:	2318      	movs	r3, #24
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1Q = 4;
 80027da:	2304      	movs	r3, #4
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80027de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80027e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK)
 80027ec:	f107 0318 	add.w	r3, r7, #24
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 fe71 	bl	80054d8 <HAL_RCCEx_PeriphCLKConfig>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d000      	beq.n	80027fe <BSP_SD_MspInit+0x52>
  {
    while (1) {}
 80027fc:	e7fe      	b.n	80027fc <BSP_SD_MspInit+0x50>
  }

  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80027fe:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <BSP_SD_MspInit+0x108>)
 8002800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002802:	4a2c      	ldr	r2, [pc, #176]	; (80028b4 <BSP_SD_MspInit+0x108>)
 8002804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002808:	6613      	str	r3, [r2, #96]	; 0x60
 800280a:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <BSP_SD_MspInit+0x108>)
 800280c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]

  /* Enable DMA2 clocks */
  SD_DMAx_CLK_ENABLE();
 8002816:	4b27      	ldr	r3, [pc, #156]	; (80028b4 <BSP_SD_MspInit+0x108>)
 8002818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281a:	4a26      	ldr	r2, [pc, #152]	; (80028b4 <BSP_SD_MspInit+0x108>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6493      	str	r3, [r2, #72]	; 0x48
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <BSP_SD_MspInit+0x108>)
 8002824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <BSP_SD_MspInit+0x108>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	4a20      	ldr	r2, [pc, #128]	; (80028b4 <BSP_SD_MspInit+0x108>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800283a:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <BSP_SD_MspInit+0x108>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <BSP_SD_MspInit+0x108>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	4a1a      	ldr	r2, [pc, #104]	; (80028b4 <BSP_SD_MspInit+0x108>)
 800284c:	f043 0308 	orr.w	r3, r3, #8
 8002850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <BSP_SD_MspInit+0x108>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  gpioinitstruct.Pull      = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800286a:	2303      	movs	r3, #3
 800286c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8002870:	230c      	movs	r3, #12
 8002872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8002876:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800287a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800287e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002882:	4619      	mov	r1, r3
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <BSP_SD_MspInit+0x10c>)
 8002886:	f000 fdbb 	bl	8003400 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 800288a:	2304      	movs	r3, #4
 800288c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8002890:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002894:	4619      	mov	r1, r3
 8002896:	4809      	ldr	r0, [pc, #36]	; (80028bc <BSP_SD_MspInit+0x110>)
 8002898:	f000 fdb2 	bl	8003400 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2105      	movs	r1, #5
 80028a0:	2031      	movs	r0, #49	; 0x31
 80028a2:	f000 fa60 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 80028a6:	2031      	movs	r0, #49	; 0x31
 80028a8:	f000 fa79 	bl	8002d9e <HAL_NVIC_EnableIRQ>

  /* DMA initialization should be done here but , as there is only one channel for RX and TX it is configured and done directly when required*/
}
 80028ac:	bf00      	nop
 80028ae:	37b8      	adds	r7, #184	; 0xb8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	48000800 	.word	0x48000800
 80028bc:	48000c00 	.word	0x48000c00

080028c0 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0

}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_SD_AbortCallback>:
  * @brief SD Abort callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80028d6:	f7ff fff3 	bl	80028c0 <BSP_SD_AbortCallback>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80028ea:	f006 fdeb 	bl	80094c4 <BSP_SD_WriteCpltCallback>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80028fe:	f006 fded 	bl	80094dc <BSP_SD_ReadCpltCallback>
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
static void SD_Detect_MspInit(void)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	af00      	add	r7, sp, #0
  if (BSP_IO_Init() == IO_ERROR)
 800290e:	f7ff fdd7 	bl	80024c0 <BSP_IO_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <SD_Detect_MspInit+0x12>
  {
    BSP_ErrorHandler();
 8002918:	f7ff fa69 	bl	8001dee <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_INPUT_PU);
 800291c:	2108      	movs	r1, #8
 800291e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002922:	f7ff fe11 	bl	8002548 <BSP_IO_ConfigPin>
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 8002938:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <SD_DMAConfigRx+0x80>)
 800293a:	2207      	movs	r2, #7
 800293c:	605a      	str	r2, [r3, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <SD_DMAConfigRx+0x80>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <SD_DMAConfigRx+0x80>)
 8002946:	2200      	movs	r2, #0
 8002948:	60da      	str	r2, [r3, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <SD_DMAConfigRx+0x80>)
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	611a      	str	r2, [r3, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <SD_DMAConfigRx+0x80>)
 8002952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002956:	615a      	str	r2, [r3, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <SD_DMAConfigRx+0x80>)
 800295a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800295e:	619a      	str	r2, [r3, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <SD_DMAConfigRx+0x80>)
 8002962:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002966:	621a      	str	r2, [r3, #32]

  hdma_rx.Instance = SD_DMAx_STREAM;
 8002968:	4b10      	ldr	r3, [pc, #64]	; (80029ac <SD_DMAConfigRx+0x80>)
 800296a:	4a11      	ldr	r2, [pc, #68]	; (80029b0 <SD_DMAConfigRx+0x84>)
 800296c:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a0e      	ldr	r2, [pc, #56]	; (80029ac <SD_DMAConfigRx+0x80>)
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <SD_DMAConfigRx+0x80>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6293      	str	r3, [r2, #40]	; 0x28

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 800297a:	480c      	ldr	r0, [pc, #48]	; (80029ac <SD_DMAConfigRx+0x80>)
 800297c:	f000 fbe2 	bl	8003144 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 8002980:	480a      	ldr	r0, [pc, #40]	; (80029ac <SD_DMAConfigRx+0x80>)
 8002982:	f000 faed 	bl	8002f60 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 8002986:	4809      	ldr	r0, [pc, #36]	; (80029ac <SD_DMAConfigRx+0x80>)
 8002988:	f000 fa32 	bl	8002df0 <HAL_DMA_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	73fb      	strb	r3, [r7, #15]

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_IRQn, 6, 0);
 8002990:	2200      	movs	r2, #0
 8002992:	2106      	movs	r1, #6
 8002994:	203c      	movs	r0, #60	; 0x3c
 8002996:	f000 f9e6 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_IRQn);
 800299a:	203c      	movs	r0, #60	; 0x3c
 800299c:	f000 f9ff 	bl	8002d9e <HAL_NVIC_EnableIRQ>

  return (status);
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000100 	.word	0x20000100
 80029b0:	40020458 	.word	0x40020458

080029b4 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 80029be:	2207      	movs	r2, #7
 80029c0:	605a      	str	r2, [r3, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 80029c4:	2210      	movs	r2, #16
 80029c6:	609a      	str	r2, [r3, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	611a      	str	r2, [r3, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029d4:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 80029d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029da:	615a      	str	r2, [r3, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 80029de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029e2:	619a      	str	r2, [r3, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 80029e6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80029ea:	621a      	str	r2, [r3, #32]

  hdma_tx.Instance = SD_DMAx_STREAM;
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 80029ee:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <SD_DMAConfigTx+0x80>)
 80029f0:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 80029f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80029f8:	4a0d      	ldr	r2, [pc, #52]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6293      	str	r3, [r2, #40]	; 0x28

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 80029fe:	480c      	ldr	r0, [pc, #48]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 8002a00:	f000 fba0 	bl	8003144 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 8002a04:	480a      	ldr	r0, [pc, #40]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 8002a06:	f000 faab 	bl	8002f60 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 8002a0a:	4809      	ldr	r0, [pc, #36]	; (8002a30 <SD_DMAConfigTx+0x7c>)
 8002a0c:	f000 f9f0 	bl	8002df0 <HAL_DMA_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	73fb      	strb	r3, [r7, #15]

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_IRQn, 6, 0);
 8002a14:	2200      	movs	r2, #0
 8002a16:	2106      	movs	r1, #6
 8002a18:	203c      	movs	r0, #60	; 0x3c
 8002a1a:	f000 f9a4 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_IRQn);
 8002a1e:	203c      	movs	r0, #60	; 0x3c
 8002a20:	f000 f9bd 	bl	8002d9e <HAL_NVIC_EnableIRQ>

  return (status);
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000148 	.word	0x20000148
 8002a34:	40020458 	.word	0x40020458

08002a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a42:	2003      	movs	r0, #3
 8002a44:	f000 f984 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a48:	200f      	movs	r0, #15
 8002a4a:	f000 f80d 	bl	8002a68 <HAL_InitTick>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	71fb      	strb	r3, [r7, #7]
 8002a58:	e001      	b.n	8002a5e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a5a:	f7fd fdfd 	bl	8000658 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <HAL_InitTick+0x6c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d023      	beq.n	8002ac4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_InitTick+0x70>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_InitTick+0x6c>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f99f 	bl	8002dd6 <HAL_SYSTICK_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10f      	bne.n	8002abe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b0f      	cmp	r3, #15
 8002aa2:	d809      	bhi.n	8002ab8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aac:	f000 f95b 	bl	8002d66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <HAL_InitTick+0x74>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e007      	b.n	8002ac8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e004      	b.n	8002ac8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	e001      	b.n	8002ac8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000084 	.word	0x20000084
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000080 	.word	0x20000080

08002ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x20>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x24>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <HAL_IncTick+0x24>)
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000084 	.word	0x20000084
 8002b04:	20000668 	.word	0x20000668

08002b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_GetTick+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000668 	.word	0x20000668

08002b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff ffee 	bl	8002b08 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b38:	d005      	beq.n	8002b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_Delay+0x44>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b46:	bf00      	nop
 8002b48:	f7ff ffde 	bl	8002b08 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d8f7      	bhi.n	8002b48 <HAL_Delay+0x28>
  {
  }
}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000084 	.word	0x20000084

08002b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <__NVIC_SetPriorityGrouping+0x44>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b84:	4013      	ands	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9a:	4a04      	ldr	r2, [pc, #16]	; (8002bac <__NVIC_SetPriorityGrouping+0x44>)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	60d3      	str	r3, [r2, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	f003 0307 	and.w	r3, r3, #7
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	db0b      	blt.n	8002bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	f003 021f 	and.w	r2, r3, #31
 8002be4:	4907      	ldr	r1, [pc, #28]	; (8002c04 <__NVIC_EnableIRQ+0x38>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	2001      	movs	r0, #1
 8002bee:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	e000e100 	.word	0xe000e100

08002c08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	db12      	blt.n	8002c40 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	490a      	ldr	r1, [pc, #40]	; (8002c4c <__NVIC_DisableIRQ+0x44>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2001      	movs	r0, #1
 8002c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2e:	3320      	adds	r3, #32
 8002c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c34:	f3bf 8f4f 	dsb	sy
}
 8002c38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c3a:	f3bf 8f6f 	isb	sy
}
 8002c3e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	; (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	; (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	; 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d1c:	d301      	bcc.n	8002d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00f      	b.n	8002d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <SysTick_Config+0x40>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d30:	f7ff ff8e 	bl	8002c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <SysTick_Config+0x40>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <SysTick_Config+0x40>)
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	e000e010 	.word	0xe000e010

08002d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ff05 	bl	8002b68 <__NVIC_SetPriorityGrouping>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d78:	f7ff ff1a 	bl	8002bb0 <__NVIC_GetPriorityGrouping>
 8002d7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f7ff ff8e 	bl	8002ca4 <NVIC_EncodePriority>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff5d 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff0d 	bl	8002bcc <__NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff1d 	bl	8002c08 <__NVIC_DisableIRQ>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ff94 	bl	8002d0c <SysTick_Config>
 8002de4:	4603      	mov	r3, r0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e098      	b.n	8002f34 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b4d      	ldr	r3, [pc, #308]	; (8002f40 <HAL_DMA_Init+0x150>)
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d80f      	bhi.n	8002e2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b4b      	ldr	r3, [pc, #300]	; (8002f44 <HAL_DMA_Init+0x154>)
 8002e16:	4413      	add	r3, r2
 8002e18:	4a4b      	ldr	r2, [pc, #300]	; (8002f48 <HAL_DMA_Init+0x158>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	009a      	lsls	r2, r3, #2
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a48      	ldr	r2, [pc, #288]	; (8002f4c <HAL_DMA_Init+0x15c>)
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e2c:	e00e      	b.n	8002e4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <HAL_DMA_Init+0x160>)
 8002e36:	4413      	add	r3, r2
 8002e38:	4a43      	ldr	r2, [pc, #268]	; (8002f48 <HAL_DMA_Init+0x158>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	009a      	lsls	r2, r3, #2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a42      	ldr	r2, [pc, #264]	; (8002f54 <HAL_DMA_Init+0x164>)
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea6:	d039      	beq.n	8002f1c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	4a27      	ldr	r2, [pc, #156]	; (8002f4c <HAL_DMA_Init+0x15c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d11a      	bne.n	8002ee8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <HAL_DMA_Init+0x168>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f003 031c 	and.w	r3, r3, #28
 8002ebe:	210f      	movs	r1, #15
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	4924      	ldr	r1, [pc, #144]	; (8002f58 <HAL_DMA_Init+0x168>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ecc:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_DMA_Init+0x168>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f003 031c 	and.w	r3, r3, #28
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	491d      	ldr	r1, [pc, #116]	; (8002f58 <HAL_DMA_Init+0x168>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
 8002ee6:	e019      	b.n	8002f1c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <HAL_DMA_Init+0x16c>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	f003 031c 	and.w	r3, r3, #28
 8002ef4:	210f      	movs	r1, #15
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	4917      	ldr	r1, [pc, #92]	; (8002f5c <HAL_DMA_Init+0x16c>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f02:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <HAL_DMA_Init+0x16c>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6859      	ldr	r1, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f003 031c 	and.w	r3, r3, #28
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	4911      	ldr	r1, [pc, #68]	; (8002f5c <HAL_DMA_Init+0x16c>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40020407 	.word	0x40020407
 8002f44:	bffdfff8 	.word	0xbffdfff8
 8002f48:	cccccccd 	.word	0xcccccccd
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	bffdfbf8 	.word	0xbffdfbf8
 8002f54:	40020400 	.word	0x40020400
 8002f58:	400200a8 	.word	0x400200a8
 8002f5c:	400204a8 	.word	0x400204a8

08002f60 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e072      	b.n	8003058 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b36      	ldr	r3, [pc, #216]	; (8003064 <HAL_DMA_DeInit+0x104>)
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d80f      	bhi.n	8002fae <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	4b34      	ldr	r3, [pc, #208]	; (8003068 <HAL_DMA_DeInit+0x108>)
 8002f96:	4413      	add	r3, r2
 8002f98:	4a34      	ldr	r2, [pc, #208]	; (800306c <HAL_DMA_DeInit+0x10c>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	009a      	lsls	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a31      	ldr	r2, [pc, #196]	; (8003070 <HAL_DMA_DeInit+0x110>)
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
 8002fac:	e00e      	b.n	8002fcc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <HAL_DMA_DeInit+0x114>)
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4a2c      	ldr	r2, [pc, #176]	; (800306c <HAL_DMA_DeInit+0x10c>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	009a      	lsls	r2, r3, #2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <HAL_DMA_DeInit+0x118>)
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f003 021c 	and.w	r2, r3, #28
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe6:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a20      	ldr	r2, [pc, #128]	; (8003070 <HAL_DMA_DeInit+0x110>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10d      	bne.n	800300e <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ff2:	4b22      	ldr	r3, [pc, #136]	; (800307c <HAL_DMA_DeInit+0x11c>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	f003 031c 	and.w	r3, r3, #28
 8002ffe:	210f      	movs	r1, #15
 8003000:	fa01 f303 	lsl.w	r3, r1, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	491d      	ldr	r1, [pc, #116]	; (800307c <HAL_DMA_DeInit+0x11c>)
 8003008:	4013      	ands	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	e00c      	b.n	8003028 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <HAL_DMA_DeInit+0x120>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	f003 031c 	and.w	r3, r3, #28
 800301a:	210f      	movs	r1, #15
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	4917      	ldr	r1, [pc, #92]	; (8003080 <HAL_DMA_DeInit+0x120>)
 8003024:	4013      	ands	r3, r2
 8003026:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	40020407 	.word	0x40020407
 8003068:	bffdfff8 	.word	0xbffdfff8
 800306c:	cccccccd 	.word	0xcccccccd
 8003070:	40020000 	.word	0x40020000
 8003074:	bffdfbf8 	.word	0xbffdfbf8
 8003078:	40020400 	.word	0x40020400
 800307c:	400200a8 	.word	0x400200a8
 8003080:	400204a8 	.word	0x400204a8

08003084 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_DMA_Start_IT+0x20>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e04b      	b.n	800313c <HAL_DMA_Start_IT+0xb8>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d13a      	bne.n	800312e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f95f 	bl	80033a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 020e 	orr.w	r2, r2, #14
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	e00f      	b.n	800311c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0204 	bic.w	r2, r2, #4
 800310a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 020a 	orr.w	r2, r2, #10
 800311a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e005      	b.n	800313a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003136:	2302      	movs	r3, #2
 8003138:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800313a:	7dfb      	ldrb	r3, [r7, #23]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d008      	beq.n	800316e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2204      	movs	r2, #4
 8003160:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e022      	b.n	80031b4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 020e 	bic.w	r2, r2, #14
 800317c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0201 	bic.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f003 021c 	and.w	r2, r3, #28
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2101      	movs	r1, #1
 800319c:	fa01 f202 	lsl.w	r2, r1, r2
 80031a0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d005      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2204      	movs	r2, #4
 80031dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
 80031e2:	e029      	b.n	8003238 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 020e 	bic.w	r2, r2, #14
 80031f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	f003 021c 	and.w	r2, r3, #28
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	2101      	movs	r1, #1
 8003212:	fa01 f202 	lsl.w	r2, r1, r2
 8003216:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
    }
  }
  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f003 031c 	and.w	r3, r3, #28
 8003262:	2204      	movs	r2, #4
 8003264:	409a      	lsls	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d026      	beq.n	80032bc <HAL_DMA_IRQHandler+0x7a>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d021      	beq.n	80032bc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d107      	bne.n	8003296 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0204 	bic.w	r2, r2, #4
 8003294:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	f003 021c 	and.w	r2, r3, #28
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2104      	movs	r1, #4
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d071      	beq.n	8003396 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80032ba:	e06c      	b.n	8003396 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	f003 031c 	and.w	r3, r3, #28
 80032c4:	2202      	movs	r2, #2
 80032c6:	409a      	lsls	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d02e      	beq.n	800332e <HAL_DMA_IRQHandler+0xec>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d029      	beq.n	800332e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 020a 	bic.w	r2, r2, #10
 80032f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	f003 021c 	and.w	r2, r3, #28
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	2102      	movs	r1, #2
 800330e:	fa01 f202 	lsl.w	r2, r1, r2
 8003312:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d038      	beq.n	8003396 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800332c:	e033      	b.n	8003396 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f003 031c 	and.w	r3, r3, #28
 8003336:	2208      	movs	r2, #8
 8003338:	409a      	lsls	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d02a      	beq.n	8003398 <HAL_DMA_IRQHandler+0x156>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d025      	beq.n	8003398 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 020e 	bic.w	r2, r2, #14
 800335a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	f003 021c 	and.w	r2, r3, #28
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	2101      	movs	r1, #1
 800336a:	fa01 f202 	lsl.w	r2, r1, r2
 800336e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003396:	bf00      	nop
 8003398:	bf00      	nop
}
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f003 021c 	and.w	r2, r3, #28
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2101      	movs	r1, #1
 80033bc:	fa01 f202 	lsl.w	r2, r1, r2
 80033c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d108      	bne.n	80033e4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033e2:	e007      	b.n	80033f4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800340e:	e166      	b.n	80036de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	4013      	ands	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8158 	beq.w	80036d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d005      	beq.n	8003440 <HAL_GPIO_Init+0x40>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d130      	bne.n	80034a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	2203      	movs	r2, #3
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003476:	2201      	movs	r2, #1
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	f003 0201 	and.w	r2, r3, #1
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d017      	beq.n	80034de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2203      	movs	r2, #3
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d123      	bne.n	8003532 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	08da      	lsrs	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3208      	adds	r2, #8
 80034f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	220f      	movs	r2, #15
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	08da      	lsrs	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3208      	adds	r2, #8
 800352c:	6939      	ldr	r1, [r7, #16]
 800352e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2203      	movs	r2, #3
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0203 	and.w	r2, r3, #3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80b2 	beq.w	80036d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003574:	4b61      	ldr	r3, [pc, #388]	; (80036fc <HAL_GPIO_Init+0x2fc>)
 8003576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003578:	4a60      	ldr	r2, [pc, #384]	; (80036fc <HAL_GPIO_Init+0x2fc>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6613      	str	r3, [r2, #96]	; 0x60
 8003580:	4b5e      	ldr	r3, [pc, #376]	; (80036fc <HAL_GPIO_Init+0x2fc>)
 8003582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800358c:	4a5c      	ldr	r2, [pc, #368]	; (8003700 <HAL_GPIO_Init+0x300>)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	220f      	movs	r2, #15
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035b6:	d02b      	beq.n	8003610 <HAL_GPIO_Init+0x210>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a52      	ldr	r2, [pc, #328]	; (8003704 <HAL_GPIO_Init+0x304>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d025      	beq.n	800360c <HAL_GPIO_Init+0x20c>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a51      	ldr	r2, [pc, #324]	; (8003708 <HAL_GPIO_Init+0x308>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d01f      	beq.n	8003608 <HAL_GPIO_Init+0x208>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a50      	ldr	r2, [pc, #320]	; (800370c <HAL_GPIO_Init+0x30c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d019      	beq.n	8003604 <HAL_GPIO_Init+0x204>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a4f      	ldr	r2, [pc, #316]	; (8003710 <HAL_GPIO_Init+0x310>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <HAL_GPIO_Init+0x200>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a4e      	ldr	r2, [pc, #312]	; (8003714 <HAL_GPIO_Init+0x314>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00d      	beq.n	80035fc <HAL_GPIO_Init+0x1fc>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a4d      	ldr	r2, [pc, #308]	; (8003718 <HAL_GPIO_Init+0x318>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <HAL_GPIO_Init+0x1f8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a4c      	ldr	r2, [pc, #304]	; (800371c <HAL_GPIO_Init+0x31c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_GPIO_Init+0x1f4>
 80035f0:	2307      	movs	r3, #7
 80035f2:	e00e      	b.n	8003612 <HAL_GPIO_Init+0x212>
 80035f4:	2308      	movs	r3, #8
 80035f6:	e00c      	b.n	8003612 <HAL_GPIO_Init+0x212>
 80035f8:	2306      	movs	r3, #6
 80035fa:	e00a      	b.n	8003612 <HAL_GPIO_Init+0x212>
 80035fc:	2305      	movs	r3, #5
 80035fe:	e008      	b.n	8003612 <HAL_GPIO_Init+0x212>
 8003600:	2304      	movs	r3, #4
 8003602:	e006      	b.n	8003612 <HAL_GPIO_Init+0x212>
 8003604:	2303      	movs	r3, #3
 8003606:	e004      	b.n	8003612 <HAL_GPIO_Init+0x212>
 8003608:	2302      	movs	r3, #2
 800360a:	e002      	b.n	8003612 <HAL_GPIO_Init+0x212>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_GPIO_Init+0x212>
 8003610:	2300      	movs	r3, #0
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	f002 0203 	and.w	r2, r2, #3
 8003618:	0092      	lsls	r2, r2, #2
 800361a:	4093      	lsls	r3, r2
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003622:	4937      	ldr	r1, [pc, #220]	; (8003700 <HAL_GPIO_Init+0x300>)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	3302      	adds	r3, #2
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003630:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_GPIO_Init+0x320>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	43db      	mvns	r3, r3
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003654:	4a32      	ldr	r2, [pc, #200]	; (8003720 <HAL_GPIO_Init+0x320>)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800365a:	4b31      	ldr	r3, [pc, #196]	; (8003720 <HAL_GPIO_Init+0x320>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	43db      	mvns	r3, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800367e:	4a28      	ldr	r2, [pc, #160]	; (8003720 <HAL_GPIO_Init+0x320>)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003684:	4b26      	ldr	r3, [pc, #152]	; (8003720 <HAL_GPIO_Init+0x320>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	43db      	mvns	r3, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036a8:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_GPIO_Init+0x320>)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036ae:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <HAL_GPIO_Init+0x320>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036d2:	4a13      	ldr	r2, [pc, #76]	; (8003720 <HAL_GPIO_Init+0x320>)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	3301      	adds	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f47f ae91 	bne.w	8003410 <HAL_GPIO_Init+0x10>
  }
}
 80036ee:	bf00      	nop
 80036f0:	bf00      	nop
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	40021000 	.word	0x40021000
 8003700:	40010000 	.word	0x40010000
 8003704:	48000400 	.word	0x48000400
 8003708:	48000800 	.word	0x48000800
 800370c:	48000c00 	.word	0x48000c00
 8003710:	48001000 	.word	0x48001000
 8003714:	48001400 	.word	0x48001400
 8003718:	48001800 	.word	0x48001800
 800371c:	48001c00 	.word	0x48001c00
 8003720:	40010400 	.word	0x40010400

08003724 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003732:	e0c9      	b.n	80038c8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003734:	2201      	movs	r2, #1
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80bc 	beq.w	80038c2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800374a:	4a66      	ldr	r2, [pc, #408]	; (80038e4 <HAL_GPIO_DeInit+0x1c0>)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	3302      	adds	r3, #2
 8003752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003756:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	220f      	movs	r2, #15
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4013      	ands	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003772:	d02b      	beq.n	80037cc <HAL_GPIO_DeInit+0xa8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a5c      	ldr	r2, [pc, #368]	; (80038e8 <HAL_GPIO_DeInit+0x1c4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d025      	beq.n	80037c8 <HAL_GPIO_DeInit+0xa4>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a5b      	ldr	r2, [pc, #364]	; (80038ec <HAL_GPIO_DeInit+0x1c8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d01f      	beq.n	80037c4 <HAL_GPIO_DeInit+0xa0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a5a      	ldr	r2, [pc, #360]	; (80038f0 <HAL_GPIO_DeInit+0x1cc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d019      	beq.n	80037c0 <HAL_GPIO_DeInit+0x9c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a59      	ldr	r2, [pc, #356]	; (80038f4 <HAL_GPIO_DeInit+0x1d0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d013      	beq.n	80037bc <HAL_GPIO_DeInit+0x98>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a58      	ldr	r2, [pc, #352]	; (80038f8 <HAL_GPIO_DeInit+0x1d4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00d      	beq.n	80037b8 <HAL_GPIO_DeInit+0x94>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a57      	ldr	r2, [pc, #348]	; (80038fc <HAL_GPIO_DeInit+0x1d8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d007      	beq.n	80037b4 <HAL_GPIO_DeInit+0x90>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a56      	ldr	r2, [pc, #344]	; (8003900 <HAL_GPIO_DeInit+0x1dc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_GPIO_DeInit+0x8c>
 80037ac:	2307      	movs	r3, #7
 80037ae:	e00e      	b.n	80037ce <HAL_GPIO_DeInit+0xaa>
 80037b0:	2308      	movs	r3, #8
 80037b2:	e00c      	b.n	80037ce <HAL_GPIO_DeInit+0xaa>
 80037b4:	2306      	movs	r3, #6
 80037b6:	e00a      	b.n	80037ce <HAL_GPIO_DeInit+0xaa>
 80037b8:	2305      	movs	r3, #5
 80037ba:	e008      	b.n	80037ce <HAL_GPIO_DeInit+0xaa>
 80037bc:	2304      	movs	r3, #4
 80037be:	e006      	b.n	80037ce <HAL_GPIO_DeInit+0xaa>
 80037c0:	2303      	movs	r3, #3
 80037c2:	e004      	b.n	80037ce <HAL_GPIO_DeInit+0xaa>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e002      	b.n	80037ce <HAL_GPIO_DeInit+0xaa>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <HAL_GPIO_DeInit+0xaa>
 80037cc:	2300      	movs	r3, #0
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	f002 0203 	and.w	r2, r2, #3
 80037d4:	0092      	lsls	r2, r2, #2
 80037d6:	4093      	lsls	r3, r2
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d132      	bne.n	8003844 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80037de:	4b49      	ldr	r3, [pc, #292]	; (8003904 <HAL_GPIO_DeInit+0x1e0>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	4947      	ldr	r1, [pc, #284]	; (8003904 <HAL_GPIO_DeInit+0x1e0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80037ec:	4b45      	ldr	r3, [pc, #276]	; (8003904 <HAL_GPIO_DeInit+0x1e0>)
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	43db      	mvns	r3, r3
 80037f4:	4943      	ldr	r1, [pc, #268]	; (8003904 <HAL_GPIO_DeInit+0x1e0>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80037fa:	4b42      	ldr	r3, [pc, #264]	; (8003904 <HAL_GPIO_DeInit+0x1e0>)
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	4940      	ldr	r1, [pc, #256]	; (8003904 <HAL_GPIO_DeInit+0x1e0>)
 8003804:	4013      	ands	r3, r2
 8003806:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003808:	4b3e      	ldr	r3, [pc, #248]	; (8003904 <HAL_GPIO_DeInit+0x1e0>)
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	43db      	mvns	r3, r3
 8003810:	493c      	ldr	r1, [pc, #240]	; (8003904 <HAL_GPIO_DeInit+0x1e0>)
 8003812:	4013      	ands	r3, r2
 8003814:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	220f      	movs	r2, #15
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003826:	4a2f      	ldr	r2, [pc, #188]	; (80038e4 <HAL_GPIO_DeInit+0x1c0>)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	3302      	adds	r3, #2
 800382e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	43da      	mvns	r2, r3
 8003836:	482b      	ldr	r0, [pc, #172]	; (80038e4 <HAL_GPIO_DeInit+0x1c0>)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	089b      	lsrs	r3, r3, #2
 800383c:	400a      	ands	r2, r1
 800383e:	3302      	adds	r3, #2
 8003840:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2103      	movs	r1, #3
 800384e:	fa01 f303 	lsl.w	r3, r1, r3
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	08da      	lsrs	r2, r3, #3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3208      	adds	r2, #8
 8003860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	220f      	movs	r2, #15
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	08d2      	lsrs	r2, r2, #3
 8003878:	4019      	ands	r1, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3208      	adds	r2, #8
 800387e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	2103      	movs	r1, #3
 800388c:	fa01 f303 	lsl.w	r3, r1, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	401a      	ands	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	2101      	movs	r1, #1
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	401a      	ands	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	2103      	movs	r1, #3
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	401a      	ands	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	3301      	adds	r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f47f af2f 	bne.w	8003734 <HAL_GPIO_DeInit+0x10>
  }
}
 80038d6:	bf00      	nop
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	40010000 	.word	0x40010000
 80038e8:	48000400 	.word	0x48000400
 80038ec:	48000800 	.word	0x48000800
 80038f0:	48000c00 	.word	0x48000c00
 80038f4:	48001000 	.word	0x48001000
 80038f8:	48001400 	.word	0x48001400
 80038fc:	48001800 	.word	0x48001800
 8003900:	48001c00 	.word	0x48001c00
 8003904:	40010400 	.word	0x40010400

08003908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	807b      	strh	r3, [r7, #2]
 8003914:	4613      	mov	r3, r2
 8003916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003918:	787b      	ldrb	r3, [r7, #1]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800391e:	887a      	ldrh	r2, [r7, #2]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003924:	e002      	b.n	800392c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e081      	b.n	8003a4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fc fe9e 	bl	80006a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2224      	movs	r2, #36	; 0x24
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003988:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003998:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	e006      	b.n	80039c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d104      	bne.n	80039d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69d9      	ldr	r1, [r3, #28]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1a      	ldr	r2, [r3, #32]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e021      	b.n	8003aac <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2224      	movs	r2, #36	; 0x24
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0201 	bic.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7fc fee9 	bl	8000858 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	4608      	mov	r0, r1
 8003abe:	4611      	mov	r1, r2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	817b      	strh	r3, [r7, #10]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	813b      	strh	r3, [r7, #8]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	f040 80f9 	bne.w	8003cce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_I2C_Mem_Write+0x34>
 8003ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0ed      	b.n	8003cd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_I2C_Mem_Write+0x4e>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e0e6      	b.n	8003cd0 <HAL_I2C_Mem_Write+0x21c>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b0a:	f7fe fffd 	bl	8002b08 <HAL_GetTick>
 8003b0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2319      	movs	r3, #25
 8003b16:	2201      	movs	r2, #1
 8003b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fbd9 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0d1      	b.n	8003cd0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2221      	movs	r2, #33	; 0x21
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2240      	movs	r2, #64	; 0x40
 8003b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a3a      	ldr	r2, [r7, #32]
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b54:	88f8      	ldrh	r0, [r7, #6]
 8003b56:	893a      	ldrh	r2, [r7, #8]
 8003b58:	8979      	ldrh	r1, [r7, #10]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	4603      	mov	r3, r0
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fae9 	bl	800413c <I2C_RequestMemoryWrite>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0a9      	b.n	8003cd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2bff      	cmp	r3, #255	; 0xff
 8003b84:	d90e      	bls.n	8003ba4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	22ff      	movs	r2, #255	; 0xff
 8003b8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	8979      	ldrh	r1, [r7, #10]
 8003b94:	2300      	movs	r3, #0
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fd41 	bl	8004624 <I2C_TransferConfig>
 8003ba2:	e00f      	b.n	8003bc4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	8979      	ldrh	r1, [r7, #10]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fd30 	bl	8004624 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 fbc3 	bl	8004354 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e07b      	b.n	8003cd0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d034      	beq.n	8003c7c <HAL_I2C_Mem_Write+0x1c8>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d130      	bne.n	8003c7c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	2200      	movs	r2, #0
 8003c22:	2180      	movs	r1, #128	; 0x80
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fb55 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e04d      	b.n	8003cd0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2bff      	cmp	r3, #255	; 0xff
 8003c3c:	d90e      	bls.n	8003c5c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	22ff      	movs	r2, #255	; 0xff
 8003c42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	8979      	ldrh	r1, [r7, #10]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fce5 	bl	8004624 <I2C_TransferConfig>
 8003c5a:	e00f      	b.n	8003c7c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	8979      	ldrh	r1, [r7, #10]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fcd4 	bl	8004624 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d19e      	bne.n	8003bc4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fba2 	bl	80043d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e01a      	b.n	8003cd0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6859      	ldr	r1, [r3, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <HAL_I2C_Mem_Write+0x224>)
 8003cae:	400b      	ands	r3, r1
 8003cb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
  }
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	fe00e800 	.word	0xfe00e800

08003cdc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	817b      	strh	r3, [r7, #10]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	813b      	strh	r3, [r7, #8]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	f040 80fd 	bne.w	8003efe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_I2C_Mem_Read+0x34>
 8003d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d105      	bne.n	8003d1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0f1      	b.n	8003f00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_I2C_Mem_Read+0x4e>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0ea      	b.n	8003f00 <HAL_I2C_Mem_Read+0x224>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d32:	f7fe fee9 	bl	8002b08 <HAL_GetTick>
 8003d36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	2319      	movs	r3, #25
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fac5 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0d5      	b.n	8003f00 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2222      	movs	r2, #34	; 0x22
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2240      	movs	r2, #64	; 0x40
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a3a      	ldr	r2, [r7, #32]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d7c:	88f8      	ldrh	r0, [r7, #6]
 8003d7e:	893a      	ldrh	r2, [r7, #8]
 8003d80:	8979      	ldrh	r1, [r7, #10]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fa29 	bl	80041e4 <I2C_RequestMemoryRead>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0ad      	b.n	8003f00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2bff      	cmp	r3, #255	; 0xff
 8003dac:	d90e      	bls.n	8003dcc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	22ff      	movs	r2, #255	; 0xff
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	8979      	ldrh	r1, [r7, #10]
 8003dbc:	4b52      	ldr	r3, [pc, #328]	; (8003f08 <HAL_I2C_Mem_Read+0x22c>)
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fc2d 	bl	8004624 <I2C_TransferConfig>
 8003dca:	e00f      	b.n	8003dec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	8979      	ldrh	r1, [r7, #10]
 8003dde:	4b4a      	ldr	r3, [pc, #296]	; (8003f08 <HAL_I2C_Mem_Read+0x22c>)
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fc1c 	bl	8004624 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	2200      	movs	r2, #0
 8003df4:	2104      	movs	r1, #4
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fa6c 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e07c      	b.n	8003f00 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d034      	beq.n	8003eac <HAL_I2C_Mem_Read+0x1d0>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d130      	bne.n	8003eac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	2200      	movs	r2, #0
 8003e52:	2180      	movs	r1, #128	; 0x80
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fa3d 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e04d      	b.n	8003f00 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2bff      	cmp	r3, #255	; 0xff
 8003e6c:	d90e      	bls.n	8003e8c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	22ff      	movs	r2, #255	; 0xff
 8003e72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	8979      	ldrh	r1, [r7, #10]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fbcd 	bl	8004624 <I2C_TransferConfig>
 8003e8a:	e00f      	b.n	8003eac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	8979      	ldrh	r1, [r7, #10]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fbbc 	bl	8004624 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d19a      	bne.n	8003dec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fa8a 	bl	80043d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e01a      	b.n	8003f00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6859      	ldr	r1, [r3, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_I2C_Mem_Read+0x230>)
 8003ede:	400b      	ands	r3, r1
 8003ee0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e000      	b.n	8003f00 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	80002400 	.word	0x80002400
 8003f0c:	fe00e800 	.word	0xfe00e800

08003f10 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	; 0x28
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	f040 80f1 	bne.w	8004114 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f40:	d101      	bne.n	8003f46 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003f42:	2302      	movs	r3, #2
 8003f44:	e0e7      	b.n	8004116 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_I2C_IsDeviceReady+0x44>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e0e0      	b.n	8004116 <HAL_I2C_IsDeviceReady+0x206>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2224      	movs	r2, #36	; 0x24
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_I2C_IsDeviceReady+0x72>
 8003f72:	897b      	ldrh	r3, [r7, #10]
 8003f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f80:	e004      	b.n	8003f8c <HAL_I2C_IsDeviceReady+0x7c>
 8003f82:	897b      	ldrh	r3, [r7, #10]
 8003f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f88:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003f92:	f7fe fdb9 	bl	8002b08 <HAL_GetTick>
 8003f96:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	bf0c      	ite	eq
 8003fa6:	2301      	moveq	r3, #1
 8003fa8:	2300      	movne	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003fc4:	e034      	b.n	8004030 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fcc:	d01a      	beq.n	8004004 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fce:	f7fe fd9b 	bl	8002b08 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d302      	bcc.n	8003fe4 <HAL_I2C_IsDeviceReady+0xd4>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10f      	bne.n	8004004 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	f043 0220 	orr.w	r2, r3, #32
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e088      	b.n	8004116 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b20      	cmp	r3, #32
 8004010:	bf0c      	ite	eq
 8004012:	2301      	moveq	r3, #1
 8004014:	2300      	movne	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b10      	cmp	r3, #16
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004030:	7ffb      	ldrb	r3, [r7, #31]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <HAL_I2C_IsDeviceReady+0x12c>
 8004036:	7fbb      	ldrb	r3, [r7, #30]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0c4      	beq.n	8003fc6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b10      	cmp	r3, #16
 8004048:	d01a      	beq.n	8004080 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2200      	movs	r2, #0
 8004052:	2120      	movs	r1, #32
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f93d 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e058      	b.n	8004116 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2220      	movs	r2, #32
 800406a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e04a      	b.n	8004116 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2200      	movs	r2, #0
 8004088:	2120      	movs	r1, #32
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f922 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e03d      	b.n	8004116 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2210      	movs	r2, #16
 80040a0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2220      	movs	r2, #32
 80040a8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d118      	bne.n	80040e4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040c0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2120      	movs	r1, #32
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f901 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e01c      	b.n	8004116 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2220      	movs	r2, #32
 80040e2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3301      	adds	r3, #1
 80040e8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	f63f af3b 	bhi.w	8003f6a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004100:	f043 0220 	orr.w	r2, r3, #32
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004114:	2302      	movs	r3, #2
  }
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412c:	b2db      	uxtb	r3, r3
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	4608      	mov	r0, r1
 8004146:	4611      	mov	r1, r2
 8004148:	461a      	mov	r2, r3
 800414a:	4603      	mov	r3, r0
 800414c:	817b      	strh	r3, [r7, #10]
 800414e:	460b      	mov	r3, r1
 8004150:	813b      	strh	r3, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	8979      	ldrh	r1, [r7, #10]
 800415c:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <I2C_RequestMemoryWrite+0xa4>)
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 fa5d 	bl	8004624 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	69b9      	ldr	r1, [r7, #24]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f8f0 	bl	8004354 <I2C_WaitOnTXISFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e02c      	b.n	80041d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004184:	893b      	ldrh	r3, [r7, #8]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	629a      	str	r2, [r3, #40]	; 0x28
 800418e:	e015      	b.n	80041bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004190:	893b      	ldrh	r3, [r7, #8]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	b29b      	uxth	r3, r3
 8004196:	b2da      	uxtb	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	69b9      	ldr	r1, [r7, #24]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f8d6 	bl	8004354 <I2C_WaitOnTXISFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e012      	b.n	80041d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041b2:	893b      	ldrh	r3, [r7, #8]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2200      	movs	r2, #0
 80041c4:	2180      	movs	r1, #128	; 0x80
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f884 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	80002000 	.word	0x80002000

080041e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	461a      	mov	r2, r3
 80041f2:	4603      	mov	r3, r0
 80041f4:	817b      	strh	r3, [r7, #10]
 80041f6:	460b      	mov	r3, r1
 80041f8:	813b      	strh	r3, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	8979      	ldrh	r1, [r7, #10]
 8004204:	4b20      	ldr	r3, [pc, #128]	; (8004288 <I2C_RequestMemoryRead+0xa4>)
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2300      	movs	r3, #0
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fa0a 	bl	8004624 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	69b9      	ldr	r1, [r7, #24]
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f89d 	bl	8004354 <I2C_WaitOnTXISFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e02c      	b.n	800427e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d105      	bne.n	8004236 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800422a:	893b      	ldrh	r3, [r7, #8]
 800422c:	b2da      	uxtb	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28
 8004234:	e015      	b.n	8004262 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004236:	893b      	ldrh	r3, [r7, #8]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	b29b      	uxth	r3, r3
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	69b9      	ldr	r1, [r7, #24]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f883 	bl	8004354 <I2C_WaitOnTXISFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e012      	b.n	800427e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004258:	893b      	ldrh	r3, [r7, #8]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2200      	movs	r2, #0
 800426a:	2140      	movs	r1, #64	; 0x40
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f831 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	80002000 	.word	0x80002000

0800428c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d103      	bne.n	80042aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2200      	movs	r2, #0
 80042a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d007      	beq.n	80042c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	619a      	str	r2, [r3, #24]
  }
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e4:	e022      	b.n	800432c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ec:	d01e      	beq.n	800432c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ee:	f7fe fc0b 	bl	8002b08 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d302      	bcc.n	8004304 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d113      	bne.n	800432c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e00f      	b.n	800434c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	429a      	cmp	r2, r3
 8004348:	d0cd      	beq.n	80042e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004360:	e02c      	b.n	80043bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f870 	bl	800444c <I2C_IsErrorOccurred>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e02a      	b.n	80043cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800437c:	d01e      	beq.n	80043bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437e:	f7fe fbc3 	bl	8002b08 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	429a      	cmp	r2, r3
 800438c:	d302      	bcc.n	8004394 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d113      	bne.n	80043bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	f043 0220 	orr.w	r2, r3, #32
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e007      	b.n	80043cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d1cb      	bne.n	8004362 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043e0:	e028      	b.n	8004434 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f830 	bl	800444c <I2C_IsErrorOccurred>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e026      	b.n	8004444 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7fe fb87 	bl	8002b08 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d113      	bne.n	8004434 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e007      	b.n	8004444 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b20      	cmp	r3, #32
 8004440:	d1cf      	bne.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	d075      	beq.n	8004564 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2210      	movs	r2, #16
 800447e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004480:	e056      	b.n	8004530 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004488:	d052      	beq.n	8004530 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800448a:	f7fe fb3d 	bl	8002b08 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	429a      	cmp	r2, r3
 8004498:	d302      	bcc.n	80044a0 <I2C_IsErrorOccurred+0x54>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d147      	bne.n	8004530 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c2:	d12e      	bne.n	8004522 <I2C_IsErrorOccurred+0xd6>
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ca:	d02a      	beq.n	8004522 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d027      	beq.n	8004522 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044e0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044e2:	f7fe fb11 	bl	8002b08 <HAL_GetTick>
 80044e6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044e8:	e01b      	b.n	8004522 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044ea:	f7fe fb0d 	bl	8002b08 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b19      	cmp	r3, #25
 80044f6:	d914      	bls.n	8004522 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fc:	f043 0220 	orr.w	r2, r3, #32
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b20      	cmp	r3, #32
 800452e:	d1dc      	bne.n	80044ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b20      	cmp	r3, #32
 800453c:	d003      	beq.n	8004546 <I2C_IsErrorOccurred+0xfa>
 800453e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004542:	2b00      	cmp	r3, #0
 8004544:	d09d      	beq.n	8004482 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800454a:	2b00      	cmp	r3, #0
 800454c:	d103      	bne.n	8004556 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2220      	movs	r2, #32
 8004554:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f043 0304 	orr.w	r3, r3, #4
 800455c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004586:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	f043 0308 	orr.w	r3, r3, #8
 800459e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80045d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01c      	beq.n	8004614 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7ff fe56 	bl	800428c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6859      	ldr	r1, [r3, #4]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <I2C_IsErrorOccurred+0x1d4>)
 80045ec:	400b      	ands	r3, r1
 80045ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004618:	4618      	mov	r0, r3
 800461a:	3728      	adds	r7, #40	; 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	fe00e800 	.word	0xfe00e800

08004624 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	460b      	mov	r3, r1
 8004630:	817b      	strh	r3, [r7, #10]
 8004632:	4613      	mov	r3, r2
 8004634:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004636:	897b      	ldrh	r3, [r7, #10]
 8004638:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800463c:	7a7b      	ldrb	r3, [r7, #9]
 800463e:	041b      	lsls	r3, r3, #16
 8004640:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004644:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	4313      	orrs	r3, r2
 800464e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004652:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	0d5b      	lsrs	r3, r3, #21
 800465e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <I2C_TransferConfig+0x60>)
 8004664:	430b      	orrs	r3, r1
 8004666:	43db      	mvns	r3, r3
 8004668:	ea02 0103 	and.w	r1, r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	03ff63ff 	.word	0x03ff63ff

08004688 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b20      	cmp	r3, #32
 800469c:	d138      	bne.n	8004710 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e032      	b.n	8004712 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2224      	movs	r2, #36	; 0x24
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	e000      	b.n	8004712 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004710:	2302      	movs	r3, #2
  }
}
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b20      	cmp	r3, #32
 8004732:	d139      	bne.n	80047a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800473e:	2302      	movs	r3, #2
 8004740:	e033      	b.n	80047aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2224      	movs	r2, #36	; 0x24
 800474e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004770:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40007000 	.word	0x40007000

080047d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e2:	d130      	bne.n	8004846 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80047e4:	4b23      	ldr	r3, [pc, #140]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f0:	d038      	beq.n	8004864 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f2:	4b20      	ldr	r3, [pc, #128]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047fa:	4a1e      	ldr	r2, [pc, #120]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004800:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004802:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2232      	movs	r2, #50	; 0x32
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	4a1b      	ldr	r2, [pc, #108]	; (800487c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	0c9b      	lsrs	r3, r3, #18
 8004814:	3301      	adds	r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004818:	e002      	b.n	8004820 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3b01      	subs	r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482c:	d102      	bne.n	8004834 <HAL_PWREx_ControlVoltageScaling+0x60>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f2      	bne.n	800481a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004840:	d110      	bne.n	8004864 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e00f      	b.n	8004866 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004852:	d007      	beq.n	8004864 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004854:	4b07      	ldr	r3, [pc, #28]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800485c:	4a05      	ldr	r2, [pc, #20]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800485e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004862:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40007000 	.word	0x40007000
 8004878:	20000000 	.word	0x20000000
 800487c:	431bde83 	.word	0x431bde83

08004880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f000 bc16 	b.w	80050c0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004894:	4ba0      	ldr	r3, [pc, #640]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800489e:	4b9e      	ldr	r3, [pc, #632]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80e4 	beq.w	8004a7e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <HAL_RCC_OscConfig+0x4c>
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b0c      	cmp	r3, #12
 80048c0:	f040 808b 	bne.w	80049da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	f040 8087 	bne.w	80049da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048cc:	4b92      	ldr	r3, [pc, #584]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_OscConfig+0x64>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e3ed      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1a      	ldr	r2, [r3, #32]
 80048e8:	4b8b      	ldr	r3, [pc, #556]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <HAL_RCC_OscConfig+0x7e>
 80048f4:	4b88      	ldr	r3, [pc, #544]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048fc:	e005      	b.n	800490a <HAL_RCC_OscConfig+0x8a>
 80048fe:	4b86      	ldr	r3, [pc, #536]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800490a:	4293      	cmp	r3, r2
 800490c:	d223      	bcs.n	8004956 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fd80 	bl	8005418 <RCC_SetFlashLatencyFromMSIRange>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e3ce      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004922:	4b7d      	ldr	r3, [pc, #500]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7c      	ldr	r2, [pc, #496]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004928:	f043 0308 	orr.w	r3, r3, #8
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4b7a      	ldr	r3, [pc, #488]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	4977      	ldr	r1, [pc, #476]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004940:	4b75      	ldr	r3, [pc, #468]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	4972      	ldr	r1, [pc, #456]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004950:	4313      	orrs	r3, r2
 8004952:	604b      	str	r3, [r1, #4]
 8004954:	e025      	b.n	80049a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004956:	4b70      	ldr	r3, [pc, #448]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6f      	ldr	r2, [pc, #444]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 800495c:	f043 0308 	orr.w	r3, r3, #8
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	4b6d      	ldr	r3, [pc, #436]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	496a      	ldr	r1, [pc, #424]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004970:	4313      	orrs	r3, r2
 8004972:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004974:	4b68      	ldr	r3, [pc, #416]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	4965      	ldr	r1, [pc, #404]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004984:	4313      	orrs	r3, r2
 8004986:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fd40 	bl	8005418 <RCC_SetFlashLatencyFromMSIRange>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e38e      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049a2:	f000 fc75 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 80049a6:	4602      	mov	r2, r0
 80049a8:	4b5b      	ldr	r3, [pc, #364]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	495a      	ldr	r1, [pc, #360]	; (8004b1c <HAL_RCC_OscConfig+0x29c>)
 80049b4:	5ccb      	ldrb	r3, [r1, r3]
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	fa22 f303 	lsr.w	r3, r2, r3
 80049be:	4a58      	ldr	r2, [pc, #352]	; (8004b20 <HAL_RCC_OscConfig+0x2a0>)
 80049c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049c2:	4b58      	ldr	r3, [pc, #352]	; (8004b24 <HAL_RCC_OscConfig+0x2a4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe f84e 	bl	8002a68 <HAL_InitTick>
 80049cc:	4603      	mov	r3, r0
 80049ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d052      	beq.n	8004a7c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	e372      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d032      	beq.n	8004a48 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049e2:	4b4d      	ldr	r3, [pc, #308]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a4c      	ldr	r2, [pc, #304]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049ee:	f7fe f88b 	bl	8002b08 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049f6:	f7fe f887 	bl	8002b08 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e35b      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a08:	4b43      	ldr	r3, [pc, #268]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a14:	4b40      	ldr	r3, [pc, #256]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a3f      	ldr	r2, [pc, #252]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004a1a:	f043 0308 	orr.w	r3, r3, #8
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	4b3d      	ldr	r3, [pc, #244]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	493a      	ldr	r1, [pc, #232]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a32:	4b39      	ldr	r3, [pc, #228]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	4935      	ldr	r1, [pc, #212]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]
 8004a46:	e01a      	b.n	8004a7e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a48:	4b33      	ldr	r3, [pc, #204]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a32      	ldr	r2, [pc, #200]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a54:	f7fe f858 	bl	8002b08 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a5c:	f7fe f854 	bl	8002b08 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e328      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a6e:	4b2a      	ldr	r3, [pc, #168]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x1dc>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d073      	beq.n	8004b72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_OscConfig+0x21c>
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b0c      	cmp	r3, #12
 8004a94:	d10e      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d063      	beq.n	8004b70 <HAL_RCC_OscConfig+0x2f0>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d15f      	bne.n	8004b70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e305      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abc:	d106      	bne.n	8004acc <HAL_RCC_OscConfig+0x24c>
 8004abe:	4b16      	ldr	r3, [pc, #88]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	e01d      	b.n	8004b08 <HAL_RCC_OscConfig+0x288>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x270>
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a0f      	ldr	r2, [pc, #60]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a0c      	ldr	r2, [pc, #48]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e00b      	b.n	8004b08 <HAL_RCC_OscConfig+0x288>
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a08      	ldr	r2, [pc, #32]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a05      	ldr	r2, [pc, #20]	; (8004b18 <HAL_RCC_OscConfig+0x298>)
 8004b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd fffa 	bl	8002b08 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b16:	e010      	b.n	8004b3a <HAL_RCC_OscConfig+0x2ba>
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	0800961c 	.word	0x0800961c
 8004b20:	20000000 	.word	0x20000000
 8004b24:	20000080 	.word	0x20000080
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd ffee 	bl	8002b08 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e2c2      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b3a:	4baf      	ldr	r3, [pc, #700]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0x2a8>
 8004b46:	e014      	b.n	8004b72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd ffde 	bl	8002b08 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b50:	f7fd ffda 	bl	8002b08 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	; 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e2ae      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b62:	4ba5      	ldr	r3, [pc, #660]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x2d0>
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d060      	beq.n	8004c40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_OscConfig+0x310>
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	2b0c      	cmp	r3, #12
 8004b88:	d119      	bne.n	8004bbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d116      	bne.n	8004bbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b90:	4b99      	ldr	r3, [pc, #612]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x328>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e28b      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba8:	4b93      	ldr	r3, [pc, #588]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	4990      	ldr	r1, [pc, #576]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bbc:	e040      	b.n	8004c40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d023      	beq.n	8004c0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc6:	4b8c      	ldr	r3, [pc, #560]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a8b      	ldr	r2, [pc, #556]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd2:	f7fd ff99 	bl	8002b08 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bda:	f7fd ff95 	bl	8002b08 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e269      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bec:	4b82      	ldr	r3, [pc, #520]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f0      	beq.n	8004bda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf8:	4b7f      	ldr	r3, [pc, #508]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	061b      	lsls	r3, r3, #24
 8004c06:	497c      	ldr	r1, [pc, #496]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	604b      	str	r3, [r1, #4]
 8004c0c:	e018      	b.n	8004c40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c0e:	4b7a      	ldr	r3, [pc, #488]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a79      	ldr	r2, [pc, #484]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1a:	f7fd ff75 	bl	8002b08 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c22:	f7fd ff71 	bl	8002b08 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e245      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c34:	4b70      	ldr	r3, [pc, #448]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f0      	bne.n	8004c22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d03c      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01c      	beq.n	8004c8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c54:	4b68      	ldr	r3, [pc, #416]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5a:	4a67      	ldr	r2, [pc, #412]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c64:	f7fd ff50 	bl	8002b08 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6c:	f7fd ff4c 	bl	8002b08 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e220      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c7e:	4b5e      	ldr	r3, [pc, #376]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0ef      	beq.n	8004c6c <HAL_RCC_OscConfig+0x3ec>
 8004c8c:	e01b      	b.n	8004cc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c8e:	4b5a      	ldr	r3, [pc, #360]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c94:	4a58      	ldr	r2, [pc, #352]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9e:	f7fd ff33 	bl	8002b08 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca6:	f7fd ff2f 	bl	8002b08 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e203      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cb8:	4b4f      	ldr	r3, [pc, #316]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1ef      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 80a6 	beq.w	8004e20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cd8:	4b47      	ldr	r3, [pc, #284]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10d      	bne.n	8004d00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce4:	4b44      	ldr	r3, [pc, #272]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce8:	4a43      	ldr	r2, [pc, #268]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cee:	6593      	str	r3, [r2, #88]	; 0x58
 8004cf0:	4b41      	ldr	r3, [pc, #260]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d00:	4b3e      	ldr	r3, [pc, #248]	; (8004dfc <HAL_RCC_OscConfig+0x57c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d118      	bne.n	8004d3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d0c:	4b3b      	ldr	r3, [pc, #236]	; (8004dfc <HAL_RCC_OscConfig+0x57c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a3a      	ldr	r2, [pc, #232]	; (8004dfc <HAL_RCC_OscConfig+0x57c>)
 8004d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d18:	f7fd fef6 	bl	8002b08 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d20:	f7fd fef2 	bl	8002b08 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e1c6      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d32:	4b32      	ldr	r3, [pc, #200]	; (8004dfc <HAL_RCC_OscConfig+0x57c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d108      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4d8>
 8004d46:	4b2c      	ldr	r3, [pc, #176]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	4a2a      	ldr	r2, [pc, #168]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d56:	e024      	b.n	8004da2 <HAL_RCC_OscConfig+0x522>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b05      	cmp	r3, #5
 8004d5e:	d110      	bne.n	8004d82 <HAL_RCC_OscConfig+0x502>
 8004d60:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	4a24      	ldr	r2, [pc, #144]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004d68:	f043 0304 	orr.w	r3, r3, #4
 8004d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d70:	4b21      	ldr	r3, [pc, #132]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d76:	4a20      	ldr	r2, [pc, #128]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004d78:	f043 0301 	orr.w	r3, r3, #1
 8004d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d80:	e00f      	b.n	8004da2 <HAL_RCC_OscConfig+0x522>
 8004d82:	4b1d      	ldr	r3, [pc, #116]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d88:	4a1b      	ldr	r2, [pc, #108]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d92:	4b19      	ldr	r3, [pc, #100]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d98:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004d9a:	f023 0304 	bic.w	r3, r3, #4
 8004d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004daa:	f7fd fead 	bl	8002b08 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db0:	e00a      	b.n	8004dc8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db2:	f7fd fea9 	bl	8002b08 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e17b      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_RCC_OscConfig+0x578>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0ed      	beq.n	8004db2 <HAL_RCC_OscConfig+0x532>
 8004dd6:	e01a      	b.n	8004e0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd8:	f7fd fe96 	bl	8002b08 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dde:	e00f      	b.n	8004e00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de0:	f7fd fe92 	bl	8002b08 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d906      	bls.n	8004e00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e164      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
 8004df6:	bf00      	nop
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e00:	4ba8      	ldr	r3, [pc, #672]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e8      	bne.n	8004de0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e0e:	7ffb      	ldrb	r3, [r7, #31]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d105      	bne.n	8004e20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e14:	4ba3      	ldr	r3, [pc, #652]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e18:	4aa2      	ldr	r2, [pc, #648]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d03c      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01c      	beq.n	8004e6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e34:	4b9b      	ldr	r3, [pc, #620]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004e36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e3a:	4a9a      	ldr	r2, [pc, #616]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e44:	f7fd fe60 	bl	8002b08 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e4c:	f7fd fe5c 	bl	8002b08 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e130      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e5e:	4b91      	ldr	r3, [pc, #580]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004e60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0ef      	beq.n	8004e4c <HAL_RCC_OscConfig+0x5cc>
 8004e6c:	e01b      	b.n	8004ea6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e6e:	4b8d      	ldr	r3, [pc, #564]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e74:	4a8b      	ldr	r2, [pc, #556]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004e76:	f023 0301 	bic.w	r3, r3, #1
 8004e7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7e:	f7fd fe43 	bl	8002b08 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e86:	f7fd fe3f 	bl	8002b08 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e113      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e98:	4b82      	ldr	r3, [pc, #520]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1ef      	bne.n	8004e86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8107 	beq.w	80050be <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	f040 80cb 	bne.w	8005050 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004eba:	4b7a      	ldr	r3, [pc, #488]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 0203 	and.w	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d12c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d123      	bne.n	8004f28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d11b      	bne.n	8004f28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d113      	bne.n	8004f28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d109      	bne.n	8004f28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	3b01      	subs	r3, #1
 8004f22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d06d      	beq.n	8005004 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b0c      	cmp	r3, #12
 8004f2c:	d068      	beq.n	8005000 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f2e:	4b5d      	ldr	r3, [pc, #372]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f3a:	4b5a      	ldr	r3, [pc, #360]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e0ba      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f4a:	4b56      	ldr	r3, [pc, #344]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a55      	ldr	r2, [pc, #340]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f56:	f7fd fdd7 	bl	8002b08 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5e:	f7fd fdd3 	bl	8002b08 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e0a7      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f70:	4b4c      	ldr	r3, [pc, #304]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f0      	bne.n	8004f5e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f7c:	4b49      	ldr	r3, [pc, #292]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	4b49      	ldr	r3, [pc, #292]	; (80050a8 <HAL_RCC_OscConfig+0x828>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f8c:	3a01      	subs	r2, #1
 8004f8e:	0112      	lsls	r2, r2, #4
 8004f90:	4311      	orrs	r1, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f96:	0212      	lsls	r2, r2, #8
 8004f98:	4311      	orrs	r1, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f9e:	0852      	lsrs	r2, r2, #1
 8004fa0:	3a01      	subs	r2, #1
 8004fa2:	0552      	lsls	r2, r2, #21
 8004fa4:	4311      	orrs	r1, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004faa:	0852      	lsrs	r2, r2, #1
 8004fac:	3a01      	subs	r2, #1
 8004fae:	0652      	lsls	r2, r2, #25
 8004fb0:	4311      	orrs	r1, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fb6:	06d2      	lsls	r2, r2, #27
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	493a      	ldr	r1, [pc, #232]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fc0:	4b38      	ldr	r3, [pc, #224]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a37      	ldr	r2, [pc, #220]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fcc:	4b35      	ldr	r3, [pc, #212]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a34      	ldr	r2, [pc, #208]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fd8:	f7fd fd96 	bl	8002b08 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fd fd92 	bl	8002b08 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e066      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff2:	4b2c      	ldr	r3, [pc, #176]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ffe:	e05e      	b.n	80050be <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e05d      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005004:	4b27      	ldr	r3, [pc, #156]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d156      	bne.n	80050be <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005010:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8005016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800501a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800501c:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a20      	ldr	r2, [pc, #128]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8005022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005026:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005028:	f7fd fd6e 	bl	8002b08 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005030:	f7fd fd6a 	bl	8002b08 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e03e      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005042:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCC_OscConfig+0x7b0>
 800504e:	e036      	b.n	80050be <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b0c      	cmp	r3, #12
 8005054:	d031      	beq.n	80050ba <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005056:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 800505c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005060:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005062:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	4a0c      	ldr	r2, [pc, #48]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8005074:	f023 0303 	bic.w	r3, r3, #3
 8005078:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	4a09      	ldr	r2, [pc, #36]	; (80050a4 <HAL_RCC_OscConfig+0x824>)
 8005080:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005088:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508a:	f7fd fd3d 	bl	8002b08 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005090:	e00c      	b.n	80050ac <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005092:	f7fd fd39 	bl	8002b08 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d905      	bls.n	80050ac <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e00d      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
 80050a4:	40021000 	.word	0x40021000
 80050a8:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ac:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_RCC_OscConfig+0x848>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1ec      	bne.n	8005092 <HAL_RCC_OscConfig+0x812>
 80050b8:	e001      	b.n	80050be <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40021000 	.word	0x40021000

080050cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0c8      	b.n	8005272 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050e0:	4b66      	ldr	r3, [pc, #408]	; (800527c <HAL_RCC_ClockConfig+0x1b0>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d910      	bls.n	8005110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ee:	4b63      	ldr	r3, [pc, #396]	; (800527c <HAL_RCC_ClockConfig+0x1b0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f023 0207 	bic.w	r2, r3, #7
 80050f6:	4961      	ldr	r1, [pc, #388]	; (800527c <HAL_RCC_ClockConfig+0x1b0>)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fe:	4b5f      	ldr	r3, [pc, #380]	; (800527c <HAL_RCC_ClockConfig+0x1b0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d001      	beq.n	8005110 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0b0      	b.n	8005272 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d04c      	beq.n	80051b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d107      	bne.n	8005134 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005124:	4b56      	ldr	r3, [pc, #344]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d121      	bne.n	8005174 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e09e      	b.n	8005272 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d107      	bne.n	800514c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800513c:	4b50      	ldr	r3, [pc, #320]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d115      	bne.n	8005174 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e092      	b.n	8005272 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d107      	bne.n	8005164 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005154:	4b4a      	ldr	r3, [pc, #296]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d109      	bne.n	8005174 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e086      	b.n	8005272 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005164:	4b46      	ldr	r3, [pc, #280]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e07e      	b.n	8005272 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005174:	4b42      	ldr	r3, [pc, #264]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f023 0203 	bic.w	r2, r3, #3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	493f      	ldr	r1, [pc, #252]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005186:	f7fd fcbf 	bl	8002b08 <HAL_GetTick>
 800518a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518c:	e00a      	b.n	80051a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800518e:	f7fd fcbb 	bl	8002b08 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f241 3288 	movw	r2, #5000	; 0x1388
 800519c:	4293      	cmp	r3, r2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e066      	b.n	8005272 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a4:	4b36      	ldr	r3, [pc, #216]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 020c 	and.w	r2, r3, #12
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d1eb      	bne.n	800518e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c2:	4b2f      	ldr	r3, [pc, #188]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	492c      	ldr	r1, [pc, #176]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051d4:	4b29      	ldr	r3, [pc, #164]	; (800527c <HAL_RCC_ClockConfig+0x1b0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d210      	bcs.n	8005204 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b26      	ldr	r3, [pc, #152]	; (800527c <HAL_RCC_ClockConfig+0x1b0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f023 0207 	bic.w	r2, r3, #7
 80051ea:	4924      	ldr	r1, [pc, #144]	; (800527c <HAL_RCC_ClockConfig+0x1b0>)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f2:	4b22      	ldr	r3, [pc, #136]	; (800527c <HAL_RCC_ClockConfig+0x1b0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d001      	beq.n	8005204 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e036      	b.n	8005272 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005210:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4918      	ldr	r1, [pc, #96]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d009      	beq.n	8005242 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800522e:	4b14      	ldr	r3, [pc, #80]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	4910      	ldr	r1, [pc, #64]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005242:	f000 f825 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8005246:	4602      	mov	r2, r0
 8005248:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <HAL_RCC_ClockConfig+0x1b4>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	091b      	lsrs	r3, r3, #4
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	490c      	ldr	r1, [pc, #48]	; (8005284 <HAL_RCC_ClockConfig+0x1b8>)
 8005254:	5ccb      	ldrb	r3, [r1, r3]
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	fa22 f303 	lsr.w	r3, r2, r3
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <HAL_RCC_ClockConfig+0x1bc>)
 8005260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <HAL_RCC_ClockConfig+0x1c0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7fd fbfe 	bl	8002a68 <HAL_InitTick>
 800526c:	4603      	mov	r3, r0
 800526e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005270:	7afb      	ldrb	r3, [r7, #11]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40022000 	.word	0x40022000
 8005280:	40021000 	.word	0x40021000
 8005284:	0800961c 	.word	0x0800961c
 8005288:	20000000 	.word	0x20000000
 800528c:	20000080 	.word	0x20000080

08005290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005290:	b480      	push	{r7}
 8005292:	b089      	sub	sp, #36	; 0x24
 8005294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	2300      	movs	r3, #0
 800529c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800529e:	4b3e      	ldr	r3, [pc, #248]	; (8005398 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 030c 	and.w	r3, r3, #12
 80052a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052a8:	4b3b      	ldr	r3, [pc, #236]	; (8005398 <HAL_RCC_GetSysClockFreq+0x108>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_GetSysClockFreq+0x34>
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b0c      	cmp	r3, #12
 80052bc:	d121      	bne.n	8005302 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d11e      	bne.n	8005302 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052c4:	4b34      	ldr	r3, [pc, #208]	; (8005398 <HAL_RCC_GetSysClockFreq+0x108>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d107      	bne.n	80052e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052d0:	4b31      	ldr	r3, [pc, #196]	; (8005398 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d6:	0a1b      	lsrs	r3, r3, #8
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	e005      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052e0:	4b2d      	ldr	r3, [pc, #180]	; (8005398 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052ec:	4a2b      	ldr	r2, [pc, #172]	; (800539c <HAL_RCC_GetSysClockFreq+0x10c>)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10d      	bne.n	8005318 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005300:	e00a      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b04      	cmp	r3, #4
 8005306:	d102      	bne.n	800530e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005308:	4b25      	ldr	r3, [pc, #148]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800530a:	61bb      	str	r3, [r7, #24]
 800530c:	e004      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b08      	cmp	r3, #8
 8005312:	d101      	bne.n	8005318 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005314:	4b23      	ldr	r3, [pc, #140]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005316:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	2b0c      	cmp	r3, #12
 800531c:	d134      	bne.n	8005388 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800531e:	4b1e      	ldr	r3, [pc, #120]	; (8005398 <HAL_RCC_GetSysClockFreq+0x108>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d003      	beq.n	8005336 <HAL_RCC_GetSysClockFreq+0xa6>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d003      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0xac>
 8005334:	e005      	b.n	8005342 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005336:	4b1a      	ldr	r3, [pc, #104]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005338:	617b      	str	r3, [r7, #20]
      break;
 800533a:	e005      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800533c:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800533e:	617b      	str	r3, [r7, #20]
      break;
 8005340:	e002      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	617b      	str	r3, [r7, #20]
      break;
 8005346:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005348:	4b13      	ldr	r3, [pc, #76]	; (8005398 <HAL_RCC_GetSysClockFreq+0x108>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	091b      	lsrs	r3, r3, #4
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	3301      	adds	r3, #1
 8005354:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005356:	4b10      	ldr	r3, [pc, #64]	; (8005398 <HAL_RCC_GetSysClockFreq+0x108>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	0a1b      	lsrs	r3, r3, #8
 800535c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	fb02 f203 	mul.w	r2, r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <HAL_RCC_GetSysClockFreq+0x108>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	0e5b      	lsrs	r3, r3, #25
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	3301      	adds	r3, #1
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005388:	69bb      	ldr	r3, [r7, #24]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3724      	adds	r7, #36	; 0x24
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000
 800539c:	08009634 	.word	0x08009634
 80053a0:	00f42400 	.word	0x00f42400
 80053a4:	007a1200 	.word	0x007a1200

080053a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ae:	681b      	ldr	r3, [r3, #0]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000000 	.word	0x20000000

080053c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053c4:	f7ff fff0 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	4904      	ldr	r1, [pc, #16]	; (80053e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053d6:	5ccb      	ldrb	r3, [r1, r3]
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40021000 	.word	0x40021000
 80053e8:	0800962c 	.word	0x0800962c

080053ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053f0:	f7ff ffda 	bl	80053a8 <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b06      	ldr	r3, [pc, #24]	; (8005410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	0adb      	lsrs	r3, r3, #11
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4904      	ldr	r1, [pc, #16]	; (8005414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40021000 	.word	0x40021000
 8005414:	0800962c 	.word	0x0800962c

08005418 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005424:	4b2a      	ldr	r3, [pc, #168]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005430:	f7ff f9c2 	bl	80047b8 <HAL_PWREx_GetVoltageRange>
 8005434:	6178      	str	r0, [r7, #20]
 8005436:	e014      	b.n	8005462 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	4a24      	ldr	r2, [pc, #144]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800543e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005442:	6593      	str	r3, [r2, #88]	; 0x58
 8005444:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005450:	f7ff f9b2 	bl	80047b8 <HAL_PWREx_GetVoltageRange>
 8005454:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005456:	4b1e      	ldr	r3, [pc, #120]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545a:	4a1d      	ldr	r2, [pc, #116]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800545c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005460:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005468:	d10b      	bne.n	8005482 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b80      	cmp	r3, #128	; 0x80
 800546e:	d919      	bls.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2ba0      	cmp	r3, #160	; 0xa0
 8005474:	d902      	bls.n	800547c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005476:	2302      	movs	r3, #2
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	e013      	b.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800547c:	2301      	movs	r3, #1
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	e010      	b.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d902      	bls.n	800548e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005488:	2303      	movs	r3, #3
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	e00a      	b.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b80      	cmp	r3, #128	; 0x80
 8005492:	d102      	bne.n	800549a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005494:	2302      	movs	r3, #2
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	e004      	b.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b70      	cmp	r3, #112	; 0x70
 800549e:	d101      	bne.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054a0:	2301      	movs	r3, #1
 80054a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f023 0207 	bic.w	r2, r3, #7
 80054ac:	4909      	ldr	r1, [pc, #36]	; (80054d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054b4:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d001      	beq.n	80054c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40022000 	.word	0x40022000

080054d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054e0:	2300      	movs	r3, #0
 80054e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054e4:	2300      	movs	r3, #0
 80054e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d041      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054fc:	d02a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80054fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005502:	d824      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005504:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005508:	d008      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800550a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800550e:	d81e      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005518:	d010      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800551a:	e018      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800551c:	4b86      	ldr	r3, [pc, #536]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4a85      	ldr	r2, [pc, #532]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005526:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005528:	e015      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3304      	adds	r3, #4
 800552e:	2100      	movs	r1, #0
 8005530:	4618      	mov	r0, r3
 8005532:	f001 f97f 	bl	8006834 <RCCEx_PLLSAI1_Config>
 8005536:	4603      	mov	r3, r0
 8005538:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800553a:	e00c      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3320      	adds	r3, #32
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f001 fa68 	bl	8006a18 <RCCEx_PLLSAI2_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800554c:	e003      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	74fb      	strb	r3, [r7, #19]
      break;
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005556:	7cfb      	ldrb	r3, [r7, #19]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10b      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800555c:	4b76      	ldr	r3, [pc, #472]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800556a:	4973      	ldr	r1, [pc, #460]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005572:	e001      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005574:	7cfb      	ldrb	r3, [r7, #19]
 8005576:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d041      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005588:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800558c:	d02a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800558e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005592:	d824      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005598:	d008      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800559a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800559e:	d81e      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80055a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055a8:	d010      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055aa:	e018      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055ac:	4b62      	ldr	r3, [pc, #392]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	4a61      	ldr	r2, [pc, #388]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055b8:	e015      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3304      	adds	r3, #4
 80055be:	2100      	movs	r1, #0
 80055c0:	4618      	mov	r0, r3
 80055c2:	f001 f937 	bl	8006834 <RCCEx_PLLSAI1_Config>
 80055c6:	4603      	mov	r3, r0
 80055c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055ca:	e00c      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3320      	adds	r3, #32
 80055d0:	2100      	movs	r1, #0
 80055d2:	4618      	mov	r0, r3
 80055d4:	f001 fa20 	bl	8006a18 <RCCEx_PLLSAI2_Config>
 80055d8:	4603      	mov	r3, r0
 80055da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055dc:	e003      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	74fb      	strb	r3, [r7, #19]
      break;
 80055e2:	e000      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80055e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e6:	7cfb      	ldrb	r3, [r7, #19]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10b      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055ec:	4b52      	ldr	r3, [pc, #328]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fa:	494f      	ldr	r1, [pc, #316]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005602:	e001      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005604:	7cfb      	ldrb	r3, [r7, #19]
 8005606:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80a0 	beq.w	8005756 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005616:	2300      	movs	r3, #0
 8005618:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800561a:	4b47      	ldr	r3, [pc, #284]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800562a:	2300      	movs	r3, #0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00d      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005630:	4b41      	ldr	r3, [pc, #260]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	4a40      	ldr	r2, [pc, #256]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800563a:	6593      	str	r3, [r2, #88]	; 0x58
 800563c:	4b3e      	ldr	r3, [pc, #248]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800563e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005648:	2301      	movs	r3, #1
 800564a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800564c:	4b3b      	ldr	r3, [pc, #236]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a3a      	ldr	r2, [pc, #232]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005656:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005658:	f7fd fa56 	bl	8002b08 <HAL_GetTick>
 800565c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800565e:	e009      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005660:	f7fd fa52 	bl	8002b08 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d902      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	74fb      	strb	r3, [r7, #19]
        break;
 8005672:	e005      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005674:	4b31      	ldr	r3, [pc, #196]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0ef      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d15c      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005686:	4b2c      	ldr	r3, [pc, #176]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005690:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01f      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d019      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056a4:	4b24      	ldr	r3, [pc, #144]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056b0:	4b21      	ldr	r3, [pc, #132]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	4a20      	ldr	r2, [pc, #128]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056c0:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c6:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d016      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e2:	f7fd fa11 	bl	8002b08 <HAL_GetTick>
 80056e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056e8:	e00b      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ea:	f7fd fa0d 	bl	8002b08 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d902      	bls.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	74fb      	strb	r3, [r7, #19]
            break;
 8005700:	e006      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005702:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0ec      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005710:	7cfb      	ldrb	r3, [r7, #19]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10c      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005716:	4b08      	ldr	r3, [pc, #32]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005726:	4904      	ldr	r1, [pc, #16]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800572e:	e009      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005730:	7cfb      	ldrb	r3, [r7, #19]
 8005732:	74bb      	strb	r3, [r7, #18]
 8005734:	e006      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005736:	bf00      	nop
 8005738:	40021000 	.word	0x40021000
 800573c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005740:	7cfb      	ldrb	r3, [r7, #19]
 8005742:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005744:	7c7b      	ldrb	r3, [r7, #17]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d105      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800574a:	4ba6      	ldr	r3, [pc, #664]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574e:	4aa5      	ldr	r2, [pc, #660]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005754:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005762:	4ba0      	ldr	r3, [pc, #640]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005768:	f023 0203 	bic.w	r2, r3, #3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	499c      	ldr	r1, [pc, #624]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005784:	4b97      	ldr	r3, [pc, #604]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578a:	f023 020c 	bic.w	r2, r3, #12
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	4994      	ldr	r1, [pc, #592]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057a6:	4b8f      	ldr	r3, [pc, #572]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	498b      	ldr	r1, [pc, #556]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057c8:	4b86      	ldr	r3, [pc, #536]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	4983      	ldr	r1, [pc, #524]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057ea:	4b7e      	ldr	r3, [pc, #504]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057f8:	497a      	ldr	r1, [pc, #488]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800580c:	4b75      	ldr	r3, [pc, #468]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581a:	4972      	ldr	r1, [pc, #456]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800582e:	4b6d      	ldr	r3, [pc, #436]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005834:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583c:	4969      	ldr	r1, [pc, #420]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005850:	4b64      	ldr	r3, [pc, #400]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005856:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800585e:	4961      	ldr	r1, [pc, #388]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005872:	4b5c      	ldr	r3, [pc, #368]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005878:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005880:	4958      	ldr	r1, [pc, #352]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005894:	4b53      	ldr	r3, [pc, #332]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a2:	4950      	ldr	r1, [pc, #320]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058b6:	4b4b      	ldr	r3, [pc, #300]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c4:	4947      	ldr	r1, [pc, #284]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058d8:	4b42      	ldr	r3, [pc, #264]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058de:	f023 0203 	bic.w	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e6:	493f      	ldr	r1, [pc, #252]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d028      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058fa:	4b3a      	ldr	r3, [pc, #232]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005900:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	4936      	ldr	r1, [pc, #216]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005918:	d106      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800591a:	4b32      	ldr	r3, [pc, #200]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	4a31      	ldr	r2, [pc, #196]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005924:	60d3      	str	r3, [r2, #12]
 8005926:	e011      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005930:	d10c      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3304      	adds	r3, #4
 8005936:	2101      	movs	r1, #1
 8005938:	4618      	mov	r0, r3
 800593a:	f000 ff7b 	bl	8006834 <RCCEx_PLLSAI1_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005942:	7cfb      	ldrb	r3, [r7, #19]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005948:	7cfb      	ldrb	r3, [r7, #19]
 800594a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d028      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005958:	4b22      	ldr	r3, [pc, #136]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005966:	491f      	ldr	r1, [pc, #124]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005976:	d106      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005978:	4b1a      	ldr	r3, [pc, #104]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800597e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005982:	60d3      	str	r3, [r2, #12]
 8005984:	e011      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800598e:	d10c      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3304      	adds	r3, #4
 8005994:	2101      	movs	r1, #1
 8005996:	4618      	mov	r0, r3
 8005998:	f000 ff4c 	bl	8006834 <RCCEx_PLLSAI1_Config>
 800599c:	4603      	mov	r3, r0
 800599e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059a0:	7cfb      	ldrb	r3, [r7, #19]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80059a6:	7cfb      	ldrb	r3, [r7, #19]
 80059a8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d02a      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059c4:	4907      	ldr	r1, [pc, #28]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059d4:	d108      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d6:	4b03      	ldr	r3, [pc, #12]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	4a02      	ldr	r2, [pc, #8]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059e0:	60d3      	str	r3, [r2, #12]
 80059e2:	e013      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80059e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059f0:	d10c      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3304      	adds	r3, #4
 80059f6:	2101      	movs	r1, #1
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 ff1b 	bl	8006834 <RCCEx_PLLSAI1_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a02:	7cfb      	ldrb	r3, [r7, #19]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005a08:	7cfb      	ldrb	r3, [r7, #19]
 8005a0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d02f      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a18:	4b2c      	ldr	r3, [pc, #176]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a26:	4929      	ldr	r1, [pc, #164]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a36:	d10d      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fef8 	bl	8006834 <RCCEx_PLLSAI1_Config>
 8005a44:	4603      	mov	r3, r0
 8005a46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a48:	7cfb      	ldrb	r3, [r7, #19]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d014      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005a4e:	7cfb      	ldrb	r3, [r7, #19]
 8005a50:	74bb      	strb	r3, [r7, #18]
 8005a52:	e011      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5c:	d10c      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3320      	adds	r3, #32
 8005a62:	2102      	movs	r1, #2
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 ffd7 	bl	8006a18 <RCCEx_PLLSAI2_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a6e:	7cfb      	ldrb	r3, [r7, #19]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00b      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a84:	4b11      	ldr	r3, [pc, #68]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a94:	490d      	ldr	r1, [pc, #52]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00b      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005aa8:	4b08      	ldr	r3, [pc, #32]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab8:	4904      	ldr	r1, [pc, #16]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ac0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000

08005ad0 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L496xx) || defined(STM32L4A6xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a77      	ldr	r2, [pc, #476]	; (8005cb8 <HAL_RCCEx_GetPeriphCLKConfig+0x1e8>)
 8005adc:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 8005ade:	4b77      	ldr	r3, [pc, #476]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0203 	and.w	r2, r3, #3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8005aea:	4b74      	ldr	r3, [pc, #464]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	091b      	lsrs	r3, r3, #4
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005afa:	4b70      	ldr	r3, [pc, #448]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8005b08:	4b6c      	ldr	r3, [pc, #432]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	0c5b      	lsrs	r3, r3, #17
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	1dda      	adds	r2, r3, #7
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 8005b1a:	4b68      	ldr	r3, [pc, #416]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	0d5b      	lsrs	r3, r3, #21
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	3301      	adds	r3, #1
 8005b26:	005a      	lsls	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8005b2c:	4b63      	ldr	r3, [pc, #396]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	0e5b      	lsrs	r3, r3, #25
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	3301      	adds	r3, #1
 8005b38:	005a      	lsls	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005b4e:	4b5b      	ldr	r3, [pc, #364]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8005b5c:	4b57      	ldr	r3, [pc, #348]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	0c5b      	lsrs	r3, r3, #17
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	1dda      	adds	r2, r3, #7
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 8005b6e:	4b53      	ldr	r3, [pc, #332]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	0e5b      	lsrs	r3, r3, #25
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	3301      	adds	r3, #1
 8005b7a:	005a      	lsls	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8005b80:	4b4e      	ldr	r3, [pc, #312]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b86:	f003 0203 	and.w	r2, r3, #3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8005b8e:	4b4b      	ldr	r3, [pc, #300]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b94:	f003 020c 	and.w	r2, r3, #12
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8005b9c:	4b47      	ldr	r3, [pc, #284]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 8005baa:	4b44      	ldr	r3, [pc, #272]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb0:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 8005bb8:	4b40      	ldr	r3, [pc, #256]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8005bc6:	4b3d      	ldr	r3, [pc, #244]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bcc:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8005bd4:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bda:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 8005be2:	4b36      	ldr	r3, [pc, #216]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be8:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 8005bf0:	4b32      	ldr	r3, [pc, #200]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(I2C4)
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
 8005bfe:	4b2f      	ldr	r3, [pc, #188]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c04:	f003 0203 	and.w	r2, r3, #3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005c0c:	4b2b      	ldr	r3, [pc, #172]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c12:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005c1a:	4b28      	ldr	r3, [pc, #160]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 8005c28:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2e:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8005c36:	4b21      	ldr	r3, [pc, #132]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3c:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8005c44:	4b1d      	ldr	r3, [pc, #116]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8005c54:	4b19      	ldr	r3, [pc, #100]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5a:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005c62:	4b16      	ldr	r3, [pc, #88]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c68:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8005c70:	4b12      	ldr	r3, [pc, #72]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c76:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	679a      	str	r2, [r3, #120]	; 0x78

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8005c7e:	4b0f      	ldr	r3, [pc, #60]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c84:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c92:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005c9c:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8005c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	001fffff 	.word	0x001fffff
 8005cbc:	40021000 	.word	0x40021000

08005cc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cd2:	d13e      	bne.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005cd4:	4bb8      	ldr	r3, [pc, #736]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cde:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce6:	d028      	beq.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cee:	f200 858e 	bhi.w	800680e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cf8:	d005      	beq.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d00:	d00e      	beq.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005d02:	f000 bd84 	b.w	800680e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d06:	4bac      	ldr	r3, [pc, #688]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	f040 857e 	bne.w	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
        frequency = LSE_VALUE;
 8005d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1a:	61fb      	str	r3, [r7, #28]
      break;
 8005d1c:	f000 bd79 	b.w	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d20:	4ba5      	ldr	r3, [pc, #660]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	f040 8573 	bne.w	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          frequency = LSI_VALUE;
 8005d30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d34:	61fb      	str	r3, [r7, #28]
      break;
 8005d36:	f000 bd6e 	b.w	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d3a:	4b9f      	ldr	r3, [pc, #636]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d46:	f040 8568 	bne.w	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
        frequency = HSE_VALUE / 32U;
 8005d4a:	4b9c      	ldr	r3, [pc, #624]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005d4c:	61fb      	str	r3, [r7, #28]
      break;
 8005d4e:	f000 bd64 	b.w	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d52:	4b99      	ldr	r3, [pc, #612]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d036      	beq.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d840      	bhi.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d003      	beq.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d020      	beq.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005d74:	e039      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005d76:	4b90      	ldr	r3, [pc, #576]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d116      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005d82:	4b8d      	ldr	r3, [pc, #564]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005d8e:	4b8a      	ldr	r3, [pc, #552]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	e005      	b.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005d9a:	4b87      	ldr	r3, [pc, #540]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da0:	0a1b      	lsrs	r3, r3, #8
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	4a86      	ldr	r2, [pc, #536]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005dae:	e01f      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61bb      	str	r3, [r7, #24]
      break;
 8005db4:	e01c      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005db6:	4b80      	ldr	r3, [pc, #512]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc2:	d102      	bne.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005dc4:	4b7f      	ldr	r3, [pc, #508]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005dc6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005dc8:	e012      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61bb      	str	r3, [r7, #24]
      break;
 8005dce:	e00f      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005dd0:	4b79      	ldr	r3, [pc, #484]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ddc:	d102      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005dde:	4b7a      	ldr	r3, [pc, #488]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005de0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005de2:	e005      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	61bb      	str	r3, [r7, #24]
      break;
 8005de8:	e002      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61bb      	str	r3, [r7, #24]
      break;
 8005dee:	bf00      	nop
    }

    switch(PeriphClk)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df6:	f000 842b 	beq.w	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e00:	f200 850d 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e0a:	f000 80df 	beq.w	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e14:	f200 8503 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e1e:	f000 80d5 	beq.w	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e28:	f200 84f9 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e32:	f000 8374 	beq.w	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3c:	f200 84ef 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e46:	f000 84c0 	beq.w	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e50:	f200 84e5 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e5a:	f000 82e7 	beq.w	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e64:	f200 84db 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6e:	f000 80ad 	beq.w	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e78:	f200 84d1 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e82:	f000 8091 	beq.w	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8c:	f200 84c7 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e96:	d07f      	beq.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9e:	f200 84be 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea8:	f000 8445 	beq.w	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb2:	f200 84b4 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ebc:	f000 83f1 	beq.w	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec6:	f200 84aa 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed0:	f000 8392 	beq.w	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eda:	f200 84a0 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b80      	cmp	r3, #128	; 0x80
 8005ee2:	f000 835d 	beq.w	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b80      	cmp	r3, #128	; 0x80
 8005eea:	f200 8498 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	d84b      	bhi.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 8491 	beq.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	2b1f      	cmp	r3, #31
 8005f02:	f200 848c 	bhi.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 8005f06:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08006123 	.word	0x08006123
 8005f10:	08006193 	.word	0x08006193
 8005f14:	0800681f 	.word	0x0800681f
 8005f18:	08006227 	.word	0x08006227
 8005f1c:	0800681f 	.word	0x0800681f
 8005f20:	0800681f 	.word	0x0800681f
 8005f24:	0800681f 	.word	0x0800681f
 8005f28:	080062b1 	.word	0x080062b1
 8005f2c:	0800681f 	.word	0x0800681f
 8005f30:	0800681f 	.word	0x0800681f
 8005f34:	0800681f 	.word	0x0800681f
 8005f38:	0800681f 	.word	0x0800681f
 8005f3c:	0800681f 	.word	0x0800681f
 8005f40:	0800681f 	.word	0x0800681f
 8005f44:	0800681f 	.word	0x0800681f
 8005f48:	08006329 	.word	0x08006329
 8005f4c:	0800681f 	.word	0x0800681f
 8005f50:	0800681f 	.word	0x0800681f
 8005f54:	0800681f 	.word	0x0800681f
 8005f58:	0800681f 	.word	0x0800681f
 8005f5c:	0800681f 	.word	0x0800681f
 8005f60:	0800681f 	.word	0x0800681f
 8005f64:	0800681f 	.word	0x0800681f
 8005f68:	0800681f 	.word	0x0800681f
 8005f6c:	0800681f 	.word	0x0800681f
 8005f70:	0800681f 	.word	0x0800681f
 8005f74:	0800681f 	.word	0x0800681f
 8005f78:	0800681f 	.word	0x0800681f
 8005f7c:	0800681f 	.word	0x0800681f
 8005f80:	0800681f 	.word	0x0800681f
 8005f84:	0800681f 	.word	0x0800681f
 8005f88:	080063ab 	.word	0x080063ab
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b40      	cmp	r3, #64	; 0x40
 8005f90:	f000 82da 	beq.w	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005f94:	f000 bc43 	b.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005f98:	69b9      	ldr	r1, [r7, #24]
 8005f9a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f9e:	f000 fe17 	bl	8006bd0 <RCCEx_GetSAIxPeriphCLKFreq>
 8005fa2:	61f8      	str	r0, [r7, #28]
      break;
 8005fa4:	f000 bc3c 	b.w	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005fa8:	69b9      	ldr	r1, [r7, #24]
 8005faa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005fae:	f000 fe0f 	bl	8006bd0 <RCCEx_GetSAIxPeriphCLKFreq>
 8005fb2:	61f8      	str	r0, [r7, #28]
      break;
 8005fb4:	f000 bc34 	b.w	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	0003d090 	.word	0x0003d090
 8005fc0:	08009634 	.word	0x08009634
 8005fc4:	00f42400 	.word	0x00f42400
 8005fc8:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005fcc:	4bb2      	ldr	r3, [pc, #712]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005fd6:	613b      	str	r3, [r7, #16]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005fde:	d015      	beq.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005fe6:	f200 8092 	bhi.w	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ff0:	d029      	beq.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ff8:	f200 8089 	bhi.w	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d07b      	beq.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006008:	d04a      	beq.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 800600a:	e080      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800600c:	4ba2      	ldr	r3, [pc, #648]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b02      	cmp	r3, #2
 8006016:	d17c      	bne.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006018:	4b9f      	ldr	r3, [pc, #636]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8006024:	4b9c      	ldr	r3, [pc, #624]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	091b      	lsrs	r3, r3, #4
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	e005      	b.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006030:	4b99      	ldr	r3, [pc, #612]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	4a97      	ldr	r2, [pc, #604]	; (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800603e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006042:	61fb      	str	r3, [r7, #28]
          break;
 8006044:	e065      	b.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006046:	4b94      	ldr	r3, [pc, #592]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800604e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006052:	d160      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006054:	4b90      	ldr	r3, [pc, #576]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800605c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006060:	d159      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006062:	4b8d      	ldr	r3, [pc, #564]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	fb02 f203 	mul.w	r2, r2, r3
 8006076:	4b88      	ldr	r3, [pc, #544]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	091b      	lsrs	r3, r3, #4
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	3301      	adds	r3, #1
 8006082:	fbb2 f3f3 	udiv	r3, r2, r3
 8006086:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006088:	4b83      	ldr	r3, [pc, #524]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	0d5b      	lsrs	r3, r3, #21
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	3301      	adds	r3, #1
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	61fb      	str	r3, [r7, #28]
          break;
 800609e:	e03a      	b.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80060a0:	4b7d      	ldr	r3, [pc, #500]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ac:	d135      	bne.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80060ae:	4b7a      	ldr	r3, [pc, #488]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ba:	d12e      	bne.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80060bc:	4b76      	ldr	r3, [pc, #472]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	0a1b      	lsrs	r3, r3, #8
 80060c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060c6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	fb02 f203 	mul.w	r2, r2, r3
 80060d0:	4b71      	ldr	r3, [pc, #452]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	091b      	lsrs	r3, r3, #4
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	3301      	adds	r3, #1
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80060e2:	4b6d      	ldr	r3, [pc, #436]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	0d5b      	lsrs	r3, r3, #21
 80060e8:	f003 0303 	and.w	r3, r3, #3
 80060ec:	3301      	adds	r3, #1
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f6:	61fb      	str	r3, [r7, #28]
          break;
 80060f8:	e00f      	b.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80060fa:	4b67      	ldr	r3, [pc, #412]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80060fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b02      	cmp	r3, #2
 8006106:	d10a      	bne.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8006108:	4b65      	ldr	r3, [pc, #404]	; (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800610a:	61fb      	str	r3, [r7, #28]
          break;
 800610c:	e007      	b.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 800610e:	bf00      	nop
 8006110:	e386      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006112:	bf00      	nop
 8006114:	e384      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006116:	bf00      	nop
 8006118:	e382      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800611a:	bf00      	nop
 800611c:	e380      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800611e:	bf00      	nop
        break;
 8006120:	e37e      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006122:	4b5d      	ldr	r3, [pc, #372]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006128:	f003 0303 	and.w	r3, r3, #3
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b03      	cmp	r3, #3
 8006132:	d828      	bhi.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8006134:	a201      	add	r2, pc, #4	; (adr r2, 800613c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8006136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613a:	bf00      	nop
 800613c:	0800614d 	.word	0x0800614d
 8006140:	08006155 	.word	0x08006155
 8006144:	0800615d 	.word	0x0800615d
 8006148:	08006171 	.word	0x08006171
          frequency = HAL_RCC_GetPCLK2Freq();
 800614c:	f7ff f94e 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 8006150:	61f8      	str	r0, [r7, #28]
          break;
 8006152:	e01d      	b.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006154:	f7ff f89c 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8006158:	61f8      	str	r0, [r7, #28]
          break;
 800615a:	e019      	b.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800615c:	4b4e      	ldr	r3, [pc, #312]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006168:	d10f      	bne.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 800616a:	4b4e      	ldr	r3, [pc, #312]	; (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800616c:	61fb      	str	r3, [r7, #28]
          break;
 800616e:	e00c      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006170:	4b49      	ldr	r3, [pc, #292]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b02      	cmp	r3, #2
 800617c:	d107      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 800617e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006182:	61fb      	str	r3, [r7, #28]
          break;
 8006184:	e003      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8006186:	bf00      	nop
 8006188:	e34a      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800618a:	bf00      	nop
 800618c:	e348      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800618e:	bf00      	nop
        break;
 8006190:	e346      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006192:	4b41      	ldr	r3, [pc, #260]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006198:	f003 030c 	and.w	r3, r3, #12
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b0c      	cmp	r3, #12
 80061a2:	d83a      	bhi.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 80061a4:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80061a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061aa:	bf00      	nop
 80061ac:	080061e1 	.word	0x080061e1
 80061b0:	0800621b 	.word	0x0800621b
 80061b4:	0800621b 	.word	0x0800621b
 80061b8:	0800621b 	.word	0x0800621b
 80061bc:	080061e9 	.word	0x080061e9
 80061c0:	0800621b 	.word	0x0800621b
 80061c4:	0800621b 	.word	0x0800621b
 80061c8:	0800621b 	.word	0x0800621b
 80061cc:	080061f1 	.word	0x080061f1
 80061d0:	0800621b 	.word	0x0800621b
 80061d4:	0800621b 	.word	0x0800621b
 80061d8:	0800621b 	.word	0x0800621b
 80061dc:	08006205 	.word	0x08006205
          frequency = HAL_RCC_GetPCLK1Freq();
 80061e0:	f7ff f8ee 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80061e4:	61f8      	str	r0, [r7, #28]
          break;
 80061e6:	e01d      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 80061e8:	f7ff f852 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 80061ec:	61f8      	str	r0, [r7, #28]
          break;
 80061ee:	e019      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061f0:	4b29      	ldr	r3, [pc, #164]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fc:	d10f      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 80061fe:	4b29      	ldr	r3, [pc, #164]	; (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006200:	61fb      	str	r3, [r7, #28]
          break;
 8006202:	e00c      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006204:	4b24      	ldr	r3, [pc, #144]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b02      	cmp	r3, #2
 8006210:	d107      	bne.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8006212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006216:	61fb      	str	r3, [r7, #28]
          break;
 8006218:	e003      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 800621a:	bf00      	nop
 800621c:	e300      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800621e:	bf00      	nop
 8006220:	e2fe      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006222:	bf00      	nop
        break;
 8006224:	e2fc      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006226:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2b30      	cmp	r3, #48	; 0x30
 8006236:	d021      	beq.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b30      	cmp	r3, #48	; 0x30
 800623c:	d829      	bhi.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b20      	cmp	r3, #32
 8006242:	d011      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	2b20      	cmp	r3, #32
 8006248:	d823      	bhi.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2b10      	cmp	r3, #16
 8006254:	d004      	beq.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8006256:	e01c      	b.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006258:	f7ff f8b2 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 800625c:	61f8      	str	r0, [r7, #28]
          break;
 800625e:	e026      	b.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          frequency = HAL_RCC_GetSysClockFreq();
 8006260:	f7ff f816 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8006264:	61f8      	str	r0, [r7, #28]
          break;
 8006266:	e022      	b.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006268:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006274:	d118      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
            frequency = HSI_VALUE;
 8006276:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006278:	61fb      	str	r3, [r7, #28]
          break;
 800627a:	e015      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b02      	cmp	r3, #2
 8006288:	d110      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
            frequency = LSE_VALUE;
 800628a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800628e:	61fb      	str	r3, [r7, #28]
          break;
 8006290:	e00c      	b.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          break;
 8006292:	bf00      	nop
 8006294:	e2c4      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8006296:	bf00      	nop
 8006298:	40021000 	.word	0x40021000
 800629c:	08009634 	.word	0x08009634
 80062a0:	02dc6c00 	.word	0x02dc6c00
 80062a4:	00f42400 	.word	0x00f42400
          break;
 80062a8:	bf00      	nop
 80062aa:	e2b9      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80062ac:	bf00      	nop
        break;
 80062ae:	e2b7      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80062b0:	4ba3      	ldr	r3, [pc, #652]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2bc0      	cmp	r3, #192	; 0xc0
 80062c0:	d021      	beq.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2bc0      	cmp	r3, #192	; 0xc0
 80062c6:	d829      	bhi.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b80      	cmp	r3, #128	; 0x80
 80062cc:	d011      	beq.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b80      	cmp	r3, #128	; 0x80
 80062d2:	d823      	bhi.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d004      	beq.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
          break;
 80062e0:	e01c      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062e2:	f7ff f86d 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80062e6:	61f8      	str	r0, [r7, #28]
          break;
 80062e8:	e01d      	b.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = HAL_RCC_GetSysClockFreq();
 80062ea:	f7fe ffd1 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 80062ee:	61f8      	str	r0, [r7, #28]
          break;
 80062f0:	e019      	b.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062f2:	4b93      	ldr	r3, [pc, #588]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fe:	d10f      	bne.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            frequency = HSI_VALUE;
 8006300:	4b90      	ldr	r3, [pc, #576]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8006302:	61fb      	str	r3, [r7, #28]
          break;
 8006304:	e00c      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006306:	4b8e      	ldr	r3, [pc, #568]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b02      	cmp	r3, #2
 8006312:	d107      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = LSE_VALUE;
 8006314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006318:	61fb      	str	r3, [r7, #28]
          break;
 800631a:	e003      	b.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800631c:	bf00      	nop
 800631e:	e27f      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006320:	bf00      	nop
 8006322:	e27d      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006324:	bf00      	nop
        break;
 8006326:	e27b      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006328:	4b85      	ldr	r3, [pc, #532]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006332:	613b      	str	r3, [r7, #16]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800633a:	d025      	beq.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006342:	d82c      	bhi.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800634a:	d013      	beq.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006352:	d824      	bhi.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d004      	beq.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006360:	d004      	beq.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          break;
 8006362:	e01c      	b.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006364:	f7ff f82c 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8006368:	61f8      	str	r0, [r7, #28]
          break;
 800636a:	e01d      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = HAL_RCC_GetSysClockFreq();
 800636c:	f7fe ff90 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8006370:	61f8      	str	r0, [r7, #28]
          break;
 8006372:	e019      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006374:	4b72      	ldr	r3, [pc, #456]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800637c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006380:	d10f      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = HSI_VALUE;
 8006382:	4b70      	ldr	r3, [pc, #448]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8006384:	61fb      	str	r3, [r7, #28]
          break;
 8006386:	e00c      	b.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006388:	4b6d      	ldr	r3, [pc, #436]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b02      	cmp	r3, #2
 8006394:	d107      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
            frequency = LSE_VALUE;
 8006396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800639a:	61fb      	str	r3, [r7, #28]
          break;
 800639c:	e003      	b.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800639e:	bf00      	nop
 80063a0:	e23e      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80063a2:	bf00      	nop
 80063a4:	e23c      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80063a6:	bf00      	nop
        break;
 80063a8:	e23a      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80063aa:	4b65      	ldr	r3, [pc, #404]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063bc:	d025      	beq.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063c4:	d82c      	bhi.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063cc:	d013      	beq.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x736>
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d4:	d824      	bhi.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d004      	beq.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e2:	d004      	beq.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          break;
 80063e4:	e01c      	b.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063e6:	f7fe ffeb 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80063ea:	61f8      	str	r0, [r7, #28]
          break;
 80063ec:	e01d      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          frequency = HAL_RCC_GetSysClockFreq();
 80063ee:	f7fe ff4f 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 80063f2:	61f8      	str	r0, [r7, #28]
          break;
 80063f4:	e019      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063f6:	4b52      	ldr	r3, [pc, #328]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006402:	d10f      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
            frequency = HSI_VALUE;
 8006404:	4b4f      	ldr	r3, [pc, #316]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
 8006406:	61fb      	str	r3, [r7, #28]
          break;
 8006408:	e00c      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800640a:	4b4d      	ldr	r3, [pc, #308]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800640c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b02      	cmp	r3, #2
 8006416:	d107      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
            frequency = LSE_VALUE;
 8006418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641c:	61fb      	str	r3, [r7, #28]
          break;
 800641e:	e003      	b.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 8006420:	bf00      	nop
 8006422:	e1fd      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006424:	bf00      	nop
 8006426:	e1fb      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006428:	bf00      	nop
        break;
 800642a:	e1f9      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800642c:	4b44      	ldr	r3, [pc, #272]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800642e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006432:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006436:	613b      	str	r3, [r7, #16]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800643e:	d00c      	beq.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006446:	d864      	bhi.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800644e:	d008      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006456:	d030      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
          break;
 8006458:	e05b      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
          frequency = HAL_RCC_GetSysClockFreq();
 800645a:	f7fe ff19 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 800645e:	61f8      	str	r0, [r7, #28]
          break;
 8006460:	e05c      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006462:	4b37      	ldr	r3, [pc, #220]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800646a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800646e:	d152      	bne.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006470:	4b33      	ldr	r3, [pc, #204]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d04c      	beq.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800647c:	4b30      	ldr	r3, [pc, #192]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	0a1b      	lsrs	r3, r3, #8
 8006482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006486:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	fb02 f203 	mul.w	r2, r2, r3
 8006490:	4b2b      	ldr	r3, [pc, #172]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	091b      	lsrs	r3, r3, #4
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	3301      	adds	r3, #1
 800649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80064a2:	4b27      	ldr	r3, [pc, #156]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	0e5b      	lsrs	r3, r3, #25
 80064a8:	f003 0303 	and.w	r3, r3, #3
 80064ac:	3301      	adds	r3, #1
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	61fb      	str	r3, [r7, #28]
          break;
 80064b8:	e02d      	b.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80064ba:	4b21      	ldr	r3, [pc, #132]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c6:	d128      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d022      	beq.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80064d4:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	0a1b      	lsrs	r3, r3, #8
 80064da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064de:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	fb02 f203 	mul.w	r2, r2, r3
 80064e8:	4b15      	ldr	r3, [pc, #84]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	091b      	lsrs	r3, r3, #4
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	3301      	adds	r3, #1
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80064fa:	4b11      	ldr	r3, [pc, #68]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	0e5b      	lsrs	r3, r3, #25
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	3301      	adds	r3, #1
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	fbb2 f3f3 	udiv	r3, r2, r3
 800650e:	61fb      	str	r3, [r7, #28]
          break;
 8006510:	e003      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 8006512:	bf00      	nop
 8006514:	e184      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006516:	bf00      	nop
 8006518:	e182      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800651a:	bf00      	nop
        break;
 800651c:	e180      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800651e:	4b08      	ldr	r3, [pc, #32]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
 8006520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006528:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006530:	f7fe ff5c 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 8006534:	61f8      	str	r0, [r7, #28]
        break;
 8006536:	e173      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetSysClockFreq();
 8006538:	f7fe feaa 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 800653c:	61f8      	str	r0, [r7, #28]
        break;
 800653e:	e16f      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8006540:	40021000 	.word	0x40021000
 8006544:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006548:	4ba7      	ldr	r3, [pc, #668]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800655a:	d013      	beq.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006562:	d819      	bhi.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006570:	d004      	beq.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
          break;
 8006572:	e011      	b.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006574:	f7fe ff24 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8006578:	61f8      	str	r0, [r7, #28]
          break;
 800657a:	e010      	b.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 800657c:	f7fe fe88 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8006580:	61f8      	str	r0, [r7, #28]
          break;
 8006582:	e00c      	b.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006584:	4b98      	ldr	r3, [pc, #608]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800658c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006590:	d104      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
            frequency = HSI_VALUE;
 8006592:	4b96      	ldr	r3, [pc, #600]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8006594:	61fb      	str	r3, [r7, #28]
          break;
 8006596:	e001      	b.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          break;
 8006598:	bf00      	nop
 800659a:	e141      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800659c:	bf00      	nop
        break;
 800659e:	e13f      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80065a0:	4b91      	ldr	r3, [pc, #580]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80065a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b2:	d013      	beq.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ba:	d819      	bhi.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d004      	beq.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065c8:	d004      	beq.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 80065ca:	e011      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065cc:	f7fe fef8 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80065d0:	61f8      	str	r0, [r7, #28]
          break;
 80065d2:	e010      	b.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 80065d4:	f7fe fe5c 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 80065d8:	61f8      	str	r0, [r7, #28]
          break;
 80065da:	e00c      	b.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065dc:	4b82      	ldr	r3, [pc, #520]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e8:	d104      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            frequency = HSI_VALUE;
 80065ea:	4b80      	ldr	r3, [pc, #512]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 80065ec:	61fb      	str	r3, [r7, #28]
          break;
 80065ee:	e001      	b.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          break;
 80065f0:	bf00      	nop
 80065f2:	e115      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80065f4:	bf00      	nop
        break;
 80065f6:	e113      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80065f8:	4b7b      	ldr	r3, [pc, #492]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80065fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800660a:	d013      	beq.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006612:	d819      	bhi.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006620:	d004      	beq.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          break;
 8006622:	e011      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006624:	f7fe fecc 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8006628:	61f8      	str	r0, [r7, #28]
          break;
 800662a:	e010      	b.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          frequency = HAL_RCC_GetSysClockFreq();
 800662c:	f7fe fe30 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8006630:	61f8      	str	r0, [r7, #28]
          break;
 8006632:	e00c      	b.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006634:	4b6c      	ldr	r3, [pc, #432]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800663c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006640:	d104      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency = HSI_VALUE;
 8006642:	4b6a      	ldr	r3, [pc, #424]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8006644:	61fb      	str	r3, [r7, #28]
          break;
 8006646:	e001      	b.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          break;
 8006648:	bf00      	nop
 800664a:	e0e9      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800664c:	bf00      	nop
        break;
 800664e:	e0e7      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006650:	4b65      	ldr	r3, [pc, #404]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d011      	beq.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d818      	bhi.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d004      	beq.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          break;
 8006674:	e011      	b.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006676:	f7fe fea3 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 800667a:	61f8      	str	r0, [r7, #28]
          break;
 800667c:	e010      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          frequency = HAL_RCC_GetSysClockFreq();
 800667e:	f7fe fe07 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8006682:	61f8      	str	r0, [r7, #28]
          break;
 8006684:	e00c      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006686:	4b58      	ldr	r3, [pc, #352]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800668e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006692:	d104      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
            frequency = HSI_VALUE;
 8006694:	4b55      	ldr	r3, [pc, #340]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 8006696:	61fb      	str	r3, [r7, #28]
          break;
 8006698:	e001      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          break;
 800669a:	bf00      	nop
 800669c:	e0c0      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800669e:	bf00      	nop
        break;
 80066a0:	e0be      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80066a2:	4b51      	ldr	r3, [pc, #324]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066b4:	d02c      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066bc:	d833      	bhi.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066c4:	d01a      	beq.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066cc:	d82b      	bhi.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066da:	d004      	beq.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
          break;
 80066dc:	e023      	b.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066de:	f7fe fe6f 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80066e2:	61f8      	str	r0, [r7, #28]
          break;
 80066e4:	e026      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80066e6:	4b40      	ldr	r3, [pc, #256]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80066e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d11a      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
              frequency = LSI_VALUE;
 80066f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80066f8:	61fb      	str	r3, [r7, #28]
          break;
 80066fa:	e016      	b.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066fc:	4b3a      	ldr	r3, [pc, #232]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006708:	d111      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = HSI_VALUE;
 800670a:	4b38      	ldr	r3, [pc, #224]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800670c:	61fb      	str	r3, [r7, #28]
          break;
 800670e:	e00e      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006710:	4b35      	ldr	r3, [pc, #212]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b02      	cmp	r3, #2
 800671c:	d109      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
            frequency = LSE_VALUE;
 800671e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006722:	61fb      	str	r3, [r7, #28]
          break;
 8006724:	e005      	b.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          break;
 8006726:	bf00      	nop
 8006728:	e07a      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800672a:	bf00      	nop
 800672c:	e078      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 800672e:	bf00      	nop
 8006730:	e076      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 8006732:	bf00      	nop
        break;
 8006734:	e074      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006736:	4b2c      	ldr	r3, [pc, #176]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006748:	d02c      	beq.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006750:	d833      	bhi.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006758:	d01a      	beq.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006760:	d82b      	bhi.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800676e:	d004      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
          break;
 8006770:	e023      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006772:	f7fe fe25 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8006776:	61f8      	str	r0, [r7, #28]
          break;
 8006778:	e026      	b.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800677a:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800677c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b02      	cmp	r3, #2
 8006786:	d11a      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
              frequency = LSI_VALUE;
 8006788:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800678c:	61fb      	str	r3, [r7, #28]
          break;
 800678e:	e016      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006790:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679c:	d111      	bne.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
            frequency = HSI_VALUE;
 800679e:	4b13      	ldr	r3, [pc, #76]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 80067a0:	61fb      	str	r3, [r7, #28]
          break;
 80067a2:	e00e      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80067a4:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80067a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d109      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
            frequency = LSE_VALUE;
 80067b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b6:	61fb      	str	r3, [r7, #28]
          break;
 80067b8:	e005      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
          break;
 80067ba:	bf00      	nop
 80067bc:	e030      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80067be:	bf00      	nop
 80067c0:	e02e      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80067c2:	bf00      	nop
 80067c4:	e02c      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          break;
 80067c6:	bf00      	nop
        break;
 80067c8:	e02a      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80067ca:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 80067cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067d4:	613b      	str	r3, [r7, #16]
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d009      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e2:	d009      	beq.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
          break;
 80067e4:	e012      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80067e6:	bf00      	nop
 80067e8:	40021000 	.word	0x40021000
 80067ec:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fe fde6 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80067f4:	61f8      	str	r0, [r7, #28]
          break;
 80067f6:	e009      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067f8:	4b0c      	ldr	r3, [pc, #48]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006804:	d101      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
            frequency = HSI_VALUE;
 8006806:	4b0a      	ldr	r3, [pc, #40]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>)
 8006808:	61fb      	str	r3, [r7, #28]
          break;
 800680a:	bf00      	nop
        break;
 800680c:	e008      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800680e:	bf00      	nop
 8006810:	e006      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 8006812:	bf00      	nop
 8006814:	e004      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 8006816:	bf00      	nop
 8006818:	e002      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800681a:	bf00      	nop
 800681c:	e000      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
      break;
 800681e:	bf00      	nop
    }
  }

  return(frequency);
 8006820:	69fb      	ldr	r3, [r7, #28]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40021000 	.word	0x40021000
 8006830:	00f42400 	.word	0x00f42400

08006834 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006842:	4b74      	ldr	r3, [pc, #464]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d018      	beq.n	8006880 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800684e:	4b71      	ldr	r3, [pc, #452]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f003 0203 	and.w	r2, r3, #3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d10d      	bne.n	800687a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
       ||
 8006862:	2b00      	cmp	r3, #0
 8006864:	d009      	beq.n	800687a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006866:	4b6b      	ldr	r3, [pc, #428]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	091b      	lsrs	r3, r3, #4
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
       ||
 8006876:	429a      	cmp	r2, r3
 8006878:	d047      	beq.n	800690a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]
 800687e:	e044      	b.n	800690a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b03      	cmp	r3, #3
 8006886:	d018      	beq.n	80068ba <RCCEx_PLLSAI1_Config+0x86>
 8006888:	2b03      	cmp	r3, #3
 800688a:	d825      	bhi.n	80068d8 <RCCEx_PLLSAI1_Config+0xa4>
 800688c:	2b01      	cmp	r3, #1
 800688e:	d002      	beq.n	8006896 <RCCEx_PLLSAI1_Config+0x62>
 8006890:	2b02      	cmp	r3, #2
 8006892:	d009      	beq.n	80068a8 <RCCEx_PLLSAI1_Config+0x74>
 8006894:	e020      	b.n	80068d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006896:	4b5f      	ldr	r3, [pc, #380]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d11d      	bne.n	80068de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068a6:	e01a      	b.n	80068de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068a8:	4b5a      	ldr	r3, [pc, #360]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d116      	bne.n	80068e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068b8:	e013      	b.n	80068e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068ba:	4b56      	ldr	r3, [pc, #344]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10f      	bne.n	80068e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068c6:	4b53      	ldr	r3, [pc, #332]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068d6:	e006      	b.n	80068e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	73fb      	strb	r3, [r7, #15]
      break;
 80068dc:	e004      	b.n	80068e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068de:	bf00      	nop
 80068e0:	e002      	b.n	80068e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068e2:	bf00      	nop
 80068e4:	e000      	b.n	80068e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10d      	bne.n	800690a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80068ee:	4b49      	ldr	r3, [pc, #292]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6819      	ldr	r1, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	3b01      	subs	r3, #1
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	430b      	orrs	r3, r1
 8006904:	4943      	ldr	r1, [pc, #268]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006906:	4313      	orrs	r3, r2
 8006908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d17c      	bne.n	8006a0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006910:	4b40      	ldr	r3, [pc, #256]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a3f      	ldr	r2, [pc, #252]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006916:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800691a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691c:	f7fc f8f4 	bl	8002b08 <HAL_GetTick>
 8006920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006922:	e009      	b.n	8006938 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006924:	f7fc f8f0 	bl	8002b08 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d902      	bls.n	8006938 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	73fb      	strb	r3, [r7, #15]
        break;
 8006936:	e005      	b.n	8006944 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006938:	4b36      	ldr	r3, [pc, #216]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1ef      	bne.n	8006924 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d15f      	bne.n	8006a0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d110      	bne.n	8006972 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006950:	4b30      	ldr	r3, [pc, #192]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006958:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6892      	ldr	r2, [r2, #8]
 8006960:	0211      	lsls	r1, r2, #8
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	68d2      	ldr	r2, [r2, #12]
 8006966:	06d2      	lsls	r2, r2, #27
 8006968:	430a      	orrs	r2, r1
 800696a:	492a      	ldr	r1, [pc, #168]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800696c:	4313      	orrs	r3, r2
 800696e:	610b      	str	r3, [r1, #16]
 8006970:	e027      	b.n	80069c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d112      	bne.n	800699e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006978:	4b26      	ldr	r3, [pc, #152]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006980:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6892      	ldr	r2, [r2, #8]
 8006988:	0211      	lsls	r1, r2, #8
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6912      	ldr	r2, [r2, #16]
 800698e:	0852      	lsrs	r2, r2, #1
 8006990:	3a01      	subs	r2, #1
 8006992:	0552      	lsls	r2, r2, #21
 8006994:	430a      	orrs	r2, r1
 8006996:	491f      	ldr	r1, [pc, #124]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006998:	4313      	orrs	r3, r2
 800699a:	610b      	str	r3, [r1, #16]
 800699c:	e011      	b.n	80069c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800699e:	4b1d      	ldr	r3, [pc, #116]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6892      	ldr	r2, [r2, #8]
 80069ae:	0211      	lsls	r1, r2, #8
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6952      	ldr	r2, [r2, #20]
 80069b4:	0852      	lsrs	r2, r2, #1
 80069b6:	3a01      	subs	r2, #1
 80069b8:	0652      	lsls	r2, r2, #25
 80069ba:	430a      	orrs	r2, r1
 80069bc:	4915      	ldr	r1, [pc, #84]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80069c2:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a13      	ldr	r2, [pc, #76]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ce:	f7fc f89b 	bl	8002b08 <HAL_GetTick>
 80069d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069d4:	e009      	b.n	80069ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069d6:	f7fc f897 	bl	8002b08 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d902      	bls.n	80069ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	73fb      	strb	r3, [r7, #15]
          break;
 80069e8:	e005      	b.n	80069f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069ea:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0ef      	beq.n	80069d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	4903      	ldr	r1, [pc, #12]	; (8006a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40021000 	.word	0x40021000

08006a18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a26:	4b69      	ldr	r3, [pc, #420]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d018      	beq.n	8006a64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006a32:	4b66      	ldr	r3, [pc, #408]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f003 0203 	and.w	r2, r3, #3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d10d      	bne.n	8006a5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
       ||
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006a4a:	4b60      	ldr	r3, [pc, #384]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	091b      	lsrs	r3, r3, #4
 8006a50:	f003 0307 	and.w	r3, r3, #7
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
       ||
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d047      	beq.n	8006aee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	73fb      	strb	r3, [r7, #15]
 8006a62:	e044      	b.n	8006aee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d018      	beq.n	8006a9e <RCCEx_PLLSAI2_Config+0x86>
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d825      	bhi.n	8006abc <RCCEx_PLLSAI2_Config+0xa4>
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d002      	beq.n	8006a7a <RCCEx_PLLSAI2_Config+0x62>
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d009      	beq.n	8006a8c <RCCEx_PLLSAI2_Config+0x74>
 8006a78:	e020      	b.n	8006abc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a7a:	4b54      	ldr	r3, [pc, #336]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d11d      	bne.n	8006ac2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a8a:	e01a      	b.n	8006ac2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a8c:	4b4f      	ldr	r3, [pc, #316]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d116      	bne.n	8006ac6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a9c:	e013      	b.n	8006ac6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a9e:	4b4b      	ldr	r3, [pc, #300]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10f      	bne.n	8006aca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006aaa:	4b48      	ldr	r3, [pc, #288]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006aba:	e006      	b.n	8006aca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac0:	e004      	b.n	8006acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006ac2:	bf00      	nop
 8006ac4:	e002      	b.n	8006acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006ac6:	bf00      	nop
 8006ac8:	e000      	b.n	8006acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006aca:	bf00      	nop
    }

    if(status == HAL_OK)
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10d      	bne.n	8006aee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006ad2:	4b3e      	ldr	r3, [pc, #248]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6819      	ldr	r1, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	430b      	orrs	r3, r1
 8006ae8:	4938      	ldr	r1, [pc, #224]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d166      	bne.n	8006bc2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006af4:	4b35      	ldr	r3, [pc, #212]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a34      	ldr	r2, [pc, #208]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b00:	f7fc f802 	bl	8002b08 <HAL_GetTick>
 8006b04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b06:	e009      	b.n	8006b1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b08:	f7fb fffe 	bl	8002b08 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d902      	bls.n	8006b1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	73fb      	strb	r3, [r7, #15]
        break;
 8006b1a:	e005      	b.n	8006b28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b1c:	4b2b      	ldr	r3, [pc, #172]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1ef      	bne.n	8006b08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d149      	bne.n	8006bc2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d110      	bne.n	8006b56 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b34:	4b25      	ldr	r3, [pc, #148]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006b3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6892      	ldr	r2, [r2, #8]
 8006b44:	0211      	lsls	r1, r2, #8
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	68d2      	ldr	r2, [r2, #12]
 8006b4a:	06d2      	lsls	r2, r2, #27
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	491f      	ldr	r1, [pc, #124]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	614b      	str	r3, [r1, #20]
 8006b54:	e011      	b.n	8006b7a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b56:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6892      	ldr	r2, [r2, #8]
 8006b66:	0211      	lsls	r1, r2, #8
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6912      	ldr	r2, [r2, #16]
 8006b6c:	0852      	lsrs	r2, r2, #1
 8006b6e:	3a01      	subs	r2, #1
 8006b70:	0652      	lsls	r2, r2, #25
 8006b72:	430a      	orrs	r2, r1
 8006b74:	4915      	ldr	r1, [pc, #84]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b7a:	4b14      	ldr	r3, [pc, #80]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a13      	ldr	r2, [pc, #76]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b86:	f7fb ffbf 	bl	8002b08 <HAL_GetTick>
 8006b8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b8c:	e009      	b.n	8006ba2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b8e:	f7fb ffbb 	bl	8002b08 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d902      	bls.n	8006ba2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	73fb      	strb	r3, [r7, #15]
          break;
 8006ba0:	e005      	b.n	8006bae <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ba2:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0ef      	beq.n	8006b8e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d106      	bne.n	8006bc2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006bb6:	695a      	ldr	r2, [r3, #20]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	4903      	ldr	r1, [pc, #12]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40021000 	.word	0x40021000

08006bd0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b089      	sub	sp, #36	; 0x24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIx */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bec:	d10c      	bne.n	8006c08 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006bee:	4b77      	ldr	r3, [pc, #476]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006bf8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c00:	d112      	bne.n	8006c28 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006c02:	4b73      	ldr	r3, [pc, #460]	; (8006dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	e00f      	b.n	8006c28 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0e:	d10b      	bne.n	8006c28 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006c10:	4b6e      	ldr	r3, [pc, #440]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c16:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006c1a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c22:	d101      	bne.n	8006c28 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006c24:	4b6a      	ldr	r3, [pc, #424]	; (8006dd0 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8006c26:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f040 80c6 	bne.w	8006dbc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c3a:	d003      	beq.n	8006c44 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c42:	d13b      	bne.n	8006cbc <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006c44:	4b61      	ldr	r3, [pc, #388]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c50:	f040 80b3 	bne.w	8006dba <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8006c54:	4b5d      	ldr	r3, [pc, #372]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80ac 	beq.w	8006dba <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006c62:	4b5a      	ldr	r3, [pc, #360]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	091b      	lsrs	r3, r3, #4
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c74:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006c76:	4b55      	ldr	r3, [pc, #340]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c80:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006c82:	4b52      	ldr	r3, [pc, #328]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	0edb      	lsrs	r3, r3, #27
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006c94:	4b4d      	ldr	r3, [pc, #308]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8006ca0:	2311      	movs	r3, #17
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e001      	b.n	8006caa <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8006ca6:	2307      	movs	r3, #7
 8006ca8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	fb02 f203 	mul.w	r2, r2, r3
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006cba:	e07e      	b.n	8006dba <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d139      	bne.n	8006d36 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006cc2:	4b42      	ldr	r3, [pc, #264]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cce:	d175      	bne.n	8006dbc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8006cd0:	4b3e      	ldr	r3, [pc, #248]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d06f      	beq.n	8006dbc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006cdc:	4b3b      	ldr	r3, [pc, #236]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	091b      	lsrs	r3, r3, #4
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cee:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006cf0:	4b36      	ldr	r3, [pc, #216]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	0a1b      	lsrs	r3, r3, #8
 8006cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cfa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006cfc:	4b33      	ldr	r3, [pc, #204]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	0edb      	lsrs	r3, r3, #27
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006d0e:	4b2f      	ldr	r3, [pc, #188]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8006d1a:	2311      	movs	r3, #17
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	e001      	b.n	8006d24 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8006d20:	2307      	movs	r3, #7
 8006d22:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	fb02 f203 	mul.w	r2, r2, r3
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	e042      	b.n	8006dbc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d3c:	d003      	beq.n	8006d46 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d44:	d13a      	bne.n	8006dbc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006d46:	4b21      	ldr	r3, [pc, #132]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d52:	d133      	bne.n	8006dbc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8006d54:	4b1d      	ldr	r3, [pc, #116]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d02d      	beq.n	8006dbc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006d60:	4b1a      	ldr	r3, [pc, #104]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	091b      	lsrs	r3, r3, #4
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d72:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006d74:	4b15      	ldr	r3, [pc, #84]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	0a1b      	lsrs	r3, r3, #8
 8006d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d7e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006d80:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	0edb      	lsrs	r3, r3, #27
 8006d86:	f003 031f 	and.w	r3, r3, #31
 8006d8a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006d92:	4b0e      	ldr	r3, [pc, #56]	; (8006dcc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8006d9e:	2311      	movs	r3, #17
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	e001      	b.n	8006da8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8006da4:	2307      	movs	r3, #7
 8006da6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	fb02 f203 	mul.w	r2, r2, r3
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db6:	61fb      	str	r3, [r7, #28]
 8006db8:	e000      	b.n	8006dbc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006dba:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3724      	adds	r7, #36	; 0x24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	001fff68 	.word	0x001fff68

08006dd4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e022      	b.n	8006e2c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d105      	bne.n	8006dfe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7f9 fd5b 	bl	80008b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2203      	movs	r2, #3
 8006e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f814 	bl	8006e34 <HAL_SD_InitCard>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e00a      	b.n	8006e2c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e34:	b5b0      	push	{r4, r5, r7, lr}
 8006e36:	b08e      	sub	sp, #56	; 0x38
 8006e38:	af04      	add	r7, sp, #16
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006e44:	2300      	movs	r3, #0
 8006e46:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006e50:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006e54:	f7fe ff34 	bl	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e58:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d109      	bne.n	8006e74 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e6e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e07b      	b.n	8006f6c <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	09db      	lsrs	r3, r3, #7
 8006e78:	4a3e      	ldr	r2, [pc, #248]	; (8006f74 <HAL_SD_InitCard+0x140>)
 8006e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7e:	091b      	lsrs	r3, r3, #4
 8006e80:	3b02      	subs	r3, #2
 8006e82:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681d      	ldr	r5, [r3, #0]
 8006e88:	466c      	mov	r4, sp
 8006e8a:	f107 0314 	add.w	r3, r7, #20
 8006e8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e96:	f107 0308 	add.w	r3, r7, #8
 8006e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f001 fc1f 	bl	80086e0 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eb0:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 fc5d 	bl	8008776 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eca:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	3302      	adds	r3, #2
 8006ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006ed8:	4a27      	ldr	r2, [pc, #156]	; (8006f78 <HAL_SD_InitCard+0x144>)
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fb fe1c 	bl	8002b20 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 ffdd 	bl	8007ea8 <SD_PowerON>
 8006eee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00b      	beq.n	8006f0e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e02e      	b.n	8006f6c <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fefe 	bl	8007d10 <SD_InitCard>
 8006f14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00b      	beq.n	8006f34 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e01b      	b.n	8006f6c <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 fcad 	bl	800889c <SDMMC_CmdBlockLength>
 8006f42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00f      	beq.n	8006f6a <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a0b      	ldr	r2, [pc, #44]	; (8006f7c <HAL_SD_InitCard+0x148>)
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3728      	adds	r7, #40	; 0x28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bdb0      	pop	{r4, r5, r7, pc}
 8006f74:	014f8b59 	.word	0x014f8b59
 8006f78:	00012110 	.word	0x00012110
 8006f7c:	004005ff 	.word	0x004005ff

08006f80 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08c      	sub	sp, #48	; 0x30
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d107      	bne.n	8006fa8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e0a9      	b.n	80070fc <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	f040 80a2 	bne.w	80070fa <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	441a      	add	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d907      	bls.n	8006fda <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e090      	b.n	80070fc <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2203      	movs	r2, #3
 8006fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	4a45      	ldr	r2, [pc, #276]	; (8007104 <HAL_SD_ReadBlocks_DMA+0x184>)
 8006ff0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	4a44      	ldr	r2, [pc, #272]	; (8007108 <HAL_SD_ReadBlocks_DMA+0x188>)
 8006ff8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	2200      	movs	r2, #0
 8007000:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3380      	adds	r3, #128	; 0x80
 800700c:	4619      	mov	r1, r3
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	025b      	lsls	r3, r3, #9
 8007014:	089b      	lsrs	r3, r3, #2
 8007016:	f7fc f835 	bl	8003084 <HAL_DMA_Start_IT>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00f      	beq.n	8007040 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a39      	ldr	r2, [pc, #228]	; (800710c <HAL_SD_ReadBlocks_DMA+0x18c>)
 8007026:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e05d      	b.n	80070fc <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0208 	orr.w	r2, r2, #8
 800704e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007054:	2b01      	cmp	r3, #1
 8007056:	d002      	beq.n	800705e <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	025b      	lsls	r3, r3, #9
 800705c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800705e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007062:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	025b      	lsls	r3, r3, #9
 8007068:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800706a:	2390      	movs	r3, #144	; 0x90
 800706c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800706e:	2302      	movs	r3, #2
 8007070:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007072:	2300      	movs	r3, #0
 8007074:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007076:	2301      	movs	r3, #1
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f107 0210 	add.w	r2, r7, #16
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f001 fbdd 	bl	8008844 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d90a      	bls.n	80070a6 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2282      	movs	r2, #130	; 0x82
 8007094:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800709c:	4618      	mov	r0, r3
 800709e:	f001 fc41 	bl	8008924 <SDMMC_CmdReadMultiBlock>
 80070a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80070a4:	e009      	b.n	80070ba <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2281      	movs	r2, #129	; 0x81
 80070aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 fc14 	bl	80088e0 <SDMMC_CmdReadSingleBlock>
 80070b8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d012      	beq.n	80070e6 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a11      	ldr	r2, [pc, #68]	; (800710c <HAL_SD_ReadBlocks_DMA+0x18c>)
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	431a      	orrs	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e00a      	b.n	80070fc <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80070f4:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	e000      	b.n	80070fc <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80070fa:	2302      	movs	r3, #2
  }
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3730      	adds	r7, #48	; 0x30
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	08007b2b 	.word	0x08007b2b
 8007108:	08007b9d 	.word	0x08007b9d
 800710c:	004005ff 	.word	0x004005ff

08007110 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08c      	sub	sp, #48	; 0x30
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d107      	bne.n	8007138 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e0ac      	b.n	8007292 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b01      	cmp	r3, #1
 8007142:	f040 80a5 	bne.w	8007290 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800714c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	441a      	add	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007156:	429a      	cmp	r2, r3
 8007158:	d907      	bls.n	800716a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e093      	b.n	8007292 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2203      	movs	r2, #3
 800716e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2200      	movs	r2, #0
 8007178:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717e:	4a47      	ldr	r2, [pc, #284]	; (800729c <HAL_SD_WriteBlocks_DMA+0x18c>)
 8007180:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007186:	4a46      	ldr	r2, [pc, #280]	; (80072a0 <HAL_SD_WriteBlocks_DMA+0x190>)
 8007188:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718e:	2200      	movs	r2, #0
 8007190:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007196:	2b01      	cmp	r3, #1
 8007198:	d002      	beq.n	80071a0 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	025b      	lsls	r3, r3, #9
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d90a      	bls.n	80071bc <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	22a0      	movs	r2, #160	; 0xa0
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 fbfa 	bl	80089ac <SDMMC_CmdWriteMultiBlock>
 80071b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80071ba:	e009      	b.n	80071d0 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2290      	movs	r2, #144	; 0x90
 80071c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 fbcd 	bl	8008968 <SDMMC_CmdWriteSingleBlock>
 80071ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d012      	beq.n	80071fc <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a32      	ldr	r2, [pc, #200]	; (80072a4 <HAL_SD_WriteBlocks_DMA+0x194>)
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	431a      	orrs	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e04a      	b.n	8007292 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0208 	orr.w	r2, r2, #8
 800720a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3380      	adds	r3, #128	; 0x80
 8007218:	461a      	mov	r2, r3
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	025b      	lsls	r3, r3, #9
 800721e:	089b      	lsrs	r3, r3, #2
 8007220:	f7fb ff30 	bl	8003084 <HAL_DMA_Start_IT>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d012      	beq.n	8007250 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007230:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e020      	b.n	8007292 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007254:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	025b      	lsls	r3, r3, #9
 800725a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800725c:	2390      	movs	r3, #144	; 0x90
 800725e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007260:	2300      	movs	r3, #0
 8007262:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007264:	2300      	movs	r3, #0
 8007266:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007268:	2301      	movs	r3, #1
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f107 0210 	add.w	r2, r7, #16
 8007274:	4611      	mov	r1, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f001 fae4 	bl	8008844 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 021a 	orr.w	r2, r2, #26
 800728a:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	e000      	b.n	8007292 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007290:	2302      	movs	r3, #2
  }
}
 8007292:	4618      	mov	r0, r3
 8007294:	3730      	adds	r7, #48	; 0x30
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	08007b01 	.word	0x08007b01
 80072a0:	08007b9d 	.word	0x08007b9d
 80072a4:	004005ff 	.word	0x004005ff

080072a8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d008      	beq.n	80072d6 <HAL_SD_IRQHandler+0x2e>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 f800 	bl	80082d4 <SD_Read_IT>
 80072d4:	e155      	b.n	8007582 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 808f 	beq.w	8007404 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072ee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6812      	ldr	r2, [r2, #0]
 80072fa:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80072fe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007302:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0201 	bic.w	r2, r2, #1
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d039      	beq.n	8007392 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f003 0302 	and.w	r3, r3, #2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <HAL_SD_IRQHandler+0x8a>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	d011      	beq.n	8007356 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4618      	mov	r0, r3
 8007338:	f001 fb5a 	bl	80089f0 <SDMMC_CmdStopTransfer>
 800733c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f91f 	bl	8007594 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f240 523a 	movw	r2, #1338	; 0x53a
 800735e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <HAL_SD_IRQHandler+0xda>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fb fab7 	bl	80028f6 <HAL_SD_RxCpltCallback>
 8007388:	e0fb      	b.n	8007582 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fb faa9 	bl	80028e2 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007390:	e0f7      	b.n	8007582 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 80f2 	beq.w	8007582 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d011      	beq.n	80073cc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 fb1f 	bl	80089f0 <SDMMC_CmdStopTransfer>
 80073b2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d008      	beq.n	80073cc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f8e4 	bl	8007594 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f040 80d5 	bne.w	8007582 <HAL_SD_IRQHandler+0x2da>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f040 80cf 	bne.w	8007582 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0208 	bic.w	r2, r2, #8
 80073f2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7fb fa70 	bl	80028e2 <HAL_SD_TxCpltCallback>
}
 8007402:	e0be      	b.n	8007582 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d008      	beq.n	8007424 <HAL_SD_IRQHandler+0x17c>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f003 0308 	and.w	r3, r3, #8
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 ffaa 	bl	8008376 <SD_Write_IT>
 8007422:	e0ae      	b.n	8007582 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 80a7 	beq.w	8007582 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d005      	beq.n	800744e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007446:	f043 0202 	orr.w	r2, r3, #2
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	f043 0208 	orr.w	r2, r3, #8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	f043 0220 	orr.w	r2, r3, #32
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007488:	f003 0310 	and.w	r3, r3, #16
 800748c:	2b00      	cmp	r3, #0
 800748e:	d005      	beq.n	800749c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	f043 0210 	orr.w	r2, r3, #16
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80074b4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 fa98 	bl	80089f0 <SDMMC_CmdStopTransfer>
 80074c0:	4602      	mov	r2, r0
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f003 0308 	and.w	r3, r3, #8
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f855 	bl	8007594 <HAL_SD_ErrorCallback>
}
 80074ea:	e04a      	b.n	8007582 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d045      	beq.n	8007582 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d104      	bne.n	800750a <HAL_SD_IRQHandler+0x262>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d011      	beq.n	800752e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750e:	4a1f      	ldr	r2, [pc, #124]	; (800758c <HAL_SD_IRQHandler+0x2e4>)
 8007510:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007516:	4618      	mov	r0, r3
 8007518:	f7fb fe52 	bl	80031c0 <HAL_DMA_Abort_IT>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d02f      	beq.n	8007582 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fb84 	bl	8007c34 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800752c:	e029      	b.n	8007582 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <HAL_SD_IRQHandler+0x29a>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d011      	beq.n	8007566 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	4a12      	ldr	r2, [pc, #72]	; (8007590 <HAL_SD_IRQHandler+0x2e8>)
 8007548:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	4618      	mov	r0, r3
 8007550:	f7fb fe36 	bl	80031c0 <HAL_DMA_Abort_IT>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d013      	beq.n	8007582 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fb9f 	bl	8007ca2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007564:	e00d      	b.n	8007582 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fb f9a7 	bl	80028ce <HAL_SD_AbortCallback>
}
 8007580:	e7ff      	b.n	8007582 <HAL_SD_IRQHandler+0x2da>
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	08007c35 	.word	0x08007c35
 8007590:	08007ca3 	.word	0x08007ca3

08007594 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b6:	0f9b      	lsrs	r3, r3, #30
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075c2:	0e9b      	lsrs	r3, r3, #26
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	f003 030f 	and.w	r3, r3, #15
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d4:	0e1b      	lsrs	r3, r3, #24
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007608:	0d1b      	lsrs	r3, r3, #20
 800760a:	b29a      	uxth	r2, r3
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007614:	0c1b      	lsrs	r3, r3, #16
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	b2da      	uxtb	r2, r3
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007626:	0bdb      	lsrs	r3, r3, #15
 8007628:	b2db      	uxtb	r3, r3
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	b2da      	uxtb	r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007638:	0b9b      	lsrs	r3, r3, #14
 800763a:	b2db      	uxtb	r3, r3
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	b2da      	uxtb	r2, r3
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800764a:	0b5b      	lsrs	r3, r3, #13
 800764c:	b2db      	uxtb	r3, r3
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	b2da      	uxtb	r2, r3
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800765c:	0b1b      	lsrs	r3, r3, #12
 800765e:	b2db      	uxtb	r3, r3
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	b2da      	uxtb	r2, r3
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2200      	movs	r2, #0
 800766e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007674:	2b00      	cmp	r3, #0
 8007676:	d163      	bne.n	8007740 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800767c:	009a      	lsls	r2, r3, #2
 800767e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007682:	4013      	ands	r3, r2
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007688:	0f92      	lsrs	r2, r2, #30
 800768a:	431a      	orrs	r2, r3
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007694:	0edb      	lsrs	r3, r3, #27
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 0307 	and.w	r3, r3, #7
 800769c:	b2da      	uxtb	r2, r3
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a6:	0e1b      	lsrs	r3, r3, #24
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f003 0307 	and.w	r3, r3, #7
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b8:	0d5b      	lsrs	r3, r3, #21
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	f003 0307 	and.w	r3, r3, #7
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ca:	0c9b      	lsrs	r3, r3, #18
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076dc:	0bdb      	lsrs	r3, r3, #15
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	f003 0307 	and.w	r3, r3, #7
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	7e1b      	ldrb	r3, [r3, #24]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	3302      	adds	r3, #2
 8007700:	2201      	movs	r2, #1
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800770a:	fb02 f203 	mul.w	r2, r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	7a1b      	ldrb	r3, [r3, #8]
 8007716:	b2db      	uxtb	r3, r3
 8007718:	f003 030f 	and.w	r3, r3, #15
 800771c:	2201      	movs	r2, #1
 800771e:	409a      	lsls	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800772c:	0a52      	lsrs	r2, r2, #9
 800772e:	fb02 f203 	mul.w	r2, r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800773c:	661a      	str	r2, [r3, #96]	; 0x60
 800773e:	e031      	b.n	80077a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007744:	2b01      	cmp	r3, #1
 8007746:	d11d      	bne.n	8007784 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800774c:	041b      	lsls	r3, r3, #16
 800774e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007756:	0c1b      	lsrs	r3, r3, #16
 8007758:	431a      	orrs	r2, r3
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	3301      	adds	r3, #1
 8007764:	029a      	lsls	r2, r3, #10
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007778:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	661a      	str	r2, [r3, #96]	; 0x60
 8007782:	e00f      	b.n	80077a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a58      	ldr	r2, [pc, #352]	; (80078ec <HAL_SD_GetCardCSD+0x344>)
 800778a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e09d      	b.n	80078e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a8:	0b9b      	lsrs	r3, r3, #14
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ba:	09db      	lsrs	r3, r3, #7
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077dc:	0fdb      	lsrs	r3, r3, #31
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e8:	0f5b      	lsrs	r3, r3, #29
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fa:	0e9b      	lsrs	r3, r3, #26
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	b2da      	uxtb	r2, r3
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780c:	0d9b      	lsrs	r3, r3, #22
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f003 030f 	and.w	r3, r3, #15
 8007814:	b2da      	uxtb	r2, r3
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781e:	0d5b      	lsrs	r3, r3, #21
 8007820:	b2db      	uxtb	r3, r3
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	b2da      	uxtb	r2, r3
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783a:	0c1b      	lsrs	r3, r3, #16
 800783c:	b2db      	uxtb	r3, r3
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	b2da      	uxtb	r2, r3
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784e:	0bdb      	lsrs	r3, r3, #15
 8007850:	b2db      	uxtb	r3, r3
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	b2da      	uxtb	r2, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007862:	0b9b      	lsrs	r3, r3, #14
 8007864:	b2db      	uxtb	r3, r3
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	b2da      	uxtb	r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007876:	0b5b      	lsrs	r3, r3, #13
 8007878:	b2db      	uxtb	r3, r3
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	b2da      	uxtb	r2, r3
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788a:	0b1b      	lsrs	r3, r3, #12
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	b2da      	uxtb	r2, r3
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789e:	0a9b      	lsrs	r3, r3, #10
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b2:	0a1b      	lsrs	r3, r3, #8
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	085b      	lsrs	r3, r3, #1
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	004005ff 	.word	0x004005ff

080078f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007948:	b5b0      	push	{r4, r5, r7, lr}
 800794a:	b090      	sub	sp, #64	; 0x40
 800794c:	af04      	add	r7, sp, #16
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2203      	movs	r2, #3
 800795c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007964:	2b03      	cmp	r3, #3
 8007966:	d02e      	beq.n	80079c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796e:	d106      	bne.n	800797e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
 800797c:	e029      	b.n	80079d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007984:	d10a      	bne.n	800799c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fb44 	bl	8008014 <SD_WideBus_Enable>
 800798c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
 800799a:	e01a      	b.n	80079d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fb81 	bl	80080aa <SD_WideBus_Disable>
 80079a8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	431a      	orrs	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38
 80079b6:	e00c      	b.n	80079d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	639a      	str	r2, [r3, #56]	; 0x38
 80079c4:	e005      	b.n	80079d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d007      	beq.n	80079ea <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a35      	ldr	r2, [pc, #212]	; (8007ab4 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80079e0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80079e8:	e042      	b.n	8007a70 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80079ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80079ee:	f7fe f967 	bl	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq>
 80079f2:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d031      	beq.n	8007a5e <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	3302      	adds	r3, #2
 8007a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a22:	4a25      	ldr	r2, [pc, #148]	; (8007ab8 <HAL_SD_ConfigWideBusOperation+0x170>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d907      	bls.n	8007a38 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	4a24      	ldr	r2, [pc, #144]	; (8007abc <HAL_SD_ConfigWideBusOperation+0x174>)
 8007a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a30:	0ddb      	lsrs	r3, r3, #23
 8007a32:	3b02      	subs	r3, #2
 8007a34:	623b      	str	r3, [r7, #32]
 8007a36:	e002      	b.n	8007a3e <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681d      	ldr	r5, [r3, #0]
 8007a42:	466c      	mov	r4, sp
 8007a44:	f107 0318 	add.w	r3, r7, #24
 8007a48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a50:	f107 030c 	add.w	r3, r7, #12
 8007a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 fe42 	bl	80086e0 <SDMMC_Init>
 8007a5c:	e008      	b.n	8007a70 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 ff0f 	bl	800889c <SDMMC_CmdBlockLength>
 8007a7e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00c      	beq.n	8007aa0 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a0a      	ldr	r2, [pc, #40]	; (8007ab4 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	431a      	orrs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3730      	adds	r7, #48	; 0x30
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ab4:	004005ff 	.word	0x004005ff
 8007ab8:	017d7840 	.word	0x017d7840
 8007abc:	55e63b89 	.word	0x55e63b89

08007ac0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007acc:	f107 030c 	add.w	r3, r7, #12
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa76 	bl	8007fc4 <SD_SendStatus>
 8007ad8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	0a5b      	lsrs	r3, r3, #9
 8007af0:	f003 030f 	and.w	r3, r3, #15
 8007af4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007af6:	693b      	ldr	r3, [r7, #16]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007b1e:	bf00      	nop
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	2b82      	cmp	r3, #130	; 0x82
 8007b3e:	d111      	bne.n	8007b64 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 ff53 	bl	80089f0 <SDMMC_CmdStopTransfer>
 8007b4a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d008      	beq.n	8007b64 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f7ff fd18 	bl	8007594 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0208 	bic.w	r2, r2, #8
 8007b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b7c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7fa feb2 	bl	80028f6 <HAL_SD_RxCpltCallback>
#endif
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb0:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb8:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d002      	beq.n	8007bc6 <SD_DMAError+0x2a>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d12d      	bne.n	8007c22 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a19      	ldr	r2, [pc, #100]	; (8007c30 <SD_DMAError+0x94>)
 8007bcc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007bdc:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8007bea:	6978      	ldr	r0, [r7, #20]
 8007bec:	f7ff ff68 	bl	8007ac0 <HAL_SD_GetCardState>
 8007bf0:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b06      	cmp	r3, #6
 8007bf6:	d002      	beq.n	8007bfe <SD_DMAError+0x62>
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2b05      	cmp	r3, #5
 8007bfc:	d10a      	bne.n	8007c14 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fef4 	bl	80089f0 <SDMMC_CmdStopTransfer>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8007c22:	6978      	ldr	r0, [r7, #20]
 8007c24:	f7ff fcb6 	bl	8007594 <HAL_SD_ErrorCallback>
#endif
}
 8007c28:	bf00      	nop
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	004005ff 	.word	0x004005ff

08007c34 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c40:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c4a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff ff37 	bl	8007ac0 <HAL_SD_GetCardState>
 8007c52:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2b06      	cmp	r3, #6
 8007c66:	d002      	beq.n	8007c6e <SD_DMATxAbort+0x3a>
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2b05      	cmp	r3, #5
 8007c6c:	d10a      	bne.n	8007c84 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 febc 	bl	80089f0 <SDMMC_CmdStopTransfer>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d103      	bne.n	8007c94 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7fa fe1e 	bl	80028ce <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007c92:	e002      	b.n	8007c9a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff fc7d 	bl	8007594 <HAL_SD_ErrorCallback>
}
 8007c9a:	bf00      	nop
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cae:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f240 523a 	movw	r2, #1338	; 0x53a
 8007cb8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff ff00 	bl	8007ac0 <HAL_SD_GetCardState>
 8007cc0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b06      	cmp	r3, #6
 8007cd4:	d002      	beq.n	8007cdc <SD_DMARxAbort+0x3a>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b05      	cmp	r3, #5
 8007cda:	d10a      	bne.n	8007cf2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 fe85 	bl	80089f0 <SDMMC_CmdStopTransfer>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	431a      	orrs	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d103      	bne.n	8007d02 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7fa fde7 	bl	80028ce <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007d00:	e002      	b.n	8007d08 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7ff fc46 	bl	8007594 <HAL_SD_ErrorCallback>
}
 8007d08:	bf00      	nop
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d10:	b5b0      	push	{r4, r5, r7, lr}
 8007d12:	b094      	sub	sp, #80	; 0x50
 8007d14:	af04      	add	r7, sp, #16
 8007d16:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 fd37 	bl	8008794 <SDMMC_GetPowerState>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d102      	bne.n	8007d32 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007d30:	e0b6      	b.n	8007ea0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d02f      	beq.n	8007d9a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 ff60 	bl	8008c04 <SDMMC_CmdSendCID>
 8007d44:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <SD_InitCard+0x40>
    {
      return errorstate;
 8007d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d4e:	e0a7      	b.n	8007ea0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2100      	movs	r1, #0
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 fd61 	bl	800881e <SDMMC_GetResponse>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2104      	movs	r1, #4
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fd58 	bl	800881e <SDMMC_GetResponse>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2108      	movs	r1, #8
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fd4f 	bl	800881e <SDMMC_GetResponse>
 8007d80:	4602      	mov	r2, r0
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	210c      	movs	r1, #12
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fd46 	bl	800881e <SDMMC_GetResponse>
 8007d92:	4602      	mov	r2, r0
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d00d      	beq.n	8007dbe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f107 020e 	add.w	r2, r7, #14
 8007daa:	4611      	mov	r1, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 ff66 	bl	8008c7e <SDMMC_CmdSetRelAdd>
 8007db2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <SD_InitCard+0xae>
    {
      return errorstate;
 8007dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbc:	e070      	b.n	8007ea0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d036      	beq.n	8007e34 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007dc6:	89fb      	ldrh	r3, [r7, #14]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd6:	041b      	lsls	r3, r3, #16
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	f000 ff30 	bl	8008c40 <SDMMC_CmdSendCSD>
 8007de0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <SD_InitCard+0xdc>
    {
      return errorstate;
 8007de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dea:	e059      	b.n	8007ea0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2100      	movs	r1, #0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fd13 	bl	800881e <SDMMC_GetResponse>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2104      	movs	r1, #4
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fd0a 	bl	800881e <SDMMC_GetResponse>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2108      	movs	r1, #8
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fd01 	bl	800881e <SDMMC_GetResponse>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	210c      	movs	r1, #12
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fcf8 	bl	800881e <SDMMC_GetResponse>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2104      	movs	r1, #4
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fcef 	bl	800881e <SDMMC_GetResponse>
 8007e40:	4603      	mov	r3, r0
 8007e42:	0d1a      	lsrs	r2, r3, #20
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007e48:	f107 0310 	add.w	r3, r7, #16
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff fbaa 	bl	80075a8 <HAL_SD_GetCardCSD>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e5e:	e01f      	b.n	8007ea0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6819      	ldr	r1, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e68:	041b      	lsls	r3, r3, #16
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f04f 0300 	mov.w	r3, #0
 8007e70:	4608      	mov	r0, r1
 8007e72:	f000 fddf 	bl	8008a34 <SDMMC_CmdSelDesel>
 8007e76:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <SD_InitCard+0x172>
  {
    return errorstate;
 8007e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e80:	e00e      	b.n	8007ea0 <SD_InitCard+0x190>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681d      	ldr	r5, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	466c      	mov	r4, sp
 8007e8a:	f103 0210 	add.w	r2, r3, #16
 8007e8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e94:	3304      	adds	r3, #4
 8007e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f000 fc21 	bl	80086e0 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3740      	adds	r7, #64	; 0x40
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bdb0      	pop	{r4, r5, r7, pc}

08007ea8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	617b      	str	r3, [r7, #20]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fdda 	bl	8008a7a <SDMMC_CmdGoIdleState>
 8007ec6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	e072      	b.n	8007fb8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fded 	bl	8008ab6 <SDMMC_CmdOperCond>
 8007edc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00d      	beq.n	8007f00 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fdc3 	bl	8008a7a <SDMMC_CmdGoIdleState>
 8007ef4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d004      	beq.n	8007f06 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	e05b      	b.n	8007fb8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d137      	bne.n	8007f7e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2100      	movs	r1, #0
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fded 	bl	8008af4 <SDMMC_CmdAppCommand>
 8007f1a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d02d      	beq.n	8007f7e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f26:	e047      	b.n	8007fb8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fde0 	bl	8008af4 <SDMMC_CmdAppCommand>
 8007f34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <SD_PowerON+0x98>
    {
      return errorstate;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	e03b      	b.n	8007fb8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	491e      	ldr	r1, [pc, #120]	; (8007fc0 <SD_PowerON+0x118>)
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fdf6 	bl	8008b38 <SDMMC_CmdAppOperCommand>
 8007f4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f58:	e02e      	b.n	8007fb8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fc5c 	bl	800881e <SDMMC_GetResponse>
 8007f66:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	0fdb      	lsrs	r3, r3, #31
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <SD_PowerON+0xcc>
 8007f70:	2301      	movs	r3, #1
 8007f72:	e000      	b.n	8007f76 <SD_PowerON+0xce>
 8007f74:	2300      	movs	r3, #0
 8007f76:	613b      	str	r3, [r7, #16]

    count++;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d802      	bhi.n	8007f8e <SD_PowerON+0xe6>
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0cc      	beq.n	8007f28 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d902      	bls.n	8007f9e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007f98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f9c:	e00c      	b.n	8007fb8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d003      	beq.n	8007fb0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	645a      	str	r2, [r3, #68]	; 0x44
 8007fae:	e002      	b.n	8007fb6 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	c1100000 	.word	0xc1100000

08007fc4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007fd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fd8:	e018      	b.n	800800c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe2:	041b      	lsls	r3, r3, #16
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	f000 fe6a 	bl	8008cc0 <SDMMC_CmdSendStatus>
 8007fec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	e009      	b.n	800800c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fc0d 	bl	800881e <SDMMC_GetResponse>
 8008004:	4602      	mov	r2, r0
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	2300      	movs	r3, #0
 8008022:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2100      	movs	r1, #0
 800802a:	4618      	mov	r0, r3
 800802c:	f000 fbf7 	bl	800881e <SDMMC_GetResponse>
 8008030:	4603      	mov	r3, r0
 8008032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800803a:	d102      	bne.n	8008042 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800803c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008040:	e02f      	b.n	80080a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008042:	f107 030c 	add.w	r3, r7, #12
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f879 	bl	8008140 <SD_FindSCR>
 800804e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	e023      	b.n	80080a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d01c      	beq.n	800809e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800806c:	041b      	lsls	r3, r3, #16
 800806e:	4619      	mov	r1, r3
 8008070:	4610      	mov	r0, r2
 8008072:	f000 fd3f 	bl	8008af4 <SDMMC_CmdAppCommand>
 8008076:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	e00f      	b.n	80080a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2102      	movs	r1, #2
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fd78 	bl	8008b7e <SDMMC_CmdBusWidth>
 800808e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	e003      	b.n	80080a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800809a:	2300      	movs	r3, #0
 800809c:	e001      	b.n	80080a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800809e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b086      	sub	sp, #24
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	2300      	movs	r3, #0
 80080b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2100      	movs	r1, #0
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fbac 	bl	800881e <SDMMC_GetResponse>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080d0:	d102      	bne.n	80080d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080d6:	e02f      	b.n	8008138 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80080d8:	f107 030c 	add.w	r3, r7, #12
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f82e 	bl	8008140 <SD_FindSCR>
 80080e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	e023      	b.n	8008138 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d01c      	beq.n	8008134 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f000 fcf4 	bl	8008af4 <SDMMC_CmdAppCommand>
 800810c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	e00f      	b.n	8008138 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2100      	movs	r1, #0
 800811e:	4618      	mov	r0, r3
 8008120:	f000 fd2d 	bl	8008b7e <SDMMC_CmdBusWidth>
 8008124:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	e003      	b.n	8008138 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008130:	2300      	movs	r3, #0
 8008132:	e001      	b.n	8008138 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008134:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008140:	b590      	push	{r4, r7, lr}
 8008142:	b08f      	sub	sp, #60	; 0x3c
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800814a:	f7fa fcdd 	bl	8002b08 <HAL_GetTick>
 800814e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008154:	2300      	movs	r3, #0
 8008156:	60bb      	str	r3, [r7, #8]
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2108      	movs	r1, #8
 8008166:	4618      	mov	r0, r3
 8008168:	f000 fb98 	bl	800889c <SDMMC_CmdBlockLength>
 800816c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	e0a9      	b.n	80082cc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008180:	041b      	lsls	r3, r3, #16
 8008182:	4619      	mov	r1, r3
 8008184:	4610      	mov	r0, r2
 8008186:	f000 fcb5 	bl	8008af4 <SDMMC_CmdAppCommand>
 800818a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	e09a      	b.n	80082cc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800819a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800819c:	2308      	movs	r3, #8
 800819e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80081a0:	2330      	movs	r3, #48	; 0x30
 80081a2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80081a4:	2302      	movs	r3, #2
 80081a6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f107 0210 	add.w	r2, r7, #16
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 fb42 	bl	8008844 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fcfc 	bl	8008bc2 <SDMMC_CmdSendSCR>
 80081ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d022      	beq.n	8008218 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80081d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d4:	e07a      	b.n	80082cc <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00e      	beq.n	8008202 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6819      	ldr	r1, [r3, #0]
 80081e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	f107 0208 	add.w	r2, r7, #8
 80081f0:	18d4      	adds	r4, r2, r3
 80081f2:	4608      	mov	r0, r1
 80081f4:	f000 faa1 	bl	800873a <SDMMC_ReadFIFO>
 80081f8:	4603      	mov	r3, r0
 80081fa:	6023      	str	r3, [r4, #0]
      index++;
 80081fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fe:	3301      	adds	r3, #1
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008202:	f7fa fc81 	bl	8002b08 <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008210:	d102      	bne.n	8008218 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008212:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008216:	e059      	b.n	80082cc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800821e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008222:	4013      	ands	r3, r2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0d6      	beq.n	80081d6 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822e:	f003 0308 	and.w	r3, r3, #8
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2208      	movs	r2, #8
 800823c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800823e:	2308      	movs	r3, #8
 8008240:	e044      	b.n	80082cc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2202      	movs	r2, #2
 8008256:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008258:	2302      	movs	r3, #2
 800825a:	e037      	b.n	80082cc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2220      	movs	r2, #32
 8008270:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008272:	2320      	movs	r3, #32
 8008274:	e02a      	b.n	80082cc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f240 523a 	movw	r2, #1338	; 0x53a
 800827e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	061a      	lsls	r2, r3, #24
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	021b      	lsls	r3, r3, #8
 8008288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800828c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	0a1b      	lsrs	r3, r3, #8
 8008292:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008296:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	0e1b      	lsrs	r3, r3, #24
 800829c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800829e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a0:	601a      	str	r2, [r3, #0]
    scr++;
 80082a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a4:	3304      	adds	r3, #4
 80082a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	061a      	lsls	r2, r3, #24
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	0a1b      	lsrs	r3, r3, #8
 80082ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80082be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	0e1b      	lsrs	r3, r3, #24
 80082c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	373c      	adds	r7, #60	; 0x3c
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd90      	pop	{r4, r7, pc}

080082d4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d03f      	beq.n	800836e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80082ee:	2300      	movs	r3, #0
 80082f0:	617b      	str	r3, [r7, #20]
 80082f2:	e033      	b.n	800835c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 fa1e 	bl	800873a <SDMMC_ReadFIFO>
 80082fe:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	b2da      	uxtb	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3301      	adds	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	3b01      	subs	r3, #1
 8008312:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	0a1b      	lsrs	r3, r3, #8
 8008318:	b2da      	uxtb	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3301      	adds	r3, #1
 8008322:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	3b01      	subs	r3, #1
 8008328:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	0c1b      	lsrs	r3, r3, #16
 800832e:	b2da      	uxtb	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3301      	adds	r3, #1
 8008338:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	3b01      	subs	r3, #1
 800833e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	0e1b      	lsrs	r3, r3, #24
 8008344:	b2da      	uxtb	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	701a      	strb	r2, [r3, #0]
      tmp++;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3301      	adds	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	3b01      	subs	r3, #1
 8008354:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	3301      	adds	r3, #1
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2b07      	cmp	r3, #7
 8008360:	d9c8      	bls.n	80082f4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800836e:	bf00      	nop
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d043      	beq.n	8008418 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008390:	2300      	movs	r3, #0
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	e037      	b.n	8008406 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3301      	adds	r3, #1
 80083a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	021a      	lsls	r2, r3, #8
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	3b01      	subs	r3, #1
 80083be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	041a      	lsls	r2, r3, #16
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3301      	adds	r3, #1
 80083d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	061a      	lsls	r2, r3, #24
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3301      	adds	r3, #1
 80083e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f107 0208 	add.w	r2, r7, #8
 80083f8:	4611      	mov	r1, r2
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 f9aa 	bl	8008754 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	3301      	adds	r3, #1
 8008404:	617b      	str	r3, [r7, #20]
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2b07      	cmp	r3, #7
 800840a:	d9c4      	bls.n	8008396 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008418:	bf00      	nop
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e038      	b.n	80084a8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d106      	bne.n	8008450 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7f8 fb88 	bl	8000b60 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3308      	adds	r3, #8
 8008458:	4619      	mov	r1, r3
 800845a:	4610      	mov	r0, r2
 800845c:	f000 f828 	bl	80084b0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6818      	ldr	r0, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	461a      	mov	r2, r3
 800846a:	68b9      	ldr	r1, [r7, #8]
 800846c:	f000 f8b0 	bl	80085d0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6858      	ldr	r0, [r3, #4]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	f000 f8f7 	bl	8008670 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	6892      	ldr	r2, [r2, #8]
 800848a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	6892      	ldr	r2, [r2, #8]
 8008496:	f041 0101 	orr.w	r1, r1, #1
 800849a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	6812      	ldr	r2, [r2, #0]
 80084c8:	f023 0101 	bic.w	r1, r3, #1
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	2b08      	cmp	r3, #8
 80084d8:	d102      	bne.n	80084e0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80084da:	2340      	movs	r3, #64	; 0x40
 80084dc:	617b      	str	r3, [r7, #20]
 80084de:	e001      	b.n	80084e4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80084f0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80084f6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80084fc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008502:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008508:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800850e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008514:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800851a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8008520:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8008526:	4313      	orrs	r3, r2
 8008528:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	4313      	orrs	r3, r2
 8008532:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	4313      	orrs	r3, r2
 800853c:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8008548:	4b20      	ldr	r3, [pc, #128]	; (80085cc <FMC_NORSRAM_Init+0x11c>)
 800854a:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008552:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800855a:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008562:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	43db      	mvns	r3, r3
 8008572:	ea02 0103 	and.w	r1, r2, r3
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	4319      	orrs	r1, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800858c:	d10c      	bne.n	80085a8 <FMC_NORSRAM_Init+0xf8>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d008      	beq.n	80085a8 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a2:	431a      	orrs	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d006      	beq.n	80085be <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b8:	431a      	orrs	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	0008fb7f 	.word	0x0008fb7f

080085d0 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	011b      	lsls	r3, r3, #4
 80085f4:	431a      	orrs	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	021b      	lsls	r3, r3, #8
 80085fc:	431a      	orrs	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	041b      	lsls	r3, r3, #16
 8008604:	431a      	orrs	r2, r3
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	3b01      	subs	r3, #1
 800860c:	051b      	lsls	r3, r3, #20
 800860e:	431a      	orrs	r2, r3
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	3b02      	subs	r3, #2
 8008616:	061b      	lsls	r3, r3, #24
 8008618:	431a      	orrs	r2, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	4313      	orrs	r3, r2
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	3201      	adds	r2, #1
 8008624:	4319      	orrs	r1, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008638:	d113      	bne.n	8008662 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008642:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	3b01      	subs	r3, #1
 800864a:	051b      	lsls	r3, r3, #20
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	431a      	orrs	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	371c      	adds	r7, #28
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008684:	d11d      	bne.n	80086c2 <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800868e:	4b13      	ldr	r3, [pc, #76]	; (80086dc <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008690:	4013      	ands	r3, r2
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	6811      	ldr	r1, [r2, #0]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	6852      	ldr	r2, [r2, #4]
 800869a:	0112      	lsls	r2, r2, #4
 800869c:	4311      	orrs	r1, r2
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	6892      	ldr	r2, [r2, #8]
 80086a2:	0212      	lsls	r2, r2, #8
 80086a4:	4311      	orrs	r1, r2
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	69d2      	ldr	r2, [r2, #28]
 80086aa:	4311      	orrs	r1, r2
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	6912      	ldr	r2, [r2, #16]
 80086b0:	0412      	lsls	r2, r2, #16
 80086b2:	430a      	orrs	r2, r1
 80086b4:	ea43 0102 	orr.w	r1, r3, r2
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80086c0:	e005      	b.n	80086ce <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80086ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	cff00000 	.word	0xcff00000

080086e0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80086e0:	b084      	sub	sp, #16
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	f107 001c 	add.w	r0, r7, #28
 80086ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 80086fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8008702:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008706:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800870a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800870e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800871e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	431a      	orrs	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	b004      	add	sp, #16
 8008738:	4770      	bx	lr

0800873a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008748:	4618      	mov	r0, r3
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2203      	movs	r2, #3
 8008782:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008784:	2002      	movs	r0, #2
 8008786:	f7fa f9cb 	bl	8002b20 <HAL_Delay>

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0303 	and.w	r3, r3, #3
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087ce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80087d4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80087da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80087ea:	f023 030f 	bic.w	r3, r3, #15
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	431a      	orrs	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	b2db      	uxtb	r3, r3
}
 8008812:	4618      	mov	r0, r3
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800881e:	b480      	push	{r7}
 8008820:	b085      	sub	sp, #20
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3314      	adds	r3, #20
 800882c:	461a      	mov	r2, r3
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	4413      	add	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800886a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008870:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008876:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	4313      	orrs	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008882:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800888e:	2300      	movs	r3, #0

}
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b088      	sub	sp, #32
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80088aa:	2310      	movs	r3, #16
 80088ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088ae:	2340      	movs	r3, #64	; 0x40
 80088b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088b2:	2300      	movs	r3, #0
 80088b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088bc:	f107 0308 	add.w	r3, r7, #8
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff ff74 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80088c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088cc:	2110      	movs	r1, #16
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fa18 	bl	8008d04 <SDMMC_GetCmdResp1>
 80088d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088d6:	69fb      	ldr	r3, [r7, #28]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3720      	adds	r7, #32
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b088      	sub	sp, #32
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80088ee:	2311      	movs	r3, #17
 80088f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088f2:	2340      	movs	r3, #64	; 0x40
 80088f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088f6:	2300      	movs	r3, #0
 80088f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008900:	f107 0308 	add.w	r3, r7, #8
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff ff52 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800890c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008910:	2111      	movs	r1, #17
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f9f6 	bl	8008d04 <SDMMC_GetCmdResp1>
 8008918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800891a:	69fb      	ldr	r3, [r7, #28]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3720      	adds	r7, #32
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008932:	2312      	movs	r3, #18
 8008934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008936:	2340      	movs	r3, #64	; 0x40
 8008938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800893a:	2300      	movs	r3, #0
 800893c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800893e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008942:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008944:	f107 0308 	add.w	r3, r7, #8
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff ff30 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008950:	f241 3288 	movw	r2, #5000	; 0x1388
 8008954:	2112      	movs	r1, #18
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9d4 	bl	8008d04 <SDMMC_GetCmdResp1>
 800895c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800895e:	69fb      	ldr	r3, [r7, #28]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3720      	adds	r7, #32
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b088      	sub	sp, #32
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008976:	2318      	movs	r3, #24
 8008978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800897a:	2340      	movs	r3, #64	; 0x40
 800897c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008986:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008988:	f107 0308 	add.w	r3, r7, #8
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff ff0e 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008994:	f241 3288 	movw	r2, #5000	; 0x1388
 8008998:	2118      	movs	r1, #24
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f9b2 	bl	8008d04 <SDMMC_GetCmdResp1>
 80089a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089a2:	69fb      	ldr	r3, [r7, #28]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3720      	adds	r7, #32
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80089ba:	2319      	movs	r3, #25
 80089bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089be:	2340      	movs	r3, #64	; 0x40
 80089c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089c2:	2300      	movs	r3, #0
 80089c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089cc:	f107 0308 	add.w	r3, r7, #8
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff feec 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80089d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089dc:	2119      	movs	r1, #25
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f990 	bl	8008d04 <SDMMC_GetCmdResp1>
 80089e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089e6:	69fb      	ldr	r3, [r7, #28]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3720      	adds	r7, #32
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80089fc:	230c      	movs	r3, #12
 80089fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a00:	2340      	movs	r3, #64	; 0x40
 8008a02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a04:	2300      	movs	r3, #0
 8008a06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a0c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a0e:	f107 0308 	add.w	r3, r7, #8
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7ff fecb 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008a1a:	4a05      	ldr	r2, [pc, #20]	; (8008a30 <SDMMC_CmdStopTransfer+0x40>)
 8008a1c:	210c      	movs	r1, #12
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f970 	bl	8008d04 <SDMMC_GetCmdResp1>
 8008a24:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008a26:	69fb      	ldr	r3, [r7, #28]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3720      	adds	r7, #32
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	05f5e100 	.word	0x05f5e100

08008a34 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08a      	sub	sp, #40	; 0x28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008a44:	2307      	movs	r3, #7
 8008a46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a48:	2340      	movs	r3, #64	; 0x40
 8008a4a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a54:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a56:	f107 0310 	add.w	r3, r7, #16
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f7ff fea7 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a66:	2107      	movs	r1, #7
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 f94b 	bl	8008d04 <SDMMC_GetCmdResp1>
 8008a6e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3728      	adds	r7, #40	; 0x28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b088      	sub	sp, #32
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a98:	f107 0308 	add.w	r3, r7, #8
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7ff fe86 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fb65 	bl	8009174 <SDMMC_GetCmdError>
 8008aaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008aac:	69fb      	ldr	r3, [r7, #28]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3720      	adds	r7, #32
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b088      	sub	sp, #32
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008abe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008ac2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008ac4:	2308      	movs	r3, #8
 8008ac6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ac8:	2340      	movs	r3, #64	; 0x40
 8008aca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008acc:	2300      	movs	r3, #0
 8008ace:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ad4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ad6:	f107 0308 	add.w	r3, r7, #8
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff fe67 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 faf8 	bl	80090d8 <SDMMC_GetCmdResp7>
 8008ae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008aea:	69fb      	ldr	r3, [r7, #28]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3720      	adds	r7, #32
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008b02:	2337      	movs	r3, #55	; 0x37
 8008b04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b06:	2340      	movs	r3, #64	; 0x40
 8008b08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b14:	f107 0308 	add.w	r3, r7, #8
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff fe48 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b24:	2137      	movs	r1, #55	; 0x37
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f8ec 	bl	8008d04 <SDMMC_GetCmdResp1>
 8008b2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b2e:	69fb      	ldr	r3, [r7, #28]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3720      	adds	r7, #32
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b4c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008b4e:	2329      	movs	r3, #41	; 0x29
 8008b50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b52:	2340      	movs	r3, #64	; 0x40
 8008b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b56:	2300      	movs	r3, #0
 8008b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b60:	f107 0308 	add.w	r3, r7, #8
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7ff fe22 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f9ff 	bl	8008f70 <SDMMC_GetCmdResp3>
 8008b72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b74:	69fb      	ldr	r3, [r7, #28]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3720      	adds	r7, #32
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b088      	sub	sp, #32
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008b8c:	2306      	movs	r3, #6
 8008b8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b90:	2340      	movs	r3, #64	; 0x40
 8008b92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b94:	2300      	movs	r3, #0
 8008b96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b9e:	f107 0308 	add.w	r3, r7, #8
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff fe03 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bae:	2106      	movs	r1, #6
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f8a7 	bl	8008d04 <SDMMC_GetCmdResp1>
 8008bb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bb8:	69fb      	ldr	r3, [r7, #28]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3720      	adds	r7, #32
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b088      	sub	sp, #32
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008bce:	2333      	movs	r3, #51	; 0x33
 8008bd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bd2:	2340      	movs	r3, #64	; 0x40
 8008bd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008be0:	f107 0308 	add.w	r3, r7, #8
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff fde2 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf0:	2133      	movs	r1, #51	; 0x33
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f886 	bl	8008d04 <SDMMC_GetCmdResp1>
 8008bf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bfa:	69fb      	ldr	r3, [r7, #28]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3720      	adds	r7, #32
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008c10:	2302      	movs	r3, #2
 8008c12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008c14:	23c0      	movs	r3, #192	; 0xc0
 8008c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c22:	f107 0308 	add.w	r3, r7, #8
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff fdc1 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f956 	bl	8008ee0 <SDMMC_GetCmdResp2>
 8008c34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c36:	69fb      	ldr	r3, [r7, #28]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3720      	adds	r7, #32
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008c4e:	2309      	movs	r3, #9
 8008c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008c52:	23c0      	movs	r3, #192	; 0xc0
 8008c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c56:	2300      	movs	r3, #0
 8008c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c60:	f107 0308 	add.w	r3, r7, #8
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff fda2 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f937 	bl	8008ee0 <SDMMC_GetCmdResp2>
 8008c72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c74:	69fb      	ldr	r3, [r7, #28]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b088      	sub	sp, #32
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c90:	2340      	movs	r3, #64	; 0x40
 8008c92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c9e:	f107 0308 	add.w	r3, r7, #8
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff fd83 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	2103      	movs	r1, #3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f99c 	bl	8008fec <SDMMC_GetCmdResp6>
 8008cb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cb6:	69fb      	ldr	r3, [r7, #28]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3720      	adds	r7, #32
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b088      	sub	sp, #32
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008cce:	230d      	movs	r3, #13
 8008cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cd2:	2340      	movs	r3, #64	; 0x40
 8008cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ce0:	f107 0308 	add.w	r3, r7, #8
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff fd62 	bl	80087b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf0:	210d      	movs	r1, #13
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f806 	bl	8008d04 <SDMMC_GetCmdResp1>
 8008cf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cfa:	69fb      	ldr	r3, [r7, #28]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3720      	adds	r7, #32
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008d12:	4b70      	ldr	r3, [pc, #448]	; (8008ed4 <SDMMC_GetCmdResp1+0x1d0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a70      	ldr	r2, [pc, #448]	; (8008ed8 <SDMMC_GetCmdResp1+0x1d4>)
 8008d18:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1c:	0a5a      	lsrs	r2, r3, #9
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	fb02 f303 	mul.w	r3, r2, r3
 8008d24:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	1e5a      	subs	r2, r3, #1
 8008d2a:	61fa      	str	r2, [r7, #28]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d34:	e0c9      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0ef      	beq.n	8008d26 <SDMMC_GetCmdResp1+0x22>
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1ea      	bne.n	8008d26 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d004      	beq.n	8008d66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2204      	movs	r2, #4
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d62:	2304      	movs	r3, #4
 8008d64:	e0b1      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d004      	beq.n	8008d7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2201      	movs	r2, #1
 8008d76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e0a6      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	22c5      	movs	r2, #197	; 0xc5
 8008d80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f7ff fd3e 	bl	8008804 <SDMMC_GetCommandResponse>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	7afb      	ldrb	r3, [r7, #11]
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d001      	beq.n	8008d96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e099      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008d96:	2100      	movs	r1, #0
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f7ff fd40 	bl	800881e <SDMMC_GetResponse>
 8008d9e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	4b4e      	ldr	r3, [pc, #312]	; (8008edc <SDMMC_GetCmdResp1+0x1d8>)
 8008da4:	4013      	ands	r3, r2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008daa:	2300      	movs	r3, #0
 8008dac:	e08d      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	da02      	bge.n	8008dba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008db4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008db8:	e087      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008dc4:	2340      	movs	r3, #64	; 0x40
 8008dc6:	e080      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008dd2:	2380      	movs	r3, #128	; 0x80
 8008dd4:	e079      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008de4:	e071      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008df4:	e069      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e04:	e061      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e14:	e059      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e24:	e051      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e34:	e049      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008e40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e44:	e041      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008e50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e54:	e039      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e64:	e031      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008e70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e74:	e029      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d002      	beq.n	8008e86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008e80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008e84:	e021      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008e90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e94:	e019      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d002      	beq.n	8008ea6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008ea0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ea4:	e011      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008eb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008eb4:	e009      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	f003 0308 	and.w	r3, r3, #8
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008ec0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008ec4:	e001      	b.n	8008eca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3720      	adds	r7, #32
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20000000 	.word	0x20000000
 8008ed8:	10624dd3 	.word	0x10624dd3
 8008edc:	fdffe008 	.word	0xfdffe008

08008ee0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ee8:	4b1f      	ldr	r3, [pc, #124]	; (8008f68 <SDMMC_GetCmdResp2+0x88>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <SDMMC_GetCmdResp2+0x8c>)
 8008eee:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef2:	0a5b      	lsrs	r3, r3, #9
 8008ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef8:	fb02 f303 	mul.w	r3, r2, r3
 8008efc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	1e5a      	subs	r2, r3, #1
 8008f02:	60fa      	str	r2, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d102      	bne.n	8008f0e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f0c:	e026      	b.n	8008f5c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0ef      	beq.n	8008efe <SDMMC_GetCmdResp2+0x1e>
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1ea      	bne.n	8008efe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2c:	f003 0304 	and.w	r3, r3, #4
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d004      	beq.n	8008f3e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2204      	movs	r2, #4
 8008f38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f3a:	2304      	movs	r3, #4
 8008f3c:	e00e      	b.n	8008f5c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d004      	beq.n	8008f54 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e003      	b.n	8008f5c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	22c5      	movs	r2, #197	; 0xc5
 8008f58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	20000000 	.word	0x20000000
 8008f6c:	10624dd3 	.word	0x10624dd3

08008f70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f78:	4b1a      	ldr	r3, [pc, #104]	; (8008fe4 <SDMMC_GetCmdResp3+0x74>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a1a      	ldr	r2, [pc, #104]	; (8008fe8 <SDMMC_GetCmdResp3+0x78>)
 8008f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f82:	0a5b      	lsrs	r3, r3, #9
 8008f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f88:	fb02 f303 	mul.w	r3, r2, r3
 8008f8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	1e5a      	subs	r2, r3, #1
 8008f92:	60fa      	str	r2, [r7, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d102      	bne.n	8008f9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f9c:	e01b      	b.n	8008fd6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0ef      	beq.n	8008f8e <SDMMC_GetCmdResp3+0x1e>
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1ea      	bne.n	8008f8e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d004      	beq.n	8008fce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2204      	movs	r2, #4
 8008fc8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fca:	2304      	movs	r3, #4
 8008fcc:	e003      	b.n	8008fd6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	22c5      	movs	r2, #197	; 0xc5
 8008fd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20000000 	.word	0x20000000
 8008fe8:	10624dd3 	.word	0x10624dd3

08008fec <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	607a      	str	r2, [r7, #4]
 8008ff8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ffa:	4b35      	ldr	r3, [pc, #212]	; (80090d0 <SDMMC_GetCmdResp6+0xe4>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a35      	ldr	r2, [pc, #212]	; (80090d4 <SDMMC_GetCmdResp6+0xe8>)
 8009000:	fba2 2303 	umull	r2, r3, r2, r3
 8009004:	0a5b      	lsrs	r3, r3, #9
 8009006:	f241 3288 	movw	r2, #5000	; 0x1388
 800900a:	fb02 f303 	mul.w	r3, r2, r3
 800900e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	1e5a      	subs	r2, r3, #1
 8009014:	61fa      	str	r2, [r7, #28]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d102      	bne.n	8009020 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800901a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800901e:	e052      	b.n	80090c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009024:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800902c:	2b00      	cmp	r3, #0
 800902e:	d0ef      	beq.n	8009010 <SDMMC_GetCmdResp6+0x24>
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1ea      	bne.n	8009010 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903e:	f003 0304 	and.w	r3, r3, #4
 8009042:	2b00      	cmp	r3, #0
 8009044:	d004      	beq.n	8009050 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2204      	movs	r2, #4
 800904a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800904c:	2304      	movs	r3, #4
 800904e:	e03a      	b.n	80090c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009054:	f003 0301 	and.w	r3, r3, #1
 8009058:	2b00      	cmp	r3, #0
 800905a:	d004      	beq.n	8009066 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2201      	movs	r2, #1
 8009060:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009062:	2301      	movs	r3, #1
 8009064:	e02f      	b.n	80090c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f7ff fbcc 	bl	8008804 <SDMMC_GetCommandResponse>
 800906c:	4603      	mov	r3, r0
 800906e:	461a      	mov	r2, r3
 8009070:	7afb      	ldrb	r3, [r7, #11]
 8009072:	4293      	cmp	r3, r2
 8009074:	d001      	beq.n	800907a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009076:	2301      	movs	r3, #1
 8009078:	e025      	b.n	80090c6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	22c5      	movs	r2, #197	; 0xc5
 800907e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009080:	2100      	movs	r1, #0
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f7ff fbcb 	bl	800881e <SDMMC_GetResponse>
 8009088:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d106      	bne.n	80090a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	b29a      	uxth	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800909e:	2300      	movs	r3, #0
 80090a0:	e011      	b.n	80090c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80090ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090b0:	e009      	b.n	80090c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d002      	beq.n	80090c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80090bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090c0:	e001      	b.n	80090c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80090c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3720      	adds	r7, #32
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20000000 	.word	0x20000000
 80090d4:	10624dd3 	.word	0x10624dd3

080090d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090e0:	4b22      	ldr	r3, [pc, #136]	; (800916c <SDMMC_GetCmdResp7+0x94>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a22      	ldr	r2, [pc, #136]	; (8009170 <SDMMC_GetCmdResp7+0x98>)
 80090e6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ea:	0a5b      	lsrs	r3, r3, #9
 80090ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80090f0:	fb02 f303 	mul.w	r3, r2, r3
 80090f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	1e5a      	subs	r2, r3, #1
 80090fa:	60fa      	str	r2, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d102      	bne.n	8009106 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009100:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009104:	e02c      	b.n	8009160 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0ef      	beq.n	80090f6 <SDMMC_GetCmdResp7+0x1e>
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1ea      	bne.n	80090f6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2204      	movs	r2, #4
 8009130:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009132:	2304      	movs	r3, #4
 8009134:	e014      	b.n	8009160 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b00      	cmp	r3, #0
 8009140:	d004      	beq.n	800914c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009148:	2301      	movs	r3, #1
 800914a:	e009      	b.n	8009160 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2240      	movs	r2, #64	; 0x40
 800915c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800915e:	2300      	movs	r3, #0

}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	20000000 	.word	0x20000000
 8009170:	10624dd3 	.word	0x10624dd3

08009174 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800917c:	4b11      	ldr	r3, [pc, #68]	; (80091c4 <SDMMC_GetCmdError+0x50>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a11      	ldr	r2, [pc, #68]	; (80091c8 <SDMMC_GetCmdError+0x54>)
 8009182:	fba2 2303 	umull	r2, r3, r2, r3
 8009186:	0a5b      	lsrs	r3, r3, #9
 8009188:	f241 3288 	movw	r2, #5000	; 0x1388
 800918c:	fb02 f303 	mul.w	r3, r2, r3
 8009190:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	1e5a      	subs	r2, r3, #1
 8009196:	60fa      	str	r2, [r7, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d102      	bne.n	80091a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800919c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091a0:	e009      	b.n	80091b6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0f1      	beq.n	8009192 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	22c5      	movs	r2, #197	; 0xc5
 80091b2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20000000 	.word	0x20000000
 80091c8:	10624dd3 	.word	0x10624dd3

080091cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80091d0:	4904      	ldr	r1, [pc, #16]	; (80091e4 <MX_FATFS_Init+0x18>)
 80091d2:	4805      	ldr	r0, [pc, #20]	; (80091e8 <MX_FATFS_Init+0x1c>)
 80091d4:	f000 f9da 	bl	800958c <FATFS_LinkDriver>
 80091d8:	4603      	mov	r3, r0
 80091da:	461a      	mov	r2, r3
 80091dc:	4b03      	ldr	r3, [pc, #12]	; (80091ec <MX_FATFS_Init+0x20>)
 80091de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80091e0:	bf00      	nop
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20000670 	.word	0x20000670
 80091e8:	08009668 	.word	0x08009668
 80091ec:	2000066c 	.word	0x2000066c

080091f0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80091f8:	f7f9 fc86 	bl	8002b08 <HAL_GetTick>
 80091fc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80091fe:	e006      	b.n	800920e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009200:	f7f9 faa8 	bl	8002754 <BSP_SD_GetCardState>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d101      	bne.n	800920e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800920a:	2300      	movs	r3, #0
 800920c:	e009      	b.n	8009222 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800920e:	f7f9 fc7b 	bl	8002b08 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	429a      	cmp	r2, r3
 800921c:	d8f0      	bhi.n	8009200 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800921e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009236:	4b0b      	ldr	r3, [pc, #44]	; (8009264 <SD_CheckStatus+0x38>)
 8009238:	2201      	movs	r2, #1
 800923a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800923c:	f7f9 fa8a 	bl	8002754 <BSP_SD_GetCardState>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d107      	bne.n	8009256 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009246:	4b07      	ldr	r3, [pc, #28]	; (8009264 <SD_CheckStatus+0x38>)
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	b2db      	uxtb	r3, r3
 800924c:	f023 0301 	bic.w	r3, r3, #1
 8009250:	b2da      	uxtb	r2, r3
 8009252:	4b04      	ldr	r3, [pc, #16]	; (8009264 <SD_CheckStatus+0x38>)
 8009254:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009256:	4b03      	ldr	r3, [pc, #12]	; (8009264 <SD_CheckStatus+0x38>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	b2db      	uxtb	r3, r3
}
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20000085 	.word	0x20000085

08009268 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009272:	f7f9 f9c1 	bl	80025f8 <BSP_SD_Init>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d107      	bne.n	800928c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800927c:	79fb      	ldrb	r3, [r7, #7]
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff ffd4 	bl	800922c <SD_CheckStatus>
 8009284:	4603      	mov	r3, r0
 8009286:	461a      	mov	r2, r3
 8009288:	4b04      	ldr	r3, [pc, #16]	; (800929c <SD_initialize+0x34>)
 800928a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800928c:	4b03      	ldr	r3, [pc, #12]	; (800929c <SD_initialize+0x34>)
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	b2db      	uxtb	r3, r3
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20000085 	.word	0x20000085

080092a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7ff ffbd 	bl	800922c <SD_CheckStatus>
 80092b2:	4603      	mov	r3, r0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	607a      	str	r2, [r7, #4]
 80092c6:	603b      	str	r3, [r7, #0]
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80092d0:	f247 5030 	movw	r0, #30000	; 0x7530
 80092d4:	f7ff ff8c 	bl	80091f0 <SD_CheckStatusWithTimeout>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	da01      	bge.n	80092e2 <SD_read+0x26>
  {
    return res;
 80092de:	7dfb      	ldrb	r3, [r7, #23]
 80092e0:	e03b      	b.n	800935a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	6879      	ldr	r1, [r7, #4]
 80092e6:	68b8      	ldr	r0, [r7, #8]
 80092e8:	f7f9 f9e4 	bl	80026b4 <BSP_SD_ReadBlocks_DMA>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d132      	bne.n	8009358 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80092f2:	4b1c      	ldr	r3, [pc, #112]	; (8009364 <SD_read+0xa8>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80092f8:	f7f9 fc06 	bl	8002b08 <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80092fe:	bf00      	nop
 8009300:	4b18      	ldr	r3, [pc, #96]	; (8009364 <SD_read+0xa8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d108      	bne.n	800931a <SD_read+0x5e>
 8009308:	f7f9 fbfe 	bl	8002b08 <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	f247 522f 	movw	r2, #29999	; 0x752f
 8009316:	4293      	cmp	r3, r2
 8009318:	d9f2      	bls.n	8009300 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800931a:	4b12      	ldr	r3, [pc, #72]	; (8009364 <SD_read+0xa8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d102      	bne.n	8009328 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	75fb      	strb	r3, [r7, #23]
 8009326:	e017      	b.n	8009358 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009328:	4b0e      	ldr	r3, [pc, #56]	; (8009364 <SD_read+0xa8>)
 800932a:	2200      	movs	r2, #0
 800932c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800932e:	f7f9 fbeb 	bl	8002b08 <HAL_GetTick>
 8009332:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009334:	e007      	b.n	8009346 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009336:	f7f9 fa0d 	bl	8002754 <BSP_SD_GetCardState>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d102      	bne.n	8009346 <SD_read+0x8a>
          {
            res = RES_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009344:	e008      	b.n	8009358 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009346:	f7f9 fbdf 	bl	8002b08 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	f247 522f 	movw	r2, #29999	; 0x752f
 8009354:	4293      	cmp	r3, r2
 8009356:	d9ee      	bls.n	8009336 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009358:	7dfb      	ldrb	r3, [r7, #23]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000194 	.word	0x20000194

08009368 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	607a      	str	r2, [r7, #4]
 8009372:	603b      	str	r3, [r7, #0]
 8009374:	4603      	mov	r3, r0
 8009376:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800937c:	4b24      	ldr	r3, [pc, #144]	; (8009410 <SD_write+0xa8>)
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009382:	f247 5030 	movw	r0, #30000	; 0x7530
 8009386:	f7ff ff33 	bl	80091f0 <SD_CheckStatusWithTimeout>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	da01      	bge.n	8009394 <SD_write+0x2c>
  {
    return res;
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	e038      	b.n	8009406 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	68b8      	ldr	r0, [r7, #8]
 800939a:	f7f9 f9b3 	bl	8002704 <BSP_SD_WriteBlocks_DMA>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d12f      	bne.n	8009404 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80093a4:	f7f9 fbb0 	bl	8002b08 <HAL_GetTick>
 80093a8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80093aa:	bf00      	nop
 80093ac:	4b18      	ldr	r3, [pc, #96]	; (8009410 <SD_write+0xa8>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d108      	bne.n	80093c6 <SD_write+0x5e>
 80093b4:	f7f9 fba8 	bl	8002b08 <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	f247 522f 	movw	r2, #29999	; 0x752f
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d9f2      	bls.n	80093ac <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80093c6:	4b12      	ldr	r3, [pc, #72]	; (8009410 <SD_write+0xa8>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	75fb      	strb	r3, [r7, #23]
 80093d2:	e017      	b.n	8009404 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80093d4:	4b0e      	ldr	r3, [pc, #56]	; (8009410 <SD_write+0xa8>)
 80093d6:	2200      	movs	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80093da:	f7f9 fb95 	bl	8002b08 <HAL_GetTick>
 80093de:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80093e0:	e007      	b.n	80093f2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80093e2:	f7f9 f9b7 	bl	8002754 <BSP_SD_GetCardState>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d102      	bne.n	80093f2 <SD_write+0x8a>
          {
            res = RES_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	75fb      	strb	r3, [r7, #23]
            break;
 80093f0:	e008      	b.n	8009404 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80093f2:	f7f9 fb89 	bl	8002b08 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8009400:	4293      	cmp	r3, r2
 8009402:	d9ee      	bls.n	80093e2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009404:	7dfb      	ldrb	r3, [r7, #23]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20000190 	.word	0x20000190

08009414 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08c      	sub	sp, #48	; 0x30
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	603a      	str	r2, [r7, #0]
 800941e:	71fb      	strb	r3, [r7, #7]
 8009420:	460b      	mov	r3, r1
 8009422:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800942a:	4b25      	ldr	r3, [pc, #148]	; (80094c0 <SD_ioctl+0xac>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	b2db      	uxtb	r3, r3
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <SD_ioctl+0x28>
 8009438:	2303      	movs	r3, #3
 800943a:	e03c      	b.n	80094b6 <SD_ioctl+0xa2>

  switch (cmd)
 800943c:	79bb      	ldrb	r3, [r7, #6]
 800943e:	2b03      	cmp	r3, #3
 8009440:	d834      	bhi.n	80094ac <SD_ioctl+0x98>
 8009442:	a201      	add	r2, pc, #4	; (adr r2, 8009448 <SD_ioctl+0x34>)
 8009444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009448:	08009459 	.word	0x08009459
 800944c:	08009461 	.word	0x08009461
 8009450:	08009479 	.word	0x08009479
 8009454:	08009493 	.word	0x08009493
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800945e:	e028      	b.n	80094b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009460:	f107 030c 	add.w	r3, r7, #12
 8009464:	4618      	mov	r0, r3
 8009466:	f7f9 f993 	bl	8002790 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800946a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009476:	e01c      	b.n	80094b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009478:	f107 030c 	add.w	r3, r7, #12
 800947c:	4618      	mov	r0, r3
 800947e:	f7f9 f987 	bl	8002790 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	b29a      	uxth	r2, r3
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009490:	e00f      	b.n	80094b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009492:	f107 030c 	add.w	r3, r7, #12
 8009496:	4618      	mov	r0, r3
 8009498:	f7f9 f97a 	bl	8002790 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949e:	0a5a      	lsrs	r2, r3, #9
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80094aa:	e002      	b.n	80094b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80094ac:	2304      	movs	r3, #4
 80094ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80094b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3730      	adds	r7, #48	; 0x30
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20000085 	.word	0x20000085

080094c4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80094c4:	b480      	push	{r7}
 80094c6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80094c8:	4b03      	ldr	r3, [pc, #12]	; (80094d8 <BSP_SD_WriteCpltCallback+0x14>)
 80094ca:	2201      	movs	r2, #1
 80094cc:	601a      	str	r2, [r3, #0]
}
 80094ce:	bf00      	nop
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	20000190 	.word	0x20000190

080094dc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80094dc:	b480      	push	{r7}
 80094de:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80094e0:	4b03      	ldr	r3, [pc, #12]	; (80094f0 <BSP_SD_ReadCpltCallback+0x14>)
 80094e2:	2201      	movs	r2, #1
 80094e4:	601a      	str	r2, [r3, #0]
}
 80094e6:	bf00      	nop
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	20000194 	.word	0x20000194

080094f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	4613      	mov	r3, r2
 8009500:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009502:	2301      	movs	r3, #1
 8009504:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800950a:	4b1f      	ldr	r3, [pc, #124]	; (8009588 <FATFS_LinkDriverEx+0x94>)
 800950c:	7a5b      	ldrb	r3, [r3, #9]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b00      	cmp	r3, #0
 8009512:	d131      	bne.n	8009578 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009514:	4b1c      	ldr	r3, [pc, #112]	; (8009588 <FATFS_LinkDriverEx+0x94>)
 8009516:	7a5b      	ldrb	r3, [r3, #9]
 8009518:	b2db      	uxtb	r3, r3
 800951a:	461a      	mov	r2, r3
 800951c:	4b1a      	ldr	r3, [pc, #104]	; (8009588 <FATFS_LinkDriverEx+0x94>)
 800951e:	2100      	movs	r1, #0
 8009520:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009522:	4b19      	ldr	r3, [pc, #100]	; (8009588 <FATFS_LinkDriverEx+0x94>)
 8009524:	7a5b      	ldrb	r3, [r3, #9]
 8009526:	b2db      	uxtb	r3, r3
 8009528:	4a17      	ldr	r2, [pc, #92]	; (8009588 <FATFS_LinkDriverEx+0x94>)
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009532:	4b15      	ldr	r3, [pc, #84]	; (8009588 <FATFS_LinkDriverEx+0x94>)
 8009534:	7a5b      	ldrb	r3, [r3, #9]
 8009536:	b2db      	uxtb	r3, r3
 8009538:	461a      	mov	r2, r3
 800953a:	4b13      	ldr	r3, [pc, #76]	; (8009588 <FATFS_LinkDriverEx+0x94>)
 800953c:	4413      	add	r3, r2
 800953e:	79fa      	ldrb	r2, [r7, #7]
 8009540:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009542:	4b11      	ldr	r3, [pc, #68]	; (8009588 <FATFS_LinkDriverEx+0x94>)
 8009544:	7a5b      	ldrb	r3, [r3, #9]
 8009546:	b2db      	uxtb	r3, r3
 8009548:	1c5a      	adds	r2, r3, #1
 800954a:	b2d1      	uxtb	r1, r2
 800954c:	4a0e      	ldr	r2, [pc, #56]	; (8009588 <FATFS_LinkDriverEx+0x94>)
 800954e:	7251      	strb	r1, [r2, #9]
 8009550:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009552:	7dbb      	ldrb	r3, [r7, #22]
 8009554:	3330      	adds	r3, #48	; 0x30
 8009556:	b2da      	uxtb	r2, r3
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	3301      	adds	r3, #1
 8009560:	223a      	movs	r2, #58	; 0x3a
 8009562:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	3302      	adds	r3, #2
 8009568:	222f      	movs	r2, #47	; 0x2f
 800956a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	3303      	adds	r3, #3
 8009570:	2200      	movs	r2, #0
 8009572:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009574:	2300      	movs	r3, #0
 8009576:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009578:	7dfb      	ldrb	r3, [r7, #23]
}
 800957a:	4618      	mov	r0, r3
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	20000198 	.word	0x20000198

0800958c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009596:	2200      	movs	r2, #0
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7ff ffaa 	bl	80094f4 <FATFS_LinkDriverEx>
 80095a0:	4603      	mov	r3, r0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <__libc_init_array>:
 80095ac:	b570      	push	{r4, r5, r6, lr}
 80095ae:	4d0d      	ldr	r5, [pc, #52]	; (80095e4 <__libc_init_array+0x38>)
 80095b0:	4c0d      	ldr	r4, [pc, #52]	; (80095e8 <__libc_init_array+0x3c>)
 80095b2:	1b64      	subs	r4, r4, r5
 80095b4:	10a4      	asrs	r4, r4, #2
 80095b6:	2600      	movs	r6, #0
 80095b8:	42a6      	cmp	r6, r4
 80095ba:	d109      	bne.n	80095d0 <__libc_init_array+0x24>
 80095bc:	4d0b      	ldr	r5, [pc, #44]	; (80095ec <__libc_init_array+0x40>)
 80095be:	4c0c      	ldr	r4, [pc, #48]	; (80095f0 <__libc_init_array+0x44>)
 80095c0:	f000 f820 	bl	8009604 <_init>
 80095c4:	1b64      	subs	r4, r4, r5
 80095c6:	10a4      	asrs	r4, r4, #2
 80095c8:	2600      	movs	r6, #0
 80095ca:	42a6      	cmp	r6, r4
 80095cc:	d105      	bne.n	80095da <__libc_init_array+0x2e>
 80095ce:	bd70      	pop	{r4, r5, r6, pc}
 80095d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095d4:	4798      	blx	r3
 80095d6:	3601      	adds	r6, #1
 80095d8:	e7ee      	b.n	80095b8 <__libc_init_array+0xc>
 80095da:	f855 3b04 	ldr.w	r3, [r5], #4
 80095de:	4798      	blx	r3
 80095e0:	3601      	adds	r6, #1
 80095e2:	e7f2      	b.n	80095ca <__libc_init_array+0x1e>
 80095e4:	0800967c 	.word	0x0800967c
 80095e8:	0800967c 	.word	0x0800967c
 80095ec:	0800967c 	.word	0x0800967c
 80095f0:	08009680 	.word	0x08009680

080095f4 <memset>:
 80095f4:	4402      	add	r2, r0
 80095f6:	4603      	mov	r3, r0
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d100      	bne.n	80095fe <memset+0xa>
 80095fc:	4770      	bx	lr
 80095fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009602:	e7f9      	b.n	80095f8 <memset+0x4>

08009604 <_init>:
 8009604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009606:	bf00      	nop
 8009608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960a:	bc08      	pop	{r3}
 800960c:	469e      	mov	lr, r3
 800960e:	4770      	bx	lr

08009610 <_fini>:
 8009610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009612:	bf00      	nop
 8009614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009616:	bc08      	pop	{r3}
 8009618:	469e      	mov	lr, r3
 800961a:	4770      	bx	lr
